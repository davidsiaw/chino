@STATIC;1.0;p;11;CPScanner.jt;37018;@STATIC;1.0;i;16;CPCharacterSet.ji;14;CPDictionary.ji;10;CPString.jS;19440;;17495;

objj_executeFile("CPCharacterSet.j", YES);objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPString.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPScanner"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_string", "CPString"), new objj_ivar("_locale", "CPDictionary"), new objj_ivar("_scanLocation", "int"), new objj_ivar("_caseSensitive", "BOOL"), new objj_ivar("_charactersToBeSkipped", "CPCharacterSet")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithString:"), function $CPScanner__initWithString_(self, _cmd, aString)
{
    if (self = (objj_getClass("CPScanner").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        self._string = (aString == null ? null : (aString.isa.method_msgSend["copy"] || _objj_forward)(aString, (aString.isa.method_dtable["copy"], "copy")));
        self._scanLocation = 0;
        self._charactersToBeSkipped = (CPCharacterSet.isa.method_msgSend["whitespaceCharacterSet"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["whitespaceCharacterSet"], "whitespaceCharacterSet"));
        self._caseSensitive = NO;
    }
    return self;
}

,["id","CPString"]), new objj_method(sel_getUid("copy"), function $CPScanner__copy(self, _cmd)
{
    var copy = ((___r1 = (CPScanner.isa.method_msgSend["alloc"] || _objj_forward)(CPScanner, (CPScanner.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithString:"] || _objj_forward)(___r1, "initWithString:", (self.isa.method_msgSend["string"] || _objj_forward)(self, (self.isa.method_dtable["string"], "string"))));
    (copy == null ? null : (copy.isa.method_msgSend["setCharactersToBeSkipped:"] || _objj_forward)(copy, (copy.isa.method_dtable["setCharactersToBeSkipped:"], "setCharactersToBeSkipped:"), (self.isa.method_msgSend["charactersToBeSkipped"] || _objj_forward)(self, (self.isa.method_dtable["charactersToBeSkipped"], "charactersToBeSkipped"))));
    (copy == null ? null : (copy.isa.method_msgSend["setCaseSensitive:"] || _objj_forward)(copy, (copy.isa.method_dtable["setCaseSensitive:"], "setCaseSensitive:"), (self.isa.method_msgSend["caseSensitive"] || _objj_forward)(self, (self.isa.method_dtable["caseSensitive"], "caseSensitive"))));
    (copy == null ? null : (copy.isa.method_msgSend["setLocale:"] || _objj_forward)(copy, (copy.isa.method_dtable["setLocale:"], "setLocale:"), (self.isa.method_msgSend["locale"] || _objj_forward)(self, (self.isa.method_dtable["locale"], "locale"))));
    (copy == null ? null : (copy.isa.method_msgSend["setScanLocation:"] || _objj_forward)(copy, (copy.isa.method_dtable["setScanLocation:"], "setScanLocation:"), (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation"))));
    return copy;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("locale"), function $CPScanner__locale(self, _cmd)
{
    return self._locale;
}

,["CPDictionary"]), new objj_method(sel_getUid("setLocale:"), function $CPScanner__setLocale_(self, _cmd, aLocale)
{
    self._locale = aLocale;
}

,["void","CPDictionary"]), new objj_method(sel_getUid("setCaseSensitive:"), function $CPScanner__setCaseSensitive_(self, _cmd, flag)
{
    self._caseSensitive = flag;
}

,["void","BOOL"]), new objj_method(sel_getUid("caseSensitive"), function $CPScanner__caseSensitive(self, _cmd)
{
    return self._caseSensitive;
}

,["BOOL"]), new objj_method(sel_getUid("string"), function $CPScanner__string(self, _cmd)
{
    return self._string;
}

,["CPString"]), new objj_method(sel_getUid("charactersToBeSkipped"), function $CPScanner__charactersToBeSkipped(self, _cmd)
{
    return self._charactersToBeSkipped;
}

,["CPCharacterSet"]), new objj_method(sel_getUid("setCharactersToBeSkipped:"), function $CPScanner__setCharactersToBeSkipped_(self, _cmd, c)
{
    self._charactersToBeSkipped = c;
}

,["void","CPCharacterSet"]), new objj_method(sel_getUid("isAtEnd"), function $CPScanner__isAtEnd(self, _cmd)
{
    return self._scanLocation == self._string.length;
}

,["BOOL"]), new objj_method(sel_getUid("scanLocation"), function $CPScanner__scanLocation(self, _cmd)
{
    return self._scanLocation;
}

,["int"]), new objj_method(sel_getUid("setScanLocation:"), function $CPScanner__setScanLocation_(self, _cmd, aLocation)
{
    if (aLocation > self._string.length)
        aLocation = self._string.length;
    else if (aLocation < 0)
        aLocation = 0;
    self._scanLocation = aLocation;
}

,["void","int"]), new objj_method(sel_getUid("_performScanWithSelector:withObject:into:"), function $CPScanner___performScanWithSelector_withObject_into_(self, _cmd, s, arg, ref)
{
    var ret = (self.isa.method_msgSend["performSelector:withObject:"] || _objj_forward)(self, (self.isa.method_dtable["performSelector:withObject:"], self.isa.method_dtable["performSelector:withObject:"], "performSelector:withObject:"), s, arg);
    if (ret == nil)
        return NO;
    if (ref != nil)
        ref(ret);
    return YES;
}

,["BOOL","SEL","id","id"]), new objj_method(sel_getUid("scanCharactersFromSet:intoString:"), function $CPScanner__scanCharactersFromSet_intoString_(self, _cmd, scanSet, ref)
{
    return (self.isa.method_msgSend["_performScanWithSelector:withObject:into:"] || _objj_forward)(self, (self.isa.method_dtable["_performScanWithSelector:withObject:into:"], self.isa.method_dtable["_performScanWithSelector:withObject:into:"], self.isa.method_dtable["_performScanWithSelector:withObject:into:"], "_performScanWithSelector:withObject:into:"), sel_getUid("scanCharactersFromSet:"), scanSet, ref);
}

,["BOOL","CPCharacterSet","id"]), new objj_method(sel_getUid("scanCharactersFromSet:"), function $CPScanner__scanCharactersFromSet_(self, _cmd, scanSet)
{
    return (self.isa.method_msgSend["_scanWithSet:breakFlag:"] || _objj_forward)(self, (self.isa.method_dtable["_scanWithSet:breakFlag:"], self.isa.method_dtable["_scanWithSet:breakFlag:"], "_scanWithSet:breakFlag:"), scanSet, NO);
}

,["CPString","CPCharacterSet"]), new objj_method(sel_getUid("scanUpToCharactersFromSet:intoString:"), function $CPScanner__scanUpToCharactersFromSet_intoString_(self, _cmd, scanSet, ref)
{
    return (self.isa.method_msgSend["_performScanWithSelector:withObject:into:"] || _objj_forward)(self, (self.isa.method_dtable["_performScanWithSelector:withObject:into:"], self.isa.method_dtable["_performScanWithSelector:withObject:into:"], self.isa.method_dtable["_performScanWithSelector:withObject:into:"], "_performScanWithSelector:withObject:into:"), sel_getUid("scanUpToCharactersFromSet:"), scanSet, ref);
}

,["BOOL","CPCharacterSet","id"]), new objj_method(sel_getUid("scanUpToCharactersFromSet:"), function $CPScanner__scanUpToCharactersFromSet_(self, _cmd, scanSet)
{
    return (self.isa.method_msgSend["_scanWithSet:breakFlag:"] || _objj_forward)(self, (self.isa.method_dtable["_scanWithSet:breakFlag:"], self.isa.method_dtable["_scanWithSet:breakFlag:"], "_scanWithSet:breakFlag:"), scanSet, YES);
}

,["CPString","CPCharacterSet"]), new objj_method(sel_getUid("_scanWithSet:breakFlag:"), function $CPScanner___scanWithSet_breakFlag_(self, _cmd, scanSet, stop)
{
    if ((self.isa.method_msgSend["isAtEnd"] || _objj_forward)(self, (self.isa.method_dtable["isAtEnd"], "isAtEnd")))
        return nil;
    var current = (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation")),
        str = nil;
    while (current < self._string.length)
    {
        var c = self._string.charAt(current);
        if ((scanSet == null ? null : (scanSet.isa.method_msgSend["characterIsMember:"] || _objj_forward)(scanSet, (scanSet.isa.method_dtable["characterIsMember:"], "characterIsMember:"), c)) == stop)
            break;
        if (!((___r1 = self._charactersToBeSkipped), ___r1 == null ? null : (___r1.isa.method_msgSend["characterIsMember:"] || _objj_forward)(___r1, (self._charactersToBeSkipped.isa.method_dtable["characterIsMember:"], "characterIsMember:"), c)))
        {
            if (!str)
                str = '';
            str += c;
        }
        current++;
    }
    if (str)
        (self.isa.method_msgSend["setScanLocation:"] || _objj_forward)(self, (self.isa.method_dtable["setScanLocation:"], "setScanLocation:"), current);
    return str;
    var ___r1;
}

,["CPString","CPCharacterSet","BOOL"]), new objj_method(sel_getUid("_movePastCharactersToBeSkipped"), function $CPScanner___movePastCharactersToBeSkipped(self, _cmd)
{
    var current = (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation")),
        string = (self.isa.method_msgSend["string"] || _objj_forward)(self, (self.isa.method_dtable["string"], "string")),
        toSkip = (self.isa.method_msgSend["charactersToBeSkipped"] || _objj_forward)(self, (self.isa.method_dtable["charactersToBeSkipped"], "charactersToBeSkipped"));
    while (current < string.length)
    {
        if (!(toSkip == null ? null : (toSkip.isa.method_msgSend["characterIsMember:"] || _objj_forward)(toSkip, (toSkip.isa.method_dtable["characterIsMember:"], "characterIsMember:"), string.charAt(current))))
            break;
        current++;
    }
    (self.isa.method_msgSend["setScanLocation:"] || _objj_forward)(self, (self.isa.method_dtable["setScanLocation:"], "setScanLocation:"), current);
}

,["void"]), new objj_method(sel_getUid("scanString:intoString:"), function $CPScanner__scanString_intoString_(self, _cmd, aString, ref)
{
    return (self.isa.method_msgSend["_performScanWithSelector:withObject:into:"] || _objj_forward)(self, (self.isa.method_dtable["_performScanWithSelector:withObject:into:"], self.isa.method_dtable["_performScanWithSelector:withObject:into:"], self.isa.method_dtable["_performScanWithSelector:withObject:into:"], "_performScanWithSelector:withObject:into:"), sel_getUid("scanString:"), aString, ref);
}

,["BOOL","CPString","id"]), new objj_method(sel_getUid("scanString:"), function $CPScanner__scanString_(self, _cmd, s)
{
    (self.isa.method_msgSend["_movePastCharactersToBeSkipped"] || _objj_forward)(self, (self.isa.method_dtable["_movePastCharactersToBeSkipped"], "_movePastCharactersToBeSkipped"));
    if ((self.isa.method_msgSend["isAtEnd"] || _objj_forward)(self, (self.isa.method_dtable["isAtEnd"], "isAtEnd")))
        return nil;
    var currentStr = (self.isa.method_msgSend["string"] || _objj_forward)(self, (self.isa.method_dtable["string"], "string")).substr((self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation")), s.length);
    if (self._caseSensitive && currentStr != s || !self._caseSensitive && currentStr.toLowerCase() != s.toLowerCase())
    {
        return nil;
    }
    else
    {
        (self.isa.method_msgSend["setScanLocation:"] || _objj_forward)(self, (self.isa.method_dtable["setScanLocation:"], "setScanLocation:"), (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation")) + s.length);
        return s;
    }
}

,["CPString","CPString"]), new objj_method(sel_getUid("scanUpToString:intoString:"), function $CPScanner__scanUpToString_intoString_(self, _cmd, aString, ref)
{
    return (self.isa.method_msgSend["_performScanWithSelector:withObject:into:"] || _objj_forward)(self, (self.isa.method_dtable["_performScanWithSelector:withObject:into:"], self.isa.method_dtable["_performScanWithSelector:withObject:into:"], self.isa.method_dtable["_performScanWithSelector:withObject:into:"], "_performScanWithSelector:withObject:into:"), sel_getUid("scanUpToString:"), aString, ref);
}

,["BOOL","CPString","id"]), new objj_method(sel_getUid("scanUpToString:"), function $CPScanner__scanUpToString_(self, _cmd, s)
{
    var current = (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation")),
        str = (self.isa.method_msgSend["string"] || _objj_forward)(self, (self.isa.method_dtable["string"], "string")),
        captured = nil;
    while (current < str.length)
    {
        var currentStr = str.substr(current, s.length);
        if (currentStr == s || !self._caseSensitive && currentStr.toLowerCase() == s.toLowerCase())
            break;
        if (!captured)
            captured = '';
        captured += str.charAt(current);
        current++;
    }
    if (captured)
        (self.isa.method_msgSend["setScanLocation:"] || _objj_forward)(self, (self.isa.method_dtable["setScanLocation:"], "setScanLocation:"), current);
    if ((self.isa.method_msgSend["charactersToBeSkipped"] || _objj_forward)(self, (self.isa.method_dtable["charactersToBeSkipped"], "charactersToBeSkipped")))
        captured = (captured == null ? null : (captured.isa.method_msgSend["_stringByTrimmingCharactersInSet:options:"] || _objj_forward)(captured, (captured.isa.method_dtable["_stringByTrimmingCharactersInSet:options:"], captured.isa.method_dtable["_stringByTrimmingCharactersInSet:options:"], "_stringByTrimmingCharactersInSet:options:"), (self.isa.method_msgSend["charactersToBeSkipped"] || _objj_forward)(self, (self.isa.method_dtable["charactersToBeSkipped"], "charactersToBeSkipped")), _CPCharacterSetTrimAtBeginning));
    return captured;
}

,["CPString","CPString"]), new objj_method(sel_getUid("scanWithParseFunction:"), function $CPScanner__scanWithParseFunction_(self, _cmd, parseFunction)
{
    (self.isa.method_msgSend["_movePastCharactersToBeSkipped"] || _objj_forward)(self, (self.isa.method_dtable["_movePastCharactersToBeSkipped"], "_movePastCharactersToBeSkipped"));
    var str = (self.isa.method_msgSend["string"] || _objj_forward)(self, (self.isa.method_dtable["string"], "string")),
        loc = (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation"));
    if ((self.isa.method_msgSend["isAtEnd"] || _objj_forward)(self, (self.isa.method_dtable["isAtEnd"], "isAtEnd")))
        return 0;
    var s = str.substring(loc, str.length),
        f = parseFunction(s);
    if (isNaN(f))
        return nil;
    loc += ("" + f).length;
    var i = 0;
    while (!isNaN(parseFloat(str.substring(loc + i, str.length))))
    {
        i++;
    }
    (self.isa.method_msgSend["setScanLocation:"] || _objj_forward)(self, (self.isa.method_dtable["setScanLocation:"], "setScanLocation:"), loc + i);
    return f;
}

,["float","Function"]), new objj_method(sel_getUid("scanFloat"), function $CPScanner__scanFloat(self, _cmd)
{
    return (self.isa.method_msgSend["scanWithParseFunction:"] || _objj_forward)(self, (self.isa.method_dtable["scanWithParseFunction:"], "scanWithParseFunction:"), parseFloat);
}

,["float"]), new objj_method(sel_getUid("scanInt"), function $CPScanner__scanInt(self, _cmd)
{
    return (self.isa.method_msgSend["scanWithParseFunction:"] || _objj_forward)(self, (self.isa.method_dtable["scanWithParseFunction:"], "scanWithParseFunction:"), parseInt);
}

,["int"]), new objj_method(sel_getUid("scanInt:"), function $CPScanner__scanInt_(self, _cmd, intoInt)
{
    return (self.isa.method_msgSend["_performScanWithSelector:withObject:into:"] || _objj_forward)(self, (self.isa.method_dtable["_performScanWithSelector:withObject:into:"], self.isa.method_dtable["_performScanWithSelector:withObject:into:"], self.isa.method_dtable["_performScanWithSelector:withObject:into:"], "_performScanWithSelector:withObject:into:"), sel_getUid("scanInt"), nil, intoInt);
}

,["BOOL","int"]), new objj_method(sel_getUid("scanFloat:"), function $CPScanner__scanFloat_(self, _cmd, intoFloat)
{
    return (self.isa.method_msgSend["_performScanWithSelector:withObject:into:"] || _objj_forward)(self, (self.isa.method_dtable["_performScanWithSelector:withObject:into:"], self.isa.method_dtable["_performScanWithSelector:withObject:into:"], self.isa.method_dtable["_performScanWithSelector:withObject:into:"], "_performScanWithSelector:withObject:into:"), sel_getUid("scanFloat"), nil, intoFloat);
}

,["BOOL","float"]), new objj_method(sel_getUid("scanDouble:"), function $CPScanner__scanDouble_(self, _cmd, intoDouble)
{
    return (self.isa.method_msgSend["scanFloat:"] || _objj_forward)(self, (self.isa.method_dtable["scanFloat:"], "scanFloat:"), intoDouble);
}

,["BOOL","float"]), new objj_method(sel_getUid("description"), function $CPScanner__description(self, _cmd)
{
    return (objj_getClass("CPScanner").super_class.method_dtable["description"] || _objj_forward)(self, "description") + " {" + CPStringFromClass((self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))) + ", state = '" + ((self.isa.method_msgSend["string"] || _objj_forward)(self, (self.isa.method_dtable["string"], "string")).substr(0, self._scanLocation) + "{{ SCAN LOCATION ->}}" + (self.isa.method_msgSend["string"] || _objj_forward)(self, (self.isa.method_dtable["string"], "string")).substr(self._scanLocation)) + "'; }";
}

,["CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("scannerWithString:"), function $CPScanner__scannerWithString_(self, _cmd, aString)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithString:"] || _objj_forward)(___r1, "initWithString:", aString));
    var ___r1;
}

,["id","CPString"])]);
}
p;13;CPArray+KVO.jt;79663;@STATIC;1.0;i;9;CPArray.ji;8;CPNull.ji;27;_CPCollectionKVCOperators.jS;40872;t;38706;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPNull.j", YES);objj_executeFile("_CPCollectionKVCOperators.j", YES);{
var the_class = objj_getClass("CPObject")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPObject\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("mutableArrayValueForKey:"), function $CPObject__mutableArrayValueForKey_(self, _cmd, aKey)
{
    return ((___r1 = (_CPKVCArray == null ? null : (_CPKVCArray.isa.method_msgSend["alloc"] || _objj_forward)(_CPKVCArray, (_CPKVCArray.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithKey:forProxyObject:"] || _objj_forward)(___r1, "initWithKey:forProxyObject:", aKey, self));
    var ___r1;
}

,["id","id"]), new objj_method(sel_getUid("mutableArrayValueForKeyPath:"), function $CPObject__mutableArrayValueForKeyPath_(self, _cmd, aKeyPath)
{
    var dotIndex = aKeyPath.indexOf(".");
    if (dotIndex < 0)
        return (self.isa.method_msgSend["mutableArrayValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["mutableArrayValueForKey:"], "mutableArrayValueForKey:"), aKeyPath);
    var firstPart = aKeyPath.substring(0, dotIndex),
        lastPart = aKeyPath.substring(dotIndex + 1);
    return ((___r1 = (self.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(self, (self.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), firstPart)), ___r1 == null ? null : (___r1.isa.method_msgSend["mutableArrayValueForKeyPath:"] || _objj_forward)(___r1, "mutableArrayValueForKeyPath:", lastPart));
    var ___r1;
}

,["id","id"])]);
}

{var the_class = objj_allocateClassPair(CPMutableArray, "_CPKVCArray"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_proxyObject", "id"), new objj_ivar("_key", "id"), new objj_ivar("_insertSEL", "SEL"), new objj_ivar("_insert", "Function"), new objj_ivar("_removeSEL", "SEL"), new objj_ivar("_remove", "Function"), new objj_ivar("_replaceSEL", "SEL"), new objj_ivar("_replace", "Function"), new objj_ivar("_insertManySEL", "SEL"), new objj_ivar("_insertMany", "Function"), new objj_ivar("_removeManySEL", "SEL"), new objj_ivar("_removeMany", "Function"), new objj_ivar("_replaceManySEL", "SEL"), new objj_ivar("_replaceMany", "Function"), new objj_ivar("_objectAtIndexSEL", "SEL"), new objj_ivar("_objectAtIndex", "Function"), new objj_ivar("_objectsAtIndexesSEL", "SEL"), new objj_ivar("_objectsAtIndexes", "Function"), new objj_ivar("_countSEL", "SEL"), new objj_ivar("_count", "Function"), new objj_ivar("_accessSEL", "SEL"), new objj_ivar("_access", "Function"), new objj_ivar("_setSEL", "SEL"), new objj_ivar("_set", "Function")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithKey:forProxyObject:"), function $_CPKVCArray__initWithKey_forProxyObject_(self, _cmd, aKey, anObject)
{
    self = (objj_getClass("_CPKVCArray").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    self._key = aKey;
    self._proxyObject = anObject;
    var capitalizedKey = (self._key.charAt(0)).toUpperCase() + self._key.substring(1);
    self._insertSEL = sel_getName("insertObject:in" + capitalizedKey + "AtIndex:");
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._insertSEL)))
        self._insert = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._insertSEL));
    self._removeSEL = sel_getName("removeObjectFrom" + capitalizedKey + "AtIndex:");
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._removeSEL)))
        self._remove = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._removeSEL));
    self._replaceSEL = sel_getName("replaceObjectIn" + capitalizedKey + "AtIndex:withObject:");
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._replaceSEL)))
        self._replace = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._replaceSEL));
    self._insertManySEL = sel_getName("insert" + capitalizedKey + ":atIndexes:");
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._insertManySEL)))
        self._insertMany = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._insertManySEL));
    self._removeManySEL = sel_getName("remove" + capitalizedKey + "AtIndexes:");
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._removeManySEL)))
        self._removeMany = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._removeManySEL));
    self._replaceManySEL = sel_getName("replace" + capitalizedKey + "AtIndexes:with" + capitalizedKey + ":");
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._replaceManySEL)))
        self._replaceMany = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._replaceManySEL));
    self._objectAtIndexSEL = sel_getName("objectIn" + capitalizedKey + "AtIndex:");
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._objectAtIndexSEL)))
        self._objectAtIndex = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._objectAtIndexSEL));
    self._objectsAtIndexesSEL = sel_getName(self._key + "AtIndexes:");
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._objectsAtIndexesSEL)))
        self._objectsAtIndexes = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._objectsAtIndexesSEL));
    self._countSEL = sel_getName("countOf" + capitalizedKey);
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._countSEL)))
        self._count = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._countSEL));
    self._accessSEL = sel_getName(self._key);
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._accessSEL)))
        self._access = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._accessSEL));
    self._setSEL = sel_getName("set" + capitalizedKey + ":");
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._setSEL)))
        self._set = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._setSEL));
    return self;
    var ___r1;
}

,["id","id","id"]), new objj_method(sel_getUid("copy"), function $_CPKVCArray__copy(self, _cmd)
{
    var i = 0,
        theCopy = [],
        count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"));
    for (; i < count; i++)
        (theCopy == null ? null : (theCopy.isa.method_msgSend["addObject:"] || _objj_forward)(theCopy, (theCopy.isa.method_dtable["addObject:"], "addObject:"), (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i)));
    return theCopy;
}

,["id"]), new objj_method(sel_getUid("_representedObject"), function $_CPKVCArray___representedObject(self, _cmd)
{
    if (self._access)
        return self._access(self._proxyObject, self._accessSEL);
    return ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["valueForKey:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["valueForKey:"], "valueForKey:"), self._key));
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("_setRepresentedObject:"), function $_CPKVCArray___setRepresentedObject_(self, _cmd, anObject)
{
    if (self._set)
        return self._set(self._proxyObject, self._setSEL, anObject);
    ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setValue:forKey:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["setValue:forKey:"], self._proxyObject.isa.method_dtable["setValue:forKey:"], "setValue:forKey:"), anObject, self._key));
    var ___r1;
}

,["void","id"]), new objj_method(sel_getUid("count"), function $_CPKVCArray__count(self, _cmd)
{
    if (self._count)
        return self._count(self._proxyObject, self._countSEL);
    return ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, "count"));
    var ___r1;
}

,["CPUInteger"]), new objj_method(sel_getUid("indexOfObject:inRange:"), function $_CPKVCArray__indexOfObject_inRange_(self, _cmd, anObject, aRange)
{
    var index = aRange.location,
        count = aRange.length,
        shouldIsEqual = !!anObject.isa;
    for (; index < count; ++index)
    {
        var object = (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index);
        if (anObject === object || shouldIsEqual && !!object.isa && (anObject == null ? null : (anObject.isa.method_msgSend["isEqual:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["isEqual:"], "isEqual:"), object)))
            return index;
    }
    return CPNotFound;
}

,["CPUInteger","id","CPRange"]), new objj_method(sel_getUid("indexOfObject:"), function $_CPKVCArray__indexOfObject_(self, _cmd, anObject)
{
    return (self.isa.method_msgSend["indexOfObject:inRange:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObject:inRange:"], self.isa.method_dtable["indexOfObject:inRange:"], "indexOfObject:inRange:"), anObject, CPMakeRange(0, (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"))));
}

,["CPUInteger","id"]), new objj_method(sel_getUid("indexOfObjectIdenticalTo:inRange:"), function $_CPKVCArray__indexOfObjectIdenticalTo_inRange_(self, _cmd, anObject, aRange)
{
    var index = aRange.location,
        count = aRange.length;
    for (; index < count; ++index)
        if (anObject === (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index))
            return index;
    return CPNotFound;
}

,["CPUInteger","id","CPRange"]), new objj_method(sel_getUid("indexOfObjectIdenticalTo:"), function $_CPKVCArray__indexOfObjectIdenticalTo_(self, _cmd, anObject)
{
    return (self.isa.method_msgSend["indexOfObjectIdenticalTo:inRange:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObjectIdenticalTo:inRange:"], self.isa.method_dtable["indexOfObjectIdenticalTo:inRange:"], "indexOfObjectIdenticalTo:inRange:"), anObject, CPMakeRange(0, (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"))));
}

,["CPUInteger","id"]), new objj_method(sel_getUid("objectAtIndex:"), function $_CPKVCArray__objectAtIndex_(self, _cmd, anIndex)
{
    return ((___r1 = (self.isa.method_msgSend["objectsAtIndexes:"] || _objj_forward)(self, (self.isa.method_dtable["objectsAtIndexes:"], "objectsAtIndexes:"), (CPIndexSet == null ? null : (CPIndexSet.isa.method_msgSend["indexSetWithIndex:"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSetWithIndex:"], "indexSetWithIndex:"), anIndex)))), ___r1 == null ? null : (___r1.isa.method_msgSend["firstObject"] || _objj_forward)(___r1, "firstObject"));
    var ___r1;
}

,["id","CPUInteger"]), new objj_method(sel_getUid("objectsAtIndexes:"), function $_CPKVCArray__objectsAtIndexes_(self, _cmd, theIndexes)
{
    if (self._objectsAtIndexes)
        return self._objectsAtIndexes(self._proxyObject, self._objectsAtIndexesSEL, theIndexes);
    if (self._objectAtIndex)
    {
        var index = CPNotFound,
            objects = [];
        while ((index = (theIndexes == null ? null : (theIndexes.isa.method_msgSend["indexGreaterThanIndex:"] || _objj_forward)(theIndexes, (theIndexes.isa.method_dtable["indexGreaterThanIndex:"], "indexGreaterThanIndex:"), index))) !== CPNotFound)
            objects.push(self._objectAtIndex(self._proxyObject, self._objectAtIndexSEL, index));
        return objects;
    }
    return ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectsAtIndexes:"] || _objj_forward)(___r1, "objectsAtIndexes:", theIndexes));
    var ___r1;
}

,["CPArray","CPIndexSet"]), new objj_method(sel_getUid("addObject:"), function $_CPKVCArray__addObject_(self, _cmd, anObject)
{
    (self.isa.method_msgSend["insertObject:atIndex:"] || _objj_forward)(self, (self.isa.method_dtable["insertObject:atIndex:"], self.isa.method_dtable["insertObject:atIndex:"], "insertObject:atIndex:"), anObject, (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")));
}

,["void","id"]), new objj_method(sel_getUid("addObjectsFromArray:"), function $_CPKVCArray__addObjectsFromArray_(self, _cmd, anArray)
{
    var index = 0,
        count = (anArray == null ? null : (anArray.isa.method_msgSend["count"] || _objj_forward)(anArray, (anArray.isa.method_dtable["count"], "count")));
    (self.isa.method_msgSend["insertObjects:atIndexes:"] || _objj_forward)(self, (self.isa.method_dtable["insertObjects:atIndexes:"], self.isa.method_dtable["insertObjects:atIndexes:"], "insertObjects:atIndexes:"), anArray, (CPIndexSet == null ? null : (CPIndexSet.isa.method_msgSend["indexSetWithIndexesInRange:"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSetWithIndexesInRange:"], "indexSetWithIndexesInRange:"), CPMakeRange((self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")), count))));
}

,["void","CPArray"]), new objj_method(sel_getUid("insertObject:atIndex:"), function $_CPKVCArray__insertObject_atIndex_(self, _cmd, anObject, anIndex)
{
    (self.isa.method_msgSend["insertObjects:atIndexes:"] || _objj_forward)(self, (self.isa.method_dtable["insertObjects:atIndexes:"], self.isa.method_dtable["insertObjects:atIndexes:"], "insertObjects:atIndexes:"), [anObject], (CPIndexSet == null ? null : (CPIndexSet.isa.method_msgSend["indexSetWithIndex:"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSetWithIndex:"], "indexSetWithIndex:"), anIndex)));
}

,["void","id","CPUInteger"]), new objj_method(sel_getUid("insertObjects:atIndexes:"), function $_CPKVCArray__insertObjects_atIndexes_(self, _cmd, theObjects, theIndexes)
{
    if (self._insertMany)
        self._insertMany(self._proxyObject, self._insertManySEL, theObjects, theIndexes);
    else if (self._insert)
    {
        var indexesArray = [];
        (theIndexes == null ? null : (theIndexes.isa.method_msgSend["getIndexes:maxCount:inIndexRange:"] || _objj_forward)(theIndexes, (theIndexes.isa.method_dtable["getIndexes:maxCount:inIndexRange:"], theIndexes.isa.method_dtable["getIndexes:maxCount:inIndexRange:"], theIndexes.isa.method_dtable["getIndexes:maxCount:inIndexRange:"], "getIndexes:maxCount:inIndexRange:"), indexesArray, -1, nil));
        for (var index = 0; index < (indexesArray == null ? null : (indexesArray.isa.method_msgSend["count"] || _objj_forward)(indexesArray, (indexesArray.isa.method_dtable["count"], "count"))); index++)
        {
            var objectIndex = (indexesArray == null ? null : (indexesArray.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(indexesArray, (indexesArray.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index)),
                object = (theObjects == null ? null : (theObjects.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(theObjects, (theObjects.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index));
            self._insert(self._proxyObject, self._insertSEL, object, objectIndex);
        }
    }
    else
    {
        var target = ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
        (target == null ? null : (target.isa.method_msgSend["insertObjects:atIndexes:"] || _objj_forward)(target, (target.isa.method_dtable["insertObjects:atIndexes:"], target.isa.method_dtable["insertObjects:atIndexes:"], "insertObjects:atIndexes:"), theObjects, theIndexes));
        (self.isa.method_msgSend["_setRepresentedObject:"] || _objj_forward)(self, (self.isa.method_dtable["_setRepresentedObject:"], "_setRepresentedObject:"), target);
    }
    var ___r1;
}

,["void","CPArray","CPIndexSet"]), new objj_method(sel_getUid("removeObject:"), function $_CPKVCArray__removeObject_(self, _cmd, anObject)
{
    (self.isa.method_msgSend["removeObject:inRange:"] || _objj_forward)(self, (self.isa.method_dtable["removeObject:inRange:"], self.isa.method_dtable["removeObject:inRange:"], "removeObject:inRange:"), anObject, CPMakeRange(0, (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"))));
}

,["void","id"]), new objj_method(sel_getUid("removeObjectsInArray:"), function $_CPKVCArray__removeObjectsInArray_(self, _cmd, theObjects)
{
    if (self._removeMany)
    {
        var indexes = (CPIndexSet == null ? null : (CPIndexSet.isa.method_msgSend["indexSet"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSet"], "indexSet"))),
            index = (theObjects == null ? null : (theObjects.isa.method_msgSend["count"] || _objj_forward)(theObjects, (theObjects.isa.method_dtable["count"], "count"))),
            position = 0,
            count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"));
        while (index--)
        {
            while ((position = (self.isa.method_msgSend["indexOfObject:inRange:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObject:inRange:"], self.isa.method_dtable["indexOfObject:inRange:"], "indexOfObject:inRange:"), (theObjects == null ? null : (theObjects.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(theObjects, (theObjects.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index)), CPMakeRange(position + 1, count))) !== CPNotFound)
                (indexes == null ? null : (indexes.isa.method_msgSend["addIndex:"] || _objj_forward)(indexes, (indexes.isa.method_dtable["addIndex:"], "addIndex:"), position));
        }
        self._removeMany(self._proxyObject, self._removeManySEL, indexes);
    }
    else if (self._remove)
    {
        var index = (theObjects == null ? null : (theObjects.isa.method_msgSend["count"] || _objj_forward)(theObjects, (theObjects.isa.method_dtable["count"], "count"))),
            position;
        while (index--)
        {
            while ((position = (self.isa.method_msgSend["indexOfObject:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObject:"], "indexOfObject:"), (theObjects == null ? null : (theObjects.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(theObjects, (theObjects.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index)))) !== CPNotFound)
                self._remove(self._proxyObject, self._removeSEL, position);
        }
    }
    else
    {
        var target = ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
        (target == null ? null : (target.isa.method_msgSend["removeObjectsInArray:"] || _objj_forward)(target, (target.isa.method_dtable["removeObjectsInArray:"], "removeObjectsInArray:"), theObjects));
        (self.isa.method_msgSend["_setRepresentedObject:"] || _objj_forward)(self, (self.isa.method_dtable["_setRepresentedObject:"], "_setRepresentedObject:"), target);
    }
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("removeObject:inRange:"), function $_CPKVCArray__removeObject_inRange_(self, _cmd, theObject, theRange)
{
    if (self._remove)
        self._remove(self._proxyObject, self._removeSEL, (self.isa.method_msgSend["indexOfObject:inRange:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObject:inRange:"], self.isa.method_dtable["indexOfObject:inRange:"], "indexOfObject:inRange:"), theObject, theRange));
    else if (self._removeMany)
    {
        var index = (self.isa.method_msgSend["indexOfObject:inRange:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObject:inRange:"], self.isa.method_dtable["indexOfObject:inRange:"], "indexOfObject:inRange:"), theObject, theRange);
        self._removeMany(self._proxyObject, self._removeManySEL, (CPIndexSet == null ? null : (CPIndexSet.isa.method_msgSend["indexSetWithIndex:"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSetWithIndex:"], "indexSetWithIndex:"), index)));
    }
    else
    {
        var index;
        while ((index = (self.isa.method_msgSend["indexOfObject:inRange:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObject:inRange:"], self.isa.method_dtable["indexOfObject:inRange:"], "indexOfObject:inRange:"), theObject, theRange)) !== CPNotFound)
        {
            (self.isa.method_msgSend["removeObjectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["removeObjectAtIndex:"], "removeObjectAtIndex:"), index);
            theRange = CPIntersectionRange(CPMakeRange(index, self.length - index), theRange);
        }
    }
}

,["void","id","CPRange"]), new objj_method(sel_getUid("removeLastObject"), function $_CPKVCArray__removeLastObject(self, _cmd)
{
    (self.isa.method_msgSend["removeObjectsAtIndexes:"] || _objj_forward)(self, (self.isa.method_dtable["removeObjectsAtIndexes:"], "removeObjectsAtIndexes:"), (CPIndexSet == null ? null : (CPIndexSet.isa.method_msgSend["indexSetWithIndex:"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSetWithIndex:"], "indexSetWithIndex:"), (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")) - 1)));
}

,["void"]), new objj_method(sel_getUid("removeObjectAtIndex:"), function $_CPKVCArray__removeObjectAtIndex_(self, _cmd, anIndex)
{
    (self.isa.method_msgSend["removeObjectsAtIndexes:"] || _objj_forward)(self, (self.isa.method_dtable["removeObjectsAtIndexes:"], "removeObjectsAtIndexes:"), (CPIndexSet == null ? null : (CPIndexSet.isa.method_msgSend["indexSetWithIndex:"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSetWithIndex:"], "indexSetWithIndex:"), anIndex)));
}

,["void","CPUInteger"]), new objj_method(sel_getUid("removeObjectsAtIndexes:"), function $_CPKVCArray__removeObjectsAtIndexes_(self, _cmd, theIndexes)
{
    if (self._removeMany)
        self._removeMany(self._proxyObject, self._removeManySEL, theIndexes);
    else if (self._remove)
    {
        var index = (theIndexes == null ? null : (theIndexes.isa.method_msgSend["lastIndex"] || _objj_forward)(theIndexes, (theIndexes.isa.method_dtable["lastIndex"], "lastIndex")));
        while (index !== CPNotFound)
        {
            self._remove(self._proxyObject, self._removeSEL, index);
            index = (theIndexes == null ? null : (theIndexes.isa.method_msgSend["indexLessThanIndex:"] || _objj_forward)(theIndexes, (theIndexes.isa.method_dtable["indexLessThanIndex:"], "indexLessThanIndex:"), index));
        }
    }
    else
    {
        var target = ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
        (target == null ? null : (target.isa.method_msgSend["removeObjectsAtIndexes:"] || _objj_forward)(target, (target.isa.method_dtable["removeObjectsAtIndexes:"], "removeObjectsAtIndexes:"), theIndexes));
        (self.isa.method_msgSend["_setRepresentedObject:"] || _objj_forward)(self, (self.isa.method_dtable["_setRepresentedObject:"], "_setRepresentedObject:"), target);
    }
    var ___r1;
}

,["void","CPIndexSet"]), new objj_method(sel_getUid("replaceObjectAtIndex:withObject:"), function $_CPKVCArray__replaceObjectAtIndex_withObject_(self, _cmd, anIndex, anObject)
{
    (self.isa.method_msgSend["replaceObjectsAtIndexes:withObjects:"] || _objj_forward)(self, (self.isa.method_dtable["replaceObjectsAtIndexes:withObjects:"], self.isa.method_dtable["replaceObjectsAtIndexes:withObjects:"], "replaceObjectsAtIndexes:withObjects:"), (CPIndexSet == null ? null : (CPIndexSet.isa.method_msgSend["indexSetWithIndex:"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSetWithIndex:"], "indexSetWithIndex:"), anIndex)), [anObject]);
}

,["void","CPUInteger","id"]), new objj_method(sel_getUid("replaceObjectsAtIndexes:withObjects:"), function $_CPKVCArray__replaceObjectsAtIndexes_withObjects_(self, _cmd, theIndexes, theObjects)
{
    if (self._replaceMany)
        return self._replaceMany(self._proxyObject, self._replaceManySEL, theIndexes, theObjects);
    else if (self._replace)
    {
        var i = 0,
            index = (theIndexes == null ? null : (theIndexes.isa.method_msgSend["firstIndex"] || _objj_forward)(theIndexes, (theIndexes.isa.method_dtable["firstIndex"], "firstIndex")));
        while (index !== CPNotFound)
        {
            self._replace(self._proxyObject, self._replaceSEL, index, (theObjects == null ? null : (theObjects.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(theObjects, (theObjects.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i++)));
            index = (theIndexes == null ? null : (theIndexes.isa.method_msgSend["indexGreaterThanIndex:"] || _objj_forward)(theIndexes, (theIndexes.isa.method_dtable["indexGreaterThanIndex:"], "indexGreaterThanIndex:"), index));
        }
    }
    else
    {
        var target = ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
        (target == null ? null : (target.isa.method_msgSend["replaceObjectsAtIndexes:withObjects:"] || _objj_forward)(target, (target.isa.method_dtable["replaceObjectsAtIndexes:withObjects:"], target.isa.method_dtable["replaceObjectsAtIndexes:withObjects:"], "replaceObjectsAtIndexes:withObjects:"), theIndexes, theObjects));
        (self.isa.method_msgSend["_setRepresentedObject:"] || _objj_forward)(self, (self.isa.method_dtable["_setRepresentedObject:"], "_setRepresentedObject:"), target);
    }
    var ___r1;
}

,["void","CPIndexSet","CPArray"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $_CPKVCArray__alloc(self, _cmd)
{
    var array = [];
    array.isa = self;
    var ivars = class_copyIvarList(self),
        count = ivars.length;
    while (count--)
        array[ivar_getName(ivars[count])] = nil;
    return array;
}

,["id"])]);
}
{
var the_class = objj_getClass("CPArray")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPArray\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("valueForKey:"), function $CPArray__valueForKey_(self, _cmd, aKey)
{
    if (aKey.charAt(0) === "@")
    {
        if (aKey.indexOf(".") !== -1)
            (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "called valueForKey: on an array with a complex key (" + aKey + "). use valueForKeyPath:");
        if (aKey === "@count")
            return self.length;
        return (self.isa.method_msgSend["valueForUndefinedKey:"] || _objj_forward)(self, (self.isa.method_dtable["valueForUndefinedKey:"], "valueForUndefinedKey:"), aKey);
    }
    else
    {
        var newArray = [],
            enumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator")),
            object;
        while ((object = (enumerator == null ? null : (enumerator.isa.method_msgSend["nextObject"] || _objj_forward)(enumerator, (enumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        {
            var value = (object == null ? null : (object.isa.method_msgSend["valueForKey:"] || _objj_forward)(object, (object.isa.method_dtable["valueForKey:"], "valueForKey:"), aKey));
            if (value === nil || value === undefined)
                value = (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null"));
            newArray.push(value);
        }
        return newArray;
    }
}

,["id","CPString"]), new objj_method(sel_getUid("valueForKeyPath:"), function $CPArray__valueForKeyPath_(self, _cmd, aKeyPath)
{
    if (!aKeyPath)
        (self.isa.method_msgSend["valueForUndefinedKey:"] || _objj_forward)(self, (self.isa.method_dtable["valueForUndefinedKey:"], "valueForUndefinedKey:"), "<empty path>");
    if (aKeyPath.charAt(0) === "@")
    {
        var dotIndex = aKeyPath.indexOf("."),
            operator,
            parameter;
        if (dotIndex !== -1)
        {
            operator = aKeyPath.substring(1, dotIndex);
            parameter = aKeyPath.substring(dotIndex + 1);
        }
        else
            operator = aKeyPath.substring(1);
        return (_CPCollectionKVCOperator.isa.method_msgSend["performOperation:withCollection:propertyPath:"] || _objj_forward)(_CPCollectionKVCOperator, (_CPCollectionKVCOperator.isa.method_dtable["performOperation:withCollection:propertyPath:"], _CPCollectionKVCOperator.isa.method_dtable["performOperation:withCollection:propertyPath:"], _CPCollectionKVCOperator.isa.method_dtable["performOperation:withCollection:propertyPath:"], "performOperation:withCollection:propertyPath:"), operator, self, parameter);
    }
    else
    {
        var newArray = [],
            enumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator")),
            object;
        while ((object = (enumerator == null ? null : (enumerator.isa.method_msgSend["nextObject"] || _objj_forward)(enumerator, (enumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        {
            var value = (object == null ? null : (object.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(object, (object.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), aKeyPath));
            if (value === nil || value === undefined)
                value = (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null"));
            newArray.push(value);
        }
        return newArray;
    }
}

,["id","CPString"]), new objj_method(sel_getUid("setValue:forKey:"), function $CPArray__setValue_forKey_(self, _cmd, aValue, aKey)
{
    var enumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator")),
        object;
    while ((object = (enumerator == null ? null : (enumerator.isa.method_msgSend["nextObject"] || _objj_forward)(enumerator, (enumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        (object == null ? null : (object.isa.method_msgSend["setValue:forKey:"] || _objj_forward)(object, (object.isa.method_dtable["setValue:forKey:"], object.isa.method_dtable["setValue:forKey:"], "setValue:forKey:"), aValue, aKey));
}

,["void","id","CPString"]), new objj_method(sel_getUid("setValue:forKeyPath:"), function $CPArray__setValue_forKeyPath_(self, _cmd, aValue, aKeyPath)
{
    var enumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator")),
        object;
    while ((object = (enumerator == null ? null : (enumerator.isa.method_msgSend["nextObject"] || _objj_forward)(enumerator, (enumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        (object == null ? null : (object.isa.method_msgSend["setValue:forKeyPath:"] || _objj_forward)(object, (object.isa.method_dtable["setValue:forKeyPath:"], object.isa.method_dtable["setValue:forKeyPath:"], "setValue:forKeyPath:"), aValue, aKeyPath));
}

,["void","id","CPString"])]);
}
{
var the_class = objj_getClass("CPArray")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPArray\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("addObserver:forKeyPath:options:context:"), function $CPArray__addObserver_forKeyPath_options_context_(self, _cmd, anObserver, aKeyPath, anOptions, aContext)
{
    if (aKeyPath !== "@count")
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "[CPArray " + CPStringFromSelector(_cmd) + "] is not supported. Key path: " + aKeyPath);
}

,["void","id","CPString","CPKeyValueObservingOptions","id"]), new objj_method(sel_getUid("removeObserver:forKeyPath:"), function $CPArray__removeObserver_forKeyPath_(self, _cmd, anObserver, aKeyPath)
{
    if (aKeyPath !== "@count")
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "[CPArray " + CPStringFromSelector(_cmd) + "] is not supported. Key path: " + aKeyPath);
}

,["void","id","CPString"]), new objj_method(sel_getUid("addObserver:toObjectsAtIndexes:forKeyPath:options:context:"), function $CPArray__addObserver_toObjectsAtIndexes_forKeyPath_options_context_(self, _cmd, anObserver, indexes, aKeyPath, options, context)
{
    var index = (indexes == null ? null : (indexes.isa.method_msgSend["firstIndex"] || _objj_forward)(indexes, (indexes.isa.method_dtable["firstIndex"], "firstIndex")));
    while (index >= 0)
    {
        ((___r1 = self[index]), ___r1 == null ? null : (___r1.isa.method_msgSend["addObserver:forKeyPath:options:context:"] || _objj_forward)(___r1, "addObserver:forKeyPath:options:context:", anObserver, aKeyPath, options, context));
        index = (indexes == null ? null : (indexes.isa.method_msgSend["indexGreaterThanIndex:"] || _objj_forward)(indexes, (indexes.isa.method_dtable["indexGreaterThanIndex:"], "indexGreaterThanIndex:"), index));
    }
    var ___r1;
}

,["void","id","CPIndexSet","CPString","CPKeyValueObservingOptions","id"]), new objj_method(sel_getUid("removeObserver:fromObjectsAtIndexes:forKeyPath:"), function $CPArray__removeObserver_fromObjectsAtIndexes_forKeyPath_(self, _cmd, anObserver, indexes, aKeyPath)
{
    var index = (indexes == null ? null : (indexes.isa.method_msgSend["firstIndex"] || _objj_forward)(indexes, (indexes.isa.method_dtable["firstIndex"], "firstIndex")));
    while (index >= 0)
    {
        ((___r1 = self[index]), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObserver:forKeyPath:"] || _objj_forward)(___r1, "removeObserver:forKeyPath:", anObserver, aKeyPath));
        index = (indexes == null ? null : (indexes.isa.method_msgSend["indexGreaterThanIndex:"] || _objj_forward)(indexes, (indexes.isa.method_dtable["indexGreaterThanIndex:"], "indexGreaterThanIndex:"), index));
    }
    var ___r1;
}

,["void","id","CPIndexSet","CPString"])]);
}
p;19;CPJSONPConnection.jt;20493;@STATIC;1.0;i;13;CPException.ji;10;CPObject.ji;11;CPRunLoop.ji;14;CPURLRequest.jS;11064;t;9334;

objj_executeFile("CPException.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPRunLoop.j", YES);objj_executeFile("CPURLRequest.j", YES);CPJSONPConnectionCallbacks = {};
CPJSONPCallbackReplacementString = "${JSONP_CALLBACK}";

{var the_class = objj_allocateClassPair(CPObject, "CPJSONPConnection"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_request", "CPURLRequest"), new objj_ivar("_delegate", "id"), new objj_ivar("_callbackParameter", "CPString"), new objj_ivar("_scriptTag", "DOMElement")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithRequest:callback:delegate:"), function $CPJSONPConnection__initWithRequest_callback_delegate_(self, _cmd, aRequest, aString, aDelegate)
{
    return (self.isa.method_msgSend["initWithRequest:callback:delegate:startImmediately:"] || _objj_forward)(self, (self.isa.method_dtable["initWithRequest:callback:delegate:startImmediately:"], self.isa.method_dtable["initWithRequest:callback:delegate:startImmediately:"], self.isa.method_dtable["initWithRequest:callback:delegate:startImmediately:"], self.isa.method_dtable["initWithRequest:callback:delegate:startImmediately:"], "initWithRequest:callback:delegate:startImmediately:"), aRequest, aString, aDelegate, NO);
}

,["id","CPURLRequest","CPString","id"]), new objj_method(sel_getUid("initWithRequest:callback:delegate:startImmediately:"), function $CPJSONPConnection__initWithRequest_callback_delegate_startImmediately_(self, _cmd, aRequest, aString, aDelegate, shouldStartImmediately)
{
    self = (objj_getClass("CPJSONPConnection").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._request = aRequest;
        self._delegate = aDelegate;
        self._callbackParameter = aString;
        if (!self._callbackParameter && ((___r1 = ((___r2 = self._request), ___r2 == null ? null : (___r2.isa.method_msgSend["URL"] || _objj_forward)(___r2, (self._request.isa.method_dtable["URL"], "URL")))), ___r1 == null ? null : (___r1.isa.method_msgSend["absoluteString"] || _objj_forward)(___r1, "absoluteString")).indexOf(CPJSONPCallbackReplacementString) < 0)
            (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "JSONP source specified without callback parameter or CPJSONPCallbackReplacementString in URL.");
        if (shouldStartImmediately)
            (self == null ? null : (self.isa.method_msgSend["start"] || _objj_forward)(self, (self.isa.method_dtable["start"], "start")));
    }
    return self;
    var ___r1, ___r2;
}

,["id","CPURLRequest","CPString","id","BOOL"]), new objj_method(sel_getUid("start"), function $CPJSONPConnection__start(self, _cmd)
{
    try {
        CPJSONPConnectionCallbacks["callback" + (self.isa.method_msgSend["UID"] || _objj_forward)(self, (self.isa.method_dtable["UID"], "UID"))] =         function(data)
        {
            if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("connection:didReceiveData:"))))
                ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["connection:didReceiveData:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["connection:didReceiveData:"], self._delegate.isa.method_dtable["connection:didReceiveData:"], "connection:didReceiveData:"), self, data));
            if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("connectionDidFinishLoading:"))))
                ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["connectionDidFinishLoading:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["connectionDidFinishLoading:"], "connectionDidFinishLoading:"), self));
            (self.isa.method_msgSend["removeScriptTag"] || _objj_forward)(self, (self.isa.method_dtable["removeScriptTag"], "removeScriptTag"));
            ((___r1 = (CPRunLoop.isa.method_msgSend["currentRunLoop"] || _objj_forward)(CPRunLoop, (CPRunLoop.isa.method_dtable["currentRunLoop"], "currentRunLoop"))), ___r1 == null ? null : (___r1.isa.method_msgSend["limitDateForMode:"] || _objj_forward)(___r1, "limitDateForMode:", CPDefaultRunLoopMode));
            var ___r1;
        };
        var head = (document.getElementsByTagName("head")).item(0),
            source = ((___r1 = ((___r2 = self._request), ___r2 == null ? null : (___r2.isa.method_msgSend["URL"] || _objj_forward)(___r2, (self._request.isa.method_dtable["URL"], "URL")))), ___r1 == null ? null : (___r1.isa.method_msgSend["absoluteString"] || _objj_forward)(___r1, "absoluteString"));
        if (self._callbackParameter)
        {
            source += source.indexOf('?') < 0 ? "?" : "&";
            source += self._callbackParameter + "=CPJSONPConnectionCallbacks.callback" + (self.isa.method_msgSend["UID"] || _objj_forward)(self, (self.isa.method_dtable["UID"], "UID"));
        }
        else if (source.indexOf(CPJSONPCallbackReplacementString) >= 0)
        {
            source = (source == null ? null : (source.isa.method_msgSend["stringByReplacingOccurrencesOfString:withString:"] || _objj_forward)(source, (source.isa.method_dtable["stringByReplacingOccurrencesOfString:withString:"], source.isa.method_dtable["stringByReplacingOccurrencesOfString:withString:"], "stringByReplacingOccurrencesOfString:withString:"), CPJSONPCallbackReplacementString, "CPJSONPConnectionCallbacks.callback" + (self.isa.method_msgSend["UID"] || _objj_forward)(self, (self.isa.method_dtable["UID"], "UID"))));
        }
        else
            return;
        self._scriptTag = document.createElement("script");
        self._scriptTag.setAttribute("type", "text/javascript");
        self._scriptTag.setAttribute("charset", "utf-8");
        self._scriptTag.setAttribute("src", source);
        head.appendChild(self._scriptTag);
    }
    catch(exception) {
        if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("connection:didFailWithError:"))))
            ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["connection:didFailWithError:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["connection:didFailWithError:"], self._delegate.isa.method_dtable["connection:didFailWithError:"], "connection:didFailWithError:"), self, exception));
        (self.isa.method_msgSend["removeScriptTag"] || _objj_forward)(self, (self.isa.method_dtable["removeScriptTag"], "removeScriptTag"));
        var ___r1;
    }
    var ___r1, ___r2;
}

,["void"]), new objj_method(sel_getUid("removeScriptTag"), function $CPJSONPConnection__removeScriptTag(self, _cmd)
{
    var head = (document.getElementsByTagName("head")).item(0);
    if (self._scriptTag && self._scriptTag.parentNode == head)
        head.removeChild(self._scriptTag);
    CPJSONPConnectionCallbacks["callback" + (self.isa.method_msgSend["UID"] || _objj_forward)(self, (self.isa.method_dtable["UID"], "UID"))] = nil;
    delete CPJSONPConnectionCallbacks["callback" + (self.isa.method_msgSend["UID"] || _objj_forward)(self, (self.isa.method_dtable["UID"], "UID"))];
}

,["void"]), new objj_method(sel_getUid("cancel"), function $CPJSONPConnection__cancel(self, _cmd)
{
    (self.isa.method_msgSend["removeScriptTag"] || _objj_forward)(self, (self.isa.method_dtable["removeScriptTag"], "removeScriptTag"));
}

,["void"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("sendRequest:callback:delegate:"), function $CPJSONPConnection__sendRequest_callback_delegate_(self, _cmd, aRequest, callbackParameter, aDelegate)
{
    return (self.isa.method_msgSend["connectionWithRequest:callback:delegate:"] || _objj_forward)(self, (self.isa.method_dtable["connectionWithRequest:callback:delegate:"], self.isa.method_dtable["connectionWithRequest:callback:delegate:"], self.isa.method_dtable["connectionWithRequest:callback:delegate:"], "connectionWithRequest:callback:delegate:"), aRequest, callbackParameter, aDelegate);
}

,["CPJSONPConnection","CPURLRequest","CPString","id"]), new objj_method(sel_getUid("connectionWithRequest:callback:delegate:"), function $CPJSONPConnection__connectionWithRequest_callback_delegate_(self, _cmd, aRequest, callbackParameter, aDelegate)
{
    return ((___r1 = ((___r2 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r2 == null ? null : (___r2.isa.method_msgSend["alloc"] || _objj_forward)(___r2, "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithRequest:callback:delegate:startImmediately:"] || _objj_forward)(___r1, "initWithRequest:callback:delegate:startImmediately:", aRequest, callbackParameter, aDelegate, YES));
    var ___r1, ___r2;
}

,["CPJSONPConnection","CPURLRequest","CPString","id"])]);
}
p;17;CPDecimalNumber.jt;140204;@STATIC;1.0;i;11;CPDecimal.ji;13;CPException.ji;10;CPNumber.ji;10;CPObject.ji;10;CPString.jS;82396;t;57701;

objj_executeFile("CPDecimal.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPNumber.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPString.j", YES);var CPDefaultDcmHandler = nil,
    CPDecimalNumberUIDs = new CFMutableDictionary();

{var the_class = objj_allocateClassPair(CPObject, "CPDecimalNumberHandler"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_roundingMode", "CPRoundingMode"), new objj_ivar("_scale", "short"), new objj_ivar("_raiseOnExactness", "BOOL"), new objj_ivar("_raiseOnOverflow", "BOOL"), new objj_ivar("_raiseOnUnderflow", "BOOL"), new objj_ivar("_raiseOnDivideByZero", "BOOL")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPDecimalNumberHandler__init(self, _cmd)
{
    return (self.isa.method_msgSend["initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"] || _objj_forward)(self, (self.isa.method_dtable["initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], self.isa.method_dtable["initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], self.isa.method_dtable["initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], self.isa.method_dtable["initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], self.isa.method_dtable["initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], self.isa.method_dtable["initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"), CPRoundPlain, 0, NO, YES, YES, YES);
}

,["id"]), new objj_method(sel_getUid("initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"), function $CPDecimalNumberHandler__initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_(self, _cmd, roundingMode, scale, exact, overflow, underflow, divideByZero)
{
    if (self = (objj_getClass("CPDecimalNumberHandler").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        self._roundingMode = roundingMode;
        self._scale = scale;
        self._raiseOnExactness = exact;
        self._raiseOnOverflow = overflow;
        self._raiseOnUnderflow = underflow;
        self._raiseOnDivideByZero = divideByZero;
    }
    return self;
}

,["id","CPRoundingMode","short","BOOL","BOOL","BOOL","BOOL"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"), function $CPDecimalNumberHandler__decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_(self, _cmd, roundingMode, scale, exact, overflow, underflow, divideByZero)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"] || _objj_forward)(___r1, "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:", roundingMode, scale, exact, overflow, underflow, divideByZero));
    var ___r1;
}

,["id","CPRoundingMode","short","BOOL","BOOL","BOOL","BOOL"]), new objj_method(sel_getUid("defaultDecimalNumberHandler"), function $CPDecimalNumberHandler__defaultDecimalNumberHandler(self, _cmd)
{
    if (!CPDefaultDcmHandler)
        CPDefaultDcmHandler = ((___r1 = (CPDecimalNumberHandler.isa.method_msgSend["alloc"] || _objj_forward)(CPDecimalNumberHandler, (CPDecimalNumberHandler.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    return CPDefaultDcmHandler;
    var ___r1;
}

,["id"])]);
}
{var the_protocol = objj_allocateProtocol("CPDecimalNumberBehaviors");
objj_registerProtocol(the_protocol);
protocol_addMethodDescriptions(the_protocol, [new objj_method(sel_getUid("roundingMode"), Nil
,["CPRoundingMode"]), new objj_method(sel_getUid("scale"), Nil
,["short"]), new objj_method(sel_getUid("exceptionDuringOperation:error:leftOperand:rightOperand:"), Nil
,["CPDecimalNumber","SEL","CPCalculationError","CPDecimalNumber","CPDecimalNumber"])], true, true);
}{
var the_class = objj_getClass("CPDecimalNumberHandler")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPDecimalNumberHandler\"");
var meta_class = the_class.isa;
var aProtocol = objj_getProtocol("CPDecimalNumberBehaviors");
if (!aProtocol) throw new SyntaxError("*** Could not find definition for protocol \"CPDecimalNumberBehaviors\"");
class_addProtocol(the_class, aProtocol);class_addMethods(the_class, [new objj_method(sel_getUid("roundingMode"), function $CPDecimalNumberHandler__roundingMode(self, _cmd)
{
    return self._roundingMode;
}

,["CPRoundingMode"]), new objj_method(sel_getUid("scale"), function $CPDecimalNumberHandler__scale(self, _cmd)
{
    return self._scale;
}

,["short"]), new objj_method(sel_getUid("exceptionDuringOperation:error:leftOperand:rightOperand:"), function $CPDecimalNumberHandler__exceptionDuringOperation_error_leftOperand_rightOperand_(self, _cmd, operation, error, leftOperand, rightOperand)
{
    switch(error) {
        case CPCalculationNoError:
            break;
        case CPCalculationOverflow:
            if (self._raiseOnOverflow)
                (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPDecimalNumberOverflowException, "A CPDecimalNumber overflow has occurred. (Left operand= '" + (leftOperand == null ? null : (leftOperand.isa.method_msgSend["descriptionWithLocale:"] || _objj_forward)(leftOperand, (leftOperand.isa.method_dtable["descriptionWithLocale:"], "descriptionWithLocale:"), nil)) + "' Right operand= '" + (rightOperand == null ? null : (rightOperand.isa.method_msgSend["descriptionWithLocale:"] || _objj_forward)(rightOperand, (rightOperand.isa.method_dtable["descriptionWithLocale:"], "descriptionWithLocale:"), nil)) + "' Selector= '" + operation + "')");
            else
                return (CPDecimalNumber == null ? null : (CPDecimalNumber.isa.method_msgSend["notANumber"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["notANumber"], "notANumber")));
            break;
        case CPCalculationUnderflow:
            if (self._raiseOnUnderflow)
                (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPDecimalNumberUnderflowException, "A CPDecimalNumber underflow has occurred. (Left operand= '" + (leftOperand == null ? null : (leftOperand.isa.method_msgSend["descriptionWithLocale:"] || _objj_forward)(leftOperand, (leftOperand.isa.method_dtable["descriptionWithLocale:"], "descriptionWithLocale:"), nil)) + "' Right operand= '" + (rightOperand == null ? null : (rightOperand.isa.method_msgSend["descriptionWithLocale:"] || _objj_forward)(rightOperand, (rightOperand.isa.method_dtable["descriptionWithLocale:"], "descriptionWithLocale:"), nil)) + "' Selector= '" + operation + "')");
            else
                return (CPDecimalNumber == null ? null : (CPDecimalNumber.isa.method_msgSend["notANumber"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["notANumber"], "notANumber")));
            break;
        case CPCalculationLossOfPrecision:
            if (self._raiseOnExactness)
                (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPDecimalNumberExactnessException, "A CPDecimalNumber has been rounded off during a calculation. (Left operand= '" + (leftOperand == null ? null : (leftOperand.isa.method_msgSend["descriptionWithLocale:"] || _objj_forward)(leftOperand, (leftOperand.isa.method_dtable["descriptionWithLocale:"], "descriptionWithLocale:"), nil)) + "' Right operand= '" + (rightOperand == null ? null : (rightOperand.isa.method_msgSend["descriptionWithLocale:"] || _objj_forward)(rightOperand, (rightOperand.isa.method_dtable["descriptionWithLocale:"], "descriptionWithLocale:"), nil)) + "' Selector= '" + operation + "')");
            break;
        case CPCalculationDivideByZero:
            if (self._raiseOnDivideByZero)
                (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPDecimalNumberDivideByZeroException, "A CPDecimalNumber divide by zero has occurred. (Left operand= '" + (leftOperand == null ? null : (leftOperand.isa.method_msgSend["descriptionWithLocale:"] || _objj_forward)(leftOperand, (leftOperand.isa.method_dtable["descriptionWithLocale:"], "descriptionWithLocale:"), nil)) + "' Right operand= '" + (rightOperand == null ? null : (rightOperand.isa.method_msgSend["descriptionWithLocale:"] || _objj_forward)(rightOperand, (rightOperand.isa.method_dtable["descriptionWithLocale:"], "descriptionWithLocale:"), nil)) + "' Selector= '" + operation + "')");
            else
                return (CPDecimalNumber == null ? null : (CPDecimalNumber.isa.method_msgSend["notANumber"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["notANumber"], "notANumber")));
            break;
default:
            (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "An unknown CPDecimalNumber error has occurred. (Left operand= '" + (leftOperand == null ? null : (leftOperand.isa.method_msgSend["descriptionWithLocale:"] || _objj_forward)(leftOperand, (leftOperand.isa.method_dtable["descriptionWithLocale:"], "descriptionWithLocale:"), nil)) + "' Right operand= '" + (rightOperand == null ? null : (rightOperand.isa.method_msgSend["descriptionWithLocale:"] || _objj_forward)(rightOperand, (rightOperand.isa.method_dtable["descriptionWithLocale:"], "descriptionWithLocale:"), nil)) + "' Selector= '" + operation + "')");
    }
    return nil;
}

,["CPDecimalNumber","SEL","CPCalculationError","CPDecimalNumber","CPDecimalNumber"])]);
}
var CPDecimalNumberHandlerRoundingModeKey = "CPDecimalNumberHandlerRoundingModeKey",
    CPDecimalNumberHandlerScaleKey = "CPDecimalNumberHandlerScaleKey",
    CPDecimalNumberHandlerRaiseOnExactKey = "CPDecimalNumberHandlerRaiseOnExactKey",
    CPDecimalNumberHandlerRaiseOnOverflowKey = "CPDecimalNumberHandlerRaiseOnOverflowKey",
    CPDecimalNumberHandlerRaiseOnUnderflowKey = "CPDecimalNumberHandlerRaiseOnUnderflowKey",
    CPDecimalNumberHandlerDivideByZeroKey = "CPDecimalNumberHandlerDivideByZeroKey";
{
var the_class = objj_getClass("CPDecimalNumberHandler")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPDecimalNumberHandler\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPDecimalNumberHandler__initWithCoder_(self, _cmd, aCoder)
{
    if (self)
    {
        (self.isa.method_msgSend["initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"] || _objj_forward)(self, (self.isa.method_dtable["initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], self.isa.method_dtable["initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], self.isa.method_dtable["initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], self.isa.method_dtable["initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], self.isa.method_dtable["initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], self.isa.method_dtable["initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"), (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPDecimalNumberHandlerRoundingModeKey)), (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPDecimalNumberHandlerScaleKey)), (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPDecimalNumberHandlerRaiseOnExactKey)), (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPDecimalNumberHandlerRaiseOnOverflowKey)), (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPDecimalNumberHandlerRaiseOnUnderflowKey)), (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPDecimalNumberHandlerDivideByZeroKey)));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPDecimalNumberHandler__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), (self.isa.method_msgSend["roundingMode"] || _objj_forward)(self, (self.isa.method_dtable["roundingMode"], "roundingMode")), CPDecimalNumberHandlerRoundingModeKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), (self.isa.method_msgSend["scale"] || _objj_forward)(self, (self.isa.method_dtable["scale"], "scale")), CPDecimalNumberHandlerScaleKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._raiseOnExactness, CPDecimalNumberHandlerRaiseOnExactKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._raiseOnOverflow, CPDecimalNumberHandlerRaiseOnOverflowKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._raiseOnUnderflow, CPDecimalNumberHandlerRaiseOnUnderflowKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._raiseOnDivideByZero, CPDecimalNumberHandlerDivideByZeroKey));
}

,["void","CPCoder"])]);
}

{var the_class = objj_allocateClassPair(CPNumber, "CPDecimalNumber"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_data", "CPDecimal")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPDecimalNumber__init(self, _cmd)
{
    return (self.isa.method_msgSend["initWithDecimal:"] || _objj_forward)(self, (self.isa.method_dtable["initWithDecimal:"], "initWithDecimal:"), CPDecimalMakeNaN());
}

,["id"]), new objj_method(sel_getUid("initWithDecimal:"), function $CPDecimalNumber__initWithDecimal_(self, _cmd, dcm)
{
    if (self = (objj_getClass("CPDecimalNumber").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
        self._data = CPDecimalCopy(dcm);
    return self;
}

,["id","CPDecimal"]), new objj_method(sel_getUid("initWithMantissa:exponent:isNegative:"), function $CPDecimalNumber__initWithMantissa_exponent_isNegative_(self, _cmd, mantissa, exponent, flag)
{
    if (self = (self == null ? null : (self.isa.method_msgSend["init"] || _objj_forward)(self, (self.isa.method_dtable["init"], "init"))))
    {
        if (flag)
            mantissa *= -1;
        self._data = CPDecimalMakeWithParts(mantissa, exponent);
    }
    return self;
}

,["id","unsigned long long","short","BOOL"]), new objj_method(sel_getUid("initWithString:"), function $CPDecimalNumber__initWithString_(self, _cmd, numberValue)
{
    return (self.isa.method_msgSend["initWithString:locale:"] || _objj_forward)(self, (self.isa.method_dtable["initWithString:locale:"], self.isa.method_dtable["initWithString:locale:"], "initWithString:locale:"), numberValue, nil);
}

,["id","CPString"]), new objj_method(sel_getUid("initWithString:locale:"), function $CPDecimalNumber__initWithString_locale_(self, _cmd, numberValue, locale)
{
    if (self = (self == null ? null : (self.isa.method_msgSend["init"] || _objj_forward)(self, (self.isa.method_dtable["init"], "init"))))
    {
        self._data = CPDecimalMakeWithString(numberValue, locale);
    }
    return self;
}

,["id","CPString","CPDictionary"]), new objj_method(sel_getUid("UID"), function $CPDecimalNumber__UID(self, _cmd)
{
    var UID = CPDecimalNumberUIDs.valueForKey(self);
    if (!UID)
    {
        UID = objj_generateObjectUID();
        CPDecimalNumberUIDs.setValueForKey(self, UID);
    }
    return UID + "";
}

,["CPString"]), new objj_method(sel_getUid("decimalNumberByAdding:"), function $CPDecimalNumber__decimalNumberByAdding_(self, _cmd, decimalNumber)
{
    return (self.isa.method_msgSend["decimalNumberByAdding:withBehavior:"] || _objj_forward)(self, (self.isa.method_dtable["decimalNumberByAdding:withBehavior:"], self.isa.method_dtable["decimalNumberByAdding:withBehavior:"], "decimalNumberByAdding:withBehavior:"), decimalNumber, (CPDecimalNumber.isa.method_msgSend["defaultBehavior"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["defaultBehavior"], "defaultBehavior")));
}

,["CPDecimalNumber","CPDecimalNumber"]), new objj_method(sel_getUid("decimalNumberByAdding:withBehavior:"), function $CPDecimalNumber__decimalNumberByAdding_withBehavior_(self, _cmd, decimalNumber, behavior)
{
    var result = CPDecimalMakeZero(),
        error = CPDecimalAdd(result, (self.isa.method_msgSend["decimalValue"] || _objj_forward)(self, (self.isa.method_dtable["decimalValue"], "decimalValue")), (decimalNumber == null ? null : (decimalNumber.isa.method_msgSend["decimalValue"] || _objj_forward)(decimalNumber, (decimalNumber.isa.method_dtable["decimalValue"], "decimalValue"))), (behavior == null ? null : (behavior.isa.method_msgSend["roundingMode"] || _objj_forward)(behavior, (behavior.isa.method_dtable["roundingMode"], "roundingMode"))));
    if (error > CPCalculationNoError)
    {
        var res = (behavior == null ? null : (behavior.isa.method_msgSend["exceptionDuringOperation:error:leftOperand:rightOperand:"] || _objj_forward)(behavior, (behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], "exceptionDuringOperation:error:leftOperand:rightOperand:"), _cmd, error, self, decimalNumber));
        if (res != nil)
            return res;
    }
    return (CPDecimalNumber.isa.method_msgSend["decimalNumberWithDecimal:"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["decimalNumberWithDecimal:"], "decimalNumberWithDecimal:"), result);
}

,["CPDecimalNumber","CPDecimalNumber","id"]), new objj_method(sel_getUid("decimalNumberBySubtracting:"), function $CPDecimalNumber__decimalNumberBySubtracting_(self, _cmd, decimalNumber)
{
    return (self.isa.method_msgSend["decimalNumberBySubtracting:withBehavior:"] || _objj_forward)(self, (self.isa.method_dtable["decimalNumberBySubtracting:withBehavior:"], self.isa.method_dtable["decimalNumberBySubtracting:withBehavior:"], "decimalNumberBySubtracting:withBehavior:"), decimalNumber, (CPDecimalNumber.isa.method_msgSend["defaultBehavior"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["defaultBehavior"], "defaultBehavior")));
}

,["CPDecimalNumber","CPDecimalNumber"]), new objj_method(sel_getUid("decimalNumberBySubtracting:withBehavior:"), function $CPDecimalNumber__decimalNumberBySubtracting_withBehavior_(self, _cmd, decimalNumber, behavior)
{
    var result = CPDecimalMakeZero(),
        error = CPDecimalSubtract(result, (self.isa.method_msgSend["decimalValue"] || _objj_forward)(self, (self.isa.method_dtable["decimalValue"], "decimalValue")), (decimalNumber == null ? null : (decimalNumber.isa.method_msgSend["decimalValue"] || _objj_forward)(decimalNumber, (decimalNumber.isa.method_dtable["decimalValue"], "decimalValue"))), (behavior == null ? null : (behavior.isa.method_msgSend["roundingMode"] || _objj_forward)(behavior, (behavior.isa.method_dtable["roundingMode"], "roundingMode"))));
    if (error > CPCalculationNoError)
    {
        var res = (behavior == null ? null : (behavior.isa.method_msgSend["exceptionDuringOperation:error:leftOperand:rightOperand:"] || _objj_forward)(behavior, (behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], "exceptionDuringOperation:error:leftOperand:rightOperand:"), _cmd, error, self, decimalNumber));
        if (res != nil)
            return res;
    }
    return (CPDecimalNumber.isa.method_msgSend["decimalNumberWithDecimal:"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["decimalNumberWithDecimal:"], "decimalNumberWithDecimal:"), result);
}

,["CPDecimalNumber","CPDecimalNumber","id"]), new objj_method(sel_getUid("decimalNumberByDividingBy:"), function $CPDecimalNumber__decimalNumberByDividingBy_(self, _cmd, decimalNumber)
{
    return (self.isa.method_msgSend["decimalNumberByDividingBy:withBehavior:"] || _objj_forward)(self, (self.isa.method_dtable["decimalNumberByDividingBy:withBehavior:"], self.isa.method_dtable["decimalNumberByDividingBy:withBehavior:"], "decimalNumberByDividingBy:withBehavior:"), decimalNumber, (CPDecimalNumber.isa.method_msgSend["defaultBehavior"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["defaultBehavior"], "defaultBehavior")));
}

,["CPDecimalNumber","CPDecimalNumber"]), new objj_method(sel_getUid("decimalNumberByDividingBy:withBehavior:"), function $CPDecimalNumber__decimalNumberByDividingBy_withBehavior_(self, _cmd, decimalNumber, behavior)
{
    var result = CPDecimalMakeZero(),
        error = CPDecimalDivide(result, (self.isa.method_msgSend["decimalValue"] || _objj_forward)(self, (self.isa.method_dtable["decimalValue"], "decimalValue")), (decimalNumber == null ? null : (decimalNumber.isa.method_msgSend["decimalValue"] || _objj_forward)(decimalNumber, (decimalNumber.isa.method_dtable["decimalValue"], "decimalValue"))), (behavior == null ? null : (behavior.isa.method_msgSend["roundingMode"] || _objj_forward)(behavior, (behavior.isa.method_dtable["roundingMode"], "roundingMode"))));
    if (error > CPCalculationNoError)
    {
        var res = (behavior == null ? null : (behavior.isa.method_msgSend["exceptionDuringOperation:error:leftOperand:rightOperand:"] || _objj_forward)(behavior, (behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], "exceptionDuringOperation:error:leftOperand:rightOperand:"), _cmd, error, self, decimalNumber));
        if (res != nil)
            return res;
    }
    return (CPDecimalNumber.isa.method_msgSend["decimalNumberWithDecimal:"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["decimalNumberWithDecimal:"], "decimalNumberWithDecimal:"), result);
}

,["CPDecimalNumber","CPDecimalNumber","id"]), new objj_method(sel_getUid("decimalNumberByMultiplyingBy:"), function $CPDecimalNumber__decimalNumberByMultiplyingBy_(self, _cmd, decimalNumber)
{
    return (self.isa.method_msgSend["decimalNumberByMultiplyingBy:withBehavior:"] || _objj_forward)(self, (self.isa.method_dtable["decimalNumberByMultiplyingBy:withBehavior:"], self.isa.method_dtable["decimalNumberByMultiplyingBy:withBehavior:"], "decimalNumberByMultiplyingBy:withBehavior:"), decimalNumber, (CPDecimalNumber.isa.method_msgSend["defaultBehavior"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["defaultBehavior"], "defaultBehavior")));
}

,["CPDecimalNumber","CPDecimalNumber"]), new objj_method(sel_getUid("decimalNumberByMultiplyingBy:withBehavior:"), function $CPDecimalNumber__decimalNumberByMultiplyingBy_withBehavior_(self, _cmd, decimalNumber, behavior)
{
    var result = CPDecimalMakeZero(),
        error = CPDecimalMultiply(result, (self.isa.method_msgSend["decimalValue"] || _objj_forward)(self, (self.isa.method_dtable["decimalValue"], "decimalValue")), (decimalNumber == null ? null : (decimalNumber.isa.method_msgSend["decimalValue"] || _objj_forward)(decimalNumber, (decimalNumber.isa.method_dtable["decimalValue"], "decimalValue"))), (behavior == null ? null : (behavior.isa.method_msgSend["roundingMode"] || _objj_forward)(behavior, (behavior.isa.method_dtable["roundingMode"], "roundingMode"))));
    if (error > CPCalculationNoError)
    {
        var res = (behavior == null ? null : (behavior.isa.method_msgSend["exceptionDuringOperation:error:leftOperand:rightOperand:"] || _objj_forward)(behavior, (behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], "exceptionDuringOperation:error:leftOperand:rightOperand:"), _cmd, error, self, decimalNumber));
        if (res != nil)
            return res;
    }
    return (CPDecimalNumber.isa.method_msgSend["decimalNumberWithDecimal:"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["decimalNumberWithDecimal:"], "decimalNumberWithDecimal:"), result);
}

,["CPDecimalNumber","CPDecimalNumber","id"]), new objj_method(sel_getUid("decimalNumberByMultiplyingByPowerOf10:"), function $CPDecimalNumber__decimalNumberByMultiplyingByPowerOf10_(self, _cmd, power)
{
    return (self.isa.method_msgSend["decimalNumberByMultiplyingByPowerOf10:withBehavior:"] || _objj_forward)(self, (self.isa.method_dtable["decimalNumberByMultiplyingByPowerOf10:withBehavior:"], self.isa.method_dtable["decimalNumberByMultiplyingByPowerOf10:withBehavior:"], "decimalNumberByMultiplyingByPowerOf10:withBehavior:"), power, (CPDecimalNumber.isa.method_msgSend["defaultBehavior"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["defaultBehavior"], "defaultBehavior")));
}

,["CPDecimalNumber","short"]), new objj_method(sel_getUid("decimalNumberByMultiplyingByPowerOf10:withBehavior:"), function $CPDecimalNumber__decimalNumberByMultiplyingByPowerOf10_withBehavior_(self, _cmd, power, behavior)
{
    var result = CPDecimalMakeZero(),
        error = CPDecimalMultiplyByPowerOf10(result, (self.isa.method_msgSend["decimalValue"] || _objj_forward)(self, (self.isa.method_dtable["decimalValue"], "decimalValue")), power, (behavior == null ? null : (behavior.isa.method_msgSend["roundingMode"] || _objj_forward)(behavior, (behavior.isa.method_dtable["roundingMode"], "roundingMode"))));
    if (error > CPCalculationNoError)
    {
        var res = (behavior == null ? null : (behavior.isa.method_msgSend["exceptionDuringOperation:error:leftOperand:rightOperand:"] || _objj_forward)(behavior, (behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], "exceptionDuringOperation:error:leftOperand:rightOperand:"), _cmd, error, self, (CPDecimalNumber.isa.method_msgSend["decimalNumberWithString:"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["decimalNumberWithString:"], "decimalNumberWithString:"), power.toString())));
        if (res != nil)
            return res;
    }
    return (CPDecimalNumber.isa.method_msgSend["decimalNumberWithDecimal:"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["decimalNumberWithDecimal:"], "decimalNumberWithDecimal:"), result);
}

,["CPDecimalNumber","short","id"]), new objj_method(sel_getUid("decimalNumberByRaisingToPower:"), function $CPDecimalNumber__decimalNumberByRaisingToPower_(self, _cmd, power)
{
    return (self.isa.method_msgSend["decimalNumberByRaisingToPower:withBehavior:"] || _objj_forward)(self, (self.isa.method_dtable["decimalNumberByRaisingToPower:withBehavior:"], self.isa.method_dtable["decimalNumberByRaisingToPower:withBehavior:"], "decimalNumberByRaisingToPower:withBehavior:"), power, (CPDecimalNumber.isa.method_msgSend["defaultBehavior"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["defaultBehavior"], "defaultBehavior")));
}

,["CPDecimalNumber","unsigned"]), new objj_method(sel_getUid("decimalNumberByRaisingToPower:withBehavior:"), function $CPDecimalNumber__decimalNumberByRaisingToPower_withBehavior_(self, _cmd, power, behavior)
{
    if (power < 0)
        return (behavior == null ? null : (behavior.isa.method_msgSend["exceptionDuringOperation:error:leftOperand:rightOperand:"] || _objj_forward)(behavior, (behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], "exceptionDuringOperation:error:leftOperand:rightOperand:"), _cmd, -1, self, (CPDecimalNumber.isa.method_msgSend["decimalNumberWithString:"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["decimalNumberWithString:"], "decimalNumberWithString:"), power.toString())));
    var result = CPDecimalMakeZero(),
        error = CPDecimalPower(result, (self.isa.method_msgSend["decimalValue"] || _objj_forward)(self, (self.isa.method_dtable["decimalValue"], "decimalValue")), power, (behavior == null ? null : (behavior.isa.method_msgSend["roundingMode"] || _objj_forward)(behavior, (behavior.isa.method_dtable["roundingMode"], "roundingMode"))));
    if (error > CPCalculationNoError)
    {
        var res = (behavior == null ? null : (behavior.isa.method_msgSend["exceptionDuringOperation:error:leftOperand:rightOperand:"] || _objj_forward)(behavior, (behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], behavior.isa.method_dtable["exceptionDuringOperation:error:leftOperand:rightOperand:"], "exceptionDuringOperation:error:leftOperand:rightOperand:"), _cmd, error, self, (CPDecimalNumber.isa.method_msgSend["decimalNumberWithString:"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["decimalNumberWithString:"], "decimalNumberWithString:"), power.toString())));
        if (res != nil)
            return res;
    }
    return (CPDecimalNumber.isa.method_msgSend["decimalNumberWithDecimal:"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["decimalNumberWithDecimal:"], "decimalNumberWithDecimal:"), result);
}

,["CPDecimalNumber","unsigned","id"]), new objj_method(sel_getUid("decimalNumberByRoundingAccordingToBehavior:"), function $CPDecimalNumber__decimalNumberByRoundingAccordingToBehavior_(self, _cmd, behavior)
{
    var result = CPDecimalMakeZero();
    CPDecimalRound(result, (self.isa.method_msgSend["decimalValue"] || _objj_forward)(self, (self.isa.method_dtable["decimalValue"], "decimalValue")), (behavior == null ? null : (behavior.isa.method_msgSend["scale"] || _objj_forward)(behavior, (behavior.isa.method_dtable["scale"], "scale"))), (behavior == null ? null : (behavior.isa.method_msgSend["roundingMode"] || _objj_forward)(behavior, (behavior.isa.method_dtable["roundingMode"], "roundingMode"))));
    return (CPDecimalNumber.isa.method_msgSend["decimalNumberWithDecimal:"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["decimalNumberWithDecimal:"], "decimalNumberWithDecimal:"), result);
}

,["CPDecimalNumber","id"]), new objj_method(sel_getUid("compare:"), function $CPDecimalNumber__compare_(self, _cmd, aNumber)
{
    if (!(aNumber == null ? null : (aNumber.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(aNumber, (aNumber.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPDecimalNumber.isa.method_msgSend["class"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["class"], "class")))))
        aNumber = (CPDecimalNumber.isa.method_msgSend["decimalNumberWithString:"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["decimalNumberWithString:"], "decimalNumberWithString:"), aNumber.toString());
    return CPDecimalCompare((self.isa.method_msgSend["decimalValue"] || _objj_forward)(self, (self.isa.method_dtable["decimalValue"], "decimalValue")), (aNumber == null ? null : (aNumber.isa.method_msgSend["decimalValue"] || _objj_forward)(aNumber, (aNumber.isa.method_dtable["decimalValue"], "decimalValue"))));
}

,["CPComparisonResult","CPNumber"]), new objj_method(sel_getUid("objCType"), function $CPDecimalNumber__objCType(self, _cmd)
{
    return "d";
}

,["CPString"]), new objj_method(sel_getUid("description"), function $CPDecimalNumber__description(self, _cmd)
{
    return (self.isa.method_msgSend["descriptionWithLocale:"] || _objj_forward)(self, (self.isa.method_dtable["descriptionWithLocale:"], "descriptionWithLocale:"), nil);
}

,["CPString"]), new objj_method(sel_getUid("descriptionWithLocale:"), function $CPDecimalNumber__descriptionWithLocale_(self, _cmd, locale)
{
    return CPDecimalString(self._data, locale);
}

,["CPString","CPDictionary"]), new objj_method(sel_getUid("stringValue"), function $CPDecimalNumber__stringValue(self, _cmd)
{
    return (self.isa.method_msgSend["description"] || _objj_forward)(self, (self.isa.method_dtable["description"], "description"));
}

,["CPString"]), new objj_method(sel_getUid("decimalValue"), function $CPDecimalNumber__decimalValue(self, _cmd)
{
    return CPDecimalCopy(self._data);
}

,["CPDecimal"]), new objj_method(sel_getUid("doubleValue"), function $CPDecimalNumber__doubleValue(self, _cmd)
{
    return parseFloat((self.isa.method_msgSend["stringValue"] || _objj_forward)(self, (self.isa.method_dtable["stringValue"], "stringValue")));
}

,["double"]), new objj_method(sel_getUid("boolValue"), function $CPDecimalNumber__boolValue(self, _cmd)
{
    return CPDecimalIsZero(self._data) ? NO : YES;
}

,["BOOL"]), new objj_method(sel_getUid("charValue"), function $CPDecimalNumber__charValue(self, _cmd)
{
    return parseInt((self.isa.method_msgSend["stringValue"] || _objj_forward)(self, (self.isa.method_dtable["stringValue"], "stringValue")));
}

,["char"]), new objj_method(sel_getUid("floatValue"), function $CPDecimalNumber__floatValue(self, _cmd)
{
    return parseFloat((self.isa.method_msgSend["stringValue"] || _objj_forward)(self, (self.isa.method_dtable["stringValue"], "stringValue")));
}

,["float"]), new objj_method(sel_getUid("intValue"), function $CPDecimalNumber__intValue(self, _cmd)
{
    return parseInt((self.isa.method_msgSend["stringValue"] || _objj_forward)(self, (self.isa.method_dtable["stringValue"], "stringValue")));
}

,["int"]), new objj_method(sel_getUid("longLongValue"), function $CPDecimalNumber__longLongValue(self, _cmd)
{
    return parseInt((self.isa.method_msgSend["stringValue"] || _objj_forward)(self, (self.isa.method_dtable["stringValue"], "stringValue")));
}

,["long long"]), new objj_method(sel_getUid("longValue"), function $CPDecimalNumber__longValue(self, _cmd)
{
    return parseInt((self.isa.method_msgSend["stringValue"] || _objj_forward)(self, (self.isa.method_dtable["stringValue"], "stringValue")));
}

,["long"]), new objj_method(sel_getUid("shortValue"), function $CPDecimalNumber__shortValue(self, _cmd)
{
    return parseInt((self.isa.method_msgSend["stringValue"] || _objj_forward)(self, (self.isa.method_dtable["stringValue"], "stringValue")));
}

,["short"]), new objj_method(sel_getUid("unsignedCharValue"), function $CPDecimalNumber__unsignedCharValue(self, _cmd)
{
    return parseInt((self.isa.method_msgSend["stringValue"] || _objj_forward)(self, (self.isa.method_dtable["stringValue"], "stringValue")));
}

,["unsigned char"]), new objj_method(sel_getUid("unsignedIntValue"), function $CPDecimalNumber__unsignedIntValue(self, _cmd)
{
    return parseInt((self.isa.method_msgSend["stringValue"] || _objj_forward)(self, (self.isa.method_dtable["stringValue"], "stringValue")));
}

,["unsigned int"]), new objj_method(sel_getUid("unsignedLongValue"), function $CPDecimalNumber__unsignedLongValue(self, _cmd)
{
    return parseInt((self.isa.method_msgSend["stringValue"] || _objj_forward)(self, (self.isa.method_dtable["stringValue"], "stringValue")));
}

,["unsigned long"]), new objj_method(sel_getUid("unsignedShortValue"), function $CPDecimalNumber__unsignedShortValue(self, _cmd)
{
    return parseInt((self.isa.method_msgSend["stringValue"] || _objj_forward)(self, (self.isa.method_dtable["stringValue"], "stringValue")));
}

,["unsigned short"]), new objj_method(sel_getUid("isEqualToNumber:"), function $CPDecimalNumber__isEqualToNumber_(self, _cmd, aNumber)
{
    return CPDecimalCompare(CPDecimalMakeWithString(aNumber.toString(), nil), self._data) == CPOrderedSame ? YES : NO;
}

,["BOOL","CPNumber"]), new objj_method(sel_getUid("initWithBool:"), function $CPDecimalNumber__initWithBool_(self, _cmd, value)
{
    if (self = (self == null ? null : (self.isa.method_msgSend["init"] || _objj_forward)(self, (self.isa.method_dtable["init"], "init"))))
        self._data = CPDecimalMakeWithParts(value ? 1 : 0, 0);
    return self;
}

,["id","BOOL"]), new objj_method(sel_getUid("initWithChar:"), function $CPDecimalNumber__initWithChar_(self, _cmd, value)
{
    return (self.isa.method_msgSend["_initWithJSNumber:"] || _objj_forward)(self, (self.isa.method_dtable["_initWithJSNumber:"], "_initWithJSNumber:"), value);
}

,["id","char"]), new objj_method(sel_getUid("initWithDouble:"), function $CPDecimalNumber__initWithDouble_(self, _cmd, value)
{
    return (self.isa.method_msgSend["_initWithJSNumber:"] || _objj_forward)(self, (self.isa.method_dtable["_initWithJSNumber:"], "_initWithJSNumber:"), value);
}

,["id","double"]), new objj_method(sel_getUid("initWithFloat:"), function $CPDecimalNumber__initWithFloat_(self, _cmd, value)
{
    return (self.isa.method_msgSend["_initWithJSNumber:"] || _objj_forward)(self, (self.isa.method_dtable["_initWithJSNumber:"], "_initWithJSNumber:"), value);
}

,["id","float"]), new objj_method(sel_getUid("initWithInt:"), function $CPDecimalNumber__initWithInt_(self, _cmd, value)
{
    return (self.isa.method_msgSend["_initWithJSNumber:"] || _objj_forward)(self, (self.isa.method_dtable["_initWithJSNumber:"], "_initWithJSNumber:"), value);
}

,["id","int"]), new objj_method(sel_getUid("initWithLong:"), function $CPDecimalNumber__initWithLong_(self, _cmd, value)
{
    return (self.isa.method_msgSend["_initWithJSNumber:"] || _objj_forward)(self, (self.isa.method_dtable["_initWithJSNumber:"], "_initWithJSNumber:"), value);
}

,["id","long"]), new objj_method(sel_getUid("initWithLongLong:"), function $CPDecimalNumber__initWithLongLong_(self, _cmd, value)
{
    return (self.isa.method_msgSend["_initWithJSNumber:"] || _objj_forward)(self, (self.isa.method_dtable["_initWithJSNumber:"], "_initWithJSNumber:"), value);
}

,["id","long long"]), new objj_method(sel_getUid("initWithShort:"), function $CPDecimalNumber__initWithShort_(self, _cmd, value)
{
    return (self.isa.method_msgSend["_initWithJSNumber:"] || _objj_forward)(self, (self.isa.method_dtable["_initWithJSNumber:"], "_initWithJSNumber:"), value);
}

,["id","short"]), new objj_method(sel_getUid("initWithUnsignedChar:"), function $CPDecimalNumber__initWithUnsignedChar_(self, _cmd, value)
{
    return (self.isa.method_msgSend["_initWithJSNumber:"] || _objj_forward)(self, (self.isa.method_dtable["_initWithJSNumber:"], "_initWithJSNumber:"), value);
}

,["id","unsigned char"]), new objj_method(sel_getUid("initWithUnsignedInt:"), function $CPDecimalNumber__initWithUnsignedInt_(self, _cmd, value)
{
    return (self.isa.method_msgSend["_initWithJSNumber:"] || _objj_forward)(self, (self.isa.method_dtable["_initWithJSNumber:"], "_initWithJSNumber:"), value);
}

,["id","unsigned"]), new objj_method(sel_getUid("initWithUnsignedLong:"), function $CPDecimalNumber__initWithUnsignedLong_(self, _cmd, value)
{
    return (self.isa.method_msgSend["_initWithJSNumber:"] || _objj_forward)(self, (self.isa.method_dtable["_initWithJSNumber:"], "_initWithJSNumber:"), value);
}

,["id","unsigned long"]), new objj_method(sel_getUid("initWithUnsignedLongLong:"), function $CPDecimalNumber__initWithUnsignedLongLong_(self, _cmd, value)
{
    return (self.isa.method_msgSend["_initWithJSNumber:"] || _objj_forward)(self, (self.isa.method_dtable["_initWithJSNumber:"], "_initWithJSNumber:"), value);
}

,["id","unsigned long long"]), new objj_method(sel_getUid("initWithUnsignedShort:"), function $CPDecimalNumber__initWithUnsignedShort_(self, _cmd, value)
{
    return (self.isa.method_msgSend["_initWithJSNumber:"] || _objj_forward)(self, (self.isa.method_dtable["_initWithJSNumber:"], "_initWithJSNumber:"), value);
}

,["id","unsigned short"]), new objj_method(sel_getUid("_initWithJSNumber:"), function $CPDecimalNumber___initWithJSNumber_(self, _cmd, value)
{
    if (self = (self == null ? null : (self.isa.method_msgSend["init"] || _objj_forward)(self, (self.isa.method_dtable["init"], "init"))))
        self._data = CPDecimalMakeWithString(value.toString(), nil);
    return self;
}

,["id","id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPDecimalNumber__alloc(self, _cmd)
{
    return class_createInstance(self);
}

,["id"]), new objj_method(sel_getUid("decimalNumberWithDecimal:"), function $CPDecimalNumber__decimalNumberWithDecimal_(self, _cmd, dcm)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithDecimal:"] || _objj_forward)(___r1, "initWithDecimal:", dcm));
    var ___r1;
}

,["CPDecimalNumber","CPDecimal"]), new objj_method(sel_getUid("decimalNumberWithMantissa:exponent:isNegative:"), function $CPDecimalNumber__decimalNumberWithMantissa_exponent_isNegative_(self, _cmd, mantissa, exponent, flag)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithMantissa:exponent:isNegative:"] || _objj_forward)(___r1, "initWithMantissa:exponent:isNegative:", mantissa, exponent, flag));
    var ___r1;
}

,["CPDecimalNumber","unsigned long long","short","BOOL"]), new objj_method(sel_getUid("decimalNumberWithString:"), function $CPDecimalNumber__decimalNumberWithString_(self, _cmd, numberValue)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithString:"] || _objj_forward)(___r1, "initWithString:", numberValue));
    var ___r1;
}

,["CPDecimalNumber","CPString"]), new objj_method(sel_getUid("decimalNumberWithString:locale:"), function $CPDecimalNumber__decimalNumberWithString_locale_(self, _cmd, numberValue, locale)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithString:locale:"] || _objj_forward)(___r1, "initWithString:locale:", numberValue, locale));
    var ___r1;
}

,["CPDecimalNumber","CPString","CPDictionary"]), new objj_method(sel_getUid("defaultBehavior"), function $CPDecimalNumber__defaultBehavior(self, _cmd)
{
    return (CPDecimalNumberHandler.isa.method_msgSend["defaultDecimalNumberHandler"] || _objj_forward)(CPDecimalNumberHandler, (CPDecimalNumberHandler.isa.method_dtable["defaultDecimalNumberHandler"], "defaultDecimalNumberHandler"));
}

,["id"]), new objj_method(sel_getUid("setDefaultBehavior:"), function $CPDecimalNumber__setDefaultBehavior_(self, _cmd, behavior)
{
    CPDefaultDcmHandler = behavior;
}

,["void","id"]), new objj_method(sel_getUid("maximumDecimalNumber"), function $CPDecimalNumber__maximumDecimalNumber(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithDecimal:"] || _objj_forward)(___r1, "initWithDecimal:", _CPDecimalMakeMaximum()));
    var ___r1;
}

,["CPDecimalNumber"]), new objj_method(sel_getUid("minimumDecimalNumber"), function $CPDecimalNumber__minimumDecimalNumber(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithDecimal:"] || _objj_forward)(___r1, "initWithDecimal:", _CPDecimalMakeMinimum()));
    var ___r1;
}

,["CPDecimalNumber"]), new objj_method(sel_getUid("notANumber"), function $CPDecimalNumber__notANumber(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithDecimal:"] || _objj_forward)(___r1, "initWithDecimal:", CPDecimalMakeNaN()));
    var ___r1;
}

,["CPDecimalNumber"]), new objj_method(sel_getUid("zero"), function $CPDecimalNumber__zero(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithDecimal:"] || _objj_forward)(___r1, "initWithDecimal:", CPDecimalMakeZero()));
    var ___r1;
}

,["CPDecimalNumber"]), new objj_method(sel_getUid("one"), function $CPDecimalNumber__one(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithDecimal:"] || _objj_forward)(___r1, "initWithDecimal:", CPDecimalMakeOne()));
    var ___r1;
}

,["CPDecimalNumber"]), new objj_method(sel_getUid("numberWithBool:"), function $CPDecimalNumber__numberWithBool_(self, _cmd, aBoolean)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithBool:"] || _objj_forward)(___r1, "initWithBool:", aBoolean));
    var ___r1;
}

,["id","BOOL"]), new objj_method(sel_getUid("numberWithChar:"), function $CPDecimalNumber__numberWithChar_(self, _cmd, aChar)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithChar:"] || _objj_forward)(___r1, "initWithChar:", aChar));
    var ___r1;
}

,["id","char"]), new objj_method(sel_getUid("numberWithDouble:"), function $CPDecimalNumber__numberWithDouble_(self, _cmd, aDouble)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithDouble:"] || _objj_forward)(___r1, "initWithDouble:", aDouble));
    var ___r1;
}

,["id","double"]), new objj_method(sel_getUid("numberWithFloat:"), function $CPDecimalNumber__numberWithFloat_(self, _cmd, aFloat)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithFloat:"] || _objj_forward)(___r1, "initWithFloat:", aFloat));
    var ___r1;
}

,["id","float"]), new objj_method(sel_getUid("numberWithInt:"), function $CPDecimalNumber__numberWithInt_(self, _cmd, anInt)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithInt:"] || _objj_forward)(___r1, "initWithInt:", anInt));
    var ___r1;
}

,["id","int"]), new objj_method(sel_getUid("numberWithLong:"), function $CPDecimalNumber__numberWithLong_(self, _cmd, aLong)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithLong:"] || _objj_forward)(___r1, "initWithLong:", aLong));
    var ___r1;
}

,["id","long"]), new objj_method(sel_getUid("numberWithLongLong:"), function $CPDecimalNumber__numberWithLongLong_(self, _cmd, aLongLong)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithLongLong:"] || _objj_forward)(___r1, "initWithLongLong:", aLongLong));
    var ___r1;
}

,["id","long long"]), new objj_method(sel_getUid("numberWithShort:"), function $CPDecimalNumber__numberWithShort_(self, _cmd, aShort)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithShort:"] || _objj_forward)(___r1, "initWithShort:", aShort));
    var ___r1;
}

,["id","short"]), new objj_method(sel_getUid("numberWithUnsignedChar:"), function $CPDecimalNumber__numberWithUnsignedChar_(self, _cmd, aChar)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithUnsignedChar:"] || _objj_forward)(___r1, "initWithUnsignedChar:", aChar));
    var ___r1;
}

,["id","unsigned char"]), new objj_method(sel_getUid("numberWithUnsignedInt:"), function $CPDecimalNumber__numberWithUnsignedInt_(self, _cmd, anUnsignedInt)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithUnsignedInt:"] || _objj_forward)(___r1, "initWithUnsignedInt:", anUnsignedInt));
    var ___r1;
}

,["id","unsigned"]), new objj_method(sel_getUid("numberWithUnsignedLong:"), function $CPDecimalNumber__numberWithUnsignedLong_(self, _cmd, anUnsignedLong)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithUnsignedLong:"] || _objj_forward)(___r1, "initWithUnsignedLong:", anUnsignedLong));
    var ___r1;
}

,["id","unsigned long"]), new objj_method(sel_getUid("numberWithUnsignedLongLong:"), function $CPDecimalNumber__numberWithUnsignedLongLong_(self, _cmd, anUnsignedLongLong)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithUnsignedLongLong:"] || _objj_forward)(___r1, "initWithUnsignedLongLong:", anUnsignedLongLong));
    var ___r1;
}

,["id","unsigned long"]), new objj_method(sel_getUid("numberWithUnsignedShort:"), function $CPDecimalNumber__numberWithUnsignedShort_(self, _cmd, anUnsignedShort)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithUnsignedShort:"] || _objj_forward)(___r1, "initWithUnsignedShort:", anUnsignedShort));
    var ___r1;
}

,["id","unsigned short"])]);
}
var CPDecimalNumberDecimalExponent = "CPDecimalNumberDecimalExponent",
    CPDecimalNumberDecimalIsNegative = "CPDecimalNumberDecimalIsNegative",
    CPDecimalNumberDecimalIsCompact = "CPDecimalNumberDecimalIsCompact",
    CPDecimalNumberDecimalIsNaN = "CPDecimalNumberDecimalIsNaN",
    CPDecimalNumberDecimalMantissa = "CPDecimalNumberDecimalMantissa";
{
var the_class = objj_getClass("CPDecimalNumber")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPDecimalNumber\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPDecimalNumber__initWithCoder_(self, _cmd, aCoder)
{
    if (self)
    {
        var dcm = CPDecimalMakeZero();
        dcm._exponent = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPDecimalNumberDecimalExponent));
        dcm._isNegative = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPDecimalNumberDecimalIsNegative));
        dcm._isCompact = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPDecimalNumberDecimalIsCompact));
        dcm._isNaN = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPDecimalNumberDecimalIsNaN));
        dcm._mantissa = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPDecimalNumberDecimalMantissa));
        (self.isa.method_msgSend["initWithDecimal:"] || _objj_forward)(self, (self.isa.method_dtable["initWithDecimal:"], "initWithDecimal:"), dcm);
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPDecimalNumber__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._data._exponent, CPDecimalNumberDecimalExponent));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._data._isNegative, CPDecimalNumberDecimalIsNegative));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._data._isCompact, CPDecimalNumberDecimalIsCompact));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._data._isNaN, CPDecimalNumberDecimalIsNaN));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._data._mantissa, CPDecimalNumberDecimalMantissa));
}

,["void","CPCoder"])]);
}
p;19;CPKeyedUnarchiver.jt;55730;@STATIC;1.0;i;9;CPArray.ji;9;CPCoder.ji;8;CPData.ji;14;CPDictionary.ji;13;CPException.ji;17;CPKeyedArchiver.ji;8;CPNull.ji;10;CPNumber.ji;10;CPString.jS;35332;;20231;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPCoder.j", YES);objj_executeFile("CPData.j", YES);objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPKeyedArchiver.j", YES);objj_executeFile("CPNull.j", YES);objj_executeFile("CPNumber.j", YES);objj_executeFile("CPString.j", YES);CPInvalidUnarchiveOperationException = "CPInvalidUnarchiveOperationException";
var _CPKeyedUnarchiverCannotDecodeObjectOfClassNameOriginalClassesSelector = 1 << 0,
    _CPKeyedUnarchiverDidDecodeObjectSelector = 1 << 1,
    _CPKeyedUnarchiverWillReplaceObjectWithObjectSelector = 1 << 2,
    _CPKeyedUnarchiverWillFinishSelector = 1 << 3,
    _CPKeyedUnarchiverDidFinishSelector = 1 << 4,
    CPKeyedUnarchiverDelegate_unarchiver_cannotDecodeObjectOfClassName_originalClasses_ = 1 << 5;
var _CPKeyedArchiverNullString = "$null",
    _CPKeyedArchiverUIDKey = "CP$UID",
    _CPKeyedArchiverTopKey = "$top",
    _CPKeyedArchiverObjectsKey = "$objects",
    _CPKeyedArchiverArchiverKey = "$archiver",
    _CPKeyedArchiverVersionKey = "$version",
    _CPKeyedArchiverClassNameKey = "$classname",
    _CPKeyedArchiverClassesKey = "$classes",
    _CPKeyedArchiverClassKey = "$class";
var CPArrayClass = Nil,
    CPMutableArrayClass = Nil,
    CPStringClass = Nil,
    CPDictionaryClass = Nil,
    CPMutableDictionaryClass = Nil,
    CPNumberClass = Nil,
    CPDataClass = Nil,
    _CPKeyedArchiverValueClass = Nil;

{var the_class = objj_allocateClassPair(CPCoder, "CPKeyedUnarchiver"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_delegate", "id"), new objj_ivar("_delegateSelectors", "unsigned"), new objj_ivar("_data", "CPData"), new objj_ivar("_replacementClasses", "CPDictionary"), new objj_ivar("_objects", "CPArray"), new objj_ivar("_archive", "CPDictionary"), new objj_ivar("_plistObject", "CPDictionary"), new objj_ivar("_plistObjects", "CPArray")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initForReadingWithData:"), function $CPKeyedUnarchiver__initForReadingWithData_(self, _cmd, data)
{
    self = (objj_getClass("CPKeyedUnarchiver").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._archive = (data == null ? null : (data.isa.method_msgSend["plistObject"] || _objj_forward)(data, (data.isa.method_dtable["plistObject"], "plistObject")));
        self._objects = [(CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null"))];
        self._plistObject = ((___r1 = self._archive), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._archive.isa.method_dtable["objectForKey:"], "objectForKey:"), _CPKeyedArchiverTopKey));
        self._plistObjects = ((___r1 = self._archive), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._archive.isa.method_dtable["objectForKey:"], "objectForKey:"), _CPKeyedArchiverObjectsKey));
        self._replacementClasses = new CFMutableDictionary();
    }
    return self;
    var ___r1;
}

,["id","CPData"]), new objj_method(sel_getUid("containsValueForKey:"), function $CPKeyedUnarchiver__containsValueForKey_(self, _cmd, aKey)
{
    return self._plistObject.valueForKey(aKey) != nil;
}

,["BOOL","CPString"]), new objj_method(sel_getUid("_decodeDictionaryOfObjectsForKey:"), function $CPKeyedUnarchiver___decodeDictionaryOfObjectsForKey_(self, _cmd, aKey)
{
    var object = self._plistObject.valueForKey(aKey),
        objectClass = object != nil && object.isa;
    if (objectClass === CPDictionaryClass || objectClass === CPMutableDictionaryClass)
    {
        var keys = object.keys(),
            index = 0,
            count = keys.length,
            dictionary = new CFMutableDictionary();
        for (; index < count; ++index)
        {
            var key = keys[index];
            dictionary.setValueForKey(key, _CPKeyedUnarchiverDecodeObjectAtIndex(self, (object.valueForKey(key)).valueForKey(_CPKeyedArchiverUIDKey)));
        }
        return dictionary;
    }
    return nil;
}

,["CPDictionary","CPString"]), new objj_method(sel_getUid("decodeBoolForKey:"), function $CPKeyedUnarchiver__decodeBoolForKey_(self, _cmd, aKey)
{
    return !!(self.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), aKey);
}

,["BOOL","CPString"]), new objj_method(sel_getUid("decodeFloatForKey:"), function $CPKeyedUnarchiver__decodeFloatForKey_(self, _cmd, aKey)
{
    var f = (self.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), aKey);
    return f === nil ? 0.0 : f;
}

,["float","CPString"]), new objj_method(sel_getUid("decodeDoubleForKey:"), function $CPKeyedUnarchiver__decodeDoubleForKey_(self, _cmd, aKey)
{
    var d = (self.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), aKey);
    return d === nil ? 0.0 : d;
}

,["double","CPString"]), new objj_method(sel_getUid("decodeIntForKey:"), function $CPKeyedUnarchiver__decodeIntForKey_(self, _cmd, aKey)
{
    var i = (self.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), aKey);
    return i === nil ? 0 : i;
}

,["int","CPString"]), new objj_method(sel_getUid("decodePointForKey:"), function $CPKeyedUnarchiver__decodePointForKey_(self, _cmd, aKey)
{
    var object = (self.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), aKey);
    if (object)
        return CGPointFromString(object);
    else
        return CGPointMakeZero();
}

,["CGPoint","CPString"]), new objj_method(sel_getUid("decodeRectForKey:"), function $CPKeyedUnarchiver__decodeRectForKey_(self, _cmd, aKey)
{
    var object = (self.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), aKey);
    if (object)
        return CGRectFromString(object);
    else
        return CGRectMakeZero();
}

,["CGRect","CPString"]), new objj_method(sel_getUid("decodeSizeForKey:"), function $CPKeyedUnarchiver__decodeSizeForKey_(self, _cmd, aKey)
{
    var object = (self.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), aKey);
    if (object)
        return CGSizeFromString(object);
    else
        return CGSizeMakeZero();
}

,["CGSize","CPString"]), new objj_method(sel_getUid("decodeObjectForKey:"), function $CPKeyedUnarchiver__decodeObjectForKey_(self, _cmd, aKey)
{
    var object = self._plistObject && self._plistObject.valueForKey(aKey),
        objectClass = object != nil && object.isa;
    if (objectClass === CPDictionaryClass || objectClass === CPMutableDictionaryClass)
        return _CPKeyedUnarchiverDecodeObjectAtIndex(self, object.valueForKey(_CPKeyedArchiverUIDKey));
    else if (objectClass === CPNumberClass || objectClass === CPDataClass || objectClass === CPStringClass)
        return object;
    else if (objectClass === _CPJavaScriptArray)
    {
        var index = 0,
            count = object.length,
            array = [];
        for (; index < count; ++index)
            array[index] = _CPKeyedUnarchiverDecodeObjectAtIndex(self, object[index].valueForKey(_CPKeyedArchiverUIDKey));
        return array;
    }
    return nil;
}

,["id","CPString"]), new objj_method(sel_getUid("decodeBytesForKey:"), function $CPKeyedUnarchiver__decodeBytesForKey_(self, _cmd, aKey)
{
    var data = (self.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), aKey);
    if (!data)
        return nil;
    var objectClass = data.isa;
    if (objectClass === CPDataClass)
        return data.bytes();
    return nil;
}

,["id","CPString"]), new objj_method(sel_getUid("finishDecoding"), function $CPKeyedUnarchiver__finishDecoding(self, _cmd)
{
    if (self._delegateSelectors & _CPKeyedUnarchiverWillFinishSelector)
        ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["unarchiverWillFinish:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["unarchiverWillFinish:"], "unarchiverWillFinish:"), self));
    if (self._delegateSelectors & _CPKeyedUnarchiverDidFinishSelector)
        ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["unarchiverDidFinish:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["unarchiverDidFinish:"], "unarchiverDidFinish:"), self));
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("delegate"), function $CPKeyedUnarchiver__delegate(self, _cmd)
{
    return self._delegate;
}

,["id"]), new objj_method(sel_getUid("setDelegate:"), function $CPKeyedUnarchiver__setDelegate_(self, _cmd, aDelegate)
{
    self._delegate = aDelegate;
    if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("unarchiver:cannotDecodeObjectOfClassName:originalClasses:"))))
        self._delegateSelectors |= _CPKeyedUnarchiverCannotDecodeObjectOfClassNameOriginalClassesSelector;
    if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("unarchiver:didDecodeObject:"))))
        self._delegateSelectors |= _CPKeyedUnarchiverDidDecodeObjectSelector;
    if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("unarchiver:willReplaceObject:withObject:"))))
        self._delegateSelectors |= _CPKeyedUnarchiverWillReplaceObjectWithObjectSelector;
    if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("unarchiverWillFinish:"))))
        self._delegateSelectors |= _CPKeyedUnarchiverWillFinishSelector;
    if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("unarchiverDidFinish:"))))
        self._delegateSelectors |= _CPKeyedUnarchiverDidFinishSelector;
    if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("unarchiver:cannotDecodeObjectOfClassName:originalClasses:"))))
        self._delegateSelectors |= CPKeyedUnarchiverDelegate_unarchiver_cannotDecodeObjectOfClassName_originalClasses_;
    var ___r1;
}

,["void","id"]), new objj_method(sel_getUid("setClass:forClassName:"), function $CPKeyedUnarchiver__setClass_forClassName_(self, _cmd, aClass, aClassName)
{
    self._replacementClasses.setValueForKey(aClassName, aClass);
}

,["void","Class","CPString"]), new objj_method(sel_getUid("classForClassName:"), function $CPKeyedUnarchiver__classForClassName_(self, _cmd, aClassName)
{
    return self._replacementClasses.valueForKey(aClassName);
}

,["Class","CPString"]), new objj_method(sel_getUid("allowsKeyedCoding"), function $CPKeyedUnarchiver__allowsKeyedCoding(self, _cmd)
{
    return YES;
}

,["BOOL"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("initialize"), function $CPKeyedUnarchiver__initialize(self, _cmd)
{
    if (self !== (CPKeyedUnarchiver.isa.method_msgSend["class"] || _objj_forward)(CPKeyedUnarchiver, (CPKeyedUnarchiver.isa.method_dtable["class"], "class")))
        return;
    CPArrayClass = (CPArray.isa.method_msgSend["class"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["class"], "class"));
    CPMutableArrayClass = (CPMutableArray.isa.method_msgSend["class"] || _objj_forward)(CPMutableArray, (CPMutableArray.isa.method_dtable["class"], "class"));
    CPStringClass = (CPString.isa.method_msgSend["class"] || _objj_forward)(CPString, (CPString.isa.method_dtable["class"], "class"));
    CPDictionaryClass = (CPDictionary.isa.method_msgSend["class"] || _objj_forward)(CPDictionary, (CPDictionary.isa.method_dtable["class"], "class"));
    CPMutableDictionaryClass = (CPMutableDictionary.isa.method_msgSend["class"] || _objj_forward)(CPMutableDictionary, (CPMutableDictionary.isa.method_dtable["class"], "class"));
    CPNumberClass = (CPNumber.isa.method_msgSend["class"] || _objj_forward)(CPNumber, (CPNumber.isa.method_dtable["class"], "class"));
    CPDataClass = (CPData.isa.method_msgSend["class"] || _objj_forward)(CPData, (CPData.isa.method_dtable["class"], "class"));
    _CPKeyedArchiverValueClass = (_CPKeyedArchiverValue.isa.method_msgSend["class"] || _objj_forward)(_CPKeyedArchiverValue, (_CPKeyedArchiverValue.isa.method_dtable["class"], "class"));
}

,["void"]), new objj_method(sel_getUid("unarchiveObjectWithData:"), function $CPKeyedUnarchiver__unarchiveObjectWithData_(self, _cmd, aData)
{
    if (!aData)
    {
        CPLog.error("Null data passed to -[CPKeyedUnarchiver unarchiveObjectWithData:].");
        return nil;
    }
    var unarchiver = ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initForReadingWithData:"] || _objj_forward)(___r1, "initForReadingWithData:", aData)),
        object = (unarchiver == null ? null : (unarchiver.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(unarchiver, (unarchiver.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), "root"));
    (unarchiver == null ? null : (unarchiver.isa.method_msgSend["finishDecoding"] || _objj_forward)(unarchiver, (unarchiver.isa.method_dtable["finishDecoding"], "finishDecoding")));
    return object;
    var ___r1;
}

,["id","CPData"]), new objj_method(sel_getUid("unarchiveObjectWithFile:"), function $CPKeyedUnarchiver__unarchiveObjectWithFile_(self, _cmd, aFilePath)
{
}

,["id","CPString"]), new objj_method(sel_getUid("unarchiveObjectWithFile:asynchronously:"), function $CPKeyedUnarchiver__unarchiveObjectWithFile_asynchronously_(self, _cmd, aFilePath, aFlag)
{
}

,["id","CPString","BOOL"])]);
}
var _CPKeyedUnarchiverDecodeObjectAtIndex = function(self, anIndex)
{
    var object = self._objects[anIndex];
    if (object)
    {
        if (object === self._objects[0])
            return nil;
    }    else
    {
        var plistObject = self._plistObjects[anIndex],
            plistObjectClass = plistObject.isa;
        if (plistObjectClass === CPDictionaryClass || plistObjectClass === CPMutableDictionaryClass)
        {
            var plistClass = self._plistObjects[(plistObject.valueForKey(_CPKeyedArchiverClassKey)).valueForKey(_CPKeyedArchiverUIDKey)],
                className = plistClass.valueForKey(_CPKeyedArchiverClassNameKey),
                classes = plistClass.valueForKey(_CPKeyedArchiverClassesKey),
                theClass = (self == null ? null : (self.isa.method_msgSend["classForClassName:"] || _objj_forward)(self, (self.isa.method_dtable["classForClassName:"], "classForClassName:"), className));
            if (!theClass)
                theClass = CPClassFromString(className);
            if (!theClass && self._delegateSelectors & CPKeyedUnarchiverDelegate_unarchiver_cannotDecodeObjectOfClassName_originalClasses_)
            {
                theClass = ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["unarchiver:cannotDecodeObjectOfClassName:originalClasses:"] || _objj_forward)(___r1, "unarchiver:cannotDecodeObjectOfClassName:originalClasses:", self, className, classes));
            }            if (!theClass)
                (CPException.isa.method_msgSend["raise:format:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:format:"], CPException.isa.method_dtable["raise:format:"], "raise:format:"), CPInvalidUnarchiveOperationException, "-[CPKeyedUnarchiver decodeObjectForKey:]: cannot decode object of class (%@)", className);
            var savedPlistObject = self._plistObject;
            self._plistObject = plistObject;
            object = (theClass == null ? null : (theClass.isa.method_msgSend["allocWithCoder:"] || _objj_forward)(theClass, (theClass.isa.method_dtable["allocWithCoder:"], "allocWithCoder:"), self));
            self._objects[anIndex] = object;
            var processedObject = (object == null ? null : (object.isa.method_msgSend["initWithCoder:"] || _objj_forward)(object, (object.isa.method_dtable["initWithCoder:"], "initWithCoder:"), self));
            self._plistObject = savedPlistObject;
            if (processedObject !== object)
            {
                if (self._delegateSelectors & _CPKeyedUnarchiverWillReplaceObjectWithObjectSelector)
                    ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["unarchiver:willReplaceObject:withObject:"] || _objj_forward)(___r1, "unarchiver:willReplaceObject:withObject:", self, object, processedObject));
                object = processedObject;
                self._objects[anIndex] = processedObject;
            }            processedObject = (object == null ? null : (object.isa.method_msgSend["awakeAfterUsingCoder:"] || _objj_forward)(object, (object.isa.method_dtable["awakeAfterUsingCoder:"], "awakeAfterUsingCoder:"), self));
            if (processedObject !== object)
            {
                if (self._delegateSelectors & _CPKeyedUnarchiverWillReplaceObjectWithObjectSelector)
                    ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["unarchiver:willReplaceObject:withObject:"] || _objj_forward)(___r1, "unarchiver:willReplaceObject:withObject:", self, object, processedObject));
                object = processedObject;
                self._objects[anIndex] = processedObject;
            }            if (self._delegate)
            {
                if (self._delegateSelectors & _CPKeyedUnarchiverDidDecodeObjectSelector)
                    processedObject = ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["unarchiver:didDecodeObject:"] || _objj_forward)(___r1, "unarchiver:didDecodeObject:", self, object));
                if (processedObject && processedObject != object)
                {
                    if (self._delegateSelectors & _CPKeyedUnarchiverWillReplaceObjectWithObjectSelector)
                        ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["unarchiver:willReplaceObject:withObject:"] || _objj_forward)(___r1, "unarchiver:willReplaceObject:withObject:", self, object, processedObject));
                    object = processedObject;
                    self._objects[anIndex] = processedObject;
                }            }        }        else
        {
            self._objects[anIndex] = object = plistObject;
            if ((object == null ? null : (object.isa.method_msgSend["class"] || _objj_forward)(object, (object.isa.method_dtable["class"], "class"))) === CPStringClass)
            {
                if (object === _CPKeyedArchiverNullString)
                {
                    self._objects[anIndex] = self._objects[0];
                    return nil;
                }                else
                    self._objects[anIndex] = object = plistObject;
            }        }    }    if (object != nil && object.isa === _CPKeyedArchiverValueClass)
        object = (object == null ? null : (object.isa.method_msgSend["JSObject"] || _objj_forward)(object, (object.isa.method_dtable["JSObject"], "JSObject")));
    return object;
    var ___r1;
};
p;17;CPWebDAVManager.jt;31473;@STATIC;1.0;i;9;CPArray.ji;14;CPDictionary.ji;10;CPObject.ji;10;CPString.ji;7;CPURL.ji;17;CPURLConnection.ji;14;CPURLRequest.jS;18228;;13103;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPString.j", YES);objj_executeFile("CPURL.j", YES);objj_executeFile("CPURLConnection.j", YES);objj_executeFile("CPURLRequest.j", YES);var setURLResourceValuesForKeysFromProperties = function(aURL, keys, properties)
{
    var resourceType = (properties == null ? null : (properties.isa.method_msgSend["objectForKey:"] || _objj_forward)(properties, (properties.isa.method_dtable["objectForKey:"], "objectForKey:"), "resourcetype"));
    if (resourceType === CPWebDAVManagerCollectionResourceType)
    {
        (aURL == null ? null : (aURL.isa.method_msgSend["setResourceValue:forKey:"] || _objj_forward)(aURL, (aURL.isa.method_dtable["setResourceValue:forKey:"], aURL.isa.method_dtable["setResourceValue:forKey:"], "setResourceValue:forKey:"), YES, CPURLIsDirectoryKey));
        (aURL == null ? null : (aURL.isa.method_msgSend["setResourceValue:forKey:"] || _objj_forward)(aURL, (aURL.isa.method_dtable["setResourceValue:forKey:"], aURL.isa.method_dtable["setResourceValue:forKey:"], "setResourceValue:forKey:"), NO, CPURLIsRegularFileKey));
    }    else if (resourceType === CPWebDAVManagerNonCollectionResourceType)
    {
        (aURL == null ? null : (aURL.isa.method_msgSend["setResourceValue:forKey:"] || _objj_forward)(aURL, (aURL.isa.method_dtable["setResourceValue:forKey:"], aURL.isa.method_dtable["setResourceValue:forKey:"], "setResourceValue:forKey:"), NO, CPURLIsDirectoryKey));
        (aURL == null ? null : (aURL.isa.method_msgSend["setResourceValue:forKey:"] || _objj_forward)(aURL, (aURL.isa.method_dtable["setResourceValue:forKey:"], aURL.isa.method_dtable["setResourceValue:forKey:"], "setResourceValue:forKey:"), YES, CPURLIsRegularFileKey));
    }    var displayName = (properties == null ? null : (properties.isa.method_msgSend["objectForKey:"] || _objj_forward)(properties, (properties.isa.method_dtable["objectForKey:"], "objectForKey:"), "displayname"));
    if (displayName !== nil)
    {
        (aURL == null ? null : (aURL.isa.method_msgSend["setResourceValue:forKey:"] || _objj_forward)(aURL, (aURL.isa.method_dtable["setResourceValue:forKey:"], aURL.isa.method_dtable["setResourceValue:forKey:"], "setResourceValue:forKey:"), displayName, CPURLNameKey));
        (aURL == null ? null : (aURL.isa.method_msgSend["setResourceValue:forKey:"] || _objj_forward)(aURL, (aURL.isa.method_dtable["setResourceValue:forKey:"], aURL.isa.method_dtable["setResourceValue:forKey:"], "setResourceValue:forKey:"), displayName, CPURLLocalizedNameKey));
    }};
CPWebDAVManagerCollectionResourceType = 1;
CPWebDAVManagerNonCollectionResourceType = 0;

{var the_class = objj_allocateClassPair(CPObject, "CPWebDAVManager"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_blocksForConnections", "CPDictionary")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPWebDAVManager__init(self, _cmd)
{
    self = (objj_getClass("CPWebDAVManager").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
        self._blocksForConnections = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    return self;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("contentsOfDirectoryAtURL:includingPropertiesForKeys:options:block:"), function $CPWebDAVManager__contentsOfDirectoryAtURL_includingPropertiesForKeys_options_block_(self, _cmd, aURL, keys, aMask, aBlock)
{
    var properties = [],
        count = (keys == null ? null : (keys.isa.method_msgSend["count"] || _objj_forward)(keys, (keys.isa.method_dtable["count"], "count")));
    while (count--)
        properties.push(WebDAVPropertiesForURLKeys[keys[count]]);
    var makeContents =     function(aURL, response)
    {
        var contents = [],
            URLString = nil,
            URLStrings = (response == null ? null : (response.isa.method_msgSend["keyEnumerator"] || _objj_forward)(response, (response.isa.method_dtable["keyEnumerator"], "keyEnumerator")));
        while ((URLString = (URLStrings == null ? null : (URLStrings.isa.method_msgSend["nextObject"] || _objj_forward)(URLStrings, (URLStrings.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        {
            var URL = (CPURL.isa.method_msgSend["URLWithString:"] || _objj_forward)(CPURL, (CPURL.isa.method_dtable["URLWithString:"], "URLWithString:"), URLString),
                properties = (response == null ? null : (response.isa.method_msgSend["objectForKey:"] || _objj_forward)(response, (response.isa.method_dtable["objectForKey:"], "objectForKey:"), URLString));
            if (!((___r1 = (URL == null ? null : (URL.isa.method_msgSend["absoluteString"] || _objj_forward)(URL, (URL.isa.method_dtable["absoluteString"], "absoluteString")))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, "isEqual:", (aURL == null ? null : (aURL.isa.method_msgSend["absoluteString"] || _objj_forward)(aURL, (aURL.isa.method_dtable["absoluteString"], "absoluteString"))))))
            {
                contents.push(URL);
                setURLResourceValuesForKeysFromProperties(URL, keys, properties);
            }        }        return contents;
        var ___r1;
    };
    if (!aBlock)
        return makeContents(aURL, (self.isa.method_msgSend["PROPFIND:properties:depth:block:"] || _objj_forward)(self, (self.isa.method_dtable["PROPFIND:properties:depth:block:"], self.isa.method_dtable["PROPFIND:properties:depth:block:"], self.isa.method_dtable["PROPFIND:properties:depth:block:"], self.isa.method_dtable["PROPFIND:properties:depth:block:"], "PROPFIND:properties:depth:block:"), aURL, properties, 1, nil));
    (self.isa.method_msgSend["PROPFIND:properties:depth:block:"] || _objj_forward)(self, (self.isa.method_dtable["PROPFIND:properties:depth:block:"], self.isa.method_dtable["PROPFIND:properties:depth:block:"], self.isa.method_dtable["PROPFIND:properties:depth:block:"], self.isa.method_dtable["PROPFIND:properties:depth:block:"], "PROPFIND:properties:depth:block:"), aURL, properties, 1,     function(aURL, response)
    {
        aBlock(aURL, makeContents(aURL, response));
    });
}

,["CPArray","CPURL","CPArray","CPDirectoryEnumerationOptions","Function"]), new objj_method(sel_getUid("PROPFIND:properties:depth:block:"), function $CPWebDAVManager__PROPFIND_properties_depth_block_(self, _cmd, aURL, properties, aDepth, aBlock)
{
    var request = (CPURLRequest.isa.method_msgSend["requestWithURL:"] || _objj_forward)(CPURLRequest, (CPURLRequest.isa.method_dtable["requestWithURL:"], "requestWithURL:"), aURL);
    (request == null ? null : (request.isa.method_msgSend["setHTTPMethod:"] || _objj_forward)(request, (request.isa.method_dtable["setHTTPMethod:"], "setHTTPMethod:"), "PROPFIND"));
    (request == null ? null : (request.isa.method_msgSend["setValue:forHTTPHeaderField:"] || _objj_forward)(request, (request.isa.method_dtable["setValue:forHTTPHeaderField:"], request.isa.method_dtable["setValue:forHTTPHeaderField:"], "setValue:forHTTPHeaderField:"), aDepth, "Depth"));
    var HTTPBody = ["<?xml version=\"1.0\"?><a:propfind xmlns:a=\"DAV:\">"],
        index = 0,
        count = properties.length;
    for (; index < count; ++index)
        HTTPBody.push("<a:prop><a:", properties[index], "/></a:prop>");
    HTTPBody.push("</a:propfind>");
    (request == null ? null : (request.isa.method_msgSend["setHTTPBody:"] || _objj_forward)(request, (request.isa.method_dtable["setHTTPBody:"], "setHTTPBody:"), HTTPBody.join("")));
    if (!aBlock)
        return parsePROPFINDResponse(((___r1 = (CPURLConnection.isa.method_msgSend["sendSynchronousRequest:returningResponse:"] || _objj_forward)(CPURLConnection, (CPURLConnection.isa.method_dtable["sendSynchronousRequest:returningResponse:"], CPURLConnection.isa.method_dtable["sendSynchronousRequest:returningResponse:"], "sendSynchronousRequest:returningResponse:"), request, nil)), ___r1 == null ? null : (___r1.isa.method_msgSend["rawString"] || _objj_forward)(___r1, "rawString")));
    else
    {
        var connection = (CPURLConnection.isa.method_msgSend["connectionWithRequest:delegate:"] || _objj_forward)(CPURLConnection, (CPURLConnection.isa.method_dtable["connectionWithRequest:delegate:"], CPURLConnection.isa.method_dtable["connectionWithRequest:delegate:"], "connectionWithRequest:delegate:"), request, self);
        ((___r1 = self._blocksForConnections), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._blocksForConnections.isa.method_dtable["setObject:forKey:"], self._blocksForConnections.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), aBlock, (connection == null ? null : (connection.isa.method_msgSend["UID"] || _objj_forward)(connection, (connection.isa.method_dtable["UID"], "UID")))));
    }
    var ___r1;
}

,["CPDictionary","CPURL","CPDictionary","CPString","Function"]), new objj_method(sel_getUid("connection:didReceiveData:"), function $CPWebDAVManager__connection_didReceiveData_(self, _cmd, aURLConnection, aString)
{
    var block = ((___r1 = self._blocksForConnections), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._blocksForConnections.isa.method_dtable["objectForKey:"], "objectForKey:"), (aURLConnection == null ? null : (aURLConnection.isa.method_msgSend["UID"] || _objj_forward)(aURLConnection, (aURLConnection.isa.method_dtable["UID"], "UID")))));
    block(((___r1 = aURLConnection._request), ___r1 == null ? null : (___r1.isa.method_msgSend["URL"] || _objj_forward)(___r1, "URL")), parsePROPFINDResponse(aString));
    var ___r1;
}

,["void","CPURLConnection","CPString"])]);
}
var WebDAVPropertiesForURLKeys = {};
WebDAVPropertiesForURLKeys[CPURLNameKey] = "displayname";
WebDAVPropertiesForURLKeys[CPURLLocalizedNameKey] = "displayname";
WebDAVPropertiesForURLKeys[CPURLIsRegularFileKey] = "resourcetype";
WebDAVPropertiesForURLKeys[CPURLIsDirectoryKey] = "resourcetype";
var XMLDocumentFromString = function(anXMLString)
{
    if (typeof window["ActiveXObject"] !== "undefined")
    {
        var XMLDocument = new ActiveXObject("Microsoft.XMLDOM");
        XMLDocument.async = false;
        XMLDocument.loadXML(anXMLString);
        return XMLDocument;
    }    return (new DOMParser()).parseFromString(anXMLString, "text/xml");
};
var parsePROPFINDResponse = function(anXMLString)
{
    var XMLDocument = XMLDocumentFromString(anXMLString),
        responses = XMLDocument.getElementsByTagNameNS("*", "response"),
        responseIndex = 0,
        responseCount = responses.length,
        propertiesForURLs = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    for (; responseIndex < responseCount; ++responseIndex)
    {
        var response = responses[responseIndex],
            elements = ((response.getElementsByTagNameNS("*", "prop")).item(0)).childNodes,
            index = 0,
            count = elements.length,
            properties = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        for (; index < count; ++index)
        {
            var element = elements[index];
            if (element.nodeType === 8 || element.nodeType === 3)
                continue;
            var nodeName = element.nodeName,
                colonIndex = nodeName.lastIndexOf(':');
            if (colonIndex > -1)
                nodeName = nodeName.substr(colonIndex + 1);
            if (nodeName === "resourcetype")
                (properties == null ? null : (properties.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(properties, (properties.isa.method_dtable["setObject:forKey:"], properties.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), element.firstChild ? CPWebDAVManagerCollectionResourceType : CPWebDAVManagerNonCollectionResourceType, nodeName));
            else
                (properties == null ? null : (properties.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(properties, (properties.isa.method_dtable["setObject:forKey:"], properties.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), element.firstChild.nodeValue, nodeName));
        }        var href = (response.getElementsByTagNameNS("*", "href")).item(0);
        (propertiesForURLs == null ? null : (propertiesForURLs.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(propertiesForURLs, (propertiesForURLs.isa.method_dtable["setObject:forKey:"], propertiesForURLs.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), properties, href.firstChild.nodeValue));
    }    return propertiesForURLs;
    var ___r1;
};
var mapURLsAndProperties = function(properties, ignoredURL)
{
};
p;22;CPByteCountFormatter.jt;40497;@STATIC;1.0;i;19;CPNumberFormatter.ji;10;CPString.jS;22644;t;17786;

objj_executeFile("CPNumberFormatter.j", YES);objj_executeFile("CPString.j", YES);CPByteCountFormatterUseDefault = 0;
CPByteCountFormatterUseBytes = 1 << 0;
CPByteCountFormatterUseKB = 1 << 1;
CPByteCountFormatterUseMB = 1 << 2;
CPByteCountFormatterUseGB = 1 << 3;
CPByteCountFormatterUseTB = 1 << 4;
CPByteCountFormatterUsePB = 1 << 5;
CPByteCountFormatterUseAll = 0xFFFF;
CPByteCountFormatterCountStyleFile = 0;
CPByteCountFormatterCountStyleMemory = 1;
CPByteCountFormatterCountStyleDecimal = 2;
CPByteCountFormatterCountStyleBinary = 3;
var CPByteCountFormatterUnits = ["bytes", "KB", "MB", "GB", "TB", "PB"];

{var the_class = objj_allocateClassPair(CPFormatter, "CPByteCountFormatter"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_countStyle", "int"), new objj_ivar("_allowsNonnumericFormatting", "BOOL"), new objj_ivar("_includesActualByteCount", "BOOL"), new objj_ivar("_includesCount", "BOOL"), new objj_ivar("_includesUnit", "BOOL"), new objj_ivar("_adaptive", "BOOL"), new objj_ivar("_zeroPadsFractionDigits", "BOOL"), new objj_ivar("_allowedUnits", "int"), new objj_ivar("_numberFormatter", "CPNumberFormatter")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPByteCountFormatter__init(self, _cmd)
{
    if (self = (objj_getClass("CPByteCountFormatter").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        self._adaptive = YES;
        self._allowedUnits = CPByteCountFormatterUseDefault;
        self._allowsNonnumericFormatting = YES;
        self._countStyle = CPByteCountFormatterCountStyleFile;
        self._includesActualByteCount = NO;
        self._includesCount = YES;
        self._includesUnit = YES;
        self._zeroPadsFractionDigits = NO;
        self._numberFormatter = (CPNumberFormatter.isa.method_msgSend["new"] || _objj_forward)(CPNumberFormatter, (CPNumberFormatter.isa.method_dtable["new"], "new"));
        ((___r1 = self._numberFormatter), ___r1 == null ? null : (___r1.isa.method_msgSend["setNumberStyle:"] || _objj_forward)(___r1, (self._numberFormatter.isa.method_dtable["setNumberStyle:"], "setNumberStyle:"), CPNumberFormatterDecimalStyle));
        ((___r1 = self._numberFormatter), ___r1 == null ? null : (___r1.isa.method_msgSend["setMinimumFractionDigits:"] || _objj_forward)(___r1, (self._numberFormatter.isa.method_dtable["setMinimumFractionDigits:"], "setMinimumFractionDigits:"), 0));
    }
    return self;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("stringFromByteCount:"), function $CPByteCountFormatter__stringFromByteCount_(self, _cmd, byteCount)
{
    var divisor,
        exponent = 0,
        unitIndex = self._allowedUnits === 0 || self._allowedUnits & CPByteCountFormatterUseBytes ? 0 : -1,
        bytes = byteCount,
        unitBytes = bytes,
        unitCount = (CPByteCountFormatterUnits == null ? null : (CPByteCountFormatterUnits.isa.method_msgSend["count"] || _objj_forward)(CPByteCountFormatterUnits, (CPByteCountFormatterUnits.isa.method_dtable["count"], "count")));
    if (self._countStyle === CPByteCountFormatterCountStyleFile || self._countStyle === CPByteCountFormatterCountStyleDecimal)
        divisor = 1000;
    else
        divisor = 1024;
    while (bytes >= divisor && exponent < unitCount)
    {
        bytes /= divisor;
        ++exponent;
        if (self._allowedUnits === 0 || self._allowedUnits & 1 << exponent)
        {
            unitIndex = exponent;
            unitBytes = bytes;
        }
    }
    if (unitIndex === -1)
        for (var i = 1; i < unitCount; ++i)
        {
            unitBytes /= divisor;
            if (self._allowedUnits === 0 || self._allowedUnits & 1 << i)
            {
                unitIndex = i;
                break;
            }
        }
    var minDigits = 0,
        maxDigits = CPDecimalNoScale;
    if (unitBytes >= 1.0)
    {
        if (self._adaptive)
        {
            var digits;
            if (exponent <= 1)
                digits = 0;
            else if (exponent == 2)
                digits = 1;
            else
                digits = 2;
            maxDigits = digits;
            if (self._zeroPadsFractionDigits)
                minDigits = digits;
        }
        else
        {
            if (self._zeroPadsFractionDigits)
                minDigits = 2;
            if (bytes >= 1)
                maxDigits = 2;
        }
    }
    ((___r1 = self._numberFormatter), ___r1 == null ? null : (___r1.isa.method_msgSend["setMinimumFractionDigits:"] || _objj_forward)(___r1, (self._numberFormatter.isa.method_dtable["setMinimumFractionDigits:"], "setMinimumFractionDigits:"), minDigits));
    ((___r1 = self._numberFormatter), ___r1 == null ? null : (___r1.isa.method_msgSend["setMaximumFractionDigits:"] || _objj_forward)(___r1, (self._numberFormatter.isa.method_dtable["setMaximumFractionDigits:"], "setMaximumFractionDigits:"), maxDigits));
    var parts = [];
    if (self._includesCount)
    {
        if (self._allowsNonnumericFormatting && bytes === 0)
            (parts == null ? null : (parts.isa.method_msgSend["addObject:"] || _objj_forward)(parts, (parts.isa.method_dtable["addObject:"], "addObject:"), "Zero"));
        else
            (parts == null ? null : (parts.isa.method_msgSend["addObject:"] || _objj_forward)(parts, (parts.isa.method_dtable["addObject:"], "addObject:"), ((___r1 = self._numberFormatter), ___r1 == null ? null : (___r1.isa.method_msgSend["stringFromNumber:"] || _objj_forward)(___r1, (self._numberFormatter.isa.method_dtable["stringFromNumber:"], "stringFromNumber:"), unitBytes))));
    }
    if (self._includesUnit)
        (parts == null ? null : (parts.isa.method_msgSend["addObject:"] || _objj_forward)(parts, (parts.isa.method_dtable["addObject:"], "addObject:"), CPByteCountFormatterUnits[unitIndex]));
    if (unitIndex > 0 && self._includesCount && self._includesUnit && self._includesActualByteCount)
    {
        ((___r1 = self._numberFormatter), ___r1 == null ? null : (___r1.isa.method_msgSend["setMaximumFractionDigits:"] || _objj_forward)(___r1, (self._numberFormatter.isa.method_dtable["setMaximumFractionDigits:"], "setMaximumFractionDigits:"), 0));
        (parts == null ? null : (parts.isa.method_msgSend["addObject:"] || _objj_forward)(parts, (parts.isa.method_dtable["addObject:"], "addObject:"), (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "(%s bytes)", ((___r1 = self._numberFormatter), ___r1 == null ? null : (___r1.isa.method_msgSend["stringFromNumber:"] || _objj_forward)(___r1, (self._numberFormatter.isa.method_dtable["stringFromNumber:"], "stringFromNumber:"), byteCount)))));
    }
    var result = (parts == null ? null : (parts.isa.method_msgSend["componentsJoinedByString:"] || _objj_forward)(parts, (parts.isa.method_dtable["componentsJoinedByString:"], "componentsJoinedByString:"), " "));
    if (byteCount === 1)
        return (result == null ? null : (result.isa.method_msgSend["stringByReplacingOccurrencesOfString:withString:"] || _objj_forward)(result, (result.isa.method_dtable["stringByReplacingOccurrencesOfString:withString:"], result.isa.method_dtable["stringByReplacingOccurrencesOfString:withString:"], "stringByReplacingOccurrencesOfString:withString:"), "bytes", "byte"));
    else
        return result;
    var ___r1;
}

,["CPString","int"]), new objj_method(sel_getUid("stringForObjectValue:"), function $CPByteCountFormatter__stringForObjectValue_(self, _cmd, anObject)
{
    if ((anObject == null ? null : (anObject.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), CPNumber)))
        return (self.isa.method_msgSend["stringFromByteCount:"] || _objj_forward)(self, (self.isa.method_dtable["stringFromByteCount:"], "stringFromByteCount:"), anObject);
    else
        return nil;
}

,["CPString","id"]), new objj_method(sel_getUid("getObjectValue:forString:errorDescription:"), function $CPByteCountFormatter__getObjectValue_forString_errorDescription_(self, _cmd, anObject, aString, anError)
{
    return NO;
}

,["BOOL","idRef","CPString","CPStringRef"]), new objj_method(sel_getUid("countStyle"), function $CPByteCountFormatter__countStyle(self, _cmd)
{
    return self._countStyle;
}

,["int"]), new objj_method(sel_getUid("setCountStyle:"), function $CPByteCountFormatter__setCountStyle_(self, _cmd, style)
{
    self._countStyle = style;
}

,["void","int"]), new objj_method(sel_getUid("allowsNonnumericFormatting"), function $CPByteCountFormatter__allowsNonnumericFormatting(self, _cmd)
{
    return self._allowsNonnumericFormatting;
}

,["BOOL"]), new objj_method(sel_getUid("setAllowsNonnumericFormatting:"), function $CPByteCountFormatter__setAllowsNonnumericFormatting_(self, _cmd, shouldAllowNonnumericFormatting)
{
    self._allowsNonnumericFormatting = shouldAllowNonnumericFormatting;
}

,["void","BOOL"]), new objj_method(sel_getUid("includesActualByteCount"), function $CPByteCountFormatter__includesActualByteCount(self, _cmd)
{
    return self._includesActualByteCount;
}

,["BOOL"]), new objj_method(sel_getUid("setIncludesActualByteCount:"), function $CPByteCountFormatter__setIncludesActualByteCount_(self, _cmd, shouldIncludeActualByteCount)
{
    self._includesActualByteCount = shouldIncludeActualByteCount;
}

,["void","BOOL"]), new objj_method(sel_getUid("isAdaptive"), function $CPByteCountFormatter__isAdaptive(self, _cmd)
{
    return self._adaptive;
}

,["BOOL"]), new objj_method(sel_getUid("setAdaptive:"), function $CPByteCountFormatter__setAdaptive_(self, _cmd, shouldBeAdaptive)
{
    self._adaptive = shouldBeAdaptive;
}

,["void","BOOL"]), new objj_method(sel_getUid("allowedUnits"), function $CPByteCountFormatter__allowedUnits(self, _cmd)
{
    return self._allowedUnits;
}

,["int"]), new objj_method(sel_getUid("setAllowedUnits:"), function $CPByteCountFormatter__setAllowedUnits_(self, _cmd, allowed)
{
    self._allowedUnits = allowed;
}

,["void","int"]), new objj_method(sel_getUid("includesCount"), function $CPByteCountFormatter__includesCount(self, _cmd)
{
    return self._includesCount;
}

,["BOOL"]), new objj_method(sel_getUid("setIncludesCount:"), function $CPByteCountFormatter__setIncludesCount_(self, _cmd, shouldIncludeCount)
{
    self._includesCount = shouldIncludeCount;
}

,["void","BOOL"]), new objj_method(sel_getUid("includesUnit"), function $CPByteCountFormatter__includesUnit(self, _cmd)
{
    return self._includesUnit;
}

,["BOOL"]), new objj_method(sel_getUid("setIncludesUnit:"), function $CPByteCountFormatter__setIncludesUnit_(self, _cmd, shouldIncludeUnit)
{
    self._includesUnit = shouldIncludeUnit;
}

,["void","BOOL"]), new objj_method(sel_getUid("zeroPadsFractionDigits"), function $CPByteCountFormatter__zeroPadsFractionDigits(self, _cmd)
{
    return self._zeroPadsFractionDigits;
}

,["BOOL"]), new objj_method(sel_getUid("setZeroPadsFractionDigits:"), function $CPByteCountFormatter__setZeroPadsFractionDigits_(self, _cmd, shouldZeroPad)
{
    self._zeroPadsFractionDigits = shouldZeroPad;
}

,["void","BOOL"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("stringFromByteCount:countStyle:"), function $CPByteCountFormatter__stringFromByteCount_countStyle_(self, _cmd, byteCount, countStyle)
{
    var formatter = (CPByteCountFormatter.isa.method_msgSend["new"] || _objj_forward)(CPByteCountFormatter, (CPByteCountFormatter.isa.method_dtable["new"], "new"));
    (formatter == null ? null : (formatter.isa.method_msgSend["setCountStyle:"] || _objj_forward)(formatter, (formatter.isa.method_dtable["setCountStyle:"], "setCountStyle:"), countStyle));
    return (formatter == null ? null : (formatter.isa.method_msgSend["stringFromByteCount:"] || _objj_forward)(formatter, (formatter.isa.method_dtable["stringFromByteCount:"], "stringFromByteCount:"), byteCount));
}

,["CPString","int","int"])]);
}
var CPByteCountFormatterCountStyleKey = "CPByteCountFormatterCountStyleKey",
    CPByteCountFormatterAllowsNonnumericFormattingKey = "CPByteCountFormatterAllowsNonnumericFormattingKey",
    CPByteCountFormatterIncludesActualByteCountKey = "CPByteCountFormatterIncludesActualByteCountKey",
    CPByteCountFormatterIncludesCountKey = "CPByteCountFormatterIncludesCountKey",
    CPByteCountFormatterIncludesUnitKey = "CPByteCountFormatterIncludesUnitKey",
    CPByteCountFormatterAdaptiveKey = "CPByteCountFormatterAdaptiveKey",
    CPByteCountFormatterZeroPadsFractionDigitsKey = "CPByteCountFormatterZeroPadsFractionDigitsKey",
    CPByteCountFormatterAllowedUnitsKey = "CPByteCountFormatterAllowedUnitsKey";
{
var the_class = objj_getClass("CPByteCountFormatter")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPByteCountFormatter\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPByteCountFormatter__initWithCoder_(self, _cmd, aCoder)
{
    self = (objj_getClass("CPByteCountFormatter").super_class.method_dtable["initWithCoder:"] || _objj_forward)(self, "initWithCoder:", aCoder);
    if (self)
    {
        self._countStyle = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPByteCountFormatterCountStyleKey));
        self._allowsNonnumericFormatting = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPByteCountFormatterAllowsNonnumericFormattingKey));
        self._includesActualByteCount = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPByteCountFormatterIncludesActualByteCountKey));
        self._includesCount = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPByteCountFormatterIncludesCountKey));
        self._includesUnit = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPByteCountFormatterIncludesUnitKey));
        self._adaptive = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPByteCountFormatterAdaptiveKey));
        self._zeroPadsFractionDigits = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPByteCountFormatterZeroPadsFractionDigitsKey));
        self._allowedUnits = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPByteCountFormatterAllowedUnitsKey));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPByteCountFormatter__encodeWithCoder_(self, _cmd, aCoder)
{
    (objj_getClass("CPByteCountFormatter").super_class.method_dtable["encodeWithCoder:"] || _objj_forward)(self, "encodeWithCoder:", aCoder);
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._countStyle, CPByteCountFormatterCountStyleKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._allowsNonnumericFormatting, CPByteCountFormatterAllowsNonnumericFormattingKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._includesActualByteCount, CPByteCountFormatterIncludesActualByteCountKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._includesCount, CPByteCountFormatterIncludesCountKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._includesUnit, CPByteCountFormatterIncludesUnitKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._adaptive, CPByteCountFormatterAdaptiveKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._zeroPadsFractionDigits, CPByteCountFormatterZeroPadsFractionDigitsKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._allowedUnits, CPByteCountFormatterAllowedUnitsKey));
}

,["void","CPCoder"])]);
}
p;12;CPGeometry.jt;18371;@STATIC;1.0;i;13;_CGGeometry.jS;16620;;1706;

objj_executeFile("_CGGeometry.j", YES);{var the_typedef = objj_allocateTypeDef("CPRectEdge");
objj_registerTypeDef(the_typedef);
}CPMinXEdge = 0;
CPMinYEdge = 1;
CPMaxXEdge = 2;
CPMaxYEdge = 3;
CPMakePoint = CGPointMake;
CPMakeSize = CGSizeMake;
CPMakeRect = CGRectMake;
CPPointCreateCopy = CGPointMakeCopy;
CPPointEqualToPoint = CGPointEqualToPoint;
CPPointInRect = function(aPoint, aRect)
{
    return CGRectContainsPoint(aRect, aPoint);
};
CPRectEqualToRect = CGRectEqualToRect;
CPRectIsEmpty = CGRectIsEmpty;
CPRectContainsRect = CGRectContainsRect;
CPRectIntersection = CGRectIntersection;
CPPointMake = CGPointMake;
CPRectInset = CGRectInset;
CPRectIntegral = CGRectIntegral;
CPRectCreateCopy = CGRectCreateCopy;
CPRectMake = CGRectMake;
CPRectOffset = CGRectOffset;
CPRectStandardize = CGRectStandardize;
CPRectUnion = CGRectUnion;
CPSizeCreateCopy = CGSizeCreateCopy;
CPSizeMake = CGSizeMake;
CPRectContainsPoint = CGRectContainsPoint;
CPRectGetHeight = CGRectGetHeight;
CPRectGetMaxX = CGRectGetMaxX;
CPRectGetMaxY = CGRectGetMaxY;
CPRectGetMidX = CGRectGetMidX;
CPRectGetMidY = CGRectGetMidY;
CPRectGetMinX = CGRectGetMinX;
CPRectGetMinY = CGRectGetMinY;
CPRectGetWidth = CGRectGetWidth;
CPRectIntersectsRect = CGRectIntersectsRect;
CPRectIsNull = CGRectIsNull;
CPDivideRect = CGRectDivide;
CPSizeEqualToSize = CGSizeEqualToSize;
CPStringFromPoint = CGStringFromPoint;
CPStringFromSize = CGStringFromSize;
CPStringFromRect = CGStringFromRect;
CPPointFromString = CGPointFromString;
CPSizeFromString = CGSizeFromString;
CPRectFromString = CGRectFromString;
CPPointFromEvent = CGPointFromEvent;
CPSizeMakeZero = CGSizeMakeZero;
CPRectMakeZero = CGRectMakeZero;
CPPointMakeZero = CGPointMakeZero;
p;21;CPKeyValueObserving.jt;196162;@STATIC;1.0;i;9;CPArray.ji;14;CPDictionary.ji;13;CPException.ji;12;CPIndexSet.ji;8;CPNull.ji;10;CPObject.ji;7;CPSet.ji;13;CPArray+KVO.ji;11;CPSet+KVO.jS;108796;t;87198;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPIndexSet.j", YES);objj_executeFile("CPNull.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPSet.j", YES);{
var the_class = objj_getClass("CPObject")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPObject\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("willChangeValueForKey:"), function $CPObject__willChangeValueForKey_(self, _cmd, aKey)
{
    if (!aKey)
        return;
    if (!self[KVOProxyKey])
    {
        if (!self._willChangeMessageCounter)
            self._willChangeMessageCounter = new Object();
        if (!self._willChangeMessageCounter[aKey])
            self._willChangeMessageCounter[aKey] = 1;
        else
            self._willChangeMessageCounter[aKey] += 1;
    }
}

,["void","CPString"]), new objj_method(sel_getUid("didChangeValueForKey:"), function $CPObject__didChangeValueForKey_(self, _cmd, aKey)
{
    if (!aKey)
        return;
    if (!self[KVOProxyKey])
    {
        if (self._willChangeMessageCounter && self._willChangeMessageCounter[aKey])
        {
            self._willChangeMessageCounter[aKey] -= 1;
            if (!self._willChangeMessageCounter[aKey])
                delete self._willChangeMessageCounter[aKey];
        }
        else
            (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), "CPKeyValueObservingException", "'didChange...' message called without prior call of 'willChange...'");
    }
}

,["void","CPString"]), new objj_method(sel_getUid("willChange:valuesAtIndexes:forKey:"), function $CPObject__willChange_valuesAtIndexes_forKey_(self, _cmd, aChange, indexes, aKey)
{
    if (!aKey)
        return;
    if (!self[KVOProxyKey])
    {
        if (!self._willChangeMessageCounter)
            self._willChangeMessageCounter = new Object();
        if (!self._willChangeMessageCounter[aKey])
            self._willChangeMessageCounter[aKey] = 1;
        else
            self._willChangeMessageCounter[aKey] += 1;
    }
}

,["void","CPKeyValueChange","CPIndexSet","CPString"]), new objj_method(sel_getUid("didChange:valuesAtIndexes:forKey:"), function $CPObject__didChange_valuesAtIndexes_forKey_(self, _cmd, aChange, indexes, aKey)
{
    if (!aKey)
        return;
    if (!self[KVOProxyKey])
    {
        if (self._willChangeMessageCounter && self._willChangeMessageCounter[aKey])
        {
            self._willChangeMessageCounter[aKey] -= 1;
            if (!self._willChangeMessageCounter[aKey])
                delete self._willChangeMessageCounter[aKey];
        }
        else
            (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), "CPKeyValueObservingException", "'didChange...' message called without prior call of 'willChange...'");
    }
}

,["void","CPKeyValueChange","CPIndexSet","CPString"]), new objj_method(sel_getUid("willChangeValueForKey:withSetMutation:usingObjects:"), function $CPObject__willChangeValueForKey_withSetMutation_usingObjects_(self, _cmd, aKey, aMutationKind, objects)
{
    if (!aKey)
        return;
    if (!self[KVOProxyKey])
    {
        if (!self._willChangeMessageCounter)
            self._willChangeMessageCounter = new Object();
        if (!self._willChangeMessageCounter[aKey])
            self._willChangeMessageCounter[aKey] = 1;
        else
            self._willChangeMessageCounter[aKey] += 1;
    }
}

,["void","CPString","CPKeyValueSetMutationKind","CPSet"]), new objj_method(sel_getUid("didChangeValueForKey:withSetMutation:usingObjects:"), function $CPObject__didChangeValueForKey_withSetMutation_usingObjects_(self, _cmd, aKey, aMutationKind, objects)
{
    if (!self[KVOProxyKey])
    {
        if (self._willChangeMessageCounter && self._willChangeMessageCounter[aKey])
        {
            self._willChangeMessageCounter[aKey] -= 1;
            if (!self._willChangeMessageCounter[aKey])
                delete self._willChangeMessageCounter[aKey];
        }
        else
            (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), "CPKeyValueObservingException", "'didChange...' message called without prior call of 'willChange...'");
    }
}

,["void","CPString","CPKeyValueSetMutationKind","CPSet"]), new objj_method(sel_getUid("addObserver:forKeyPath:options:context:"), function $CPObject__addObserver_forKeyPath_options_context_(self, _cmd, anObserver, aPath, options, aContext)
{
    if (!anObserver || !aPath)
        return;
    ((___r1 = (_CPKVOProxy == null ? null : (_CPKVOProxy.isa.method_msgSend["proxyForObject:"] || _objj_forward)(_CPKVOProxy, (_CPKVOProxy.isa.method_dtable["proxyForObject:"], "proxyForObject:"), self))), ___r1 == null ? null : (___r1.isa.method_msgSend["_addObserver:forKeyPath:options:context:"] || _objj_forward)(___r1, "_addObserver:forKeyPath:options:context:", anObserver, aPath, options, aContext));
    var ___r1;
}

,["void","id","CPString","CPKeyValueObservingOptions","id"]), new objj_method(sel_getUid("removeObserver:forKeyPath:"), function $CPObject__removeObserver_forKeyPath_(self, _cmd, anObserver, aPath)
{
    if (!anObserver || !aPath)
        return;
    ((___r1 = self[KVOProxyKey]), ___r1 == null ? null : (___r1.isa.method_msgSend["_removeObserver:forKeyPath:"] || _objj_forward)(___r1, "_removeObserver:forKeyPath:", anObserver, aPath));
    var ___r1;
}

,["void","id","CPString"]), new objj_method(sel_getUid("applyChange:toKeyPath:"), function $CPObject__applyChange_toKeyPath_(self, _cmd, aChange, aKeyPath)
{
    var changeKind = (aChange == null ? null : (aChange.isa.method_msgSend["objectForKey:"] || _objj_forward)(aChange, (aChange.isa.method_dtable["objectForKey:"], "objectForKey:"), CPKeyValueChangeKindKey)),
        oldValue = (aChange == null ? null : (aChange.isa.method_msgSend["objectForKey:"] || _objj_forward)(aChange, (aChange.isa.method_dtable["objectForKey:"], "objectForKey:"), CPKeyValueChangeOldKey)),
        newValue = (aChange == null ? null : (aChange.isa.method_msgSend["objectForKey:"] || _objj_forward)(aChange, (aChange.isa.method_dtable["objectForKey:"], "objectForKey:"), CPKeyValueChangeNewKey));
    if (newValue === (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null")))
        newValue = nil;
    if (changeKind === CPKeyValueChangeSetting)
        return (self.isa.method_msgSend["setValue:forKeyPath:"] || _objj_forward)(self, (self.isa.method_dtable["setValue:forKeyPath:"], self.isa.method_dtable["setValue:forKeyPath:"], "setValue:forKeyPath:"), newValue, aKeyPath);
    var indexes = (aChange == null ? null : (aChange.isa.method_msgSend["objectForKey:"] || _objj_forward)(aChange, (aChange.isa.method_dtable["objectForKey:"], "objectForKey:"), CPKeyValueChangeIndexesKey));
    if (indexes)
    {
        if (changeKind === CPKeyValueChangeInsertion)
            ((___r1 = (self.isa.method_msgSend["mutableArrayValueForKeyPath:"] || _objj_forward)(self, (self.isa.method_dtable["mutableArrayValueForKeyPath:"], "mutableArrayValueForKeyPath:"), aKeyPath)), ___r1 == null ? null : (___r1.isa.method_msgSend["insertObjects:atIndexes:"] || _objj_forward)(___r1, "insertObjects:atIndexes:", newValue, indexes));
        else if (changeKind === CPKeyValueChangeRemoval)
            ((___r1 = (self.isa.method_msgSend["mutableArrayValueForKeyPath:"] || _objj_forward)(self, (self.isa.method_dtable["mutableArrayValueForKeyPath:"], "mutableArrayValueForKeyPath:"), aKeyPath)), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObjectsAtIndexes:"] || _objj_forward)(___r1, "removeObjectsAtIndexes:", indexes));
        else if (changeKind === CPKeyValueChangeReplacement)
            ((___r1 = (self.isa.method_msgSend["mutableArrayValueForKeyPath:"] || _objj_forward)(self, (self.isa.method_dtable["mutableArrayValueForKeyPath:"], "mutableArrayValueForKeyPath:"), aKeyPath)), ___r1 == null ? null : (___r1.isa.method_msgSend["replaceObjectAtIndexes:withObjects:"] || _objj_forward)(___r1, "replaceObjectAtIndexes:withObjects:", indexes, newValue));
    }
    else
    {
        if (changeKind === CPKeyValueChangeInsertion)
            ((___r1 = (self.isa.method_msgSend["mutableSetValueForKeyPath:"] || _objj_forward)(self, (self.isa.method_dtable["mutableSetValueForKeyPath:"], "mutableSetValueForKeyPath:"), aKeyPath)), ___r1 == null ? null : (___r1.isa.method_msgSend["unionSet:"] || _objj_forward)(___r1, "unionSet:", newValue));
        else if (changeKind === CPKeyValueChangeRemoval)
            ((___r1 = (self.isa.method_msgSend["mutableSetValueForKeyPath:"] || _objj_forward)(self, (self.isa.method_dtable["mutableSetValueForKeyPath:"], "mutableSetValueForKeyPath:"), aKeyPath)), ___r1 == null ? null : (___r1.isa.method_msgSend["minusSet:"] || _objj_forward)(___r1, "minusSet:", oldValue));
        else if (changeKind === CPKeyValueChangeReplacement)
            ((___r1 = (self.isa.method_msgSend["mutableSetValueForKeyPath:"] || _objj_forward)(self, (self.isa.method_dtable["mutableSetValueForKeyPath:"], "mutableSetValueForKeyPath:"), aKeyPath)), ___r1 == null ? null : (___r1.isa.method_msgSend["setSet:"] || _objj_forward)(___r1, "setSet:", newValue));
    }
    var ___r1;
}

,["void","CPDictionary","CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("automaticallyNotifiesObserversForKey:"), function $CPObject__automaticallyNotifiesObserversForKey_(self, _cmd, aKey)
{
    var capitalizedKey = (aKey.charAt(0)).toUpperCase() + aKey.substring(1),
        selector = "automaticallyNotifiesObserversOf" + capitalizedKey,
        aClass = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"));
    if ((aClass == null ? null : (aClass.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(aClass, (aClass.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), selector)))
        return aClass.isa.objj_msgSend0(aClass, selector);
    return YES;
}

,["BOOL","CPString"]), new objj_method(sel_getUid("keyPathsForValuesAffectingValueForKey:"), function $CPObject__keyPathsForValuesAffectingValueForKey_(self, _cmd, aKey)
{
    var capitalizedKey = (aKey.charAt(0)).toUpperCase() + aKey.substring(1),
        selector = "keyPathsForValuesAffecting" + capitalizedKey,
        aClass = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"));
    if ((aClass == null ? null : (aClass.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(aClass, (aClass.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), selector)))
        return aClass.isa.objj_msgSend0(aClass, selector);
    return (CPSet.isa.method_msgSend["set"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["set"], "set"));
}

,["CPSet","CPString"])]);
}
{
var the_class = objj_getClass("CPDictionary")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPDictionary\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("inverseChangeDictionary"), function $CPDictionary__inverseChangeDictionary(self, _cmd)
{
    var inverseChangeDictionary = (self.isa.method_msgSend["mutableCopy"] || _objj_forward)(self, (self.isa.method_dtable["mutableCopy"], "mutableCopy")),
        changeKind = (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), CPKeyValueChangeKindKey);
    if (changeKind === CPKeyValueChangeSetting || changeKind === CPKeyValueChangeReplacement)
    {
        (inverseChangeDictionary == null ? null : (inverseChangeDictionary.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(inverseChangeDictionary, (inverseChangeDictionary.isa.method_dtable["setObject:forKey:"], inverseChangeDictionary.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), CPKeyValueChangeOldKey), CPKeyValueChangeNewKey));
        (inverseChangeDictionary == null ? null : (inverseChangeDictionary.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(inverseChangeDictionary, (inverseChangeDictionary.isa.method_dtable["setObject:forKey:"], inverseChangeDictionary.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), CPKeyValueChangeNewKey), CPKeyValueChangeOldKey));
    }
    else if (changeKind === CPKeyValueChangeInsertion)
    {
        (inverseChangeDictionary == null ? null : (inverseChangeDictionary.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(inverseChangeDictionary, (inverseChangeDictionary.isa.method_dtable["setObject:forKey:"], inverseChangeDictionary.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), CPKeyValueChangeRemoval, CPKeyValueChangeKindKey));
        (inverseChangeDictionary == null ? null : (inverseChangeDictionary.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(inverseChangeDictionary, (inverseChangeDictionary.isa.method_dtable["setObject:forKey:"], inverseChangeDictionary.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), CPKeyValueChangeNewKey), CPKeyValueChangeOldKey));
        (inverseChangeDictionary == null ? null : (inverseChangeDictionary.isa.method_msgSend["removeObjectForKey:"] || _objj_forward)(inverseChangeDictionary, (inverseChangeDictionary.isa.method_dtable["removeObjectForKey:"], "removeObjectForKey:"), CPKeyValueChangeNewKey));
    }
    else if (changeKind === CPKeyValueChangeRemoval)
    {
        (inverseChangeDictionary == null ? null : (inverseChangeDictionary.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(inverseChangeDictionary, (inverseChangeDictionary.isa.method_dtable["setObject:forKey:"], inverseChangeDictionary.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), CPKeyValueChangeInsertion, CPKeyValueChangeKindKey));
        (inverseChangeDictionary == null ? null : (inverseChangeDictionary.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(inverseChangeDictionary, (inverseChangeDictionary.isa.method_dtable["setObject:forKey:"], inverseChangeDictionary.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), CPKeyValueChangeOldKey), CPKeyValueChangeNewKey));
        (inverseChangeDictionary == null ? null : (inverseChangeDictionary.isa.method_msgSend["removeObjectForKey:"] || _objj_forward)(inverseChangeDictionary, (inverseChangeDictionary.isa.method_dtable["removeObjectForKey:"], "removeObjectForKey:"), CPKeyValueChangeOldKey));
    }
    return inverseChangeDictionary;
}

,["CPDictionary"])]);
}
CPKeyValueObservingOptionNew = 1 << 0;
CPKeyValueObservingOptionOld = 1 << 1;
CPKeyValueObservingOptionInitial = 1 << 2;
CPKeyValueObservingOptionPrior = 1 << 3;
CPKeyValueChangeKindKey = "CPKeyValueChangeKindKey";
CPKeyValueChangeNewKey = "CPKeyValueChangeNewKey";
CPKeyValueChangeOldKey = "CPKeyValueChangeOldKey";
CPKeyValueChangeIndexesKey = "CPKeyValueChangeIndexesKey";
CPKeyValueChangeNotificationIsPriorKey = "CPKeyValueChangeNotificationIsPriorKey";
CPKeyValueChangeSetting = 1;
CPKeyValueChangeInsertion = 2;
CPKeyValueChangeRemoval = 3;
CPKeyValueChangeReplacement = 4;
CPKeyValueUnionSetMutation = 1;
CPKeyValueMinusSetMutation = 2;
CPKeyValueIntersectSetMutation = 3;
CPKeyValueSetSetMutation = 4;
_CPKeyValueChangeSetMutationObjectsKey = "_CPKeyValueChangeSetMutationObjectsKey";
_CPKeyValueChangeSetMutationKindKey = "_CPKeyValueChangeSetMutationKindKey";
_CPKeyValueChangeSetMutationNewValueKey = "_CPKeyValueChangeSetMutationNewValueKey";
var _changeKindForSetMutationKind = function(mutationKind)
{
    switch(mutationKind) {
        case CPKeyValueUnionSetMutation:
            return CPKeyValueChangeInsertion;
        case CPKeyValueMinusSetMutation:
            return CPKeyValueChangeRemoval;
        case CPKeyValueIntersectSetMutation:
            return CPKeyValueChangeRemoval;
        case CPKeyValueSetSetMutation:
            return CPKeyValueChangeReplacement;
    }
};
var kvoNewAndOld = CPKeyValueObservingOptionNew | CPKeyValueObservingOptionOld,
    DependentKeysKey = "$KVODEPENDENT",
    KVOProxyKey = "$KVOPROXY";

{var the_class = objj_allocateClassPair(CPObject, "_CPKVOProxy"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_targetObject", "id"), new objj_ivar("_nativeClass", "Class"), new objj_ivar("_changesForKey", "CPDictionary"), new objj_ivar("_nestingForKey", "CPDictionary"), new objj_ivar("_minOptionsForKey", "CPDictionary"), new objj_ivar("_observersForKey", "Object"), new objj_ivar("_observersForKeyLength", "int"), new objj_ivar("_replacedKeys", "CPSet"), new objj_ivar("_adding", "BOOL")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("adding"), function $_CPKVOProxy__adding(self, _cmd)
{
    return self._adding;
}

,["BOOL"]), new objj_method(sel_getUid("setAdding:"), function $_CPKVOProxy__setAdding_(self, _cmd, newValue)
{
    self._adding = newValue;
}

,["void","BOOL"]), new objj_method(sel_getUid("initWithTarget:"), function $_CPKVOProxy__initWithTarget_(self, _cmd, aTarget)
{
    if (self = (objj_getClass("_CPKVOProxy").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        self._targetObject = aTarget;
        self._nativeClass = (aTarget == null ? null : (aTarget.isa.method_msgSend["class"] || _objj_forward)(aTarget, (aTarget.isa.method_dtable["class"], "class")));
        self._observersForKey = {};
        self._changesForKey = {};
        self._nestingForKey = {};
        self._minOptionsForKey = {};
        self._observersForKeyLength = 0;
        (self == null ? null : (self.isa.method_msgSend["_replaceClass"] || _objj_forward)(self, (self.isa.method_dtable["_replaceClass"], "_replaceClass")));
        aTarget[KVOProxyKey] = self;
    }
    return self;
}

,["id","id"]), new objj_method(sel_getUid("_replaceClass"), function $_CPKVOProxy___replaceClass(self, _cmd)
{
    var currentClass = self._nativeClass,
        kvoClassName = "$KVO_" + class_getName(self._nativeClass),
        existingKVOClass = objj_lookUpClass(kvoClassName);
    if (existingKVOClass)
    {
        self._targetObject.isa = existingKVOClass;
        self._replacedKeys = existingKVOClass._replacedKeys;
        return;
    }
    var kvoClass = objj_allocateClassPair(currentClass, kvoClassName);
    objj_registerClassPair(kvoClass);
    self._replacedKeys = (CPSet.isa.method_msgSend["set"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["set"], "set"));
    kvoClass._replacedKeys = self._replacedKeys;
    var methods = class_copyMethodList(_CPKVOModelSubclass);
    if (((___r1 = self._targetObject), ___r1 == null ? null : (___r1.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(___r1, (self._targetObject.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPDictionary.isa.method_msgSend["class"] || _objj_forward)(CPDictionary, (CPDictionary.isa.method_dtable["class"], "class")))))
        methods = methods.concat(class_copyMethodList(_CPKVOModelDictionarySubclass));
    class_addMethods(kvoClass, methods);
    self._targetObject.isa = kvoClass;
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("_replaceModifiersForKey:"), function $_CPKVOProxy___replaceModifiersForKey_(self, _cmd, aKey)
{
    if (!((___r1 = self._replacedKeys), ___r1 == null ? null : (___r1.isa.method_msgSend["containsObject:"] || _objj_forward)(___r1, (self._replacedKeys.isa.method_dtable["containsObject:"], "containsObject:"), aKey)) && ((___r1 = self._nativeClass), ___r1 == null ? null : (___r1.isa.method_msgSend["automaticallyNotifiesObserversForKey:"] || _objj_forward)(___r1, (self._nativeClass.isa.method_dtable["automaticallyNotifiesObserversForKey:"], "automaticallyNotifiesObserversForKey:"), aKey)))
    {
        ((___r1 = self._replacedKeys), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, (self._replacedKeys.isa.method_dtable["addObject:"], "addObject:"), aKey));
        var theClass = self._nativeClass,
            KVOClass = self._targetObject.isa,
            capitalizedKey = (aKey.charAt(0)).toUpperCase() + aKey.substring(1);
        var setKey_selector = sel_getUid("set" + capitalizedKey + ":"),
            setKey_method = class_getInstanceMethod(theClass, setKey_selector);
        if (setKey_method)
        {
            var setKey_method_imp = setKey_method.method_imp;
            class_addMethod(KVOClass, setKey_selector,             function(self, _cmd, anObject)
            {
                (self == null ? null : (self.isa.method_msgSend["willChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:"], "willChangeValueForKey:"), aKey));
                setKey_method_imp(self, _cmd, anObject);
                (self == null ? null : (self.isa.method_msgSend["didChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:"], "didChangeValueForKey:"), aKey));
            }, setKey_method.method_types);
        }
        var _setKey_selector = sel_getUid("_set" + capitalizedKey + ":"),
            _setKey_method = class_getInstanceMethod(theClass, _setKey_selector);
        if (_setKey_method)
        {
            var _setKey_method_imp = _setKey_method.method_imp;
            class_addMethod(KVOClass, _setKey_selector,             function(self, _cmd, anObject)
            {
                (self == null ? null : (self.isa.method_msgSend["willChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:"], "willChangeValueForKey:"), aKey));
                _setKey_method_imp(self, _cmd, anObject);
                (self == null ? null : (self.isa.method_msgSend["didChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:"], "didChangeValueForKey:"), aKey));
            }, _setKey_method.method_types);
        }
        var insertObject_inKeyAtIndex_selector = sel_getUid("insertObject:in" + capitalizedKey + "AtIndex:"),
            insertObject_inKeyAtIndex_method = class_getInstanceMethod(theClass, insertObject_inKeyAtIndex_selector),
            insertKey_atIndexes_selector = sel_getUid("insert" + capitalizedKey + ":atIndexes:"),
            insertKey_atIndexes_method = class_getInstanceMethod(theClass, insertKey_atIndexes_selector),
            removeObjectFromKeyAtIndex_selector = sel_getUid("removeObjectFrom" + capitalizedKey + "AtIndex:"),
            removeObjectFromKeyAtIndex_method = class_getInstanceMethod(theClass, removeObjectFromKeyAtIndex_selector),
            removeKeyAtIndexes_selector = sel_getUid("remove" + capitalizedKey + "AtIndexes:"),
            removeKeyAtIndexes_method = class_getInstanceMethod(theClass, removeKeyAtIndexes_selector);
        if ((insertObject_inKeyAtIndex_method || insertKey_atIndexes_method) && (removeObjectFromKeyAtIndex_method || removeKeyAtIndexes_method))
        {
            if (insertObject_inKeyAtIndex_method)
            {
                var insertObject_inKeyAtIndex_method_imp = insertObject_inKeyAtIndex_method.method_imp;
                class_addMethod(KVOClass, insertObject_inKeyAtIndex_selector,                 function(self, _cmd, anObject, anIndex)
                {
                    (self == null ? null : (self.isa.method_msgSend["willChange:valuesAtIndexes:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], "willChange:valuesAtIndexes:forKey:"), CPKeyValueChangeInsertion, (CPIndexSet.isa.method_msgSend["indexSetWithIndex:"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSetWithIndex:"], "indexSetWithIndex:"), anIndex), aKey));
                    insertObject_inKeyAtIndex_method_imp(self, _cmd, anObject, anIndex);
                    (self == null ? null : (self.isa.method_msgSend["didChange:valuesAtIndexes:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], "didChange:valuesAtIndexes:forKey:"), CPKeyValueChangeInsertion, (CPIndexSet.isa.method_msgSend["indexSetWithIndex:"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSetWithIndex:"], "indexSetWithIndex:"), anIndex), aKey));
                }, insertObject_inKeyAtIndex_method.method_types);
            }
            if (insertKey_atIndexes_method)
            {
                var insertKey_atIndexes_method_imp = insertKey_atIndexes_method.method_imp;
                class_addMethod(KVOClass, insertKey_atIndexes_selector,                 function(self, _cmd, objects, indexes)
                {
                    (self == null ? null : (self.isa.method_msgSend["willChange:valuesAtIndexes:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], "willChange:valuesAtIndexes:forKey:"), CPKeyValueChangeInsertion, (indexes == null ? null : (indexes.isa.method_msgSend["copy"] || _objj_forward)(indexes, (indexes.isa.method_dtable["copy"], "copy"))), aKey));
                    insertKey_atIndexes_method_imp(self, _cmd, objects, indexes);
                    (self == null ? null : (self.isa.method_msgSend["didChange:valuesAtIndexes:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], "didChange:valuesAtIndexes:forKey:"), CPKeyValueChangeInsertion, (indexes == null ? null : (indexes.isa.method_msgSend["copy"] || _objj_forward)(indexes, (indexes.isa.method_dtable["copy"], "copy"))), aKey));
                }, insertKey_atIndexes_method.method_types);
            }
            if (removeObjectFromKeyAtIndex_method)
            {
                var removeObjectFromKeyAtIndex_method_imp = removeObjectFromKeyAtIndex_method.method_imp;
                class_addMethod(KVOClass, removeObjectFromKeyAtIndex_selector,                 function(self, _cmd, anIndex)
                {
                    (self == null ? null : (self.isa.method_msgSend["willChange:valuesAtIndexes:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], "willChange:valuesAtIndexes:forKey:"), CPKeyValueChangeRemoval, (CPIndexSet.isa.method_msgSend["indexSetWithIndex:"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSetWithIndex:"], "indexSetWithIndex:"), anIndex), aKey));
                    removeObjectFromKeyAtIndex_method_imp(self, _cmd, anIndex);
                    (self == null ? null : (self.isa.method_msgSend["didChange:valuesAtIndexes:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], "didChange:valuesAtIndexes:forKey:"), CPKeyValueChangeRemoval, (CPIndexSet.isa.method_msgSend["indexSetWithIndex:"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSetWithIndex:"], "indexSetWithIndex:"), anIndex), aKey));
                }, removeObjectFromKeyAtIndex_method.method_types);
            }
            if (removeKeyAtIndexes_method)
            {
                var removeKeyAtIndexes_method_imp = removeKeyAtIndexes_method.method_imp;
                class_addMethod(KVOClass, removeKeyAtIndexes_selector,                 function(self, _cmd, indexes)
                {
                    (self == null ? null : (self.isa.method_msgSend["willChange:valuesAtIndexes:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], "willChange:valuesAtIndexes:forKey:"), CPKeyValueChangeRemoval, (indexes == null ? null : (indexes.isa.method_msgSend["copy"] || _objj_forward)(indexes, (indexes.isa.method_dtable["copy"], "copy"))), aKey));
                    removeKeyAtIndexes_method_imp(self, _cmd, indexes);
                    (self == null ? null : (self.isa.method_msgSend["didChange:valuesAtIndexes:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], "didChange:valuesAtIndexes:forKey:"), CPKeyValueChangeRemoval, (indexes == null ? null : (indexes.isa.method_msgSend["copy"] || _objj_forward)(indexes, (indexes.isa.method_dtable["copy"], "copy"))), aKey));
                }, removeKeyAtIndexes_method.method_types);
            }
            var replaceObjectInKeyAtIndex_withObject_selector = sel_getUid("replaceObjectIn" + capitalizedKey + "AtIndex:withObject:"),
                replaceObjectInKeyAtIndex_withObject_method = class_getInstanceMethod(theClass, replaceObjectInKeyAtIndex_withObject_selector);
            if (replaceObjectInKeyAtIndex_withObject_method)
            {
                var replaceObjectInKeyAtIndex_withObject_method_imp = replaceObjectInKeyAtIndex_withObject_method.method_imp;
                class_addMethod(KVOClass, replaceObjectInKeyAtIndex_withObject_selector,                 function(self, _cmd, anIndex, anObject)
                {
                    (self == null ? null : (self.isa.method_msgSend["willChange:valuesAtIndexes:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], "willChange:valuesAtIndexes:forKey:"), CPKeyValueChangeReplacement, (CPIndexSet.isa.method_msgSend["indexSetWithIndex:"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSetWithIndex:"], "indexSetWithIndex:"), anIndex), aKey));
                    replaceObjectInKeyAtIndex_withObject_method_imp(self, _cmd, anIndex, anObject);
                    (self == null ? null : (self.isa.method_msgSend["didChange:valuesAtIndexes:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], "didChange:valuesAtIndexes:forKey:"), CPKeyValueChangeReplacement, (CPIndexSet.isa.method_msgSend["indexSetWithIndex:"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSetWithIndex:"], "indexSetWithIndex:"), anIndex), aKey));
                }, replaceObjectInKeyAtIndex_withObject_method.method_types);
            }
            var replaceKeyAtIndexes_withKey_selector = sel_getUid("replace" + capitalizedKey + "AtIndexes:with" + capitalizedKey + ":"),
                replaceKeyAtIndexes_withKey_method = class_getInstanceMethod(theClass, replaceKeyAtIndexes_withKey_selector);
            if (replaceKeyAtIndexes_withKey_method)
            {
                var replaceKeyAtIndexes_withKey_method_imp = replaceKeyAtIndexes_withKey_method.method_imp;
                class_addMethod(KVOClass, replaceKeyAtIndexes_withKey_selector,                 function(self, _cmd, indexes, objects)
                {
                    (self == null ? null : (self.isa.method_msgSend["willChange:valuesAtIndexes:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["willChange:valuesAtIndexes:forKey:"], "willChange:valuesAtIndexes:forKey:"), CPKeyValueChangeReplacement, (indexes == null ? null : (indexes.isa.method_msgSend["copy"] || _objj_forward)(indexes, (indexes.isa.method_dtable["copy"], "copy"))), aKey));
                    replaceObjectInKeyAtIndex_withObject_method_imp(self, _cmd, indexes, objects);
                    (self == null ? null : (self.isa.method_msgSend["didChange:valuesAtIndexes:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], self.isa.method_dtable["didChange:valuesAtIndexes:forKey:"], "didChange:valuesAtIndexes:forKey:"), CPKeyValueChangeReplacement, (indexes == null ? null : (indexes.isa.method_msgSend["copy"] || _objj_forward)(indexes, (indexes.isa.method_dtable["copy"], "copy"))), aKey));
                }, replaceKeyAtIndexes_withKey_method.method_types);
            }
        }
        var addKeyObject_selector = sel_getUid("add" + capitalizedKey + "Object:"),
            addKeyObject_method = class_getInstanceMethod(theClass, addKeyObject_selector),
            addKey_selector = sel_getUid("add" + capitalizedKey + ":"),
            addKey_method = class_getInstanceMethod(theClass, addKey_selector),
            removeKeyObject_selector = sel_getUid("remove" + capitalizedKey + "Object:"),
            removeKeyObject_method = class_getInstanceMethod(theClass, removeKeyObject_selector),
            removeKey_selector = sel_getUid("remove" + capitalizedKey + ":"),
            removeKey_method = class_getInstanceMethod(theClass, removeKey_selector);
        if ((addKeyObject_method || addKey_method) && (removeKeyObject_method || removeKey_method))
        {
            if (addKeyObject_method)
            {
                var addKeyObject_method_imp = addKeyObject_method.method_imp;
                class_addMethod(KVOClass, addKeyObject_selector,                 function(self, _cmd, anObject)
                {
                    (self == null ? null : (self.isa.method_msgSend["willChangeValueForKey:withSetMutation:usingObjects:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["willChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["willChangeValueForKey:withSetMutation:usingObjects:"], "willChangeValueForKey:withSetMutation:usingObjects:"), aKey, CPKeyValueUnionSetMutation, (CPSet.isa.method_msgSend["setWithObject:"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["setWithObject:"], "setWithObject:"), anObject)));
                    addKeyObject_method_imp(self, _cmd, anObject);
                    (self == null ? null : (self.isa.method_msgSend["didChangeValueForKey:withSetMutation:usingObjects:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["didChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["didChangeValueForKey:withSetMutation:usingObjects:"], "didChangeValueForKey:withSetMutation:usingObjects:"), aKey, CPKeyValueUnionSetMutation, (CPSet.isa.method_msgSend["setWithObject:"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["setWithObject:"], "setWithObject:"), anObject)));
                }, addKeyObject_method.method_types);
            }
            if (addKey_method)
            {
                var addKey_method_imp = addKey_method.method_imp;
                class_addMethod(KVOClass, addKey_selector,                 function(self, _cmd, objects)
                {
                    (self == null ? null : (self.isa.method_msgSend["willChangeValueForKey:withSetMutation:usingObjects:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["willChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["willChangeValueForKey:withSetMutation:usingObjects:"], "willChangeValueForKey:withSetMutation:usingObjects:"), aKey, CPKeyValueUnionSetMutation, (objects == null ? null : (objects.isa.method_msgSend["copy"] || _objj_forward)(objects, (objects.isa.method_dtable["copy"], "copy")))));
                    addKey_method_imp(self, _cmd, objects);
                    (self == null ? null : (self.isa.method_msgSend["didChangeValueForKey:withSetMutation:usingObjects:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["didChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["didChangeValueForKey:withSetMutation:usingObjects:"], "didChangeValueForKey:withSetMutation:usingObjects:"), aKey, CPKeyValueUnionSetMutation, (objects == null ? null : (objects.isa.method_msgSend["copy"] || _objj_forward)(objects, (objects.isa.method_dtable["copy"], "copy")))));
                }, addKey_method.method_types);
            }
            if (removeKeyObject_method)
            {
                var removeKeyObject_method_imp = removeKeyObject_method.method_imp;
                class_addMethod(KVOClass, removeKeyObject_selector,                 function(self, _cmd, anObject)
                {
                    (self == null ? null : (self.isa.method_msgSend["willChangeValueForKey:withSetMutation:usingObjects:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["willChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["willChangeValueForKey:withSetMutation:usingObjects:"], "willChangeValueForKey:withSetMutation:usingObjects:"), aKey, CPKeyValueMinusSetMutation, (CPSet.isa.method_msgSend["setWithObject:"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["setWithObject:"], "setWithObject:"), anObject)));
                    removeKeyObject_method_imp(self, _cmd, anObject);
                    (self == null ? null : (self.isa.method_msgSend["didChangeValueForKey:withSetMutation:usingObjects:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["didChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["didChangeValueForKey:withSetMutation:usingObjects:"], "didChangeValueForKey:withSetMutation:usingObjects:"), aKey, CPKeyValueMinusSetMutation, (CPSet.isa.method_msgSend["setWithObject:"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["setWithObject:"], "setWithObject:"), anObject)));
                }, removeKeyObject_method.method_types);
            }
            if (removeKey_method)
            {
                var removeKey_method_imp = removeKey_method.method_imp;
                class_addMethod(KVOClass, removeKey_selector,                 function(self, _cmd, objects)
                {
                    (self == null ? null : (self.isa.method_msgSend["willChangeValueForKey:withSetMutation:usingObjects:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["willChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["willChangeValueForKey:withSetMutation:usingObjects:"], "willChangeValueForKey:withSetMutation:usingObjects:"), aKey, CPKeyValueMinusSetMutation, (objects == null ? null : (objects.isa.method_msgSend["copy"] || _objj_forward)(objects, (objects.isa.method_dtable["copy"], "copy")))));
                    removeKey_method_imp(self, _cmd, objects);
                    (self == null ? null : (self.isa.method_msgSend["didChangeValueForKey:withSetMutation:usingObjects:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["didChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["didChangeValueForKey:withSetMutation:usingObjects:"], "didChangeValueForKey:withSetMutation:usingObjects:"), aKey, CPKeyValueMinusSetMutation, (objects == null ? null : (objects.isa.method_msgSend["copy"] || _objj_forward)(objects, (objects.isa.method_dtable["copy"], "copy")))));
                }, removeKey_method.method_types);
            }
            var intersectKey_selector = sel_getUid("intersect" + capitalizedKey + ":"),
                intersectKey_method = class_getInstanceMethod(theClass, intersectKey_selector);
            if (intersectKey_method)
            {
                var intersectKey_method_imp = intersectKey_method.method_imp;
                class_addMethod(KVOClass, intersectKey_selector,                 function(self, _cmd, aSet)
                {
                    (self == null ? null : (self.isa.method_msgSend["willChangeValueForKey:withSetMutation:usingObjects:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["willChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["willChangeValueForKey:withSetMutation:usingObjects:"], "willChangeValueForKey:withSetMutation:usingObjects:"), aKey, CPKeyValueIntersectSetMutation, (aSet == null ? null : (aSet.isa.method_msgSend["copy"] || _objj_forward)(aSet, (aSet.isa.method_dtable["copy"], "copy")))));
                    intersectKey_method_imp(self, _cmd, aSet);
                    (self == null ? null : (self.isa.method_msgSend["didChangeValueForKey:withSetMutation:usingObjects:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["didChangeValueForKey:withSetMutation:usingObjects:"], self.isa.method_dtable["didChangeValueForKey:withSetMutation:usingObjects:"], "didChangeValueForKey:withSetMutation:usingObjects:"), aKey, CPKeyValueIntersectSetMutation, (aSet == null ? null : (aSet.isa.method_msgSend["copy"] || _objj_forward)(aSet, (aSet.isa.method_dtable["copy"], "copy")))));
                }, intersectKey_method.method_types);
            }
        }
    }
    var affectingKeys = ((___r1 = ((___r2 = self._nativeClass), ___r2 == null ? null : (___r2.isa.method_msgSend["keyPathsForValuesAffectingValueForKey:"] || _objj_forward)(___r2, (self._nativeClass.isa.method_dtable["keyPathsForValuesAffectingValueForKey:"], "keyPathsForValuesAffectingValueForKey:"), aKey))), ___r1 == null ? null : (___r1.isa.method_msgSend["allObjects"] || _objj_forward)(___r1, "allObjects")),
        affectingKeysCount = affectingKeys ? affectingKeys.length : 0;
    if (!affectingKeysCount)
        return;
    var dependentKeysForClass = self._nativeClass[DependentKeysKey];
    if (!dependentKeysForClass)
    {
        dependentKeysForClass = {};
        self._nativeClass[DependentKeysKey] = dependentKeysForClass;
    }
    while (affectingKeysCount--)
    {
        var affectingKey = affectingKeys[affectingKeysCount],
            affectedKeys = dependentKeysForClass[affectingKey];
        if (!affectedKeys)
        {
            affectedKeys = (CPSet.isa.method_msgSend["new"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["new"], "new"));
            dependentKeysForClass[affectingKey] = affectedKeys;
        }
        (affectedKeys == null ? null : (affectedKeys.isa.method_msgSend["addObject:"] || _objj_forward)(affectedKeys, (affectedKeys.isa.method_dtable["addObject:"], "addObject:"), aKey));
        if (affectingKey.indexOf(".") !== -1)
            ((___r1 = self._targetObject), ___r1 == null ? null : (___r1.isa.method_msgSend["addObserver:forKeyPath:options:context:"] || _objj_forward)(___r1, (self._targetObject.isa.method_dtable["addObserver:forKeyPath:options:context:"], self._targetObject.isa.method_dtable["addObserver:forKeyPath:options:context:"], self._targetObject.isa.method_dtable["addObserver:forKeyPath:options:context:"], self._targetObject.isa.method_dtable["addObserver:forKeyPath:options:context:"], "addObserver:forKeyPath:options:context:"), self, affectingKey, CPKeyValueObservingOptionPrior | kvoNewAndOld, nil));
        else
            (self.isa.method_msgSend["_replaceModifiersForKey:"] || _objj_forward)(self, (self.isa.method_dtable["_replaceModifiersForKey:"], "_replaceModifiersForKey:"), affectingKey);
    }
    var ___r1, ___r2;
}

,["void","CPString"]), new objj_method(sel_getUid("observeValueForKeyPath:ofObject:change:context:"), function $_CPKVOProxy__observeValueForKeyPath_ofObject_change_context_(self, _cmd, theKeyPath, theObject, theChanges, theContext)
{
    var dependentKeysForClass = self._nativeClass[DependentKeysKey],
        dependantKeys = ((___r1 = dependentKeysForClass[theKeyPath]), ___r1 == null ? null : (___r1.isa.method_msgSend["allObjects"] || _objj_forward)(___r1, "allObjects")),
        isBeforeFlag = !!(theChanges == null ? null : (theChanges.isa.method_msgSend["objectForKey:"] || _objj_forward)(theChanges, (theChanges.isa.method_dtable["objectForKey:"], "objectForKey:"), CPKeyValueChangeNotificationIsPriorKey));
    for (var i = 0; i < (dependantKeys == null ? null : (dependantKeys.isa.method_msgSend["count"] || _objj_forward)(dependantKeys, (dependantKeys.isa.method_dtable["count"], "count"))); i++)
    {
        var dependantKey = (dependantKeys == null ? null : (dependantKeys.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(dependantKeys, (dependantKeys.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i));
        (self.isa.method_msgSend["_sendNotificationsForKey:changeOptions:isBefore:"] || _objj_forward)(self, (self.isa.method_dtable["_sendNotificationsForKey:changeOptions:isBefore:"], self.isa.method_dtable["_sendNotificationsForKey:changeOptions:isBefore:"], self.isa.method_dtable["_sendNotificationsForKey:changeOptions:isBefore:"], "_sendNotificationsForKey:changeOptions:isBefore:"), dependantKey, theChanges, isBeforeFlag);
    }
    var ___r1;
}

,["void","CPString","id","CPDictionary","id"]), new objj_method(sel_getUid("_addObserver:forKeyPath:options:context:"), function $_CPKVOProxy___addObserver_forKeyPath_options_context_(self, _cmd, anObserver, aPath, options, aContext)
{
    if (!anObserver)
        return;
    var forwarder = nil;
    if (aPath.indexOf('.') !== CPNotFound && aPath.charAt(0) !== '@')
        forwarder = ((___r1 = (_CPKVOForwardingObserver == null ? null : (_CPKVOForwardingObserver.isa.method_msgSend["alloc"] || _objj_forward)(_CPKVOForwardingObserver, (_CPKVOForwardingObserver.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithKeyPath:object:observer:options:context:"] || _objj_forward)(___r1, "initWithKeyPath:object:observer:options:context:", aPath, self._targetObject, anObserver, options, aContext));
    else
        (self.isa.method_msgSend["_replaceModifiersForKey:"] || _objj_forward)(self, (self.isa.method_dtable["_replaceModifiersForKey:"], "_replaceModifiersForKey:"), aPath);
    var observers = self._observersForKey[aPath];
    if (!observers)
    {
        observers = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        self._observersForKey[aPath] = observers;
        self._observersForKeyLength++;
    }
    (observers == null ? null : (observers.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(observers, (observers.isa.method_dtable["setObject:forKey:"], observers.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), _CPKVOInfoMake(anObserver, options, aContext, forwarder), (anObserver == null ? null : (anObserver.isa.method_msgSend["UID"] || _objj_forward)(anObserver, (anObserver.isa.method_dtable["UID"], "UID")))));
    if (options & CPKeyValueObservingOptionInitial)
    {
        var changes;
        if (options & CPKeyValueObservingOptionNew)
        {
            var newValue = ((___r1 = self._targetObject), ___r1 == null ? null : (___r1.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(___r1, (self._targetObject.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), aPath));
            if (newValue == nil)
                newValue = (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null"));
            changes = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", [CPKeyValueChangeSetting, newValue], [CPKeyValueChangeKindKey, CPKeyValueChangeNewKey]));
        }
        else
        {
            changes = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", [CPKeyValueChangeSetting], [CPKeyValueChangeKindKey]));
        }
        (anObserver == null ? null : (anObserver.isa.method_msgSend["observeValueForKeyPath:ofObject:change:context:"] || _objj_forward)(anObserver, (anObserver.isa.method_dtable["observeValueForKeyPath:ofObject:change:context:"], anObserver.isa.method_dtable["observeValueForKeyPath:ofObject:change:context:"], anObserver.isa.method_dtable["observeValueForKeyPath:ofObject:change:context:"], anObserver.isa.method_dtable["observeValueForKeyPath:ofObject:change:context:"], "observeValueForKeyPath:ofObject:change:context:"), aPath, self._targetObject, changes, aContext));
    }
    var ___r1;
}

,["void","id","CPString","CPKeyValueObservingOptions","id"]), new objj_method(sel_getUid("_removeObserver:forKeyPath:"), function $_CPKVOProxy___removeObserver_forKeyPath_(self, _cmd, anObserver, aPath)
{
    var observers = self._observersForKey[aPath];
    if (!observers)
    {
        if (!self._adding)
            CPLog.warn("Cannot remove an observer %@ for the key path \"%@\" from %@ because it is not registered as an observer.", self._targetObject, aPath, anObserver);
        return;
    }
    if (aPath.indexOf('.') != CPNotFound)
    {
        var observer = (observers == null ? null : (observers.isa.method_msgSend["objectForKey:"] || _objj_forward)(observers, (observers.isa.method_dtable["objectForKey:"], "objectForKey:"), (anObserver == null ? null : (anObserver.isa.method_msgSend["UID"] || _objj_forward)(anObserver, (anObserver.isa.method_dtable["UID"], "UID"))))),
            forwarder = observer ? observer.forwarder : nil;
        (forwarder == null ? null : (forwarder.isa.method_msgSend["finalize"] || _objj_forward)(forwarder, (forwarder.isa.method_dtable["finalize"], "finalize")));
    }
    (observers == null ? null : (observers.isa.method_msgSend["removeObjectForKey:"] || _objj_forward)(observers, (observers.isa.method_dtable["removeObjectForKey:"], "removeObjectForKey:"), (anObserver == null ? null : (anObserver.isa.method_msgSend["UID"] || _objj_forward)(anObserver, (anObserver.isa.method_dtable["UID"], "UID")))));
    if (!(observers == null ? null : (observers.isa.method_msgSend["count"] || _objj_forward)(observers, (observers.isa.method_dtable["count"], "count"))))
    {
        self._observersForKeyLength--;
        delete self._observersForKey[aPath];
    }
    if (!self._observersForKeyLength)
    {
        self._targetObject.isa = self._nativeClass;
        delete self._targetObject[KVOProxyKey];
    }
}

,["void","id","CPString"]), new objj_method(sel_getUid("_sendNotificationsForKey:changeOptions:isBefore:"), function $_CPKVOProxy___sendNotificationsForKey_changeOptions_isBefore_(self, _cmd, aKey, changeOptions, isBefore)
{
    var changes = self._changesForKey[aKey],
        observers = ((___r1 = self._observersForKey[aKey]), ___r1 == null ? null : (___r1.isa.method_msgSend["allValues"] || _objj_forward)(___r1, "allValues")),
        observersMinimumOptions = 0;
    if (isBefore)
    {
        if (changes)
        {
            var level = self._nestingForKey[aKey];
            if (!level)
                (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInternalInconsistencyException, "_changesForKey without _nestingForKey");
            self._nestingForKey[aKey] = level + 1;
            return;
        }
        self._nestingForKey[aKey] = 1;
        var count = observers ? observers.length : 0;
        while (count--)
        {
            var observerInfo = observers[count];
            observersMinimumOptions |= observerInfo.options & kvoNewAndOld;
        }
        self._minOptionsForKey[aKey] = observersMinimumOptions;
        changes = changeOptions;
        if (observersMinimumOptions & CPKeyValueObservingOptionOld)
        {
            var indexes = (changes == null ? null : (changes.isa.method_msgSend["objectForKey:"] || _objj_forward)(changes, (changes.isa.method_dtable["objectForKey:"], "objectForKey:"), CPKeyValueChangeIndexesKey)),
                setMutationKind = changes[_CPKeyValueChangeSetMutationKindKey];
            if (setMutationKind)
            {
                var setMutationObjects = ((___r1 = changes[_CPKeyValueChangeSetMutationObjectsKey]), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy")),
                    setExistingObjects = ((___r1 = ((___r2 = self._targetObject), ___r2 == null ? null : (___r2.isa.method_msgSend["valueForKey:"] || _objj_forward)(___r2, (self._targetObject.isa.method_dtable["valueForKey:"], "valueForKey:"), aKey))), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
                if (setMutationKind == CPKeyValueMinusSetMutation)
                {
                    (setExistingObjects == null ? null : (setExistingObjects.isa.method_msgSend["intersectSet:"] || _objj_forward)(setExistingObjects, (setExistingObjects.isa.method_dtable["intersectSet:"], "intersectSet:"), setMutationObjects));
                    (changes == null ? null : (changes.isa.method_msgSend["setValue:forKey:"] || _objj_forward)(changes, (changes.isa.method_dtable["setValue:forKey:"], changes.isa.method_dtable["setValue:forKey:"], "setValue:forKey:"), setExistingObjects, CPKeyValueChangeOldKey));
                }
                else if (setMutationKind === CPKeyValueIntersectSetMutation || setMutationKind === CPKeyValueSetSetMutation)
                {
                    (setExistingObjects == null ? null : (setExistingObjects.isa.method_msgSend["minusSet:"] || _objj_forward)(setExistingObjects, (setExistingObjects.isa.method_dtable["minusSet:"], "minusSet:"), setMutationObjects));
                    (changes == null ? null : (changes.isa.method_msgSend["setValue:forKey:"] || _objj_forward)(changes, (changes.isa.method_dtable["setValue:forKey:"], changes.isa.method_dtable["setValue:forKey:"], "setValue:forKey:"), setExistingObjects, CPKeyValueChangeOldKey));
                }
                if (setMutationKind === CPKeyValueUnionSetMutation || setMutationKind === CPKeyValueSetSetMutation)
                {
                    (setMutationObjects == null ? null : (setMutationObjects.isa.method_msgSend["minusSet:"] || _objj_forward)(setMutationObjects, (setMutationObjects.isa.method_dtable["minusSet:"], "minusSet:"), setExistingObjects));
                    changes[_CPKeyValueChangeSetMutationNewValueKey] = setMutationObjects;
                }
            }
            else if (indexes)
            {
                var type = (changes == null ? null : (changes.isa.method_msgSend["objectForKey:"] || _objj_forward)(changes, (changes.isa.method_dtable["objectForKey:"], "objectForKey:"), CPKeyValueChangeKindKey));
                if (type === CPKeyValueChangeReplacement || type === CPKeyValueChangeRemoval)
                {
                    var newValues = ((___r1 = ((___r2 = self._targetObject), ___r2 == null ? null : (___r2.isa.method_msgSend["mutableArrayValueForKeyPath:"] || _objj_forward)(___r2, (self._targetObject.isa.method_dtable["mutableArrayValueForKeyPath:"], "mutableArrayValueForKeyPath:"), aKey))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectsAtIndexes:"] || _objj_forward)(___r1, "objectsAtIndexes:", indexes));
                    (changes == null ? null : (changes.isa.method_msgSend["setValue:forKey:"] || _objj_forward)(changes, (changes.isa.method_dtable["setValue:forKey:"], changes.isa.method_dtable["setValue:forKey:"], "setValue:forKey:"), newValues, CPKeyValueChangeOldKey));
                }
            }
            else
            {
                var oldValue = ((___r1 = self._targetObject), ___r1 == null ? null : (___r1.isa.method_msgSend["valueForKey:"] || _objj_forward)(___r1, (self._targetObject.isa.method_dtable["valueForKey:"], "valueForKey:"), aKey));
                if (oldValue === nil || oldValue === undefined)
                    oldValue = (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null"));
                (changes == null ? null : (changes.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(changes, (changes.isa.method_dtable["setObject:forKey:"], changes.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), oldValue, CPKeyValueChangeOldKey));
            }
        }
        (changes == null ? null : (changes.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(changes, (changes.isa.method_dtable["setObject:forKey:"], changes.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), 1, CPKeyValueChangeNotificationIsPriorKey));
        self._changesForKey[aKey] = changes;
        observersMinimumOptions &= ~CPKeyValueObservingOptionNew;
    }
    else
    {
        var level = self._nestingForKey[aKey];
        if (!changes || !level)
        {
            if (self._targetObject._willChangeMessageCounter && self._targetObject._willChangeMessageCounter[aKey])
            {
                self._targetObject._willChangeMessageCounter[aKey] -= 1;
                if (!self._targetObject._willChangeMessageCounter[aKey])
                    delete self._targetObject._willChangeMessageCounter[aKey];
                return;
            }
            else
                (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), "CPKeyValueObservingException", "'didChange...' message called without prior call of 'willChange...'");
        }
        self._nestingForKey[aKey] = level - 1;
        if (level - 1 > 0)
        {
            return;
        }
        delete self._nestingForKey[aKey];
        (changes == null ? null : (changes.isa.method_msgSend["removeObjectForKey:"] || _objj_forward)(changes, (changes.isa.method_dtable["removeObjectForKey:"], "removeObjectForKey:"), CPKeyValueChangeNotificationIsPriorKey));
        observersMinimumOptions = self._minOptionsForKey[aKey];
        if (observersMinimumOptions & CPKeyValueObservingOptionNew)
        {
            var indexes = (changes == null ? null : (changes.isa.method_msgSend["objectForKey:"] || _objj_forward)(changes, (changes.isa.method_dtable["objectForKey:"], "objectForKey:"), CPKeyValueChangeIndexesKey)),
                setMutationKind = changes[_CPKeyValueChangeSetMutationKindKey];
            if (setMutationKind)
            {
                var newValue = changes[_CPKeyValueChangeSetMutationNewValueKey];
                (changes == null ? null : (changes.isa.method_msgSend["setValue:forKey:"] || _objj_forward)(changes, (changes.isa.method_dtable["setValue:forKey:"], changes.isa.method_dtable["setValue:forKey:"], "setValue:forKey:"), newValue, CPKeyValueChangeNewKey));
                delete changes[_CPKeyValueChangeSetMutationNewValueKey];
                delete changes[_CPKeyValueChangeSetMutationObjectsKey];
                delete changes[_CPKeyValueChangeSetMutationKindKey];
            }
            else if (indexes)
            {
                var type = (changes == null ? null : (changes.isa.method_msgSend["objectForKey:"] || _objj_forward)(changes, (changes.isa.method_dtable["objectForKey:"], "objectForKey:"), CPKeyValueChangeKindKey));
                if (type == CPKeyValueChangeReplacement || type == CPKeyValueChangeInsertion)
                {
                    var newValues = ((___r1 = ((___r2 = self._targetObject), ___r2 == null ? null : (___r2.isa.method_msgSend["mutableArrayValueForKeyPath:"] || _objj_forward)(___r2, (self._targetObject.isa.method_dtable["mutableArrayValueForKeyPath:"], "mutableArrayValueForKeyPath:"), aKey))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectsAtIndexes:"] || _objj_forward)(___r1, "objectsAtIndexes:", indexes));
                    (changes == null ? null : (changes.isa.method_msgSend["setValue:forKey:"] || _objj_forward)(changes, (changes.isa.method_dtable["setValue:forKey:"], changes.isa.method_dtable["setValue:forKey:"], "setValue:forKey:"), newValues, CPKeyValueChangeNewKey));
                }
            }
            else
            {
                var newValue = ((___r1 = self._targetObject), ___r1 == null ? null : (___r1.isa.method_msgSend["valueForKey:"] || _objj_forward)(___r1, (self._targetObject.isa.method_dtable["valueForKey:"], "valueForKey:"), aKey));
                if (newValue === nil || newValue === undefined)
                    newValue = (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null"));
                (changes == null ? null : (changes.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(changes, (changes.isa.method_dtable["setObject:forKey:"], changes.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), newValue, CPKeyValueChangeNewKey));
            }
        }
        delete self._minOptionsForKey[aKey];
        delete self._changesForKey[aKey];
    }
    var count = observers ? observers.length : 0,
        changesCache = {};
    while (count--)
    {
        var observerInfo = observers[count],
            options = observerInfo.options,
            onlyNewAndOldOptions = options & kvoNewAndOld,
            observerChanges = nil;
        if (isBefore)
        {
            if (options & CPKeyValueObservingOptionPrior)
            {
                observerChanges = changes;
                onlyNewAndOldOptions &= ~CPKeyValueObservingOptionNew;
            }
        }
        else
        {
            observerChanges = changes;
        }
        if (observerChanges)
        {
            if (onlyNewAndOldOptions !== observersMinimumOptions)
            {
                observerChanges = changesCache[onlyNewAndOldOptions];
                if (!observerChanges)
                {
                    changesCache[onlyNewAndOldOptions] = observerChanges = (changes == null ? null : (changes.isa.method_msgSend["mutableCopy"] || _objj_forward)(changes, (changes.isa.method_dtable["mutableCopy"], "mutableCopy")));
                    if (!(onlyNewAndOldOptions & CPKeyValueObservingOptionOld))
                        (observerChanges == null ? null : (observerChanges.isa.method_msgSend["removeObjectForKey:"] || _objj_forward)(observerChanges, (observerChanges.isa.method_dtable["removeObjectForKey:"], "removeObjectForKey:"), CPKeyValueChangeOldKey));
                    if (!(onlyNewAndOldOptions & CPKeyValueObservingOptionNew))
                        (observerChanges == null ? null : (observerChanges.isa.method_msgSend["removeObjectForKey:"] || _objj_forward)(observerChanges, (observerChanges.isa.method_dtable["removeObjectForKey:"], "removeObjectForKey:"), CPKeyValueChangeNewKey));
                }
            }
            ((___r1 = observerInfo.observer), ___r1 == null ? null : (___r1.isa.method_msgSend["observeValueForKeyPath:ofObject:change:context:"] || _objj_forward)(___r1, "observeValueForKeyPath:ofObject:change:context:", aKey, self._targetObject, observerChanges, observerInfo.context));
        }
    }
    var dependentKeysMap = self._nativeClass[DependentKeysKey];
    if (!dependentKeysMap)
        return;
    var dependentKeyPaths = ((___r1 = dependentKeysMap[aKey]), ___r1 == null ? null : (___r1.isa.method_msgSend["allObjects"] || _objj_forward)(___r1, "allObjects"));
    if (!dependentKeyPaths)
        return;
    var index = 0,
        count = (dependentKeyPaths == null ? null : (dependentKeyPaths.isa.method_msgSend["count"] || _objj_forward)(dependentKeyPaths, (dependentKeyPaths.isa.method_dtable["count"], "count")));
    for (; index < count; ++index)
    {
        var keyPath = dependentKeyPaths[index];
        (self.isa.method_msgSend["_sendNotificationsForKey:changeOptions:isBefore:"] || _objj_forward)(self, (self.isa.method_dtable["_sendNotificationsForKey:changeOptions:isBefore:"], self.isa.method_dtable["_sendNotificationsForKey:changeOptions:isBefore:"], self.isa.method_dtable["_sendNotificationsForKey:changeOptions:isBefore:"], "_sendNotificationsForKey:changeOptions:isBefore:"), keyPath, isBefore ? (changeOptions == null ? null : (changeOptions.isa.method_msgSend["copy"] || _objj_forward)(changeOptions, (changeOptions.isa.method_dtable["copy"], "copy"))) : self._changesForKey[keyPath], isBefore);
    }
    var ___r1, ___r2;
}

,["void","CPString","CPDictionary","BOOL"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("proxyForObject:"), function $_CPKVOProxy__proxyForObject_(self, _cmd, anObject)
{
    var proxy = anObject[KVOProxyKey];
    if (proxy)
        return proxy;
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithTarget:"] || _objj_forward)(___r1, "initWithTarget:", anObject));
    var ___r1;
}

,["id","CPObject"])]);
}

{var the_class = objj_allocateClassPair(CPObject, "_CPKVOModelSubclass"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("willChangeValueForKey:"), function $_CPKVOModelSubclass__willChangeValueForKey_(self, _cmd, aKey)
{
    var superClass = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")),
        methodSelector = sel_getUid("willChangeValueForKey:"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector, aKey);
    if (!aKey)
        return;
    var changeOptions = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", [CPKeyValueChangeSetting], [CPKeyValueChangeKindKey]));
    ((___r1 = (_CPKVOProxy.isa.method_msgSend["proxyForObject:"] || _objj_forward)(_CPKVOProxy, (_CPKVOProxy.isa.method_dtable["proxyForObject:"], "proxyForObject:"), self)), ___r1 == null ? null : (___r1.isa.method_msgSend["_sendNotificationsForKey:changeOptions:isBefore:"] || _objj_forward)(___r1, "_sendNotificationsForKey:changeOptions:isBefore:", aKey, changeOptions, YES));
    var ___r1;
}

,["void","CPString"]), new objj_method(sel_getUid("didChangeValueForKey:"), function $_CPKVOModelSubclass__didChangeValueForKey_(self, _cmd, aKey)
{
    var superClass = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")),
        methodSelector = sel_getUid("didChangeValueForKey:"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector, aKey);
    if (!aKey)
        return;
    ((___r1 = (_CPKVOProxy.isa.method_msgSend["proxyForObject:"] || _objj_forward)(_CPKVOProxy, (_CPKVOProxy.isa.method_dtable["proxyForObject:"], "proxyForObject:"), self)), ___r1 == null ? null : (___r1.isa.method_msgSend["_sendNotificationsForKey:changeOptions:isBefore:"] || _objj_forward)(___r1, "_sendNotificationsForKey:changeOptions:isBefore:", aKey, nil, NO));
    var ___r1;
}

,["void","CPString"]), new objj_method(sel_getUid("willChange:valuesAtIndexes:forKey:"), function $_CPKVOModelSubclass__willChange_valuesAtIndexes_forKey_(self, _cmd, change, indexes, aKey)
{
    var superClass = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")),
        methodSelector = sel_getUid("willChange:valuesAtIndexes:forKey:"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector, change, indexes, aKey);
    if (!aKey)
        return;
    var changeOptions = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", [change, indexes], [CPKeyValueChangeKindKey, CPKeyValueChangeIndexesKey]));
    ((___r1 = (_CPKVOProxy.isa.method_msgSend["proxyForObject:"] || _objj_forward)(_CPKVOProxy, (_CPKVOProxy.isa.method_dtable["proxyForObject:"], "proxyForObject:"), self)), ___r1 == null ? null : (___r1.isa.method_msgSend["_sendNotificationsForKey:changeOptions:isBefore:"] || _objj_forward)(___r1, "_sendNotificationsForKey:changeOptions:isBefore:", aKey, changeOptions, YES));
    var ___r1;
}

,["void","CPKeyValueChange","CPIndexSet","CPString"]), new objj_method(sel_getUid("didChange:valuesAtIndexes:forKey:"), function $_CPKVOModelSubclass__didChange_valuesAtIndexes_forKey_(self, _cmd, change, indexes, aKey)
{
    var superClass = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")),
        methodSelector = sel_getUid("didChange:valuesAtIndexes:forKey:"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector, change, indexes, aKey);
    if (!aKey)
        return;
    ((___r1 = (_CPKVOProxy.isa.method_msgSend["proxyForObject:"] || _objj_forward)(_CPKVOProxy, (_CPKVOProxy.isa.method_dtable["proxyForObject:"], "proxyForObject:"), self)), ___r1 == null ? null : (___r1.isa.method_msgSend["_sendNotificationsForKey:changeOptions:isBefore:"] || _objj_forward)(___r1, "_sendNotificationsForKey:changeOptions:isBefore:", aKey, nil, NO));
    var ___r1;
}

,["void","CPKeyValueChange","CPIndexSet","CPString"]), new objj_method(sel_getUid("willChangeValueForKey:withSetMutation:usingObjects:"), function $_CPKVOModelSubclass__willChangeValueForKey_withSetMutation_usingObjects_(self, _cmd, aKey, mutationKind, objects)
{
    var superClass = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")),
        methodSelector = sel_getUid("willChangeValueForKey:withSetMutation:usingObjects:"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector, aKey, mutationKind, objects);
    if (!aKey)
        return;
    var changeKind = _changeKindForSetMutationKind(mutationKind),
        changeOptions = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", [changeKind], [CPKeyValueChangeKindKey]));
    changeOptions[_CPKeyValueChangeSetMutationObjectsKey] = objects;
    changeOptions[_CPKeyValueChangeSetMutationKindKey] = mutationKind;
    ((___r1 = (_CPKVOProxy.isa.method_msgSend["proxyForObject:"] || _objj_forward)(_CPKVOProxy, (_CPKVOProxy.isa.method_dtable["proxyForObject:"], "proxyForObject:"), self)), ___r1 == null ? null : (___r1.isa.method_msgSend["_sendNotificationsForKey:changeOptions:isBefore:"] || _objj_forward)(___r1, "_sendNotificationsForKey:changeOptions:isBefore:", aKey, changeOptions, YES));
    var ___r1;
}

,["void","CPString","CPKeyValueSetMutationKind","CPSet"]), new objj_method(sel_getUid("didChangeValueForKey:withSetMutation:usingObjects:"), function $_CPKVOModelSubclass__didChangeValueForKey_withSetMutation_usingObjects_(self, _cmd, aKey, mutationKind, objects)
{
    var superClass = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")),
        methodSelector = sel_getUid("didChangeValueForKey:withSetMutation:usingObjects:"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector, aKey, mutationKind, objects);
    if (!aKey)
        return;
    ((___r1 = (_CPKVOProxy.isa.method_msgSend["proxyForObject:"] || _objj_forward)(_CPKVOProxy, (_CPKVOProxy.isa.method_dtable["proxyForObject:"], "proxyForObject:"), self)), ___r1 == null ? null : (___r1.isa.method_msgSend["_sendNotificationsForKey:changeOptions:isBefore:"] || _objj_forward)(___r1, "_sendNotificationsForKey:changeOptions:isBefore:", aKey, nil, NO));
    var ___r1;
}

,["void","CPString","CPKeyValueSetMutationKind","CPSet"]), new objj_method(sel_getUid("class"), function $_CPKVOModelSubclass__class(self, _cmd)
{
    return self[KVOProxyKey]._nativeClass;
}

,["Class"]), new objj_method(sel_getUid("superclass"), function $_CPKVOModelSubclass__superclass(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["superclass"] || _objj_forward)(___r1, "superclass"));
    var ___r1;
}

,["Class"]), new objj_method(sel_getUid("isKindOfClass:"), function $_CPKVOModelSubclass__isKindOfClass_(self, _cmd, aClass)
{
    return ((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["isSubclassOfClass:"] || _objj_forward)(___r1, "isSubclassOfClass:", aClass));
    var ___r1;
}

,["BOOL","Class"]), new objj_method(sel_getUid("isMemberOfClass:"), function $_CPKVOModelSubclass__isMemberOfClass_(self, _cmd, aClass)
{
    return (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")) == aClass;
}

,["BOOL","Class"]), new objj_method(sel_getUid("className"), function $_CPKVOModelSubclass__className(self, _cmd)
{
    return (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")).name;
}

,["CPString"])]);
}

{var the_class = objj_allocateClassPair(CPObject, "_CPKVOModelDictionarySubclass"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("removeAllObjects"), function $_CPKVOModelDictionarySubclass__removeAllObjects(self, _cmd)
{
    var keys = (self.isa.method_msgSend["allKeys"] || _objj_forward)(self, (self.isa.method_dtable["allKeys"], "allKeys")),
        count = (keys == null ? null : (keys.isa.method_msgSend["count"] || _objj_forward)(keys, (keys.isa.method_dtable["count"], "count"))),
        i = 0;
    for (; i < count; i++)
        (self.isa.method_msgSend["willChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:"], "willChangeValueForKey:"), keys[i]);
    var superClass = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")),
        methodSelector = sel_getUid("removeAllObjects"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector);
    for (i = 0; i < count; i++)
        (self.isa.method_msgSend["didChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:"], "didChangeValueForKey:"), keys[i]);
}

,["void"]), new objj_method(sel_getUid("removeObjectForKey:"), function $_CPKVOModelDictionarySubclass__removeObjectForKey_(self, _cmd, aKey)
{
    (self.isa.method_msgSend["willChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:"], "willChangeValueForKey:"), aKey);
    var superClass = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")),
        methodSelector = sel_getUid("removeObjectForKey:"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector, aKey);
    (self.isa.method_msgSend["didChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:"], "didChangeValueForKey:"), aKey);
}

,["void","id"]), new objj_method(sel_getUid("setObject:forKey:"), function $_CPKVOModelDictionarySubclass__setObject_forKey_(self, _cmd, anObject, aKey)
{
    (self.isa.method_msgSend["willChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:"], "willChangeValueForKey:"), aKey);
    var superClass = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")),
        methodSelector = sel_getUid("setObject:forKey:"),
        methodImp = class_getMethodImplementation(superClass, methodSelector);
    methodImp(self, methodSelector, anObject, aKey);
    (self.isa.method_msgSend["didChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:"], "didChangeValueForKey:"), aKey);
}

,["void","id","id"])]);
}

{var the_class = objj_allocateClassPair(CPObject, "_CPKVOForwardingObserver"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_object", "id"), new objj_ivar("_observer", "id"), new objj_ivar("_context", "id"), new objj_ivar("_options", "unsigned"), new objj_ivar("_firstPart", "CPString"), new objj_ivar("_secondPart", "CPString"), new objj_ivar("_value", "id")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithKeyPath:object:observer:options:context:"), function $_CPKVOForwardingObserver__initWithKeyPath_object_observer_options_context_(self, _cmd, aKeyPath, anObject, anObserver, options, aContext)
{
    self = (objj_getClass("_CPKVOForwardingObserver").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    self._context = aContext;
    self._observer = anObserver;
    self._object = anObject;
    self._options = options;
    var dotIndex = aKeyPath.indexOf('.');
    if (dotIndex === CPNotFound)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "Created _CPKVOForwardingObserver without compound key path: " + aKeyPath);
    self._firstPart = aKeyPath.substring(0, dotIndex);
    self._secondPart = aKeyPath.substring(dotIndex + 1);
    ((___r1 = self._object), ___r1 == null ? null : (___r1.isa.method_msgSend["addObserver:forKeyPath:options:context:"] || _objj_forward)(___r1, (self._object.isa.method_dtable["addObserver:forKeyPath:options:context:"], self._object.isa.method_dtable["addObserver:forKeyPath:options:context:"], self._object.isa.method_dtable["addObserver:forKeyPath:options:context:"], self._object.isa.method_dtable["addObserver:forKeyPath:options:context:"], "addObserver:forKeyPath:options:context:"), self, self._firstPart, self._options, nil));
    self._value = ((___r1 = self._object), ___r1 == null ? null : (___r1.isa.method_msgSend["valueForKey:"] || _objj_forward)(___r1, (self._object.isa.method_dtable["valueForKey:"], "valueForKey:"), self._firstPart));
    if (self._value)
        ((___r1 = self._value), ___r1 == null ? null : (___r1.isa.method_msgSend["addObserver:forKeyPath:options:context:"] || _objj_forward)(___r1, (self._value.isa.method_dtable["addObserver:forKeyPath:options:context:"], self._value.isa.method_dtable["addObserver:forKeyPath:options:context:"], self._value.isa.method_dtable["addObserver:forKeyPath:options:context:"], self._value.isa.method_dtable["addObserver:forKeyPath:options:context:"], "addObserver:forKeyPath:options:context:"), self, self._secondPart, self._options, nil));
    return self;
    var ___r1;
}

,["id","CPString","id","id","unsigned","id"]), new objj_method(sel_getUid("observeValueForKeyPath:ofObject:change:context:"), function $_CPKVOForwardingObserver__observeValueForKeyPath_ofObject_change_context_(self, _cmd, aKeyPath, anObject, changes, aContext)
{
    if (aKeyPath === self._firstPart)
    {
        var pathChanges = (CPMutableDictionary.isa.method_msgSend["dictionaryWithObject:forKey:"] || _objj_forward)(CPMutableDictionary, (CPMutableDictionary.isa.method_dtable["dictionaryWithObject:forKey:"], CPMutableDictionary.isa.method_dtable["dictionaryWithObject:forKey:"], "dictionaryWithObject:forKey:"), CPKeyValueChangeSetting, CPKeyValueChangeKindKey);
        var isBeforeFlag = !!(changes == null ? null : (changes.isa.method_msgSend["objectForKey:"] || _objj_forward)(changes, (changes.isa.method_dtable["objectForKey:"], "objectForKey:"), CPKeyValueChangeNotificationIsPriorKey));
        if (isBeforeFlag)
            (pathChanges == null ? null : (pathChanges.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(pathChanges, (pathChanges.isa.method_dtable["setObject:forKey:"], pathChanges.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), 1, CPKeyValueChangeNotificationIsPriorKey));
        if (self._options & CPKeyValueObservingOptionOld)
        {
            var oldValue = ((___r1 = self._value), ___r1 == null ? null : (___r1.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(___r1, (self._value.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), self._secondPart));
            (pathChanges == null ? null : (pathChanges.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(pathChanges, (pathChanges.isa.method_dtable["setObject:forKey:"], pathChanges.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), oldValue != null ? oldValue : (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null")), CPKeyValueChangeOldKey));
        }
        if (!isBeforeFlag && self._options & CPKeyValueObservingOptionNew)
        {
            var newValue = ((___r1 = self._object), ___r1 == null ? null : (___r1.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(___r1, (self._object.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), self._firstPart + "." + self._secondPart));
            (pathChanges == null ? null : (pathChanges.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(pathChanges, (pathChanges.isa.method_dtable["setObject:forKey:"], pathChanges.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), newValue != null ? newValue : (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null")), CPKeyValueChangeNewKey));
        }
        ((___r1 = self._observer), ___r1 == null ? null : (___r1.isa.method_msgSend["observeValueForKeyPath:ofObject:change:context:"] || _objj_forward)(___r1, (self._observer.isa.method_dtable["observeValueForKeyPath:ofObject:change:context:"], self._observer.isa.method_dtable["observeValueForKeyPath:ofObject:change:context:"], self._observer.isa.method_dtable["observeValueForKeyPath:ofObject:change:context:"], self._observer.isa.method_dtable["observeValueForKeyPath:ofObject:change:context:"], "observeValueForKeyPath:ofObject:change:context:"), self._firstPart + "." + self._secondPart, self._object, pathChanges, self._context));
        if (!isBeforeFlag)
        {
            if (self._value)
                ((___r1 = self._value), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObserver:forKeyPath:"] || _objj_forward)(___r1, (self._value.isa.method_dtable["removeObserver:forKeyPath:"], self._value.isa.method_dtable["removeObserver:forKeyPath:"], "removeObserver:forKeyPath:"), self, self._secondPart));
            self._value = ((___r1 = self._object), ___r1 == null ? null : (___r1.isa.method_msgSend["valueForKey:"] || _objj_forward)(___r1, (self._object.isa.method_dtable["valueForKey:"], "valueForKey:"), self._firstPart));
            if (self._value)
                ((___r1 = self._value), ___r1 == null ? null : (___r1.isa.method_msgSend["addObserver:forKeyPath:options:context:"] || _objj_forward)(___r1, (self._value.isa.method_dtable["addObserver:forKeyPath:options:context:"], self._value.isa.method_dtable["addObserver:forKeyPath:options:context:"], self._value.isa.method_dtable["addObserver:forKeyPath:options:context:"], self._value.isa.method_dtable["addObserver:forKeyPath:options:context:"], "addObserver:forKeyPath:options:context:"), self, self._secondPart, self._options, nil));
        }
    }
    else
    {
        ((___r1 = self._observer), ___r1 == null ? null : (___r1.isa.method_msgSend["observeValueForKeyPath:ofObject:change:context:"] || _objj_forward)(___r1, (self._observer.isa.method_dtable["observeValueForKeyPath:ofObject:change:context:"], self._observer.isa.method_dtable["observeValueForKeyPath:ofObject:change:context:"], self._observer.isa.method_dtable["observeValueForKeyPath:ofObject:change:context:"], self._observer.isa.method_dtable["observeValueForKeyPath:ofObject:change:context:"], "observeValueForKeyPath:ofObject:change:context:"), self._firstPart + "." + aKeyPath, self._object, changes, self._context));
    }
    var ___r1;
}

,["void","CPString","id","CPDictionary","id"]), new objj_method(sel_getUid("finalize"), function $_CPKVOForwardingObserver__finalize(self, _cmd)
{
    if (self._value)
        ((___r1 = self._value), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObserver:forKeyPath:"] || _objj_forward)(___r1, (self._value.isa.method_dtable["removeObserver:forKeyPath:"], self._value.isa.method_dtable["removeObserver:forKeyPath:"], "removeObserver:forKeyPath:"), self, self._secondPart));
    ((___r1 = self._object), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObserver:forKeyPath:"] || _objj_forward)(___r1, (self._object.isa.method_dtable["removeObserver:forKeyPath:"], self._object.isa.method_dtable["removeObserver:forKeyPath:"], "removeObserver:forKeyPath:"), self, self._firstPart));
    self._object = nil;
    self._observer = nil;
    self._context = nil;
    self._value = nil;
    var ___r1;
}

,["void"])]);
}
var _CPKVOInfoMake = function(anObserver, theOptions, aContext, aForwarder)
{
    return {observer: anObserver, options: theOptions, context: aContext, forwarder: aForwarder};
};
objj_executeFile("CPArray+KVO.j", YES);objj_executeFile("CPSet+KVO.j", YES);p;18;CPOperationQueue.jt;31816;@STATIC;1.0;i;9;CPArray.ji;21;CPFunctionOperation.ji;23;CPInvocationOperation.ji;10;CPObject.ji;13;CPOperation.ji;10;CPString.ji;9;CPTimer.jS;17264;t;14396;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPFunctionOperation.j", YES);objj_executeFile("CPInvocationOperation.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPOperation.j", YES);objj_executeFile("CPString.j", YES);objj_executeFile("CPTimer.j", YES);var cpOperationMainQueue = nil;

{var the_class = objj_allocateClassPair(CPObject, "CPOperationQueue"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_operations", "CPArray"), new objj_ivar("_suspended", "BOOL"), new objj_ivar("_name", "CPString"), new objj_ivar("_timer", "CPTimer")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("name"), function $CPOperationQueue__name(self, _cmd)
{
    return self._name;
}

,["CPString"]), new objj_method(sel_getUid("setName:"), function $CPOperationQueue__setName_(self, _cmd, newValue)
{
    self._name = newValue;
}

,["void","CPString"]), new objj_method(sel_getUid("init"), function $CPOperationQueue__init(self, _cmd)
{
    self = (objj_getClass("CPOperationQueue").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._operations = ((___r1 = (CPArray.isa.method_msgSend["alloc"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        self._suspended = NO;
        self._timer = (CPTimer.isa.method_msgSend["scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"] || _objj_forward)(CPTimer, (CPTimer.isa.method_dtable["scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"], CPTimer.isa.method_dtable["scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"], CPTimer.isa.method_dtable["scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"], CPTimer.isa.method_dtable["scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"], CPTimer.isa.method_dtable["scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"], "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"), 0.01, self, sel_getUid("_runNextOpsInQueue"), nil, YES);
    }
    return self;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("_runNextOpsInQueue"), function $CPOperationQueue___runNextOpsInQueue(self, _cmd)
{
    if (!self._suspended && (self.isa.method_msgSend["operationCount"] || _objj_forward)(self, (self.isa.method_dtable["operationCount"], "operationCount")) > 0)
    {
        var i = 0,
            count = ((___r1 = self._operations), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._operations.isa.method_dtable["count"], "count")));
        for (; i < count; i++)
        {
            var op = ((___r1 = self._operations), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, (self._operations.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i));
            if ((op == null ? null : (op.isa.method_msgSend["isReady"] || _objj_forward)(op, (op.isa.method_dtable["isReady"], "isReady"))) && !(op == null ? null : (op.isa.method_msgSend["isFinished"] || _objj_forward)(op, (op.isa.method_dtable["isFinished"], "isFinished"))) && !(op == null ? null : (op.isa.method_msgSend["isExecuting"] || _objj_forward)(op, (op.isa.method_dtable["isExecuting"], "isExecuting"))))
            {
                (op == null ? null : (op.isa.method_msgSend["start"] || _objj_forward)(op, (op.isa.method_dtable["start"], "start")));
            }
        }
    }
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("_enableTimer:"), function $CPOperationQueue___enableTimer_(self, _cmd, enable)
{
    if (!enable)
    {
        if (self._timer)
        {
            ((___r1 = self._timer), ___r1 == null ? null : (___r1.isa.method_msgSend["invalidate"] || _objj_forward)(___r1, (self._timer.isa.method_dtable["invalidate"], "invalidate")));
            self._timer = nil;
        }
    }
    else
    {
        if (!self._timer)
        {
            self._timer = (CPTimer.isa.method_msgSend["scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"] || _objj_forward)(CPTimer, (CPTimer.isa.method_dtable["scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"], CPTimer.isa.method_dtable["scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"], CPTimer.isa.method_dtable["scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"], CPTimer.isa.method_dtable["scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"], CPTimer.isa.method_dtable["scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"], "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"), 0.01, self, sel_getUid("_runNextOpsInQueue"), nil, YES);
        }
    }
    var ___r1;
}

,["void","BOOL"]), new objj_method(sel_getUid("addOperation:"), function $CPOperationQueue__addOperation_(self, _cmd, anOperation)
{
    (self.isa.method_msgSend["willChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:"], "willChangeValueForKey:"), "operations");
    (self.isa.method_msgSend["willChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:"], "willChangeValueForKey:"), "operationCount");
    ((___r1 = self._operations), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, (self._operations.isa.method_dtable["addObject:"], "addObject:"), anOperation));
    (self.isa.method_msgSend["_sortOpsByPriority:"] || _objj_forward)(self, (self.isa.method_dtable["_sortOpsByPriority:"], "_sortOpsByPriority:"), self._operations);
    (self.isa.method_msgSend["didChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:"], "didChangeValueForKey:"), "operations");
    (self.isa.method_msgSend["didChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:"], "didChangeValueForKey:"), "operationCount");
    var ___r1;
}

,["void","CPOperation"]), new objj_method(sel_getUid("addOperations:waitUntilFinished:"), function $CPOperationQueue__addOperations_waitUntilFinished_(self, _cmd, ops, wait)
{
    if (ops)
    {
        if (wait)
        {
            (self.isa.method_msgSend["_sortOpsByPriority:"] || _objj_forward)(self, (self.isa.method_dtable["_sortOpsByPriority:"], "_sortOpsByPriority:"), ops);
            (self.isa.method_msgSend["_runOpsSynchronously:"] || _objj_forward)(self, (self.isa.method_dtable["_runOpsSynchronously:"], "_runOpsSynchronously:"), ops);
        }
        ((___r1 = self._operations), ___r1 == null ? null : (___r1.isa.method_msgSend["addObjectsFromArray:"] || _objj_forward)(___r1, (self._operations.isa.method_dtable["addObjectsFromArray:"], "addObjectsFromArray:"), ops));
        (self.isa.method_msgSend["_sortOpsByPriority:"] || _objj_forward)(self, (self.isa.method_dtable["_sortOpsByPriority:"], "_sortOpsByPriority:"), self._operations);
    }
    var ___r1;
}

,["void","CPArray","BOOL"]), new objj_method(sel_getUid("addOperationWithFunction:"), function $CPOperationQueue__addOperationWithFunction_(self, _cmd, aFunction)
{
    (self.isa.method_msgSend["addOperation:"] || _objj_forward)(self, (self.isa.method_dtable["addOperation:"], "addOperation:"), (CPFunctionOperation.isa.method_msgSend["functionOperationWithFunction:"] || _objj_forward)(CPFunctionOperation, (CPFunctionOperation.isa.method_dtable["functionOperationWithFunction:"], "functionOperationWithFunction:"), aFunction));
}

,["void","JSObject"]), new objj_method(sel_getUid("operations"), function $CPOperationQueue__operations(self, _cmd)
{
    return self._operations;
}

,["CPArray"]), new objj_method(sel_getUid("operationCount"), function $CPOperationQueue__operationCount(self, _cmd)
{
    if (self._operations)
    {
        return ((___r1 = self._operations), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._operations.isa.method_dtable["count"], "count")));
    }
    return 0;
    var ___r1;
}

,["int"]), new objj_method(sel_getUid("cancelAllOperations"), function $CPOperationQueue__cancelAllOperations(self, _cmd)
{
    if (self._operations)
    {
        var i = 0,
            count = ((___r1 = self._operations), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._operations.isa.method_dtable["count"], "count")));
        for (; i < count; i++)
        {
            ((___r1 = ((___r2 = self._operations), ___r2 == null ? null : (___r2.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r2, (self._operations.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i))), ___r1 == null ? null : (___r1.isa.method_msgSend["cancel"] || _objj_forward)(___r1, "cancel"));
        }
    }
    var ___r1, ___r2;
}

,["void"]), new objj_method(sel_getUid("waitUntilAllOperationsAreFinished"), function $CPOperationQueue__waitUntilAllOperationsAreFinished(self, _cmd)
{
    (self.isa.method_msgSend["_enableTimer:"] || _objj_forward)(self, (self.isa.method_dtable["_enableTimer:"], "_enableTimer:"), NO);
    (self.isa.method_msgSend["_runOpsSynchronously:"] || _objj_forward)(self, (self.isa.method_dtable["_runOpsSynchronously:"], "_runOpsSynchronously:"), self._operations);
    if (!self._suspended)
    {
        (self.isa.method_msgSend["_enableTimer:"] || _objj_forward)(self, (self.isa.method_dtable["_enableTimer:"], "_enableTimer:"), YES);
    }
}

,["void"]), new objj_method(sel_getUid("maxConcurrentOperationCount"), function $CPOperationQueue__maxConcurrentOperationCount(self, _cmd)
{
    return 1;
}

,["int"]), new objj_method(sel_getUid("setSuspended:"), function $CPOperationQueue__setSuspended_(self, _cmd, suspend)
{
    self._suspended = suspend;
    (self.isa.method_msgSend["_enableTimer:"] || _objj_forward)(self, (self.isa.method_dtable["_enableTimer:"], "_enableTimer:"), !suspend);
}

,["void","BOOL"]), new objj_method(sel_getUid("isSuspended"), function $CPOperationQueue__isSuspended(self, _cmd)
{
    return self._suspended;
}

,["BOOL"]), new objj_method(sel_getUid("_sortOpsByPriority:"), function $CPOperationQueue___sortOpsByPriority_(self, _cmd, someOps)
{
    if (someOps)
    {
        (someOps == null ? null : (someOps.isa.method_msgSend["sortUsingFunction:context:"] || _objj_forward)(someOps, (someOps.isa.method_dtable["sortUsingFunction:context:"], someOps.isa.method_dtable["sortUsingFunction:context:"], "sortUsingFunction:context:"),         function(lhs, rhs)
        {
            if ((lhs == null ? null : (lhs.isa.method_msgSend["queuePriority"] || _objj_forward)(lhs, (lhs.isa.method_dtable["queuePriority"], "queuePriority"))) < (rhs == null ? null : (rhs.isa.method_msgSend["queuePriority"] || _objj_forward)(rhs, (rhs.isa.method_dtable["queuePriority"], "queuePriority"))))
            {
                return 1;
            }            else
            {
                if ((lhs == null ? null : (lhs.isa.method_msgSend["queuePriority"] || _objj_forward)(lhs, (lhs.isa.method_dtable["queuePriority"], "queuePriority"))) > (rhs == null ? null : (rhs.isa.method_msgSend["queuePriority"] || _objj_forward)(rhs, (rhs.isa.method_dtable["queuePriority"], "queuePriority"))))
                {
                    return -1;
                }                else
                {
                    return 0;
                }            }        }, nil));
    }
}

,["void","CPArray"]), new objj_method(sel_getUid("_runOpsSynchronously:"), function $CPOperationQueue___runOpsSynchronously_(self, _cmd, ops)
{
    if (ops)
    {
        var keepGoing = YES;
        while (keepGoing)
        {
            var i = 0,
                count = (ops == null ? null : (ops.isa.method_msgSend["count"] || _objj_forward)(ops, (ops.isa.method_dtable["count"], "count")));
            keepGoing = NO;
            for (; i < count; i++)
            {
                var op = (ops == null ? null : (ops.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(ops, (ops.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i));
                if ((op == null ? null : (op.isa.method_msgSend["isReady"] || _objj_forward)(op, (op.isa.method_dtable["isReady"], "isReady"))) && !(op == null ? null : (op.isa.method_msgSend["isFinished"] || _objj_forward)(op, (op.isa.method_dtable["isFinished"], "isFinished"))) && !(op == null ? null : (op.isa.method_msgSend["isExecuting"] || _objj_forward)(op, (op.isa.method_dtable["isExecuting"], "isExecuting"))))
                {
                    (op == null ? null : (op.isa.method_msgSend["start"] || _objj_forward)(op, (op.isa.method_dtable["start"], "start")));
                }
            }
            for (i = 0; i < count; i++)
            {
                var op = (ops == null ? null : (ops.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(ops, (ops.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i));
                if (!(op == null ? null : (op.isa.method_msgSend["isFinished"] || _objj_forward)(op, (op.isa.method_dtable["isFinished"], "isFinished"))) && !(op == null ? null : (op.isa.method_msgSend["isCancelled"] || _objj_forward)(op, (op.isa.method_dtable["isCancelled"], "isCancelled"))))
                {
                    keepGoing = YES;
                }
            }
        }
    }
}

,["void","CPArray"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("mainQueue"), function $CPOperationQueue__mainQueue(self, _cmd)
{
    if (!cpOperationMainQueue)
    {
        cpOperationMainQueue = ((___r1 = (CPOperationQueue.isa.method_msgSend["alloc"] || _objj_forward)(CPOperationQueue, (CPOperationQueue.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        (cpOperationMainQueue == null ? null : (cpOperationMainQueue.isa.method_msgSend["setName:"] || _objj_forward)(cpOperationMainQueue, (cpOperationMainQueue.isa.method_dtable["setName:"], "setName:"), "main"));
    }
    return cpOperationMainQueue;
    var ___r1;
}

,["CPOperationQueue"]), new objj_method(sel_getUid("currentQueue"), function $CPOperationQueue__currentQueue(self, _cmd)
{
    return (CPOperationQueue.isa.method_msgSend["mainQueue"] || _objj_forward)(CPOperationQueue, (CPOperationQueue.isa.method_dtable["mainQueue"], "mainQueue"));
}

,["CPOperationQueue"])]);
}
p;9;CPError.jt;16264;@STATIC;1.0;i;14;CPDictionary.ji;10;CPObject.ji;10;CPString.jS;9904;;6285;

objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPString.j", YES);CPCappuccinoErrorDomain = kCFErrorDomainCappuccino;
CPCocoaErrorDomain = kCFErrorDomainCappuccino;
CPUnderlyingErrorKey = kCFErrorUnderlyingErrorKey;
CPLocalizedDescriptionKey = kCFErrorLocalizedDescriptionKey;
CPLocalizedFailureReasonErrorKey = kCFErrorLocalizedFailureReasonKey;
CPLocalizedRecoverySuggestionErrorKey = kCFErrorLocalizedRecoverySuggestionKey;
CPLocalizedRecoveryOptionsErrorKey = "CPLocalizedRecoveryOptionsErrorKey";
CPRecoveryAttempterErrorKey = "CPRecoveryAttempterErrorKey";
CPHelpAnchorErrorKey = "CPHelpAnchorErrorKey";
CPStringEncodingErrorKey = "CPStringEncodingErrorKey";
CPURLErrorKey = kCFErrorURLKey;
CPFilePathErrorKey = kCFErrorFilePathKey;

{var the_class = objj_allocateClassPair(CPObject, "CPError"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithDomain:code:userInfo:"), function $CPError__initWithDomain_code_userInfo_(self, _cmd, aDomain, aCode, aDict)
{
    var result = new CFError(aDomain, aCode, aDict);
    result.isa = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"));
    return result;
}

,["id","CPString","CPInteger","CPDictionary"]), new objj_method(sel_getUid("code"), function $CPError__code(self, _cmd)
{
    return self.code();
}

,["CPInteger"]), new objj_method(sel_getUid("userInfo"), function $CPError__userInfo(self, _cmd)
{
    return self.userInfo();
}

,["CPString"]), new objj_method(sel_getUid("domain"), function $CPError__domain(self, _cmd)
{
    return self.domain();
}

,["CPString"]), new objj_method(sel_getUid("localizedDescription"), function $CPError__localizedDescription(self, _cmd)
{
    return self.description();
}

,["CPString"]), new objj_method(sel_getUid("localizedFailureReason"), function $CPError__localizedFailureReason(self, _cmd)
{
    return self.failureReason();
}

,["CPString"]), new objj_method(sel_getUid("localizedRecoveryOptions"), function $CPError__localizedRecoveryOptions(self, _cmd)
{
    var userInfo = self.userInfo(),
        recoveryOptions = userInfo.valueForKey(CPLocalizedRecoveryOptionsErrorKey);
    return recoveryOptions;
}

,["CPArray"]), new objj_method(sel_getUid("localizedRecoverySuggestion"), function $CPError__localizedRecoverySuggestion(self, _cmd)
{
    return self.recoverySuggestion();
}

,["CPString"]), new objj_method(sel_getUid("recoveryAttempter"), function $CPError__recoveryAttempter(self, _cmd)
{
    var userInfo = self.userInfo(),
        recoveryAttempter = userInfo.valueForKey(CPRecoveryAttempterErrorKey);
    return recoveryAttempter;
}

,["id"]), new objj_method(sel_getUid("description"), function $CPError__description(self, _cmd)
{
    return (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "Error Domain=%@ Code=%d \"%@\" UserInfo=%@", self.domain(), self.code(), self.description(), self.userInfo());
}

,["CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPError__alloc(self, _cmd)
{
    var obj = new CFError();
    obj.isa = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"));
    return obj;
}

,["id"]), new objj_method(sel_getUid("errorWithDomain:code:userInfo:"), function $CPError__errorWithDomain_code_userInfo_(self, _cmd, aDomain, aCode, aDict)
{
    return ((___r1 = (CPError.isa.method_msgSend["alloc"] || _objj_forward)(CPError, (CPError.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithDomain:code:userInfo:"] || _objj_forward)(___r1, "initWithDomain:code:userInfo:", aDomain, aCode, aDict));
    var ___r1;
}

,["id","CPString","CPInteger","CPDictionary"])]);
}
var CPErrorCodeKey = "CPErrorCodeKey",
    CPErrorDomainKey = "CPErrorDomainKey",
    CPErrorUserInfoKey = "CPErrorUserInfoKey";
{
var the_class = objj_getClass("CPError")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPError\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPError__initWithCoder_(self, _cmd, aCoder)
{
    var code = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPErrorCodeKey)),
        domain = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPErrorDomainKey)),
        userInfo = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPErrorUserInfoKey));
    return (self.isa.method_msgSend["initWithDomain:code:userInfo:"] || _objj_forward)(self, (self.isa.method_dtable["initWithDomain:code:userInfo:"], self.isa.method_dtable["initWithDomain:code:userInfo:"], self.isa.method_dtable["initWithDomain:code:userInfo:"], "initWithDomain:code:userInfo:"), domain, code, userInfo);
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPError__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self.domain(), CPErrorDomainKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self.code(), CPErrorCodeKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self.userInfo(), CPErrorUserInfoKey));
}

,["void","CPCoder"])]);
}
CFError.prototype.isa = CPError;
p;21;CPFunctionOperation.jt;6982;@STATIC;1.0;i;9;CPArray.ji;10;CPObject.ji;13;CPOperation.jS;4184;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQRnVuY3Rpb25PcGVyYXRpb24uaiJdLCJuYW1lcyI6WyJzZWxmIl0sIm1hcHBpbmdzIjoiOztBQXFCQSxrQixpQkFDQSxrQixrQkFDQSxrQixxQkFNQTtBQUFBO0FBQUEsMkIsMkJBQUEsc0M7NkJBS0EsNEI7QUFDQTtJQUNJLElBQUksZSxJQUFjLFVBQUMsZUFBRCx1RkFBWSwwQ0FBWixZLENBQUEsQyxDQUFxQixDQUF2QztJQUNBO1FBQ0ksSUFBSSxDLEdBQUksQztZQUNKLEssR0FBUSxVQUFDLGVBQUQsdUZBQVksMENBQVosWUFEWjtRQUdBLEssRUFBTyxDLENBQUEsQyxDQUFJLEssRUFBTyxDO1FBQ2xCO1lBQ0ksSUFBSSxJLEdBQU8sVUFBQyxlQUFELGdHQUFZLG1EQUFaLHFCQUEwQixDQUExQixFQUFYO1lBQ0EsSSxFQUFBO1FBRkosQztJQUxKLEM7O0FBRkosQzs7WUFjQSw0QjtBQUNBO0lBQ0lBLEksR0FBTyxDLGdEQUFBLGdCLElBQUEsa0NBQVA7SUFFQSxJQUFJQSxJQUFKO0lBQ0E7UUFDSSxlLEdBQWEsQyxDQUFiO0lBREosQztJQUdBLE0sQ0FBT0EsSTtBQVBYLEM7O1VBYUEsNEIsMEZBQXVDLFU7QUFDdkM7SUFDSSxVQUFDLGVBQUQsNEZBQVksK0NBQVosaUJBQXNCLFVBQXRCOztBQURKLEM7O3VCQU9BLDRCO0FBQ0E7SUFDSSxNLENBQU8sZTtBQURYLEM7Ozs4QkFPQSw0Qiw0R0FBOEMsVTtBQUM5QztJQUNJLFUsR0FBYSxVQUFDLENBQUMsbUJBQUQsK0NBQUMsbUJBQUQsR0FBcUIsOENBQXJCLFdBQUQsNkZBQWI7SUFDQSxDQUFDLFVBQUQsbUJBQUMsVUFBRCwrREFBQyxVQUFELEdBQVkscURBQVosNEJBQWlDLFVBQWpDO0lBRUEsTSxDQUFPLFU7O0FBSlgsQyIsImZpbGUiOiJDUEZ1bmN0aW9uT3BlcmF0aW9uLmpzIiwic291cmNlUm9vdCI6ImZpbGU6L1VzZXJzL2RhdmlkL3Byb2dyYW1zL2NhcHB1Y2Npbm8vRm91bmRhdGlvbi8iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ1BGdW5jdGlvbk9wZXJhdGlvbi5qXG4gKlxuICogQ3JlYXRlZCBieSBKb2hhbm5lcyBGYWhyZW5rcnVnLlxuICogQ29weXJpZ2h0IDIwMDksIFNwcmluZ2Vud2Vyay5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXJcbiAqIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgbGlicmFyeTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZVxuICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAwMjExMC0xMzAxIFVTQVxuICovXG5cbkBpbXBvcnQgXCJDUEFycmF5LmpcIlxuQGltcG9ydCBcIkNQT2JqZWN0LmpcIlxuQGltcG9ydCBcIkNQT3BlcmF0aW9uLmpcIlxuXG4vKiFcbiAgICBAY2xhc3MgQ1BGdW5jdGlvbk9wZXJhdGlvblxuICAgIEBicmllZiBSZXByZXNlbnRzIGFuIG9wZXJhdGlvbiB1c2luZyBhIEphdmFTY3JpcHQgZnVuY3Rpb24gdGhhdCBjYW4gYmUgcnVuIGluIGFuIENQT3BlcmF0aW9uUXVldWVcbiovXG5AaW1wbGVtZW50YXRpb24gQ1BGdW5jdGlvbk9wZXJhdGlvbiA6IENQT3BlcmF0aW9uXG57XG4gICAgQ1BBcnJheSBfZnVuY3Rpb25zO1xufVxuXG4tICh2b2lkKW1haW5cbntcbiAgICBpZiAoX2Z1bmN0aW9ucyAmJiBbX2Z1bmN0aW9ucyBjb3VudF0gPiAwKVxuICAgIHtcbiAgICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgICAgY291bnQgPSBbX2Z1bmN0aW9ucyBjb3VudF07XG5cbiAgICAgICAgZm9yICg7IGkgPCBjb3VudDsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgZnVuYyA9IFtfZnVuY3Rpb25zIG9iamVjdEF0SW5kZXg6aV07XG4gICAgICAgICAgICBmdW5jKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi0gKGlkKWluaXRcbntcbiAgICBzZWxmID0gW3N1cGVyIGluaXRdO1xuXG4gICAgaWYgKHNlbGYpXG4gICAge1xuICAgICAgICBfZnVuY3Rpb25zID0gW107XG4gICAgfVxuICAgIHJldHVybiBzZWxmO1xufVxuXG4vKiFcbiAgICBBZGRzIHRoZSBzcGVjaWZpZWQgSlMgZnVuY3Rpb24gdG8gdGhlIHJlY2VpdmVy4oCZcyBsaXN0IG9mIGZ1bmN0aW9ucyB0byBwZXJmb3JtLlxuKi9cbi0gKHZvaWQpYWRkRXhlY3V0aW9uRnVuY3Rpb246KEpTT2JqZWN0KWpzRnVuY3Rpb25cbntcbiAgICBbX2Z1bmN0aW9ucyBhZGRPYmplY3Q6anNGdW5jdGlvbl07XG59XG5cbi8qIVxuICAgIFJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgZnVuY3Rpb25zIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVjZWl2ZXIuXG4qL1xuLSAoQ1BBcnJheSlleGVjdXRpb25GdW5jdGlvbnNcbntcbiAgICByZXR1cm4gX2Z1bmN0aW9ucztcbn1cblxuLyohXG4gICAgQ3JlYXRlcyBhbmQgcmV0dXJucyBhbiBDUEZ1bmN0aW9uT3BlcmF0aW9uIG9iamVjdCBhbmQgYWRkcyB0aGUgc3BlY2lmaWVkIGZ1bmN0aW9uIHRvIGl0LlxuKi9cbisgKGlkKWZ1bmN0aW9uT3BlcmF0aW9uV2l0aEZ1bmN0aW9uOihKU09iamVjdClqc0Z1bmN0aW9uXG57XG4gICAgZnVuY3Rpb25PcCA9IFtbQ1BGdW5jdGlvbk9wZXJhdGlvbiBhbGxvY10gaW5pdF07XG4gICAgW2Z1bmN0aW9uT3AgYWRkRXhlY3V0aW9uRnVuY3Rpb246anNGdW5jdGlvbl07XG5cbiAgICByZXR1cm4gZnVuY3Rpb25PcDtcbn1cblxuQGVuZFxuIl19t;2726;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPOperation.j", YES);
{var the_class = objj_allocateClassPair(CPOperation, "CPFunctionOperation"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_functions", "CPArray")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("main"), function $CPFunctionOperation__main(self, _cmd)
{
    if (self._functions && ((___r1 = self._functions), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._functions.isa.method_dtable["count"], "count"))) > 0)
    {
        var i = 0,
            count = ((___r1 = self._functions), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._functions.isa.method_dtable["count"], "count")));
        for (; i < count; i++)
        {
            var func = ((___r1 = self._functions), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, (self._functions.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i));
            func();
        }
    }
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("init"), function $CPFunctionOperation__init(self, _cmd)
{
    self = (objj_getClass("CPFunctionOperation").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._functions = [];
    }
    return self;
}

,["id"]), new objj_method(sel_getUid("addExecutionFunction:"), function $CPFunctionOperation__addExecutionFunction_(self, _cmd, jsFunction)
{
    ((___r1 = self._functions), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, (self._functions.isa.method_dtable["addObject:"], "addObject:"), jsFunction));
    var ___r1;
}

,["void","JSObject"]), new objj_method(sel_getUid("executionFunctions"), function $CPFunctionOperation__executionFunctions(self, _cmd)
{
    return self._functions;
}

,["CPArray"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("functionOperationWithFunction:"), function $CPFunctionOperation__functionOperationWithFunction_(self, _cmd, jsFunction)
{
    functionOp = ((___r1 = (CPFunctionOperation.isa.method_msgSend["alloc"] || _objj_forward)(CPFunctionOperation, (CPFunctionOperation.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    (functionOp == null ? null : (functionOp.isa.method_msgSend["addExecutionFunction:"] || _objj_forward)(functionOp, (functionOp.isa.method_dtable["addExecutionFunction:"], "addExecutionFunction:"), jsFunction));
    return functionOp;
    var ___r1;
}

,["id","JSObject"])]);
}
p;14;CPInvocation.jt;13594;@STATIC;1.0;i;10;CPObject.ji;9;CPArray.jS;8800;t;4740;

objj_executeFile("CPObject.j", YES);objj_executeFile("CPArray.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPInvocation"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_returnValue", "id"), new objj_ivar("_arguments", "CPMutableArray"), new objj_ivar("_methodSignature", "CPMethodSignature")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithMethodSignature:"), function $CPInvocation__initWithMethodSignature_(self, _cmd, aMethodSignature)
{
    self = (objj_getClass("CPInvocation").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._arguments = [];
        self._methodSignature = aMethodSignature;
    }
    return self;
}

,["id","CPMethodSignature"]), new objj_method(sel_getUid("setSelector:"), function $CPInvocation__setSelector_(self, _cmd, aSelector)
{
    self._arguments[1] = aSelector;
}

,["void","SEL"]), new objj_method(sel_getUid("selector"), function $CPInvocation__selector(self, _cmd)
{
    return self._arguments[1];
}

,["SEL"]), new objj_method(sel_getUid("setTarget:"), function $CPInvocation__setTarget_(self, _cmd, aTarget)
{
    self._arguments[0] = aTarget;
}

,["void","id"]), new objj_method(sel_getUid("target"), function $CPInvocation__target(self, _cmd)
{
    return self._arguments[0];
}

,["id"]), new objj_method(sel_getUid("setArgument:atIndex:"), function $CPInvocation__setArgument_atIndex_(self, _cmd, anArgument, anIndex)
{
    self._arguments[anIndex] = anArgument;
}

,["void","id","CPUInteger"]), new objj_method(sel_getUid("argumentAtIndex:"), function $CPInvocation__argumentAtIndex_(self, _cmd, anIndex)
{
    return self._arguments[anIndex];
}

,["id","CPUInteger"]), new objj_method(sel_getUid("setReturnValue:"), function $CPInvocation__setReturnValue_(self, _cmd, aReturnValue)
{
    self._returnValue = aReturnValue;
}

,["void","id"]), new objj_method(sel_getUid("returnValue"), function $CPInvocation__returnValue(self, _cmd)
{
    return self._returnValue;
}

,["id"]), new objj_method(sel_getUid("invoke"), function $CPInvocation__invoke(self, _cmd)
{
    self._returnValue = objj_msgSend.apply(objj_msgSend, self._arguments);
}

,["void"]), new objj_method(sel_getUid("invokeWithTarget:"), function $CPInvocation__invokeWithTarget_(self, _cmd, aTarget)
{
    self._arguments[0] = aTarget;
    self._returnValue = objj_msgSend.apply(objj_msgSend, self._arguments);
}

,["void","id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("invocationWithMethodSignature:"), function $CPInvocation__invocationWithMethodSignature_(self, _cmd, aMethodSignature)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithMethodSignature:"] || _objj_forward)(___r1, "initWithMethodSignature:", aMethodSignature));
    var ___r1;
}

,["id","CPMethodSignature"])]);
}
var CPInvocationArguments = "CPInvocationArguments",
    CPInvocationReturnValue = "CPInvocationReturnValue";
{
var the_class = objj_getClass("CPInvocation")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPInvocation\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPInvocation__initWithCoder_(self, _cmd, aCoder)
{
    self = (objj_getClass("CPInvocation").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._returnValue = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPInvocationReturnValue));
        self._arguments = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPInvocationArguments));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPInvocation__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._returnValue, CPInvocationReturnValue));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._arguments, CPInvocationArguments));
}

,["void","CPCoder"])]);
}
p;18;CPKeyValueCoding.jt;55959;@STATIC;1.0;i;9;CPArray.ji;14;CPDictionary.ji;13;CPException.ji;12;CPIndexSet.ji;8;CPNull.ji;10;CPObject.ji;7;CPSet.ji;21;CPKeyValueObserving.jS;31048;t;24752;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPIndexSet.j", YES);objj_executeFile("CPNull.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPSet.j", YES);CPUndefinedKeyException = "CPUndefinedKeyException";
CPTargetObjectUserInfoKey = "CPTargetObjectUserInfoKey";
CPUnknownUserInfoKey = "CPUnknownUserInfoKey";
var CPObjectAccessorsForClassKey = "$CPObjectAccessorsForClassKey",
    CPObjectModifiersForClassKey = "$CPObjectModifiersForClassKey";
{
var the_class = objj_getClass("CPObject")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPObject\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("valueForKey:"), function $CPObject__valueForKey_(self, _cmd, aKey)
{
    var theClass = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")),
        accessor = nil,
        accessors = theClass[CPObjectAccessorsForClassKey];
    if (!accessors)
        accessors = theClass[CPObjectAccessorsForClassKey] = {};
    if (accessors.hasOwnProperty(aKey))
        accessor = accessors[aKey];
    else
    {
        var string = nil,
            capitalizedKey = (aKey.charAt(0)).toUpperCase() + aKey.substr(1),
            underscoreKey = nil,
            isKey = nil;
        if ((theClass == null ? null : (theClass.isa.method_msgSend["instancesRespondToSelector:"] || _objj_forward)(theClass, (theClass.isa.method_dtable["instancesRespondToSelector:"], "instancesRespondToSelector:"), string = sel_getUid("get" + capitalizedKey))) || (theClass == null ? null : (theClass.isa.method_msgSend["instancesRespondToSelector:"] || _objj_forward)(theClass, (theClass.isa.method_dtable["instancesRespondToSelector:"], "instancesRespondToSelector:"), string = sel_getUid(aKey))) || (theClass == null ? null : (theClass.isa.method_msgSend["instancesRespondToSelector:"] || _objj_forward)(theClass, (theClass.isa.method_dtable["instancesRespondToSelector:"], "instancesRespondToSelector:"), string = sel_getUid(isKey = "is" + capitalizedKey))) || (theClass == null ? null : (theClass.isa.method_msgSend["instancesRespondToSelector:"] || _objj_forward)(theClass, (theClass.isa.method_dtable["instancesRespondToSelector:"], "instancesRespondToSelector:"), string = sel_getUid("_get" + capitalizedKey))) || (theClass == null ? null : (theClass.isa.method_msgSend["instancesRespondToSelector:"] || _objj_forward)(theClass, (theClass.isa.method_dtable["instancesRespondToSelector:"], "instancesRespondToSelector:"), string = sel_getUid(underscoreKey = "_" + aKey))) || (theClass == null ? null : (theClass.isa.method_msgSend["instancesRespondToSelector:"] || _objj_forward)(theClass, (theClass.isa.method_dtable["instancesRespondToSelector:"], "instancesRespondToSelector:"), string = sel_getUid("_" + isKey))))
            accessor = accessors[aKey] = [0, string];
        else if ((theClass == null ? null : (theClass.isa.method_msgSend["instancesRespondToSelector:"] || _objj_forward)(theClass, (theClass.isa.method_dtable["instancesRespondToSelector:"], "instancesRespondToSelector:"), sel_getUid("countOf" + capitalizedKey))))
        {
            if ((theClass == null ? null : (theClass.isa.method_msgSend["instancesRespondToSelector:"] || _objj_forward)(theClass, (theClass.isa.method_dtable["instancesRespondToSelector:"], "instancesRespondToSelector:"), sel_getUid("objectIn" + capitalizedKey + "AtIndex:"))) || (theClass == null ? null : (theClass.isa.method_msgSend["instancesRespondToSelector:"] || _objj_forward)(theClass, (theClass.isa.method_dtable["instancesRespondToSelector:"], "instancesRespondToSelector:"), sel_getUid(aKey + "AtIndexes:"))))
                accessor = accessors[aKey] = [1];
            else if ((theClass == null ? null : (theClass.isa.method_msgSend["instancesRespondToSelector:"] || _objj_forward)(theClass, (theClass.isa.method_dtable["instancesRespondToSelector:"], "instancesRespondToSelector:"), sel_getUid("enumeratorOf" + capitalizedKey))) && (theClass == null ? null : (theClass.isa.method_msgSend["instancesRespondToSelector:"] || _objj_forward)(theClass, (theClass.isa.method_dtable["instancesRespondToSelector:"], "instancesRespondToSelector:"), sel_getUid("memberOf" + capitalizedKey + ":"))))
                accessor = accessors[aKey] = [2];
        }
        if (!accessor)
        {
            if (class_getInstanceVariable(theClass, string = underscoreKey) || class_getInstanceVariable(theClass, string = "_" + isKey) || class_getInstanceVariable(theClass, string = aKey) || class_getInstanceVariable(theClass, string = isKey))
                accessor = accessors[aKey] = [3, string];
            else
                accessor = accessors[aKey] = [];
        }
    }
    switch(accessor[0]) {
        case 0:
            return self.isa.objj_msgSend0(self, accessor[1]);
        case 1:
            return ((___r1 = (_CPKeyValueCodingArray == null ? null : (_CPKeyValueCodingArray.isa.method_msgSend["alloc"] || _objj_forward)(_CPKeyValueCodingArray, (_CPKeyValueCodingArray.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithTarget:key:"] || _objj_forward)(___r1, "initWithTarget:key:", self, aKey));
        case 2:
            return ((___r1 = (_CPKeyValueCodingSet == null ? null : (_CPKeyValueCodingSet.isa.method_msgSend["alloc"] || _objj_forward)(_CPKeyValueCodingSet, (_CPKeyValueCodingSet.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithTarget:key:"] || _objj_forward)(___r1, "initWithTarget:key:", self, aKey));
        case 3:
            if ((theClass == null ? null : (theClass.isa.method_msgSend["accessInstanceVariablesDirectly"] || _objj_forward)(theClass, (theClass.isa.method_dtable["accessInstanceVariablesDirectly"], "accessInstanceVariablesDirectly"))))
                return self[accessor[1]];
    }
    return (self.isa.method_msgSend["valueForUndefinedKey:"] || _objj_forward)(self, (self.isa.method_dtable["valueForUndefinedKey:"], "valueForUndefinedKey:"), aKey);
    var ___r1;
}

,["id","CPString"]), new objj_method(sel_getUid("valueForKeyPath:"), function $CPObject__valueForKeyPath_(self, _cmd, aKeyPath)
{
    var firstDotIndex = aKeyPath.indexOf(".");
    if (firstDotIndex === CPNotFound)
        return (self.isa.method_msgSend["valueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["valueForKey:"], "valueForKey:"), aKeyPath);
    var firstKeyComponent = aKeyPath.substring(0, firstDotIndex),
        remainingKeyPath = aKeyPath.substring(firstDotIndex + 1),
        value = (self.isa.method_msgSend["valueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["valueForKey:"], "valueForKey:"), firstKeyComponent);
    return (value == null ? null : (value.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(value, (value.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), remainingKeyPath));
}

,["id","CPString"]), new objj_method(sel_getUid("dictionaryWithValuesForKeys:"), function $CPObject__dictionaryWithValuesForKeys_(self, _cmd, keys)
{
    var index = 0,
        count = keys.length,
        dictionary = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    for (; index < count; ++index)
    {
        var key = keys[index],
            value = (self.isa.method_msgSend["valueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["valueForKey:"], "valueForKey:"), key);
        if (value === nil)
            (dictionary == null ? null : (dictionary.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(dictionary, (dictionary.isa.method_dtable["setObject:forKey:"], dictionary.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null")), key));
        else
            (dictionary == null ? null : (dictionary.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(dictionary, (dictionary.isa.method_dtable["setObject:forKey:"], dictionary.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), value, key));
    }
    return dictionary;
    var ___r1;
}

,["CPDictionary","CPArray"]), new objj_method(sel_getUid("valueForUndefinedKey:"), function $CPObject__valueForUndefinedKey_(self, _cmd, aKey)
{
    ((___r1 = (CPException.isa.method_msgSend["exceptionWithName:reason:userInfo:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["exceptionWithName:reason:userInfo:"], CPException.isa.method_dtable["exceptionWithName:reason:userInfo:"], CPException.isa.method_dtable["exceptionWithName:reason:userInfo:"], "exceptionWithName:reason:userInfo:"), CPUndefinedKeyException, (self.isa.method_msgSend["_objectDescription"] || _objj_forward)(self, (self.isa.method_dtable["_objectDescription"], "_objectDescription")) + " is not key value coding-compliant for the key " + aKey, (___r2 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r2 == null ? null : (___r2.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r2, "initWithObjects:forKeys:", [self, aKey], [CPTargetObjectUserInfoKey, CPUnknownUserInfoKey])))), ___r1 == null ? null : (___r1.isa.method_msgSend["raise"] || _objj_forward)(___r1, "raise"));
    var ___r1, ___r2;
}

,["id","CPString"]), new objj_method(sel_getUid("setValue:forKeyPath:"), function $CPObject__setValue_forKeyPath_(self, _cmd, aValue, aKeyPath)
{
    if (!aKeyPath)
        aKeyPath = "self";
    var firstDotIndex = aKeyPath.indexOf(".");
    if (firstDotIndex === CPNotFound)
        return (self.isa.method_msgSend["setValue:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["setValue:forKey:"], self.isa.method_dtable["setValue:forKey:"], "setValue:forKey:"), aValue, aKeyPath);
    var firstKeyComponent = aKeyPath.substring(0, firstDotIndex),
        remainingKeyPath = aKeyPath.substring(firstDotIndex + 1),
        value = (self.isa.method_msgSend["valueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["valueForKey:"], "valueForKey:"), firstKeyComponent);
    return (value == null ? null : (value.isa.method_msgSend["setValue:forKeyPath:"] || _objj_forward)(value, (value.isa.method_dtable["setValue:forKeyPath:"], value.isa.method_dtable["setValue:forKeyPath:"], "setValue:forKeyPath:"), aValue, remainingKeyPath));
}

,["void","id","CPString"]), new objj_method(sel_getUid("setValue:forKey:"), function $CPObject__setValue_forKey_(self, _cmd, aValue, aKey)
{
    if (aValue && aValue.isa && (aValue == null ? null : (aValue.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(aValue, (aValue.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), CPValue)))
        aValue = (aValue == null ? null : (aValue.isa.method_msgSend["JSObject"] || _objj_forward)(aValue, (aValue.isa.method_dtable["JSObject"], "JSObject")));
    var theClass = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")),
        modifier = nil,
        modifiers = theClass[CPObjectModifiersForClassKey];
    if (!modifiers)
        modifiers = theClass[CPObjectModifiersForClassKey] = {};
    if (modifiers.hasOwnProperty(aKey))
        modifier = modifiers[aKey];
    else
    {
        var string = nil,
            capitalizedKey = (aKey.charAt(0)).toUpperCase() + aKey.substr(1),
            isKey = nil;
        if ((theClass == null ? null : (theClass.isa.method_msgSend["instancesRespondToSelector:"] || _objj_forward)(theClass, (theClass.isa.method_dtable["instancesRespondToSelector:"], "instancesRespondToSelector:"), string = sel_getUid("set" + capitalizedKey + ":"))) || (theClass == null ? null : (theClass.isa.method_msgSend["instancesRespondToSelector:"] || _objj_forward)(theClass, (theClass.isa.method_dtable["instancesRespondToSelector:"], "instancesRespondToSelector:"), string = sel_getUid("_set" + capitalizedKey + ":"))))
            modifier = modifiers[aKey] = [0, string];
        else if (class_getInstanceVariable(theClass, string = "_" + aKey) || class_getInstanceVariable(theClass, string = "_" + (isKey = "is" + capitalizedKey)) || class_getInstanceVariable(theClass, string = aKey) || class_getInstanceVariable(theClass, string = isKey))
            modifier = modifiers[aKey] = [1, string];
        else
            modifier = modifiers[aKey] = [];
    }
    switch(modifier[0]) {
        case 0:
            return self.isa.objj_msgSend1(self, modifier[1], aValue);
        case 1:
            if ((theClass == null ? null : (theClass.isa.method_msgSend["accessInstanceVariablesDirectly"] || _objj_forward)(theClass, (theClass.isa.method_dtable["accessInstanceVariablesDirectly"], "accessInstanceVariablesDirectly"))))
            {
                (self.isa.method_msgSend["willChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:"], "willChangeValueForKey:"), aKey);
                self[modifier[1]] = aValue;
                return (self.isa.method_msgSend["didChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:"], "didChangeValueForKey:"), aKey);
            }
    }
    return (self.isa.method_msgSend["setValue:forUndefinedKey:"] || _objj_forward)(self, (self.isa.method_dtable["setValue:forUndefinedKey:"], self.isa.method_dtable["setValue:forUndefinedKey:"], "setValue:forUndefinedKey:"), aValue, aKey);
}

,["void","id","CPString"]), new objj_method(sel_getUid("setValuesForKeysWithDictionary:"), function $CPObject__setValuesForKeysWithDictionary_(self, _cmd, keyedValues)
{
    var value,
        key,
        keyEnumerator = (keyedValues == null ? null : (keyedValues.isa.method_msgSend["keyEnumerator"] || _objj_forward)(keyedValues, (keyedValues.isa.method_dtable["keyEnumerator"], "keyEnumerator")));
    while ((key = (keyEnumerator == null ? null : (keyEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(keyEnumerator, (keyEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
    {
        value = (keyedValues == null ? null : (keyedValues.isa.method_msgSend["objectForKey:"] || _objj_forward)(keyedValues, (keyedValues.isa.method_dtable["objectForKey:"], "objectForKey:"), key));
        if (value === (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null")))
            (self.isa.method_msgSend["setValue:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["setValue:forKey:"], self.isa.method_dtable["setValue:forKey:"], "setValue:forKey:"), nil, key);
        else
            (self.isa.method_msgSend["setValue:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["setValue:forKey:"], self.isa.method_dtable["setValue:forKey:"], "setValue:forKey:"), value, key);
    }
}

,["void","CPDictionary"]), new objj_method(sel_getUid("setValue:forUndefinedKey:"), function $CPObject__setValue_forUndefinedKey_(self, _cmd, aValue, aKey)
{
    ((___r1 = (CPException.isa.method_msgSend["exceptionWithName:reason:userInfo:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["exceptionWithName:reason:userInfo:"], CPException.isa.method_dtable["exceptionWithName:reason:userInfo:"], CPException.isa.method_dtable["exceptionWithName:reason:userInfo:"], "exceptionWithName:reason:userInfo:"), CPUndefinedKeyException, (self.isa.method_msgSend["_objectDescription"] || _objj_forward)(self, (self.isa.method_dtable["_objectDescription"], "_objectDescription")) + " is not key value coding-compliant for the key " + aKey, (___r2 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r2 == null ? null : (___r2.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r2, "initWithObjects:forKeys:", [self, aKey], [CPTargetObjectUserInfoKey, CPUnknownUserInfoKey])))), ___r1 == null ? null : (___r1.isa.method_msgSend["raise"] || _objj_forward)(___r1, "raise"));
    var ___r1, ___r2;
}

,["void","id","CPString"]), new objj_method(sel_getUid("_objectDescription"), function $CPObject___objectDescription(self, _cmd)
{
    return "<" + (self.isa.method_msgSend["className"] || _objj_forward)(self, (self.isa.method_dtable["className"], "className")) + " 0x" + (CPString.isa.method_msgSend["stringWithHash:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithHash:"], "stringWithHash:"), (self.isa.method_msgSend["UID"] || _objj_forward)(self, (self.isa.method_dtable["UID"], "UID"))) + ">";
}

,["CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("accessInstanceVariablesDirectly"), function $CPObject__accessInstanceVariablesDirectly(self, _cmd)
{
    return YES;
}

,["BOOL"])]);
}
{
var the_class = objj_getClass("CPDictionary")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPDictionary\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("valueForKey:"), function $CPDictionary__valueForKey_(self, _cmd, aKey)
{
    if ((aKey == null ? null : (aKey.isa.method_msgSend["hasPrefix:"] || _objj_forward)(aKey, (aKey.isa.method_dtable["hasPrefix:"], "hasPrefix:"), "@")))
        return (objj_getClass("CPDictionary").super_class.method_dtable["valueForKey:"] || _objj_forward)(self, "valueForKey:", aKey.substr(1));
    return (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey);
}

,["id","CPString"]), new objj_method(sel_getUid("setValue:forKey:"), function $CPDictionary__setValue_forKey_(self, _cmd, aValue, aKey)
{
    if (aValue !== nil)
        (self.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["setObject:forKey:"], self.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), aValue, aKey);
    else
        (self.isa.method_msgSend["removeObjectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["removeObjectForKey:"], "removeObjectForKey:"), aKey);
}

,["void","id","CPString"])]);
}
{
var the_class = objj_getClass("CPNull")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPNull\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("valueForKey:"), function $CPNull__valueForKey_(self, _cmd, aKey)
{
    return self;
}

,["id","CPString"])]);
}

{var the_class = objj_allocateClassPair(CPArray, "_CPKeyValueCodingArray"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_target", "id"), new objj_ivar("_countOfSelector", "SEL"), new objj_ivar("_objectInAtIndexSelector", "SEL"), new objj_ivar("_atIndexesSelector", "SEL")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithTarget:key:"), function $_CPKeyValueCodingArray__initWithTarget_key_(self, _cmd, aTarget, aKey)
{
    self = (objj_getClass("_CPKeyValueCodingArray").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        var capitalizedKey = (aKey.charAt(0)).toUpperCase() + aKey.substr(1);
        self._target = aTarget;
        self._countOfSelector = CPSelectorFromString("countOf" + capitalizedKey);
        self._objectInAtIndexSelector = CPSelectorFromString("objectIn" + capitalizedKey + "AtIndex:");
        if (!((___r1 = self._target), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._target.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._objectInAtIndexSelector)))
            self._objectInAtIndexSelector = nil;
        self._atIndexesSelector = CPSelectorFromString(aKey + "AtIndexes:");
        if (!((___r1 = self._target), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._target.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._atIndexesSelector)))
            self._atIndexesSelector = nil;
    }
    return self;
    var ___r1;
}

,["id","id","CPString"]), new objj_method(sel_getUid("count"), function $_CPKeyValueCodingArray__count(self, _cmd)
{
    return self._target == nil ? nil : self._target.isa.objj_msgSend0(self._target, self._countOfSelector);
}

,["CPUInteger"]), new objj_method(sel_getUid("objectAtIndex:"), function $_CPKeyValueCodingArray__objectAtIndex_(self, _cmd, anIndex)
{
    if (self._objectInAtIndexSelector)
        return self._target == nil ? nil : self._target.isa.objj_msgSend1(self._target, self._objectInAtIndexSelector, anIndex);
    return self._target == nil ? nil : (self._target.isa.objj_msgSend1(self._target, self._atIndexesSelector, (CPIndexSet.isa.method_msgSend["indexSetWithIndex:"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSetWithIndex:"], "indexSetWithIndex:"), anIndex)))[0];
}

,["id","CPUInteger"]), new objj_method(sel_getUid("objectsAtIndexes:"), function $_CPKeyValueCodingArray__objectsAtIndexes_(self, _cmd, indexes)
{
    if (self._atIndexesSelector)
        return self._target == nil ? nil : self._target.isa.objj_msgSend1(self._target, self._atIndexesSelector, indexes);
    return (objj_getClass("_CPKeyValueCodingArray").super_class.method_dtable["objectsAtIndexes:"] || _objj_forward)(self, "objectsAtIndexes:", indexes);
}

,["CPArray","CPIndexSet"]), new objj_method(sel_getUid("classForCoder"), function $_CPKeyValueCodingArray__classForCoder(self, _cmd)
{
    return (CPArray.isa.method_msgSend["class"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["class"], "class"));
}

,["Class"]), new objj_method(sel_getUid("copy"), function $_CPKeyValueCodingArray__copy(self, _cmd)
{
    return (CPArray.isa.method_msgSend["arrayWithArray:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithArray:"], "arrayWithArray:"), self);
}

,["id"])]);
}

{var the_class = objj_allocateClassPair(CPSet, "_CPKeyValueCodingSet"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_target", "id"), new objj_ivar("_countOfSelector", "SEL"), new objj_ivar("_enumeratorOfSelector", "SEL"), new objj_ivar("_memberOfSelector", "SEL")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithObjects:count:"), function $_CPKeyValueCodingSet__initWithObjects_count_(self, _cmd, objects, aCount)
{
    return ((___r1 = (CPSet.isa.method_msgSend["alloc"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:count:"] || _objj_forward)(___r1, "initWithObjects:count:", objects, aCount));
    var ___r1;
}

,["id","CPArray","CPUInteger"]), new objj_method(sel_getUid("initWithTarget:key:"), function $_CPKeyValueCodingSet__initWithTarget_key_(self, _cmd, aTarget, aKey)
{
    self = (objj_getClass("_CPKeyValueCodingSet").super_class.method_dtable["initWithObjects:count:"] || _objj_forward)(self, "initWithObjects:count:", nil, 0);
    if (self)
    {
        var capitalizedKey = (aKey.charAt(0)).toUpperCase() + aKey.substr(1);
        self._target = aTarget;
        self._countOfSelector = CPSelectorFromString("countOf" + capitalizedKey);
        self._enumeratorOfSelector = CPSelectorFromString("enumeratorOf" + capitalizedKey);
        self._memberOfSelector = CPSelectorFromString("memberOf" + capitalizedKey + ":");
    }
    return self;
}

,["id","id","CPString"]), new objj_method(sel_getUid("count"), function $_CPKeyValueCodingSet__count(self, _cmd)
{
    return self._target == nil ? nil : self._target.isa.objj_msgSend0(self._target, self._countOfSelector);
}

,["CPUInteger"]), new objj_method(sel_getUid("objectEnumerator"), function $_CPKeyValueCodingSet__objectEnumerator(self, _cmd)
{
    return self._target == nil ? nil : self._target.isa.objj_msgSend0(self._target, self._enumeratorOfSelector);
}

,["CPEnumerator"]), new objj_method(sel_getUid("member:"), function $_CPKeyValueCodingSet__member_(self, _cmd, anObject)
{
    return self._target == nil ? nil : self._target.isa.objj_msgSend1(self._target, self._memberOfSelector, anObject);
}

,["id","id"]), new objj_method(sel_getUid("classForCoder"), function $_CPKeyValueCodingSet__classForCoder(self, _cmd)
{
    return (CPSet.isa.method_msgSend["class"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["class"], "class"));
}

,["Class"]), new objj_method(sel_getUid("copy"), function $_CPKeyValueCodingSet__copy(self, _cmd)
{
    return (CPSet.isa.method_msgSend["setWithSet:"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["setWithSet:"], "setWithSet:"), self);
}

,["id"])]);
}
objj_executeFile("CPKeyValueObserving.j", YES);p;9;CPRange.jt;10264;@STATIC;1.0;S;8536;t;1702;

{var the_typedef = objj_allocateTypeDef("CPRange");
objj_registerTypeDef(the_typedef);
}CPMakeRange = function(location, length)
{
    return {location: location, length: length};
}
CPMakeRangeCopy = function(aRange)
{
    return {location: aRange.location, length: aRange.length};
}
CPEmptyRange = function(aRange)
{
    return aRange.length === 0;
}
CPMaxRange = function(aRange)
{
    return aRange.location + aRange.length;
}
CPEqualRanges = function(lhsRange, rhsRange)
{
    return lhsRange.location === rhsRange.location && lhsRange.length === rhsRange.length;
}
CPLocationInRange = function(aLocation, aRange)
{
    return aLocation >= aRange.location && aLocation < CPMaxRange(aRange);
}
CPUnionRange = function(lhsRange, rhsRange)
{
    var location = MIN(lhsRange.location, rhsRange.location);
    return CPMakeRange(location, MAX(CPMaxRange(lhsRange), CPMaxRange(rhsRange)) - location);
}
CPIntersectionRange = function(lhsRange, rhsRange)
{
    if (CPMaxRange(lhsRange) < rhsRange.location || CPMaxRange(rhsRange) < lhsRange.location)
        return CPMakeRange(0, 0);
    var location = MAX(lhsRange.location, rhsRange.location);
    return CPMakeRange(location, MIN(CPMaxRange(lhsRange), CPMaxRange(rhsRange)) - location);
}
CPRangeInRange = function(lhsRange, rhsRange)
{
    return lhsRange.location <= rhsRange.location && CPMaxRange(lhsRange) >= CPMaxRange(rhsRange);
}
CPStringFromRange = function(aRange)
{
    return "{" + aRange.location + ", " + aRange.length + "}";
}
CPRangeFromString = function(aString)
{
    var comma = aString.indexOf(',');
    return {location: parseInt(aString.substr(1, comma - 1)), length: parseInt(aString.substring(comma + 1, aString.length))};
}
p;10;CPObject.jt;50691;@STATIC;1.0;i;20;_CPTypeDefinitions.jS;33048;;17590;

objj_executeFile("_CPTypeDefinitions.j", YES);{var the_protocol = objj_allocateProtocol("CPObject");
objj_registerProtocol(the_protocol);
protocol_addMethodDescriptions(the_protocol, [new objj_method(sel_getUid("isEqual:"), Nil
,["BOOL","id"]), new objj_method(sel_getUid("hash"), Nil
,["CPUInteger"]), new objj_method(sel_getUid("superclass"), Nil
,["Class"]), new objj_method(sel_getUid("class"), Nil
,["Class"]), new objj_method(sel_getUid("self"), Nil
,["id"]), new objj_method(sel_getUid("performSelector:"), Nil
,["id","SEL"]), new objj_method(sel_getUid("performSelector:withObject:"), Nil
,["id","SEL","id"]), new objj_method(sel_getUid("performSelector:withObject:withObject:"), Nil
,["id","SEL","id","id"]), new objj_method(sel_getUid("isProxy"), Nil
,["BOOL"]), new objj_method(sel_getUid("isKindOfClass:"), Nil
,["BOOL","Class"]), new objj_method(sel_getUid("isMemberOfClass:"), Nil
,["BOOL","Class"]), new objj_method(sel_getUid("conformsToProtocol:"), Nil
,["BOOL","Protocol"]), new objj_method(sel_getUid("respondsToSelector:"), Nil
,["BOOL","SEL"]), new objj_method(sel_getUid("description"), Nil
,["CPString"])], true, true);
}{var the_protocol = objj_allocateProtocol("CPCoding");
objj_registerProtocol(the_protocol);
protocol_addMethodDescriptions(the_protocol, [new objj_method(sel_getUid("encodeWithCoder:"), Nil
,["void","CPCoder"]), new objj_method(sel_getUid("initWithCoder:"), Nil
,["id","CPCoder"])], true, true);
}{var the_class = objj_allocateClassPair(Nil, "CPObject"),
meta_class = the_class.isa;
var aProtocol = objj_getProtocol("CPObject");
if (!aProtocol) throw new SyntaxError("*** Could not find definition for protocol \"CPObject\"");
class_addProtocol(the_class, aProtocol);class_addIvars(the_class, [new objj_ivar("isa", "id")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPObject__init(self, _cmd)
{
    return self;
}

,["id"]), new objj_method(sel_getUid("copy"), function $CPObject__copy(self, _cmd)
{
    return self;
}

,["id"]), new objj_method(sel_getUid("mutableCopy"), function $CPObject__mutableCopy(self, _cmd)
{
    return (self.isa.method_msgSend["copy"] || _objj_forward)(self, (self.isa.method_dtable["copy"], "copy"));
}

,["id"]), new objj_method(sel_getUid("dealloc"), function $CPObject__dealloc(self, _cmd)
{
}

,["void"]), new objj_method(sel_getUid("class"), function $CPObject__class(self, _cmd)
{
    return self.isa;
}

,["Class"]), new objj_method(sel_getUid("isKindOfClass:"), function $CPObject__isKindOfClass_(self, _cmd, aClass)
{
    return ((___r1 = self.isa), ___r1 == null ? null : (___r1.isa.method_msgSend["isSubclassOfClass:"] || _objj_forward)(___r1, (self.isa.isa.method_dtable["isSubclassOfClass:"], "isSubclassOfClass:"), aClass));
    var ___r1;
}

,["BOOL","Class"]), new objj_method(sel_getUid("isMemberOfClass:"), function $CPObject__isMemberOfClass_(self, _cmd, aClass)
{
    return self.isa === aClass;
}

,["BOOL","Class"]), new objj_method(sel_getUid("isProxy"), function $CPObject__isProxy(self, _cmd)
{
    return NO;
}

,["BOOL"]), new objj_method(sel_getUid("respondsToSelector:"), function $CPObject__respondsToSelector_(self, _cmd, aSelector)
{
    return !!class_getInstanceMethod(self.isa, aSelector);
}

,["BOOL","SEL"]), new objj_method(sel_getUid("implementsSelector:"), function $CPObject__implementsSelector_(self, _cmd, aSelector)
{
    return ((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["instancesImplementSelector:"] || _objj_forward)(___r1, "instancesImplementSelector:", aSelector));
    var ___r1;
}

,["BOOL","SEL"]), new objj_method(sel_getUid("conformsToProtocol:"), function $CPObject__conformsToProtocol_(self, _cmd, aProtocol)
{
    return class_conformsToProtocol(self.isa, aProtocol);
}

,["BOOL","Protocol"]), new objj_method(sel_getUid("methodForSelector:"), function $CPObject__methodForSelector_(self, _cmd, aSelector)
{
    return class_getMethodImplementation(self.isa, aSelector);
}

,["IMP","SEL"]), new objj_method(sel_getUid("methodSignatureForSelector:"), function $CPObject__methodSignatureForSelector_(self, _cmd, aSelector)
{
    return nil;
}

,["CPMethodSignature","SEL"]), new objj_method(sel_getUid("description"), function $CPObject__description(self, _cmd)
{
    return "<" + class_getName(self.isa) + " 0x" + (CPString == null ? null : (CPString.isa.method_msgSend["stringWithHash:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithHash:"], "stringWithHash:"), (self.isa.method_msgSend["UID"] || _objj_forward)(self, (self.isa.method_dtable["UID"], "UID")))) + ">";
}

,["CPString"]), new objj_method(sel_getUid("performSelector:"), function $CPObject__performSelector_(self, _cmd, aSelector)
{
    return self.isa.objj_msgSend0(self, aSelector);
}

,["id","SEL"]), new objj_method(sel_getUid("performSelector:withObject:"), function $CPObject__performSelector_withObject_(self, _cmd, aSelector, anObject)
{
    return self.isa.objj_msgSend1(self, aSelector, anObject);
}

,["id","SEL","id"]), new objj_method(sel_getUid("performSelector:withObject:withObject:"), function $CPObject__performSelector_withObject_withObject_(self, _cmd, aSelector, anObject, anotherObject)
{
    return self.isa.objj_msgSend2(self, aSelector, anObject, anotherObject);
}

,["id","SEL","id","id"]), new objj_method(sel_getUid("performSelector:withObjects:"), function $CPObject__performSelector_withObjects_(self, _cmd, aSelector, anObject)
{
    var params = [self, aSelector].concat(Array.prototype.slice.apply(arguments, [3]));
    return objj_msgSend.apply(this, params);
}

,["id","SEL","id"]), new objj_method(sel_getUid("forwardingTargetForSelector:"), function $CPObject__forwardingTargetForSelector_(self, _cmd, aSelector)
{
    return nil;
}

,["id","SEL"]), new objj_method(sel_getUid("forwardInvocation:"), function $CPObject__forwardInvocation_(self, _cmd, anInvocation)
{
    (self.isa.method_msgSend["doesNotRecognizeSelector:"] || _objj_forward)(self, (self.isa.method_dtable["doesNotRecognizeSelector:"], "doesNotRecognizeSelector:"), (anInvocation == null ? null : (anInvocation.isa.method_msgSend["selector"] || _objj_forward)(anInvocation, (anInvocation.isa.method_dtable["selector"], "selector"))));
}

,["void","CPInvocation"]), new objj_method(sel_getUid("doesNotRecognizeSelector:"), function $CPObject__doesNotRecognizeSelector_(self, _cmd, aSelector)
{
    (CPException == null ? null : (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, (class_isMetaClass(self.isa) ? "+" : "-") + " [" + (self.isa.method_msgSend["className"] || _objj_forward)(self, (self.isa.method_dtable["className"], "className")) + " " + aSelector + "] unrecognized selector sent to " + (class_isMetaClass(self.isa) ? "class " + class_getName(self.isa) : "instance 0x" + (CPString == null ? null : (CPString.isa.method_msgSend["stringWithHash:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithHash:"], "stringWithHash:"), (self.isa.method_msgSend["UID"] || _objj_forward)(self, (self.isa.method_dtable["UID"], "UID")))))));
}

,["void","SEL"]), new objj_method(sel_getUid("awakeAfterUsingCoder:"), function $CPObject__awakeAfterUsingCoder_(self, _cmd, aCoder)
{
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("classForKeyedArchiver"), function $CPObject__classForKeyedArchiver(self, _cmd)
{
    return (self.isa.method_msgSend["classForCoder"] || _objj_forward)(self, (self.isa.method_dtable["classForCoder"], "classForCoder"));
}

,["Class"]), new objj_method(sel_getUid("classForCoder"), function $CPObject__classForCoder(self, _cmd)
{
    return (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"));
}

,["Class"]), new objj_method(sel_getUid("replacementObjectForArchiver:"), function $CPObject__replacementObjectForArchiver_(self, _cmd, anArchiver)
{
    return (self.isa.method_msgSend["replacementObjectForCoder:"] || _objj_forward)(self, (self.isa.method_dtable["replacementObjectForCoder:"], "replacementObjectForCoder:"), anArchiver);
}

,["id","CPArchiver"]), new objj_method(sel_getUid("replacementObjectForKeyedArchiver:"), function $CPObject__replacementObjectForKeyedArchiver_(self, _cmd, anArchiver)
{
    return (self.isa.method_msgSend["replacementObjectForCoder:"] || _objj_forward)(self, (self.isa.method_dtable["replacementObjectForCoder:"], "replacementObjectForCoder:"), anArchiver);
}

,["id","CPKeyedArchiver"]), new objj_method(sel_getUid("replacementObjectForCoder:"), function $CPObject__replacementObjectForCoder_(self, _cmd, aCoder)
{
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("className"), function $CPObject__className(self, _cmd)
{
    return self.isa.name;
}

,["CPString"]), new objj_method(sel_getUid("autorelease"), function $CPObject__autorelease(self, _cmd)
{
    return self;
}

,["id"]), new objj_method(sel_getUid("hash"), function $CPObject__hash(self, _cmd)
{
    return (self.isa.method_msgSend["UID"] || _objj_forward)(self, (self.isa.method_dtable["UID"], "UID"));
}

,["unsigned"]), new objj_method(sel_getUid("UID"), function $CPObject__UID(self, _cmd)
{
    if (typeof self._UID === "undefined")
        self._UID = objj_generateObjectUID();
    return self._UID + "";
}

,["CPString"]), new objj_method(sel_getUid("isEqual:"), function $CPObject__isEqual_(self, _cmd, anObject)
{
    return self === anObject || (self.isa.method_msgSend["UID"] || _objj_forward)(self, (self.isa.method_dtable["UID"], "UID")) === (anObject == null ? null : (anObject.isa.method_msgSend["UID"] || _objj_forward)(anObject, (anObject.isa.method_dtable["UID"], "UID")));
}

,["BOOL","id"]), new objj_method(sel_getUid("retain"), function $CPObject__retain(self, _cmd)
{
    return self;
}

,["id"]), new objj_method(sel_getUid("release"), function $CPObject__release(self, _cmd)
{
}

,["void"]), new objj_method(sel_getUid("self"), function $CPObject__self(self, _cmd)
{
    return self;
}

,["id"]), new objj_method(sel_getUid("superclass"), function $CPObject__superclass(self, _cmd)
{
    return self.isa.super_class;
}

,["Class"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("load"), function $CPObject__load(self, _cmd)
{
}

,["void"]), new objj_method(sel_getUid("initialize"), function $CPObject__initialize(self, _cmd)
{
}

,["void"]), new objj_method(sel_getUid("new"), function $CPObject__new(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("alloc"), function $CPObject__alloc(self, _cmd)
{
    return class_createInstance(self);
}

,["id"]), new objj_method(sel_getUid("allocWithCoder:"), function $CPObject__allocWithCoder_(self, _cmd, aCoder)
{
    return (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"));
}

,["id","CPCoder"]), new objj_method(sel_getUid("class"), function $CPObject__class(self, _cmd)
{
    return self;
}

,["Class"]), new objj_method(sel_getUid("superclass"), function $CPObject__superclass(self, _cmd)
{
    return self.super_class;
}

,["Class"]), new objj_method(sel_getUid("isSubclassOfClass:"), function $CPObject__isSubclassOfClass_(self, _cmd, aClass)
{
    var theClass = self;
    for (; theClass; theClass = theClass.super_class)
        if (theClass === aClass)
            return YES;
    return NO;
}

,["BOOL","Class"]), new objj_method(sel_getUid("isKindOfClass:"), function $CPObject__isKindOfClass_(self, _cmd, aClass)
{
    return (self.isa.method_msgSend["isSubclassOfClass:"] || _objj_forward)(self, (self.isa.method_dtable["isSubclassOfClass:"], "isSubclassOfClass:"), aClass);
}

,["BOOL","Class"]), new objj_method(sel_getUid("isMemberOfClass:"), function $CPObject__isMemberOfClass_(self, _cmd, aClass)
{
    return self === aClass;
}

,["BOOL","Class"]), new objj_method(sel_getUid("instancesRespondToSelector:"), function $CPObject__instancesRespondToSelector_(self, _cmd, aSelector)
{
    return !!class_getInstanceMethod(self, aSelector);
}

,["BOOL","SEL"]), new objj_method(sel_getUid("instancesImplementSelector:"), function $CPObject__instancesImplementSelector_(self, _cmd, aSelector)
{
    var methods = class_copyMethodList(self),
        count = methods.length;
    while (count--)
        if (method_getName(methods[count]) === aSelector)
            return YES;
    return NO;
}

,["BOOL","SEL"]), new objj_method(sel_getUid("conformsToProtocol:"), function $CPObject__conformsToProtocol_(self, _cmd, aProtocol)
{
    return class_conformsToProtocol(self, aProtocol);
}

,["BOOL","Protocol"]), new objj_method(sel_getUid("instanceMethodForSelector:"), function $CPObject__instanceMethodForSelector_(self, _cmd, aSelector)
{
    return class_getMethodImplementation(self, aSelector);
}

,["IMP","SEL"]), new objj_method(sel_getUid("description"), function $CPObject__description(self, _cmd)
{
    return class_getName(self.isa);
}

,["CPString"]), new objj_method(sel_getUid("setVersion:"), function $CPObject__setVersion_(self, _cmd, aVersion)
{
    class_setVersion(self, aVersion);
}

,["void","int"]), new objj_method(sel_getUid("version"), function $CPObject__version(self, _cmd)
{
    return class_getVersion(self);
}

,["int"])]);
}
CPDescriptionOfObject = function(anObject, maximumRecursionDepth)
{
    if (anObject === nil)
        return "nil";
    if (anObject === undefined)
        return "undefined";
    if (anObject === window)
        return "window";
    if (maximumRecursionDepth === 0)
        return "...";
    if (anObject.isa)
    {
        if ((anObject == null ? null : (anObject.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), CPString)))
            return '@"' + (anObject == null ? null : (anObject.isa.method_msgSend["description"] || _objj_forward)(anObject, (anObject.isa.method_dtable["description"], "description"))) + '"';
        if ((anObject == null ? null : (anObject.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("_descriptionWithMaximumDepth:"))))
            return (anObject == null ? null : (anObject.isa.method_msgSend["_descriptionWithMaximumDepth:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["_descriptionWithMaximumDepth:"], "_descriptionWithMaximumDepth:"), maximumRecursionDepth !== undefined ? maximumRecursionDepth - 1 : maximumRecursionDepth));
        return (anObject == null ? null : (anObject.isa.method_msgSend["description"] || _objj_forward)(anObject, (anObject.isa.method_dtable["description"], "description")));
    }
    if (typeof anObject !== "object")
        return String(anObject);
    var properties = [],
        desc;
    for (var property in anObject)
        if (anObject.hasOwnProperty(property))
            properties.push(property);
    properties.sort();
    if (properties.length === 2 && anObject.hasOwnProperty("width") && anObject.hasOwnProperty("height"))
        desc = (CPString == null ? null : (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "CGSize: (%f, %f)", anObject.width, anObject.height));
    else if (properties.length === 2 && anObject.hasOwnProperty("x") && anObject.hasOwnProperty("y"))
        desc = (CPString == null ? null : (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "CGPoint: (%f, %f)", anObject.x, anObject.y));
    else if (properties.length === 2 && anObject.hasOwnProperty("origin") && anObject.hasOwnProperty("size"))
        desc = (CPString == null ? null : (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "CGRect: (%f, %f), (%f, %f)", anObject.origin.x, anObject.origin.y, anObject.size.width, anObject.size.height));
    else if (properties.length === 4 && anObject.hasOwnProperty("top") && anObject.hasOwnProperty("right") && anObject.hasOwnProperty("bottom") && anObject.hasOwnProperty("left"))
        desc = (CPString == null ? null : (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "CGInset: { top:%f, right:%f, bottom:%f, left:%f }", anObject.top, anObject.right, anObject.bottom, anObject.left));
    else
    {
        desc = "{";
        for (var i = 0; i < properties.length; ++i)
        {
            if (i === 0)
                desc += "\n";
            var value = anObject[properties[i]],
                valueDescription = ((CPDescriptionOfObject(value, maximumRecursionDepth !== undefined ? maximumRecursionDepth - 1 : maximumRecursionDepth)).split("\n")).join("\n    ");
            desc += "    " + properties[i] + ": " + valueDescription;
            if (i < properties.length - 1)
                desc += ",\n";
            else
                desc += "\n";
        }
        desc += "}";
    }
    return desc;
}
p;14;CPEnumerator.jt;3001;@STATIC;1.0;i;10;CPObject.jS;2516;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQRW51bWVyYXRvci5qIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBc0JBLGtCLGtCQVlBO0FBQUE7QUFBQSwyQjs2QkFNQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLEc7QUFEWCxDOztVQVFBLDRCO0FBQ0E7SUFDSSxNLENBQU8sQztBQURYLEMiLCJmaWxlIjoiQ1BFbnVtZXJhdG9yLmpzIiwic291cmNlUm9vdCI6ImZpbGU6L1VzZXJzL2RhdmlkL3Byb2dyYW1zL2NhcHB1Y2Npbm8vRm91bmRhdGlvbi8iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ1BFbnVtZXJhdG9yLmpcbiAqIEZvdW5kYXRpb25cbiAqXG4gKiBDcmVhdGVkIGJ5IEZyYW5jaXNjbyBUb2xtYXNreS5cbiAqIENvcHlyaWdodCAyMDA4LCAyODAgTm9ydGgsIEluYy5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXJcbiAqIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgbGlicmFyeTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZVxuICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAwMjExMC0xMzAxIFVTQVxuICovXG5cbkBpbXBvcnQgXCJDUE9iamVjdC5qXCJcblxuLyohXG4gICAgQGNsYXNzIENQRW51bWVyYXRvclxuICAgIEBpbmdyb3VwIGZvdW5kYXRpb25cbiAgICBAYnJpZWYgRGVmaW5lcyBhbiBpbnRlcmZhY2UgZm9yIGVudW1lcmF0b3JzLlxuXG4gICAgQ1BFbnVtZXJhdG9yIGlzIGEgc3VwZXJjbGFzcyAod2l0aCB1c2VsZXNzIG1ldGhvZCBib2RpZXMpXG4gICAgdGhhdCBkZWZpbmVzIGFuIGludGVyZmFjZSBmb3Igc3ViY2xhc3NlcyB0byBmb2xsb3cuIFRoZSBwdXJwb3NlIG9mIGFuXG4gICAgZW51bWVyYXRvciBpcyB0byBiZSBhIGNvbnZlbmllbnQgc3lzdGVtIGZvciB0cmF2ZXJzaW5nIG92ZXIgdGhlIGVsZW1lbnRzXG4gICAgb2YgYSBjb2xsZWN0aW9uIG9mIG9iamVjdHMuXG4qL1xuQGltcGxlbWVudGF0aW9uIENQRW51bWVyYXRvciA6IENQT2JqZWN0XG5cbi8qIVxuICAgIFJldHVybnMgdGhlIG5leHQgb2JqZWN0IGluIHRoZSBjb2xsZWN0aW9uLlxuICAgIE5vIHBhcnRpY3VsYXIgb3JkZXJpbmcgaXMgZ3VhcmFudGVlZC5cbiovXG4tIChpZCluZXh0T2JqZWN0XG57XG4gICAgcmV0dXJuIG5pbDtcbn1cblxuLyohXG4gICAgUmV0dXJucyBhbGwgb2JqZWN0cyBpbiB0aGUgY29sbGVjdGlvbiBpbiBhbiBhcnJheS5cbiAgICBObyBwYXJ0aWN1bGFyIG9yZGVyaW5nIGlzIGd1YXJhbnRlZWQuXG4qL1xuLSAoQ1BBcnJheSlhbGxPYmplY3RzXG57XG4gICAgcmV0dXJuIFtdO1xufVxuXG5AZW5kXG4iXX0=t;445;

objj_executeFile("CPObject.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPEnumerator"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("nextObject"), function $CPEnumerator__nextObject(self, _cmd)
{
    return nil;
}

,["id"]), new objj_method(sel_getUid("allObjects"), function $CPEnumerator__allObjects(self, _cmd)
{
    return [];
}

,["CPArray"])]);
}
p;12;CPIndexSet.jt;103125;@STATIC;1.0;i;9;CPArray.ji;10;CPObject.ji;9;CPRange.jS;67068;t;35988;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPRange.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPIndexSet"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_count", "unsigned"), new objj_ivar("_ranges", "CPArray")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPIndexSet__init(self, _cmd)
{
    return (self.isa.method_msgSend["initWithIndexesInRange:"] || _objj_forward)(self, (self.isa.method_dtable["initWithIndexesInRange:"], "initWithIndexesInRange:"), CPMakeRange(0, 0));
}

,["id"]), new objj_method(sel_getUid("initWithIndex:"), function $CPIndexSet__initWithIndex_(self, _cmd, anIndex)
{
    if (!(!isNaN(parseFloat(anIndex)) && isFinite(anIndex)))
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "Invalid index");
    return (self.isa.method_msgSend["initWithIndexesInRange:"] || _objj_forward)(self, (self.isa.method_dtable["initWithIndexesInRange:"], "initWithIndexesInRange:"), CPMakeRange(anIndex, 1));
}

,["id","CPInteger"]), new objj_method(sel_getUid("initWithIndexesInRange:"), function $CPIndexSet__initWithIndexesInRange_(self, _cmd, aRange)
{
    if (aRange.location < 0)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "Range " + CPStringFromRange(aRange) + " is out of bounds.");
    self = (objj_getClass("CPIndexSet").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._count = MAX(0, aRange.length);
        if (self._count > 0)
            self._ranges = [aRange];
        else
            self._ranges = [];
    }
    return self;
}

,["id","CPRange"]), new objj_method(sel_getUid("initWithIndexSet:"), function $CPIndexSet__initWithIndexSet_(self, _cmd, anIndexSet)
{
    self = (objj_getClass("CPIndexSet").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._count = (anIndexSet == null ? null : (anIndexSet.isa.method_msgSend["count"] || _objj_forward)(anIndexSet, (anIndexSet.isa.method_dtable["count"], "count")));
        self._ranges = [];
        var otherRanges = anIndexSet._ranges,
            otherRangesCount = otherRanges.length;
        while (otherRangesCount--)
            self._ranges[otherRangesCount] = CPMakeRangeCopy(otherRanges[otherRangesCount]);
    }
    return self;
}

,["id","CPIndexSet"]), new objj_method(sel_getUid("isEqual:"), function $CPIndexSet__isEqual_(self, _cmd, anObject)
{
    if (self === anObject)
        return YES;
    if (!anObject || !(anObject == null ? null : (anObject.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPIndexSet.isa.method_msgSend["class"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["class"], "class")))))
        return NO;
    return (self.isa.method_msgSend["isEqualToIndexSet:"] || _objj_forward)(self, (self.isa.method_dtable["isEqualToIndexSet:"], "isEqualToIndexSet:"), anObject);
}

,["BOOL","id"]), new objj_method(sel_getUid("isEqualToIndexSet:"), function $CPIndexSet__isEqualToIndexSet_(self, _cmd, anIndexSet)
{
    if (!anIndexSet)
        return NO;
    if (self === anIndexSet)
        return YES;
    var rangesCount = self._ranges.length,
        otherRanges = anIndexSet._ranges;
    if (rangesCount !== otherRanges.length || self._count !== anIndexSet._count)
        return NO;
    while (rangesCount--)
        if (!CPEqualRanges(self._ranges[rangesCount], otherRanges[rangesCount]))
            return NO;
    return YES;
}

,["BOOL","CPIndexSet"]), new objj_method(sel_getUid("isEqual:"), function $CPIndexSet__isEqual_(self, _cmd, anObject)
{
    return self === anObject || (anObject == null ? null : (anObject.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")))) && (self.isa.method_msgSend["isEqualToIndexSet:"] || _objj_forward)(self, (self.isa.method_dtable["isEqualToIndexSet:"], "isEqualToIndexSet:"), anObject);
}

,["BOOL","id"]), new objj_method(sel_getUid("containsIndex:"), function $CPIndexSet__containsIndex_(self, _cmd, anIndex)
{
    return positionOfIndex(self._ranges, anIndex) !== CPNotFound;
}

,["BOOL","CPInteger"]), new objj_method(sel_getUid("containsIndexesInRange:"), function $CPIndexSet__containsIndexesInRange_(self, _cmd, aRange)
{
    if (aRange.length <= 0)
        return NO;
    if (self._count < aRange.length)
        return NO;
    var rangeIndex = positionOfIndex(self._ranges, aRange.location);
    if (rangeIndex === CPNotFound)
        return NO;
    var range = self._ranges[rangeIndex];
    return (CPIntersectionRange(range, aRange)).length === aRange.length;
}

,["BOOL","CPRange"]), new objj_method(sel_getUid("containsIndexes:"), function $CPIndexSet__containsIndexes_(self, _cmd, anIndexSet)
{
    var otherCount = anIndexSet._count;
    if (otherCount <= 0)
        return YES;
    if (self._count < otherCount)
        return NO;
    var otherRanges = anIndexSet._ranges,
        otherRangesCount = otherRanges.length;
    while (otherRangesCount--)
        if (!(self.isa.method_msgSend["containsIndexesInRange:"] || _objj_forward)(self, (self.isa.method_dtable["containsIndexesInRange:"], "containsIndexesInRange:"), otherRanges[otherRangesCount]))
            return NO;
    return YES;
}

,["BOOL","CPIndexSet"]), new objj_method(sel_getUid("intersectsIndexesInRange:"), function $CPIndexSet__intersectsIndexesInRange_(self, _cmd, aRange)
{
    if (self._count <= 0)
        return NO;
    var lhsRangeIndex = assumedPositionOfIndex(self._ranges, aRange.location);
    if (FLOOR(lhsRangeIndex) === lhsRangeIndex)
        return YES;
    var rhsRangeIndex = assumedPositionOfIndex(self._ranges, CPMaxRange(aRange) - 1);
    if (FLOOR(rhsRangeIndex) === rhsRangeIndex)
        return YES;
    return lhsRangeIndex !== rhsRangeIndex;
}

,["BOOL","CPRange"]), new objj_method(sel_getUid("count"), function $CPIndexSet__count(self, _cmd)
{
    return self._count;
}

,["int"]), new objj_method(sel_getUid("firstIndex"), function $CPIndexSet__firstIndex(self, _cmd)
{
    if (self._count > 0)
        return self._ranges[0].location;
    return CPNotFound;
}

,["CPInteger"]), new objj_method(sel_getUid("lastIndex"), function $CPIndexSet__lastIndex(self, _cmd)
{
    if (self._count > 0)
        return CPMaxRange(self._ranges[self._ranges.length - 1]) - 1;
    return CPNotFound;
}

,["CPInteger"]), new objj_method(sel_getUid("indexGreaterThanIndex:"), function $CPIndexSet__indexGreaterThanIndex_(self, _cmd, anIndex)
{
    ++anIndex;
    var rangeIndex = assumedPositionOfIndex(self._ranges, anIndex);
    if (rangeIndex === CPNotFound)
        return CPNotFound;
    rangeIndex = CEIL(rangeIndex);
    if (rangeIndex >= self._ranges.length)
        return CPNotFound;
    var range = self._ranges[rangeIndex];
    if (CPLocationInRange(anIndex, range))
        return anIndex;
    return range.location;
}

,["CPInteger","CPInteger"]), new objj_method(sel_getUid("indexLessThanIndex:"), function $CPIndexSet__indexLessThanIndex_(self, _cmd, anIndex)
{
    --anIndex;
    var rangeIndex = assumedPositionOfIndex(self._ranges, anIndex);
    if (rangeIndex === CPNotFound)
        return CPNotFound;
    rangeIndex = FLOOR(rangeIndex);
    if (rangeIndex < 0)
        return CPNotFound;
    var range = self._ranges[rangeIndex];
    if (CPLocationInRange(anIndex, range))
        return anIndex;
    return CPMaxRange(range) - 1;
}

,["CPInteger","CPInteger"]), new objj_method(sel_getUid("indexGreaterThanOrEqualToIndex:"), function $CPIndexSet__indexGreaterThanOrEqualToIndex_(self, _cmd, anIndex)
{
    return (self.isa.method_msgSend["indexGreaterThanIndex:"] || _objj_forward)(self, (self.isa.method_dtable["indexGreaterThanIndex:"], "indexGreaterThanIndex:"), anIndex - 1);
}

,["CPInteger","CPInteger"]), new objj_method(sel_getUid("indexLessThanOrEqualToIndex:"), function $CPIndexSet__indexLessThanOrEqualToIndex_(self, _cmd, anIndex)
{
    return (self.isa.method_msgSend["indexLessThanIndex:"] || _objj_forward)(self, (self.isa.method_dtable["indexLessThanIndex:"], "indexLessThanIndex:"), anIndex + 1);
}

,["CPInteger","CPInteger"]), new objj_method(sel_getUid("getIndexes:maxCount:inIndexRange:"), function $CPIndexSet__getIndexes_maxCount_inIndexRange_(self, _cmd, anArray, aMaxCount, aRange)
{
    if (!self._count || aMaxCount === 0 || aRange && !aRange.length)
    {
        if (aRange)
            aRange.length = 0;
        return 0;
    }
    var total = 0;
    if (aRange)
    {
        var firstIndex = aRange.location,
            lastIndex = CPMaxRange(aRange) - 1,
            rangeIndex = CEIL(assumedPositionOfIndex(self._ranges, firstIndex)),
            lastRangeIndex = FLOOR(assumedPositionOfIndex(self._ranges, lastIndex));
    }
    else
    {
        var firstIndex = (self.isa.method_msgSend["firstIndex"] || _objj_forward)(self, (self.isa.method_dtable["firstIndex"], "firstIndex")),
            lastIndex = (self.isa.method_msgSend["lastIndex"] || _objj_forward)(self, (self.isa.method_dtable["lastIndex"], "lastIndex")),
            rangeIndex = 0,
            lastRangeIndex = self._ranges.length - 1;
    }
    while (rangeIndex <= lastRangeIndex)
    {
        var range = self._ranges[rangeIndex],
            index = MAX(firstIndex, range.location),
            maxRange = MIN(lastIndex + 1, CPMaxRange(range));
        for (; index < maxRange; ++index)
        {
            anArray[total++] = index;
            if (total === aMaxCount)
            {
                if (aRange)
                {
                    aRange.location = index + 1;
                    aRange.length = lastIndex + 1 - index - 1;
                }
                return aMaxCount;
            }
        }
        ++rangeIndex;
    }
    if (aRange)
    {
        aRange.location = CPNotFound;
        aRange.length = 0;
    }
    return total;
}

,["CPInteger","CPArray","CPInteger","CPRange"]), new objj_method(sel_getUid("description"), function $CPIndexSet__description(self, _cmd)
{
    var description = (objj_getClass("CPIndexSet").super_class.method_dtable["description"] || _objj_forward)(self, "description");
    if (self._count)
    {
        var index = 0,
            count = self._ranges.length;
        description += "[number of indexes: " + self._count + " (in " + count;
        if (count === 1)
            description += " range), indexes: (";
        else
            description += " ranges), indexes: (";
        for (; index < count; ++index)
        {
            var range = self._ranges[index];
            description += range.location;
            if (range.length > 1)
                description += "-" + (CPMaxRange(range) - 1);
            if (index + 1 < count)
                description += " ";
        }
        description += ")]";
    }
    else
        description += "(no indexes)";
    return description;
}

,["CPString"]), new objj_method(sel_getUid("enumerateIndexesUsingBlock:"), function $CPIndexSet__enumerateIndexesUsingBlock_(self, _cmd, aFunction)
{
    (self.isa.method_msgSend["enumerateIndexesWithOptions:usingBlock:"] || _objj_forward)(self, (self.isa.method_dtable["enumerateIndexesWithOptions:usingBlock:"], self.isa.method_dtable["enumerateIndexesWithOptions:usingBlock:"], "enumerateIndexesWithOptions:usingBlock:"), CPEnumerationNormal, aFunction);
}

,["void","Function"]), new objj_method(sel_getUid("enumerateIndexesWithOptions:usingBlock:"), function $CPIndexSet__enumerateIndexesWithOptions_usingBlock_(self, _cmd, options, aFunction)
{
    if (!self._count)
        return;
    (self.isa.method_msgSend["enumerateIndexesInRange:options:usingBlock:"] || _objj_forward)(self, (self.isa.method_dtable["enumerateIndexesInRange:options:usingBlock:"], self.isa.method_dtable["enumerateIndexesInRange:options:usingBlock:"], self.isa.method_dtable["enumerateIndexesInRange:options:usingBlock:"], "enumerateIndexesInRange:options:usingBlock:"), CPMakeRange(0, CPMaxRange(self._ranges[self._ranges.length - 1])), options, aFunction);
}

,["void","CPEnumerationOptions","Function"]), new objj_method(sel_getUid("enumerateIndexesInRange:options:usingBlock:"), function $CPIndexSet__enumerateIndexesInRange_options_usingBlock_(self, _cmd, enumerationRange, options, aFunction)
{
    if (!self._count || CPEmptyRange(enumerationRange))
        return;
    var shouldStop = NO,
        index,
        stop,
        increment;
    if (options & CPEnumerationReverse)
    {
        (index = self._ranges.length - 1, stop = -1, increment = -1);
    }
    else
    {
        index = 0;
        stop = self._ranges.length;
        increment = 1;
    }
    for (; index !== stop; index += increment)
    {
        var range = self._ranges[index],
            rangeIndex,
            rangeStop,
            rangeIncrement;
        if (options & CPEnumerationReverse)
        {
            rangeIndex = CPMaxRange(range) - 1;
            rangeStop = range.location - 1;
            rangeIncrement = -1;
        }
        else
        {
            rangeIndex = range.location;
            rangeStop = CPMaxRange(range);
            rangeIncrement = 1;
        }
        for (; rangeIndex !== rangeStop; rangeIndex += rangeIncrement)
        {
            if (CPLocationInRange(rangeIndex, enumerationRange))
            {
                aFunction(rangeIndex, function(__input) { if (arguments.length) return shouldStop = __input; return shouldStop; });
                if (shouldStop)
                    return;
            }
        }
    }
}

,["void","CPRange","CPEnumerationOptions","Function"]), new objj_method(sel_getUid("indexPassingTest:"), function $CPIndexSet__indexPassingTest_(self, _cmd, aPredicate)
{
    return (self.isa.method_msgSend["indexWithOptions:passingTest:"] || _objj_forward)(self, (self.isa.method_dtable["indexWithOptions:passingTest:"], self.isa.method_dtable["indexWithOptions:passingTest:"], "indexWithOptions:passingTest:"), CPEnumerationNormal, aPredicate);
}

,["unsigned","Function"]), new objj_method(sel_getUid("indexesPassingTest:"), function $CPIndexSet__indexesPassingTest_(self, _cmd, aPredicate)
{
    return (self.isa.method_msgSend["indexesWithOptions:passingTest:"] || _objj_forward)(self, (self.isa.method_dtable["indexesWithOptions:passingTest:"], self.isa.method_dtable["indexesWithOptions:passingTest:"], "indexesWithOptions:passingTest:"), CPEnumerationNormal, aPredicate);
}

,["CPIndexSet","Function"]), new objj_method(sel_getUid("indexWithOptions:passingTest:"), function $CPIndexSet__indexWithOptions_passingTest_(self, _cmd, anOptions, aPredicate)
{
    if (!self._count)
        return CPNotFound;
    return (self.isa.method_msgSend["indexInRange:options:passingTest:"] || _objj_forward)(self, (self.isa.method_dtable["indexInRange:options:passingTest:"], self.isa.method_dtable["indexInRange:options:passingTest:"], self.isa.method_dtable["indexInRange:options:passingTest:"], "indexInRange:options:passingTest:"), CPMakeRange(0, CPMaxRange(self._ranges[self._ranges.length - 1])), anOptions, aPredicate);
}

,["unsigned","CPEnumerationOptions","Function"]), new objj_method(sel_getUid("indexesWithOptions:passingTest:"), function $CPIndexSet__indexesWithOptions_passingTest_(self, _cmd, anOptions, aPredicate)
{
    if (!self._count)
        return (CPIndexSet.isa.method_msgSend["indexSet"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSet"], "indexSet"));
    return (self.isa.method_msgSend["indexesInRange:options:passingTest:"] || _objj_forward)(self, (self.isa.method_dtable["indexesInRange:options:passingTest:"], self.isa.method_dtable["indexesInRange:options:passingTest:"], self.isa.method_dtable["indexesInRange:options:passingTest:"], "indexesInRange:options:passingTest:"), CPMakeRange(0, CPMaxRange(self._ranges[self._ranges.length - 1])), anOptions, aPredicate);
}

,["CPIndexSet","CPEnumerationOptions","Function"]), new objj_method(sel_getUid("indexInRange:options:passingTest:"), function $CPIndexSet__indexInRange_options_passingTest_(self, _cmd, aRange, anOptions, aPredicate)
{
    if (!self._count || CPEmptyRange(aRange))
        return CPNotFound;
    var shouldStop = NO,
        index,
        stop,
        increment;
    if (anOptions & CPEnumerationReverse)
    {
        (index = self._ranges.length - 1, stop = -1, increment = -1);
    }
    else
    {
        index = 0;
        stop = self._ranges.length;
        increment = 1;
    }
    for (; index !== stop; index += increment)
    {
        var range = self._ranges[index],
            rangeIndex,
            rangeStop,
            rangeIncrement;
        if (anOptions & CPEnumerationReverse)
        {
            rangeIndex = CPMaxRange(range) - 1;
            rangeStop = range.location - 1;
            rangeIncrement = -1;
        }
        else
        {
            rangeIndex = range.location;
            rangeStop = CPMaxRange(range);
            rangeIncrement = 1;
        }
        for (; rangeIndex !== rangeStop; rangeIndex += rangeIncrement)
        {
            if (CPLocationInRange(rangeIndex, aRange))
            {
                if (aPredicate(rangeIndex, function(__input) { if (arguments.length) return shouldStop = __input; return shouldStop; }))
                    return rangeIndex;
                if (shouldStop)
                    return CPNotFound;
            }
        }
    }
    return CPNotFound;
}

,["unsigned","CPRange","CPEnumerationOptions","Function"]), new objj_method(sel_getUid("indexesInRange:options:passingTest:"), function $CPIndexSet__indexesInRange_options_passingTest_(self, _cmd, aRange, anOptions, aPredicate)
{
    if (!self._count || CPEmptyRange(aRange))
        return (CPIndexSet.isa.method_msgSend["indexSet"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSet"], "indexSet"));
    var shouldStop = NO,
        index,
        stop,
        increment;
    if (anOptions & CPEnumerationReverse)
    {
        (index = self._ranges.length - 1, stop = -1, increment = -1);
    }
    else
    {
        index = 0;
        stop = self._ranges.length;
        increment = 1;
    }
    var indexesPassingTest = (CPMutableIndexSet == null ? null : (CPMutableIndexSet.isa.method_msgSend["indexSet"] || _objj_forward)(CPMutableIndexSet, (CPMutableIndexSet.isa.method_dtable["indexSet"], "indexSet")));
    for (; index !== stop; index += increment)
    {
        var range = self._ranges[index],
            rangeIndex,
            rangeStop,
            rangeIncrement;
        if (anOptions & CPEnumerationReverse)
        {
            rangeIndex = CPMaxRange(range) - 1;
            rangeStop = range.location - 1;
            rangeIncrement = -1;
        }
        else
        {
            rangeIndex = range.location;
            rangeStop = CPMaxRange(range);
            rangeIncrement = 1;
        }
        for (; rangeIndex !== rangeStop; rangeIndex += rangeIncrement)
        {
            if (CPLocationInRange(rangeIndex, aRange))
            {
                if (aPredicate(rangeIndex, function(__input) { if (arguments.length) return shouldStop = __input; return shouldStop; }))
                    (indexesPassingTest == null ? null : (indexesPassingTest.isa.method_msgSend["addIndex:"] || _objj_forward)(indexesPassingTest, (indexesPassingTest.isa.method_dtable["addIndex:"], "addIndex:"), rangeIndex));
                if (shouldStop)
                    return indexesPassingTest;
            }
        }
    }
    return indexesPassingTest;
}

,["CPIndexSet","CPRange","CPEnumerationOptions","Function"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("indexSet"), function $CPIndexSet__indexSet(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("indexSetWithIndex:"), function $CPIndexSet__indexSetWithIndex_(self, _cmd, anIndex)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithIndex:"] || _objj_forward)(___r1, "initWithIndex:", anIndex));
    var ___r1;
}

,["id","int"]), new objj_method(sel_getUid("indexSetWithIndexesInRange:"), function $CPIndexSet__indexSetWithIndexesInRange_(self, _cmd, aRange)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithIndexesInRange:"] || _objj_forward)(___r1, "initWithIndexesInRange:", aRange));
    var ___r1;
}

,["id","CPRange"])]);
}
{
var the_class = objj_getClass("CPIndexSet")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPIndexSet\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("addIndex:"), function $CPIndexSet__addIndex_(self, _cmd, anIndex)
{
    (self.isa.method_msgSend["addIndexesInRange:"] || _objj_forward)(self, (self.isa.method_dtable["addIndexesInRange:"], "addIndexesInRange:"), CPMakeRange(anIndex, 1));
}

,["void","CPInteger"]), new objj_method(sel_getUid("addIndexes:"), function $CPIndexSet__addIndexes_(self, _cmd, anIndexSet)
{
    var otherRanges = anIndexSet._ranges,
        otherRangesCount = otherRanges.length;
    while (otherRangesCount--)
        (self.isa.method_msgSend["addIndexesInRange:"] || _objj_forward)(self, (self.isa.method_dtable["addIndexesInRange:"], "addIndexesInRange:"), otherRanges[otherRangesCount]);
}

,["void","CPIndexSet"]), new objj_method(sel_getUid("addIndexesInRange:"), function $CPIndexSet__addIndexesInRange_(self, _cmd, aRange)
{
    if (aRange.location < 0)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "Range " + CPStringFromRange(aRange) + " is out of bounds.");
    if (aRange.length <= 0)
        return;
    if (self._count <= 0)
    {
        self._count = aRange.length;
        self._ranges = [aRange];
        return;
    }
    var rangeCount = self._ranges.length,
        lhsRangeIndex = assumedPositionOfIndex(self._ranges, aRange.location - 1),
        lhsRangeIndexCEIL = CEIL(lhsRangeIndex);
    if (lhsRangeIndexCEIL === lhsRangeIndex && lhsRangeIndexCEIL < rangeCount)
        aRange = CPUnionRange(aRange, self._ranges[lhsRangeIndexCEIL]);
    var rhsRangeIndex = assumedPositionOfIndex(self._ranges, CPMaxRange(aRange)),
        rhsRangeIndexFLOOR = FLOOR(rhsRangeIndex);
    if (rhsRangeIndexFLOOR === rhsRangeIndex && rhsRangeIndexFLOOR >= 0)
        aRange = CPUnionRange(aRange, self._ranges[rhsRangeIndexFLOOR]);
    var removalCount = rhsRangeIndexFLOOR - lhsRangeIndexCEIL + 1;
    if (removalCount === self._ranges.length)
    {
        self._ranges = [aRange];
        self._count = aRange.length;
    }
    else if (removalCount === 1)
    {
        if (lhsRangeIndexCEIL < self._ranges.length)
            self._count -= self._ranges[lhsRangeIndexCEIL].length;
        self._count += aRange.length;
        self._ranges[lhsRangeIndexCEIL] = aRange;
    }
    else
    {
        if (removalCount > 0)
        {
            var removal = lhsRangeIndexCEIL,
                lastRemoval = lhsRangeIndexCEIL + removalCount - 1;
            for (; removal <= lastRemoval; ++removal)
                self._count -= self._ranges[removal].length;
            ((___r1 = self._ranges), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObjectsInRange:"] || _objj_forward)(___r1, (self._ranges.isa.method_dtable["removeObjectsInRange:"], "removeObjectsInRange:"), CPMakeRange(lhsRangeIndexCEIL, removalCount)));
        }
        ((___r1 = self._ranges), ___r1 == null ? null : (___r1.isa.method_msgSend["insertObject:atIndex:"] || _objj_forward)(___r1, (self._ranges.isa.method_dtable["insertObject:atIndex:"], self._ranges.isa.method_dtable["insertObject:atIndex:"], "insertObject:atIndex:"), aRange, lhsRangeIndexCEIL));
        self._count += aRange.length;
    }
    var ___r1;
}

,["void","CPRange"]), new objj_method(sel_getUid("removeIndex:"), function $CPIndexSet__removeIndex_(self, _cmd, anIndex)
{
    (self.isa.method_msgSend["removeIndexesInRange:"] || _objj_forward)(self, (self.isa.method_dtable["removeIndexesInRange:"], "removeIndexesInRange:"), CPMakeRange(anIndex, 1));
}

,["void","CPInteger"]), new objj_method(sel_getUid("removeIndexes:"), function $CPIndexSet__removeIndexes_(self, _cmd, anIndexSet)
{
    var otherRanges = anIndexSet._ranges,
        otherRangesCount = otherRanges.length;
    while (otherRangesCount--)
        (self.isa.method_msgSend["removeIndexesInRange:"] || _objj_forward)(self, (self.isa.method_dtable["removeIndexesInRange:"], "removeIndexesInRange:"), otherRanges[otherRangesCount]);
}

,["void","CPIndexSet"]), new objj_method(sel_getUid("removeAllIndexes"), function $CPIndexSet__removeAllIndexes(self, _cmd)
{
    self._ranges = [];
    self._count = 0;
}

,["void"]), new objj_method(sel_getUid("removeIndexesInRange:"), function $CPIndexSet__removeIndexesInRange_(self, _cmd, aRange)
{
    if (aRange.length <= 0)
        return;
    if (self._count <= 0)
        return;
    var rangeCount = self._ranges.length,
        lhsRangeIndex = assumedPositionOfIndex(self._ranges, aRange.location),
        lhsRangeIndexCEIL = CEIL(lhsRangeIndex);
    if (lhsRangeIndex === lhsRangeIndexCEIL && lhsRangeIndexCEIL < rangeCount)
    {
        var existingRange = self._ranges[lhsRangeIndexCEIL];
        if (aRange.location !== existingRange.location)
        {
            var maxRange = CPMaxRange(aRange),
                existingMaxRange = CPMaxRange(existingRange);
            existingRange.length = aRange.location - existingRange.location;
            if (maxRange < existingMaxRange)
            {
                self._count -= aRange.length;
                ((___r1 = self._ranges), ___r1 == null ? null : (___r1.isa.method_msgSend["insertObject:atIndex:"] || _objj_forward)(___r1, (self._ranges.isa.method_dtable["insertObject:atIndex:"], self._ranges.isa.method_dtable["insertObject:atIndex:"], "insertObject:atIndex:"), CPMakeRange(maxRange, existingMaxRange - maxRange), lhsRangeIndexCEIL + 1));
                return;
            }
            else
            {
                self._count -= existingMaxRange - aRange.location;
                lhsRangeIndexCEIL += 1;
            }
        }
    }
    var rhsRangeIndex = assumedPositionOfIndex(self._ranges, CPMaxRange(aRange) - 1),
        rhsRangeIndexFLOOR = FLOOR(rhsRangeIndex);
    if (rhsRangeIndex === rhsRangeIndexFLOOR && rhsRangeIndexFLOOR >= 0)
    {
        var maxRange = CPMaxRange(aRange),
            existingRange = self._ranges[rhsRangeIndexFLOOR],
            existingMaxRange = CPMaxRange(existingRange);
        if (maxRange !== existingMaxRange)
        {
            self._count -= maxRange - existingRange.location;
            rhsRangeIndexFLOOR -= 1;
            existingRange.location = maxRange;
            existingRange.length = existingMaxRange - maxRange;
        }
    }
    var removalCount = rhsRangeIndexFLOOR - lhsRangeIndexCEIL + 1;
    if (removalCount > 0)
    {
        var removal = lhsRangeIndexCEIL,
            lastRemoval = lhsRangeIndexCEIL + removalCount - 1;
        for (; removal <= lastRemoval; ++removal)
            self._count -= self._ranges[removal].length;
        ((___r1 = self._ranges), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObjectsInRange:"] || _objj_forward)(___r1, (self._ranges.isa.method_dtable["removeObjectsInRange:"], "removeObjectsInRange:"), CPMakeRange(lhsRangeIndexCEIL, removalCount)));
    }
    var ___r1;
}

,["void","CPRange"]), new objj_method(sel_getUid("shiftIndexesStartingAtIndex:by:"), function $CPIndexSet__shiftIndexesStartingAtIndex_by_(self, _cmd, anIndex, aDelta)
{
    if (!self._count || aDelta == 0)
        return;
    var i = self._ranges.length - 1,
        shifted = CPMakeRange(CPNotFound, 0);
    for (; i >= 0; --i)
    {
        var range = self._ranges[i],
            maximum = CPMaxRange(range);
        if (anIndex >= maximum)
            break;
        if (anIndex > range.location)
        {
            shifted = CPMakeRange(anIndex + aDelta, maximum - anIndex);
            range.length = anIndex - range.location;
            if (aDelta > 0)
                ((___r1 = self._ranges), ___r1 == null ? null : (___r1.isa.method_msgSend["insertObject:atIndex:"] || _objj_forward)(___r1, (self._ranges.isa.method_dtable["insertObject:atIndex:"], self._ranges.isa.method_dtable["insertObject:atIndex:"], "insertObject:atIndex:"), shifted, i + 1));
            else if (shifted.location < 0)
            {
                shifted.length = CPMaxRange(shifted);
                shifted.location = 0;
            }
            break;
        }
        if ((range.location += aDelta) < 0)
        {
            self._count -= range.length - CPMaxRange(range);
            range.length = CPMaxRange(range);
            range.location = 0;
        }
    }
    if (aDelta < 0)
    {
        var j = i + 1,
            count = self._ranges.length,
            shifts = [];
        for (; j < count; ++j)
        {
            (shifts == null ? null : (shifts.isa.method_msgSend["addObject:"] || _objj_forward)(shifts, (shifts.isa.method_dtable["addObject:"], "addObject:"), self._ranges[j]));
            self._count -= self._ranges[j].length;
        }
        if ((j = i + 1) < count)
        {
            ((___r1 = self._ranges), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObjectsInRange:"] || _objj_forward)(___r1, (self._ranges.isa.method_dtable["removeObjectsInRange:"], "removeObjectsInRange:"), CPMakeRange(j, count - j)));
            for ((j = 0, count = shifts.length); j < count; ++j)
                (self.isa.method_msgSend["addIndexesInRange:"] || _objj_forward)(self, (self.isa.method_dtable["addIndexesInRange:"], "addIndexesInRange:"), shifts[j]);
        }
        if (shifted.location != CPNotFound)
            (self.isa.method_msgSend["addIndexesInRange:"] || _objj_forward)(self, (self.isa.method_dtable["addIndexesInRange:"], "addIndexesInRange:"), shifted);
    }
    var ___r1;
}

,["void","CPInteger","int"])]);
}
var CPIndexSetCountKey = "CPIndexSetCountKey",
    CPIndexSetRangeStringsKey = "CPIndexSetRangeStringsKey";
{
var the_class = objj_getClass("CPIndexSet")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPIndexSet\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPIndexSet__initWithCoder_(self, _cmd, aCoder)
{
    self = (objj_getClass("CPIndexSet").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._count = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPIndexSetCountKey));
        var rangeStrings = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPIndexSetRangeStringsKey));
        self._ranges = (rangeStrings == null ? null : (rangeStrings.isa.method_msgSend["arrayByApplyingBlock:"] || _objj_forward)(rangeStrings, (rangeStrings.isa.method_dtable["arrayByApplyingBlock:"], "arrayByApplyingBlock:"),         function(range)
        {
            return CPRangeFromString(range);
        }));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPIndexSet__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._count, CPIndexSetCountKey));
    var index = 0,
        count = self._ranges.length,
        rangeStrings = [];
    for (; index < count; ++index)
        rangeStrings[index] = CPStringFromRange(self._ranges[index]);
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), rangeStrings, CPIndexSetRangeStringsKey));
}

,["void","CPCoder"])]);
}
{
var the_class = objj_getClass("CPIndexSet")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPIndexSet\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("copy"), function $CPIndexSet__copy(self, _cmd)
{
    return ((___r1 = ((___r2 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r2 == null ? null : (___r2.isa.method_msgSend["alloc"] || _objj_forward)(___r2, "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithIndexSet:"] || _objj_forward)(___r1, "initWithIndexSet:", self));
    var ___r1, ___r2;
}

,["id"]), new objj_method(sel_getUid("mutableCopy"), function $CPIndexSet__mutableCopy(self, _cmd)
{
    return ((___r1 = ((___r2 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r2 == null ? null : (___r2.isa.method_msgSend["alloc"] || _objj_forward)(___r2, "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithIndexSet:"] || _objj_forward)(___r1, "initWithIndexSet:", self));
    var ___r1, ___r2;
}

,["id"])]);
}

{var the_class = objj_allocateClassPair(CPIndexSet, "CPMutableIndexSet"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
}
var positionOfIndex = function(ranges, anIndex)
{
    var low = 0,
        high = ranges.length - 1;
    while (low <= high)
    {
        var middle = FLOOR(low + (high - low) / 2),
            range = ranges[middle];
        if (anIndex < range.location)
            high = middle - 1;
        else if (anIndex >= CPMaxRange(range))
            low = middle + 1;
        else
            return middle;
    }    return CPNotFound;
};
var assumedPositionOfIndex = function(ranges, anIndex)
{
    var count = ranges.length;
    if (count <= 0)
        return CPNotFound;
    var low = 0,
        high = count * 2;
    while (low <= high)
    {
        var middle = FLOOR(low + (high - low) / 2),
            position = middle / 2,
            positionFLOOR = FLOOR(position);
        if (position === positionFLOOR)
        {
            if (positionFLOOR - 1 >= 0 && anIndex < CPMaxRange(ranges[positionFLOOR - 1]))
                high = middle - 1;
            else if (positionFLOOR < count && anIndex >= ranges[positionFLOOR].location)
                low = middle + 1;
            else
                return positionFLOOR - 0.5;
        }        else
        {
            var range = ranges[positionFLOOR];
            if (anIndex < range.location)
                high = middle - 1;
            else if (anIndex >= CPMaxRange(range))
                low = middle + 1;
            else
                return positionFLOOR;
        }    }    return CPNotFound;
};
p;8;CPData.jt;18805;@STATIC;1.0;i;10;CPObject.ji;10;CPString.jS;9772;;8977;

objj_executeFile("CPObject.j", YES);objj_executeFile("CPString.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPData"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithRawString:"), function $CPData__initWithRawString_(self, _cmd, aString)
{
    self = (objj_getClass("CPData").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
        (self == null ? null : (self.isa.method_msgSend["setRawString:"] || _objj_forward)(self, (self.isa.method_dtable["setRawString:"], "setRawString:"), aString));
    return self;
}

,["id","CPString"]), new objj_method(sel_getUid("initWithPlistObject:"), function $CPData__initWithPlistObject_(self, _cmd, aPlistObject)
{
    self = (objj_getClass("CPData").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
        (self == null ? null : (self.isa.method_msgSend["setPlistObject:"] || _objj_forward)(self, (self.isa.method_dtable["setPlistObject:"], "setPlistObject:"), aPlistObject));
    return self;
}

,["id","id"]), new objj_method(sel_getUid("initWithPlistObject:format:"), function $CPData__initWithPlistObject_format_(self, _cmd, aPlistObject, aFormat)
{
    self = (objj_getClass("CPData").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
        (self == null ? null : (self.isa.method_msgSend["setPlistObject:format:"] || _objj_forward)(self, (self.isa.method_dtable["setPlistObject:format:"], self.isa.method_dtable["setPlistObject:format:"], "setPlistObject:format:"), aPlistObject, aFormat));
    return self;
}

,["id","id","id"]), new objj_method(sel_getUid("initWithJSONObject:"), function $CPData__initWithJSONObject_(self, _cmd, anObject)
{
    self = (objj_getClass("CPData").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
        (self == null ? null : (self.isa.method_msgSend["setJSONObject:"] || _objj_forward)(self, (self.isa.method_dtable["setJSONObject:"], "setJSONObject:"), anObject));
    return self;
}

,["id","Object"]), new objj_method(sel_getUid("rawString"), function $CPData__rawString(self, _cmd)
{
    return self.rawString();
}

,["CPString"]), new objj_method(sel_getUid("plistObject"), function $CPData__plistObject(self, _cmd)
{
    return self.propertyList();
}

,["id"]), new objj_method(sel_getUid("JSONObject"), function $CPData__JSONObject(self, _cmd)
{
    return self.JSONObject();
}

,["Object"]), new objj_method(sel_getUid("bytes"), function $CPData__bytes(self, _cmd)
{
    return self.bytes();
}

,["CPArray"]), new objj_method(sel_getUid("base64"), function $CPData__base64(self, _cmd)
{
    return self.base64();
}

,["CPString"]), new objj_method(sel_getUid("length"), function $CPData__length(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["rawString"] || _objj_forward)(self, (self.isa.method_dtable["rawString"], "rawString"))), ___r1 == null ? null : (___r1.isa.method_msgSend["length"] || _objj_forward)(___r1, "length"));
    var ___r1;
}

,["int"]), new objj_method(sel_getUid("description"), function $CPData__description(self, _cmd)
{
    return self.toString();
}

,["CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPData__alloc(self, _cmd)
{
    var result = new CFMutableData();
    result.isa = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"));
    return result;
}

,["id"]), new objj_method(sel_getUid("data"), function $CPData__data(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    var ___r1;
}

,["CPData"]), new objj_method(sel_getUid("dataWithRawString:"), function $CPData__dataWithRawString_(self, _cmd, aString)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithRawString:"] || _objj_forward)(___r1, "initWithRawString:", aString));
    var ___r1;
}

,["CPData","CPString"]), new objj_method(sel_getUid("dataWithPlistObject:"), function $CPData__dataWithPlistObject_(self, _cmd, aPlistObject)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithPlistObject:"] || _objj_forward)(___r1, "initWithPlistObject:", aPlistObject));
    var ___r1;
}

,["CPData","id"]), new objj_method(sel_getUid("dataWithPlistObject:format:"), function $CPData__dataWithPlistObject_format_(self, _cmd, aPlistObject, aFormat)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithPlistObject:format:"] || _objj_forward)(___r1, "initWithPlistObject:format:", aPlistObject, aFormat));
    var ___r1;
}

,["CPData","id","CPPropertyListFormat"]), new objj_method(sel_getUid("dataWithJSONObject:"), function $CPData__dataWithJSONObject_(self, _cmd, anObject)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithJSONObject:"] || _objj_forward)(___r1, "initWithJSONObject:", anObject));
    var ___r1;
}

,["CPData","Object"]), new objj_method(sel_getUid("dataWithBytes:"), function $CPData__dataWithBytes_(self, _cmd, bytesArray)
{
    var data = ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    data.setBytes(bytesArray);
    return data;
    var ___r1;
}

,["CPData","CPArray"]), new objj_method(sel_getUid("dataWithBase64:"), function $CPData__dataWithBase64_(self, _cmd, aString)
{
    var data = ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    data.setBase64String(aString);
    return data;
    var ___r1;
}

,["CPData","CPString"])]);
}
{
var the_class = objj_getClass("CPData")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPData\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("setRawString:"), function $CPData__setRawString_(self, _cmd, aString)
{
    self.setRawString(aString);
}

,["void","CPString"]), new objj_method(sel_getUid("setPlistObject:"), function $CPData__setPlistObject_(self, _cmd, aPlistObject)
{
    self.setPropertyList(aPlistObject);
}

,["void","id"]), new objj_method(sel_getUid("setPlistObject:format:"), function $CPData__setPlistObject_format_(self, _cmd, aPlistObject, aFormat)
{
    self.setPropertyList(aPlistObject, aFormat);
}

,["void","id","CPPropertyListFormat"]), new objj_method(sel_getUid("setJSONObject:"), function $CPData__setJSONObject_(self, _cmd, anObject)
{
    self.setJSONObject(anObject);
}

,["void","Object"])]);
}
{
var the_class = objj_getClass("CPData")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPData\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithString:"), function $CPData__initWithString_(self, _cmd, aString)
{
    _CPReportLenientDeprecation(self, _cmd, sel_getUid("initWithRawString:"));
    return (self.isa.method_msgSend["initWithRawString:"] || _objj_forward)(self, (self.isa.method_dtable["initWithRawString:"], "initWithRawString:"), aString);
}

,["id","CPString"]), new objj_method(sel_getUid("setString:"), function $CPData__setString_(self, _cmd, aString)
{
    _CPReportLenientDeprecation(self, _cmd, sel_getUid("setRawString:"));
    (self.isa.method_msgSend["setRawString:"] || _objj_forward)(self, (self.isa.method_dtable["setRawString:"], "setRawString:"), aString);
}

,["void","CPString"]), new objj_method(sel_getUid("string"), function $CPData__string(self, _cmd)
{
    _CPReportLenientDeprecation(self, _cmd, sel_getUid("rawString"));
    return (self.isa.method_msgSend["rawString"] || _objj_forward)(self, (self.isa.method_dtable["rawString"], "rawString"));
}

,["CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("dataWithString:"), function $CPData__dataWithString_(self, _cmd, aString)
{
    _CPReportLenientDeprecation(self, _cmd, sel_getUid("dataWithRawString:"));
    return (self.isa.method_msgSend["dataWithRawString:"] || _objj_forward)(self, (self.isa.method_dtable["dataWithRawString:"], "dataWithRawString:"), aString);
}

,["id","CPString"])]);
}
CFData.prototype.isa = CPData;
CFMutableData.prototype.isa = CPData;
p;13;CPIndexPath.jt;19087;@STATIC;1.0;i;9;CPArray.ji;13;CPException.ji;10;CPObject.ji;9;CPRange.ji;18;CPSortDescriptor.jS;9820;;9159;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPRange.j", YES);objj_executeFile("CPSortDescriptor.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPIndexPath"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_indexes", "CPArray")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("indexes"), function $CPIndexPath__indexes(self, _cmd)
{
    return self._indexes;
}

,["CPArray"]), new objj_method(sel_getUid("setIndexes:"), function $CPIndexPath__setIndexes_(self, _cmd, newValue)
{
    self._indexes = newValue;
}

,["void","CPArray"]), new objj_method(sel_getUid("initWithIndexes:length:"), function $CPIndexPath__initWithIndexes_length_(self, _cmd, indexes, length)
{
    self = (objj_getClass("CPIndexPath").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
        self._indexes = (indexes == null ? null : (indexes.isa.method_msgSend["subarrayWithRange:"] || _objj_forward)(indexes, (indexes.isa.method_dtable["subarrayWithRange:"], "subarrayWithRange:"), CPMakeRange(0, length)));
    return self;
}

,["id","CPArray","int"]), new objj_method(sel_getUid("initWithIndexes:"), function $CPIndexPath__initWithIndexes_(self, _cmd, indexes)
{
    self = (objj_getClass("CPIndexPath").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
        self._indexes = (indexes == null ? null : (indexes.isa.method_msgSend["copy"] || _objj_forward)(indexes, (indexes.isa.method_dtable["copy"], "copy")));
    return self;
}

,["id","CPArray"]), new objj_method(sel_getUid("description"), function $CPIndexPath__description(self, _cmd)
{
    return (objj_getClass("CPIndexPath").super_class.method_dtable["description"] || _objj_forward)(self, "description") + " " + self._indexes;
}

,["CPString"]), new objj_method(sel_getUid("length"), function $CPIndexPath__length(self, _cmd)
{
    return ((___r1 = self._indexes), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._indexes.isa.method_dtable["count"], "count")));
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("indexAtPosition:"), function $CPIndexPath__indexAtPosition_(self, _cmd, position)
{
    return ((___r1 = self._indexes), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, (self._indexes.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), position));
    var ___r1;
}

,["int","int"]), new objj_method(sel_getUid("setIndexes:"), function $CPIndexPath__setIndexes_(self, _cmd, theIndexes)
{
    self._indexes = (theIndexes == null ? null : (theIndexes.isa.method_msgSend["copy"] || _objj_forward)(theIndexes, (theIndexes.isa.method_dtable["copy"], "copy")));
}

,["void","CPArray"]), new objj_method(sel_getUid("indexes"), function $CPIndexPath__indexes(self, _cmd)
{
    return ((___r1 = self._indexes), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, (self._indexes.isa.method_dtable["copy"], "copy")));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("indexPathByAddingIndex:"), function $CPIndexPath__indexPathByAddingIndex_(self, _cmd, index)
{
    return (CPIndexPath.isa.method_msgSend["indexPathWithIndexes:"] || _objj_forward)(CPIndexPath, (CPIndexPath.isa.method_dtable["indexPathWithIndexes:"], "indexPathWithIndexes:"), ((___r1 = self._indexes), ___r1 == null ? null : (___r1.isa.method_msgSend["arrayByAddingObject:"] || _objj_forward)(___r1, (self._indexes.isa.method_dtable["arrayByAddingObject:"], "arrayByAddingObject:"), index)));
    var ___r1;
}

,["CPIndexPath","int"]), new objj_method(sel_getUid("indexPathByRemovingLastIndex"), function $CPIndexPath__indexPathByRemovingLastIndex(self, _cmd)
{
    return (CPIndexPath.isa.method_msgSend["indexPathWithIndexes:length:"] || _objj_forward)(CPIndexPath, (CPIndexPath.isa.method_dtable["indexPathWithIndexes:length:"], CPIndexPath.isa.method_dtable["indexPathWithIndexes:length:"], "indexPathWithIndexes:length:"), self._indexes, (self.isa.method_msgSend["length"] || _objj_forward)(self, (self.isa.method_dtable["length"], "length")) - 1);
}

,["CPIndexPath"]), new objj_method(sel_getUid("isEqual:"), function $CPIndexPath__isEqual_(self, _cmd, anObject)
{
    if (anObject === self)
        return YES;
    if ((anObject == null ? null : (anObject.isa.method_msgSend["class"] || _objj_forward)(anObject, (anObject.isa.method_dtable["class"], "class"))) !== (CPIndexPath.isa.method_msgSend["class"] || _objj_forward)(CPIndexPath, (CPIndexPath.isa.method_dtable["class"], "class")))
        return NO;
    return ((___r1 = self._indexes), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqualToArray:"] || _objj_forward)(___r1, (self._indexes.isa.method_dtable["isEqualToArray:"], "isEqualToArray:"), (anObject == null ? null : (anObject.isa.method_msgSend["indexes"] || _objj_forward)(anObject, (anObject.isa.method_dtable["indexes"], "indexes")))));
    var ___r1;
}

,["BOOL","id"]), new objj_method(sel_getUid("compare:"), function $CPIndexPath__compare_(self, _cmd, anIndexPath)
{
    if (!anIndexPath)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "indexPath to " + self + " was nil");
    var lhsIndexes = (self.isa.method_msgSend["indexes"] || _objj_forward)(self, (self.isa.method_dtable["indexes"], "indexes")),
        rhsIndexes = (anIndexPath == null ? null : (anIndexPath.isa.method_msgSend["indexes"] || _objj_forward)(anIndexPath, (anIndexPath.isa.method_dtable["indexes"], "indexes"))),
        lhsCount = (lhsIndexes == null ? null : (lhsIndexes.isa.method_msgSend["count"] || _objj_forward)(lhsIndexes, (lhsIndexes.isa.method_dtable["count"], "count"))),
        rhsCount = (rhsIndexes == null ? null : (rhsIndexes.isa.method_msgSend["count"] || _objj_forward)(rhsIndexes, (rhsIndexes.isa.method_dtable["count"], "count")));
    var index = 0,
        count = MIN(lhsCount, rhsCount);
    for (; index < count; ++index)
    {
        var lhs = lhsIndexes[index],
            rhs = rhsIndexes[index];
        if (lhs < rhs)
            return CPOrderedAscending;
        else if (lhs > rhs)
            return CPOrderedDescending;
    }
    if (lhsCount === rhsCount)
        return CPOrderedSame;
    if (lhsCount === count)
        return CPOrderedAscending;
    return CPOrderedDescending;
}

,["CPComparisonResult","CPIndexPath"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("indexPathWithIndex:"), function $CPIndexPath__indexPathWithIndex_(self, _cmd, index)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithIndexes:length:"] || _objj_forward)(___r1, "initWithIndexes:length:", [index], 1));
    var ___r1;
}

,["id","int"]), new objj_method(sel_getUid("indexPathWithIndexes:length:"), function $CPIndexPath__indexPathWithIndexes_length_(self, _cmd, indexes, length)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithIndexes:length:"] || _objj_forward)(___r1, "initWithIndexes:length:", indexes, length));
    var ___r1;
}

,["id","CPArray","int"]), new objj_method(sel_getUid("indexPathWithIndexes:"), function $CPIndexPath__indexPathWithIndexes_(self, _cmd, indexes)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithIndexes:"] || _objj_forward)(___r1, "initWithIndexes:", indexes));
    var ___r1;
}

,["id","CPArray"])]);
}
var CPIndexPathIndexesKey = "CPIndexPathIndexes";
{
var the_class = objj_getClass("CPIndexPath")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPIndexPath\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPIndexPath__initWithCoder_(self, _cmd, theCoder)
{
    if (self = (self == null ? null : (self.isa.method_msgSend["init"] || _objj_forward)(self, (self.isa.method_dtable["init"], "init"))))
    {
        self._indexes = (theCoder == null ? null : (theCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(theCoder, (theCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPIndexPathIndexesKey));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPIndexPath__encodeWithCoder_(self, _cmd, theCoder)
{
    (theCoder == null ? null : (theCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(theCoder, (theCoder.isa.method_dtable["encodeObject:forKey:"], theCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._indexes, CPIndexPathIndexesKey));
}

,["void","CPCoder"])]);
}
p;10;CPNumber.jt;24317;@STATIC;1.0;i;13;CPException.ji;8;CPNull.ji;10;CPObject.ji;15;CPObjJRuntime.jS;14452;t;9773;

objj_executeFile("CPException.j", YES);objj_executeFile("CPNull.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPObjJRuntime.j", YES);var CPNumberUIDs = new CFMutableDictionary();

{var the_class = objj_allocateClassPair(CPObject, "CPNumber"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithBool:"), function $CPNumber__initWithBool_(self, _cmd, aBoolean)
{
    return aBoolean;
}

,["id","BOOL"]), new objj_method(sel_getUid("initWithChar:"), function $CPNumber__initWithChar_(self, _cmd, aChar)
{
    if (aChar.charCodeAt)
        return aChar.charCodeAt(0);
    return aChar;
}

,["id","char"]), new objj_method(sel_getUid("initWithDouble:"), function $CPNumber__initWithDouble_(self, _cmd, aDouble)
{
    return aDouble;
}

,["id","double"]), new objj_method(sel_getUid("initWithFloat:"), function $CPNumber__initWithFloat_(self, _cmd, aFloat)
{
    return aFloat;
}

,["id","float"]), new objj_method(sel_getUid("initWithInt:"), function $CPNumber__initWithInt_(self, _cmd, anInt)
{
    return anInt;
}

,["id","int"]), new objj_method(sel_getUid("initWithLong:"), function $CPNumber__initWithLong_(self, _cmd, aLong)
{
    return aLong;
}

,["id","long"]), new objj_method(sel_getUid("initWithLongLong:"), function $CPNumber__initWithLongLong_(self, _cmd, aLongLong)
{
    return aLongLong;
}

,["id","long long"]), new objj_method(sel_getUid("initWithShort:"), function $CPNumber__initWithShort_(self, _cmd, aShort)
{
    return aShort;
}

,["id","short"]), new objj_method(sel_getUid("initWithUnsignedChar:"), function $CPNumber__initWithUnsignedChar_(self, _cmd, aChar)
{
    if (aChar.charCodeAt)
        return aChar.charCodeAt(0);
    return aChar;
}

,["id","unsigned char"]), new objj_method(sel_getUid("initWithUnsignedInt:"), function $CPNumber__initWithUnsignedInt_(self, _cmd, anUnsignedInt)
{
    return anUnsignedInt;
}

,["id","unsigned"]), new objj_method(sel_getUid("initWithUnsignedLong:"), function $CPNumber__initWithUnsignedLong_(self, _cmd, anUnsignedLong)
{
    return anUnsignedLong;
}

,["id","unsigned long"]), new objj_method(sel_getUid("initWithUnsignedShort:"), function $CPNumber__initWithUnsignedShort_(self, _cmd, anUnsignedShort)
{
    return anUnsignedShort;
}

,["id","unsigned short"]), new objj_method(sel_getUid("UID"), function $CPNumber__UID(self, _cmd)
{
    var UID = CPNumberUIDs.valueForKey(self);
    if (!UID)
    {
        UID = objj_generateObjectUID();
        CPNumberUIDs.setValueForKey(self, UID);
    }
    return UID + "";
}

,["CPString"]), new objj_method(sel_getUid("boolValue"), function $CPNumber__boolValue(self, _cmd)
{
    return self ? true : false;
}

,["BOOL"]), new objj_method(sel_getUid("charValue"), function $CPNumber__charValue(self, _cmd)
{
    return String.fromCharCode(self);
}

,["char"]), new objj_method(sel_getUid("decimalValue"), function $CPNumber__decimalValue(self, _cmd)
{
    throw new Error("decimalValue: NOT YET IMPLEMENTED");
}

,["CPDecimal"]), new objj_method(sel_getUid("descriptionWithLocale:"), function $CPNumber__descriptionWithLocale_(self, _cmd, aDictionary)
{
    if (!aDictionary)
        return self.toString();
    throw new Error("descriptionWithLocale: NOT YET IMPLEMENTED");
}

,["CPString","CPDictionary"]), new objj_method(sel_getUid("description"), function $CPNumber__description(self, _cmd)
{
    return (self.isa.method_msgSend["descriptionWithLocale:"] || _objj_forward)(self, (self.isa.method_dtable["descriptionWithLocale:"], "descriptionWithLocale:"), nil);
}

,["CPString"]), new objj_method(sel_getUid("doubleValue"), function $CPNumber__doubleValue(self, _cmd)
{
    if (typeof self == "boolean")
        return self ? 1 : 0;
    return self;
}

,["double"]), new objj_method(sel_getUid("floatValue"), function $CPNumber__floatValue(self, _cmd)
{
    if (typeof self == "boolean")
        return self ? 1 : 0;
    return self;
}

,["float"]), new objj_method(sel_getUid("intValue"), function $CPNumber__intValue(self, _cmd)
{
    return self >= 0 ? Math.floor(self) : Math.ceil(self);
}

,["int"]), new objj_method(sel_getUid("integerValue"), function $CPNumber__integerValue(self, _cmd)
{
    return self >= 0 ? Math.floor(self) : Math.ceil(self);
}

,["int"]), new objj_method(sel_getUid("longLongValue"), function $CPNumber__longLongValue(self, _cmd)
{
    return self >= 0 ? Math.floor(self) : Math.ceil(self);
}

,["long long"]), new objj_method(sel_getUid("longValue"), function $CPNumber__longValue(self, _cmd)
{
    return self >= 0 ? Math.floor(self) : Math.ceil(self);
}

,["long"]), new objj_method(sel_getUid("shortValue"), function $CPNumber__shortValue(self, _cmd)
{
    return self >= 0 ? Math.floor(self) : Math.ceil(self);
}

,["short"]), new objj_method(sel_getUid("stringValue"), function $CPNumber__stringValue(self, _cmd)
{
    return self.toString();
}

,["CPString"]), new objj_method(sel_getUid("unsignedCharValue"), function $CPNumber__unsignedCharValue(self, _cmd)
{
    return String.fromCharCode(self);
}

,["unsigned char"]), new objj_method(sel_getUid("unsignedIntValue"), function $CPNumber__unsignedIntValue(self, _cmd)
{
    return self >= 0 ? Math.floor(self) : Math.ceil(self);
}

,["unsigned int"]), new objj_method(sel_getUid("unsignedLongValue"), function $CPNumber__unsignedLongValue(self, _cmd)
{
    return self >= 0 ? Math.floor(self) : Math.ceil(self);
}

,["unsigned long"]), new objj_method(sel_getUid("unsignedShortValue"), function $CPNumber__unsignedShortValue(self, _cmd)
{
    return self >= 0 ? Math.floor(self) : Math.ceil(self);
}

,["unsigned short"]), new objj_method(sel_getUid("compare:"), function $CPNumber__compare_(self, _cmd, aNumber)
{
    if (aNumber === nil || aNumber['isa'] === CPNull)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "nil argument");
    if (self > aNumber)
        return CPOrderedDescending;
    else if (self < aNumber)
        return CPOrderedAscending;
    return CPOrderedSame;
}

,["CPComparisonResult","CPNumber"]), new objj_method(sel_getUid("isEqualToNumber:"), function $CPNumber__isEqualToNumber_(self, _cmd, aNumber)
{
    return self == aNumber;
}

,["BOOL","CPNumber"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPNumber__alloc(self, _cmd)
{
    var result = new Number();
    result.isa = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"));
    return result;
}

,["id"]), new objj_method(sel_getUid("numberWithBool:"), function $CPNumber__numberWithBool_(self, _cmd, aBoolean)
{
    return aBoolean ? 1 : 0;
}

,["id","BOOL"]), new objj_method(sel_getUid("numberWithChar:"), function $CPNumber__numberWithChar_(self, _cmd, aChar)
{
    if (aChar.charCodeAt)
        return aChar.charCodeAt(0);
    return aChar;
}

,["id","char"]), new objj_method(sel_getUid("numberWithDouble:"), function $CPNumber__numberWithDouble_(self, _cmd, aDouble)
{
    return aDouble;
}

,["id","double"]), new objj_method(sel_getUid("numberWithFloat:"), function $CPNumber__numberWithFloat_(self, _cmd, aFloat)
{
    return aFloat;
}

,["id","float"]), new objj_method(sel_getUid("numberWithInt:"), function $CPNumber__numberWithInt_(self, _cmd, anInt)
{
    return anInt;
}

,["id","int"]), new objj_method(sel_getUid("numberWithLong:"), function $CPNumber__numberWithLong_(self, _cmd, aLong)
{
    return aLong;
}

,["id","long"]), new objj_method(sel_getUid("numberWithLongLong:"), function $CPNumber__numberWithLongLong_(self, _cmd, aLongLong)
{
    return aLongLong;
}

,["id","long long"]), new objj_method(sel_getUid("numberWithShort:"), function $CPNumber__numberWithShort_(self, _cmd, aShort)
{
    return aShort;
}

,["id","short"]), new objj_method(sel_getUid("numberWithUnsignedChar:"), function $CPNumber__numberWithUnsignedChar_(self, _cmd, aChar)
{
    if (aChar.charCodeAt)
        return aChar.charCodeAt(0);
    return aChar;
}

,["id","unsigned char"]), new objj_method(sel_getUid("numberWithUnsignedInt:"), function $CPNumber__numberWithUnsignedInt_(self, _cmd, anUnsignedInt)
{
    return anUnsignedInt;
}

,["id","unsigned"]), new objj_method(sel_getUid("numberWithUnsignedLong:"), function $CPNumber__numberWithUnsignedLong_(self, _cmd, anUnsignedLong)
{
    return anUnsignedLong;
}

,["id","unsigned long"]), new objj_method(sel_getUid("numberWithUnsignedShort:"), function $CPNumber__numberWithUnsignedShort_(self, _cmd, anUnsignedShort)
{
    return anUnsignedShort;
}

,["id","unsigned short"])]);
}
{
var the_class = objj_getClass("CPNumber")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPNumber\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPNumber__initWithCoder_(self, _cmd, aCoder)
{
    return (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeNumber"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeNumber"], "decodeNumber")));
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPNumber__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeNumber:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeNumber:forKey:"], aCoder.isa.method_dtable["encodeNumber:forKey:"], "encodeNumber:forKey:"), self, "self"));
}

,["void","CPCoder"])]);
}
Number.prototype.isa = CPNumber;
Boolean.prototype.isa = CPNumber;
(CPNumber.isa.method_msgSend["initialize"] || _objj_forward)(CPNumber, (CPNumber.isa.method_dtable["initialize"], "initialize"));
p;8;CPNull.jt;5287;@STATIC;1.0;i;10;CPObject.jS;3772;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQTnVsbC5qIl0sIm5hbWVzIjpbInNlbGYiXSwibWFwcGluZ3MiOiI7O0FBc0JBLGtCLGtCQUVBLElBQUksZ0IsR0FBbUIsR0FBdkI7QUFVQTtBQUFBO0FBQUEsMkI7NkJBeUJBLDRCLG1EQUFvQixRO0FBQ3BCO0lBQ0ksSUFBSUEsSSxDQUFBLEcsQ0FBUyxRQUFiO1FBQ0ksTSxDQUFPLEc7SUFFWCxNLENBQU8sQ0FBQyxRQUFELG1CQUFDLFFBQUQsd0RBQUMsUUFBRCxHQUFVLDRDQUFWLHFCQUF3QixDQUFDLE1BQUQsK0NBQUMsTUFBRCxHQUFRLGlDQUFSLFdBQXhCLEU7QUFKWCxDOztpQkFZQSw0QiwrREFBNkIsTTtBQUM3QjtJQUNJLE0sQ0FBTyxDQUFDLE1BQUQsOENBQUMsTUFBRCxHQUFRLGdDQUFSLFU7QUFEWCxDOztvQkFTQSw0QixtRUFBaUMsTTtBQUNqQztBQUFBLEM7Ozs4QkFoQ0EsNEI7QUFDQTtJQUNJLElBQUksQ0FBQyxnQkFBTDtRQUNJLGdCLEdBQW1CLFVBQUMsQ0FBQyxNQUFELCtDQUFDLE1BQUQsR0FBUSxpQ0FBUixXQUFELDZGQUFuQjtJQUVKLE0sQ0FBTyxnQjs7QUFKWCxDIiwiZmlsZSI6IkNQTnVsbC5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi9Vc2Vycy9kYXZpZC9wcm9ncmFtcy9jYXBwdWNjaW5vL0ZvdW5kYXRpb24vIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENQTnVsbC5qXG4gKiBGb3VuZGF0aW9uXG4gKlxuICogQ3JlYXRlZCBieSBGcmFuY2lzY28gVG9sbWFza3kuXG4gKiBDb3B5cmlnaHQgMjAwOCwgMjgwIE5vcnRoLCBJbmMuXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyXG4gKiB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmVcbiAqIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5rbGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgMDIxMTAtMTMwMSBVU0FcbiAqL1xuXG5AaW1wb3J0IFwiQ1BPYmplY3QualwiXG5cbnZhciBDUE51bGxTaGFyZWROdWxsID0gbmlsO1xuXG4vKiFcbiAgICBAY2xhc3MgQ1BOdWxsXG4gICAgQGluZ3JvdXAgZm91bmRhdGlvblxuICAgIEBicmllZiBBbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgXFxjIG5pbC5cblxuICAgIFRoaXMgY2xhc3MgaXMgdXNlZCBhcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgXFxjIG5pbC4gVGhpcyBpcyBoYW5keSB3aGVuIGEgY29sbGVjdGlvblxuICAgIG9ubHkgYWNjZXB0cyBvYmplY3RzIGFzIHZhbHVlcywgYnV0IHlvdSB3b3VsZCBsaWtlIGEgXFxjIG5pbCByZXByZXNlbnRhdGlvbiBpbiB0aGVyZS5cbiovXG5AaW1wbGVtZW50YXRpb24gQ1BOdWxsIDogQ1BPYmplY3Rcbntcbn1cblxuLyorIChpZClhbGxvY1xue1xuICAgIGlmIChDUE51bGxTaGFyZWROdWxsKVxuICAgICAgICByZXR1cm4gQ1BOdWxsU2hhcmVkTnVsbDtcblxuICAgIHJldHVybiBbc3VwZXIgYWxsb2NdO1xufSovXG5cbi8qIVxuICAgIFJldHVybnMgdGhlIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiB0aGUgQ1BOdWxsXG4gICAgb2JqZWN0LiBXaGlsZSBDUE51bGwgYW5kIFxcYyBuaWwgc2hvdWxkXG4gICAgYmUgPGk+aW50ZXJwcmV0ZWQ8L2k+IGFzIHRoZSBzYW1lLCB0aGV5IGFyZSBub3QgZXF1YWwgKCc9PScpLlxuKi9cbisgKENQTnVsbCludWxsXG57XG4gICAgaWYgKCFDUE51bGxTaGFyZWROdWxsKVxuICAgICAgICBDUE51bGxTaGFyZWROdWxsID0gW1tDUE51bGwgYWxsb2NdIGluaXRdO1xuXG4gICAgcmV0dXJuIENQTnVsbFNoYXJlZE51bGw7XG59XG5cbi0gKEJPT0wpaXNFcXVhbDooaWQpYW5PYmplY3RcbntcbiAgICBpZiAoc2VsZiA9PT0gYW5PYmplY3QpXG4gICAgICAgIHJldHVybiBZRVM7XG5cbiAgICByZXR1cm4gW2FuT2JqZWN0IGlzS2luZE9mQ2xhc3M6W0NQTnVsbCBjbGFzc11dO1xufVxuXG4vKiFcbiAgICBSZXR1cm5zIENQTnVsbCBudWxsLlxuICAgIEBwYXJhbSBhQ29kZXIgdGhlIGNvZGVyIGZyb20gd2hpY2ggdG8gZG8gbm90aGluZ1xuICAgIEByZXR1cm4gW0NQTnVsbCBudWxsXVxuKi9cbi0gKGlkKWluaXRXaXRoQ29kZXI6KENQQ29kZXIpYUNvZGVyXG57XG4gICAgcmV0dXJuIFtDUE51bGwgbnVsbF07XG59XG5cbi8qIVxuICAgIFdyaXRlcyBvdXQgbm90aGluZyB0byB0aGUgc3BlY2lmaWVkIGNvZGVyLlxuICAgIEBwYXJhbSBhQ29kZXIgdGhlIGNvZGVyIHRvIHdoaWNoIG5vdGhpbmcgd2lsbFxuICAgIGJlIHdyaXR0ZW5cbiovXG4tICh2b2lkKWVuY29kZVdpdGhDb2RlcjooQ1BDb2RlcilhQ29kZXJcbntcbn1cblxuQGVuZFxuIl19t;1474;

objj_executeFile("CPObject.j", YES);var CPNullSharedNull = nil;

{var the_class = objj_allocateClassPair(CPObject, "CPNull"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("isEqual:"), function $CPNull__isEqual_(self, _cmd, anObject)
{
    if (self === anObject)
        return YES;
    return (anObject == null ? null : (anObject.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPNull.isa.method_msgSend["class"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["class"], "class"))));
}

,["BOOL","id"]), new objj_method(sel_getUid("initWithCoder:"), function $CPNull__initWithCoder_(self, _cmd, aCoder)
{
    return (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null"));
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPNull__encodeWithCoder_(self, _cmd, aCoder)
{
}

,["void","CPCoder"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("null"), function $CPNull__null(self, _cmd)
{
    if (!CPNullSharedNull)
        CPNullSharedNull = ((___r1 = (CPNull.isa.method_msgSend["alloc"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    return CPNullSharedNull;
    var ___r1;
}

,["CPNull"])]);
}
p;26;CPUserNotificationCenter.jt;38580;@STATIC;1.0;i;9;CPArray.ji;10;CPObject.ji;9;CPTimer.ji;20;CPUserNotification.jS;20836;t;17650;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPTimer.j", YES);objj_executeFile("CPUserNotification.j", YES);{var the_protocol = objj_allocateProtocol("CPUserNotificationCenterDelegate");
var aProtocol = objj_getProtocol("CPObject");
if (!aProtocol) throw new SyntaxError("*** Could not find definition for protocol \"CPUserNotificationCenterDelegate\"");
protocol_addProtocol(the_protocol, aProtocol);
objj_registerProtocol(the_protocol);
}var CPUserNotificationCenterDelegate_userNotificationCenter_shouldPresentNotification_ = 1 << 0,
    CPUserNotificationCenterDelegate_userNotificationCenter_didDeliverNotification_ = 1 << 1,
    CPUserNotificationCenterDelegate_userNotificationCenter_didActivateNotification_ = 1 << 2;
var CPUserNotificationDefaultCenter = nil;

{var the_class = objj_allocateClassPair(CPObject, "CPUserNotificationCenter"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_deliveredNotifications", "CPArray"), new objj_ivar("_scheduledNotifications", "CPArray"), new objj_ivar("_delegate", "id"), new objj_ivar("_implementedDelegateMethods", "CPInteger"), new objj_ivar("_timersForUserNotification", "CPMutableDictionary")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("deliveredNotifications"), function $CPUserNotificationCenter__deliveredNotifications(self, _cmd)
{
    return self._deliveredNotifications;
}

,["CPArray"]), new objj_method(sel_getUid("setDeliveredNotifications:"), function $CPUserNotificationCenter__setDeliveredNotifications_(self, _cmd, newValue)
{
    self._deliveredNotifications = newValue;
}

,["void","CPArray"]), new objj_method(sel_getUid("scheduledNotifications"), function $CPUserNotificationCenter__scheduledNotifications(self, _cmd)
{
    return self._scheduledNotifications;
}

,["CPArray"]), new objj_method(sel_getUid("setScheduledNotifications:"), function $CPUserNotificationCenter__setScheduledNotifications_(self, _cmd, newValue)
{
    self._scheduledNotifications = newValue;
}

,["void","CPArray"]), new objj_method(sel_getUid("init"), function $CPUserNotificationCenter__init(self, _cmd)
{
    self = (objj_getClass("CPUserNotificationCenter").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._deliveredNotifications = [];
        self._scheduledNotifications = [];
        self._timersForUserNotification = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    }
    return self;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("setDelegate:"), function $CPUserNotificationCenter__setDelegate_(self, _cmd, aDelegate)
{
    if (self._delegate === aDelegate)
        return;
    self._delegate = aDelegate;
    self._implementedDelegateMethods = 0;
    if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("userNotificationCenter:shouldPresentNotification:"))))
        self._implementedDelegateMethods |= CPUserNotificationCenterDelegate_userNotificationCenter_shouldPresentNotification_;
    if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("userNotificationCenter:didDeliverNotification:"))))
        self._implementedDelegateMethods |= CPUserNotificationCenterDelegate_userNotificationCenter_didDeliverNotification_;
    if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("userNotificationCenter:didActivateNotification:"))))
        self._implementedDelegateMethods |= CPUserNotificationCenterDelegate_userNotificationCenter_didActivateNotification_;
    var ___r1;
}

,["void","id"]), new objj_method(sel_getUid("scheduleNotification:"), function $CPUserNotificationCenter__scheduleNotification_(self, _cmd, anUserNotification)
{
    var scheduledDate = ((___r1 = (anUserNotification == null ? null : (anUserNotification.isa.method_msgSend["deliveryDate"] || _objj_forward)(anUserNotification, (anUserNotification.isa.method_dtable["deliveryDate"], "deliveryDate")))), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
    (scheduledDate == null ? null : (scheduledDate.isa.method_msgSend["_dateWithTimeZone:"] || _objj_forward)(scheduledDate, (scheduledDate.isa.method_dtable["_dateWithTimeZone:"], "_dateWithTimeZone:"), (anUserNotification == null ? null : (anUserNotification.isa.method_msgSend["deliveryTimeZone"] || _objj_forward)(anUserNotification, (anUserNotification.isa.method_dtable["deliveryTimeZone"], "deliveryTimeZone")))));
    var timer = ((___r1 = (CPTimer.isa.method_msgSend["alloc"] || _objj_forward)(CPTimer, (CPTimer.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithFireDate:interval:target:selector:userInfo:repeats:"] || _objj_forward)(___r1, "initWithFireDate:interval:target:selector:userInfo:repeats:", scheduledDate, (anUserNotification == null ? null : (anUserNotification.isa.method_msgSend["deliveryRepeatInterval"] || _objj_forward)(anUserNotification, (anUserNotification.isa.method_dtable["deliveryRepeatInterval"], "deliveryRepeatInterval"))), self, sel_getUid("_scheduledUserNotificationTimerDidFire:"), anUserNotification, (anUserNotification == null ? null : (anUserNotification.isa.method_msgSend["deliveryRepeatInterval"] || _objj_forward)(anUserNotification, (anUserNotification.isa.method_dtable["deliveryRepeatInterval"], "deliveryRepeatInterval"))) ? YES : NO));
    ((___r1 = self._scheduledNotifications), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, (self._scheduledNotifications.isa.method_dtable["addObject:"], "addObject:"), anUserNotification));
    self._timersForUserNotification[(anUserNotification == null ? null : (anUserNotification.isa.method_msgSend["UID"] || _objj_forward)(anUserNotification, (anUserNotification.isa.method_dtable["UID"], "UID")))] = timer;
    ((___r1 = (CPRunLoop.isa.method_msgSend["currentRunLoop"] || _objj_forward)(CPRunLoop, (CPRunLoop.isa.method_dtable["currentRunLoop"], "currentRunLoop"))), ___r1 == null ? null : (___r1.isa.method_msgSend["addTimer:forMode:"] || _objj_forward)(___r1, "addTimer:forMode:", timer, CPDefaultRunLoopMode));
    var ___r1;
}

,["void","CPUserNotification"]), new objj_method(sel_getUid("_scheduledUserNotificationTimerDidFire:"), function $CPUserNotificationCenter___scheduledUserNotificationTimerDidFire_(self, _cmd, aTimer)
{
    (self.isa.method_msgSend["deliverNotification:"] || _objj_forward)(self, (self.isa.method_dtable["deliverNotification:"], "deliverNotification:"), (aTimer == null ? null : (aTimer.isa.method_msgSend["userInfo"] || _objj_forward)(aTimer, (aTimer.isa.method_dtable["userInfo"], "userInfo"))));
}

,["void","CPTimer"]), new objj_method(sel_getUid("removeScheduledNotification:"), function $CPUserNotificationCenter__removeScheduledNotification_(self, _cmd, anUserNotification)
{
    if (((___r1 = self._scheduledNotifications), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, (self._scheduledNotifications.isa.method_dtable["indexOfObject:"], "indexOfObject:"), anUserNotification)) != CPNotFound)
    {
        ((___r1 = self._scheduledNotifications), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObject:"] || _objj_forward)(___r1, (self._scheduledNotifications.isa.method_dtable["removeObject:"], "removeObject:"), anUserNotification));
        ((___r1 = self._timersForUserNotification[(anUserNotification == null ? null : (anUserNotification.isa.method_msgSend["UID"] || _objj_forward)(anUserNotification, (anUserNotification.isa.method_dtable["UID"], "UID")))]), ___r1 == null ? null : (___r1.isa.method_msgSend["invalidate"] || _objj_forward)(___r1, "invalidate"));
        delete self._timersForUserNotification[(anUserNotification == null ? null : (anUserNotification.isa.method_msgSend["UID"] || _objj_forward)(anUserNotification, (anUserNotification.isa.method_dtable["UID"], "UID")))];
    }
    var ___r1;
}

,["void","CPUserNotification"]), new objj_method(sel_getUid("deliverNotification:"), function $CPUserNotificationCenter__deliverNotification_(self, _cmd, aNotification)
{
    (self.isa.method_msgSend["_launchUserNotification:"] || _objj_forward)(self, (self.isa.method_dtable["_launchUserNotification:"], "_launchUserNotification:"), aNotification);
}

,["void","CPUserNotification"]), new objj_method(sel_getUid("removeDeliveredNotification:"), function $CPUserNotificationCenter__removeDeliveredNotification_(self, _cmd, aNotification)
{
    ((___r1 = self._deliveredNotifications), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObject:"] || _objj_forward)(___r1, (self._deliveredNotifications.isa.method_dtable["removeObject:"], "removeObject:"), aNotification));
    var ___r1;
}

,["void","CPUserNotification"]), new objj_method(sel_getUid("removeAllDeliveredNotifications"), function $CPUserNotificationCenter__removeAllDeliveredNotifications(self, _cmd)
{
    ((___r1 = self._deliveredNotifications), ___r1 == null ? null : (___r1.isa.method_msgSend["removeAllObjects"] || _objj_forward)(___r1, (self._deliveredNotifications.isa.method_dtable["removeAllObjects"], "removeAllObjects")));
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("_askPermissionForUserNotification:"), function $CPUserNotificationCenter___askPermissionForUserNotification_(self, _cmd, anUserNotification)
{
    Notification.requestPermission(    function(permission)
    {
        if (permission == "granted")
            (self.isa.method_msgSend["_launchUserNotification:"] || _objj_forward)(self, (self.isa.method_dtable["_launchUserNotification:"], "_launchUserNotification:"), anUserNotification);
    });
}

,["void","CPUserNotification"]), new objj_method(sel_getUid("_launchUserNotification:"), function $CPUserNotificationCenter___launchUserNotification_(self, _cmd, anUserNotification)
{
    if (!window || !'Notification' in window)
        return;
    if (Notification.permission === 'default')
        (self.isa.method_msgSend["_askPermissionForUserNotification:"] || _objj_forward)(self, (self.isa.method_dtable["_askPermissionForUserNotification:"], "_askPermissionForUserNotification:"), anUserNotification);
    if (Notification.permission === 'granted')
    {
        if ((self.isa.method_msgSend["_delegateRespondsToShouldPresentNotification"] || _objj_forward)(self, (self.isa.method_dtable["_delegateRespondsToShouldPresentNotification"], "_delegateRespondsToShouldPresentNotification")) && (self.isa.method_msgSend["_sendDelegateShouldPresentNotification:"] || _objj_forward)(self, (self.isa.method_dtable["_sendDelegateShouldPresentNotification:"], "_sendDelegateShouldPresentNotification:"), anUserNotification) || !(CPApp == null ? null : (CPApp.isa.method_msgSend["isActive"] || _objj_forward)(CPApp, (CPApp.isa.method_dtable["isActive"], "isActive"))))
        {
            var notification = new Notification((anUserNotification == null ? null : (anUserNotification.isa.method_msgSend["title"] || _objj_forward)(anUserNotification, (anUserNotification.isa.method_dtable["title"], "title"))), {'body': (anUserNotification == null ? null : (anUserNotification.isa.method_msgSend["informativeText"] || _objj_forward)(anUserNotification, (anUserNotification.isa.method_dtable["informativeText"], "informativeText"))), 'icon': ((___r1 = (anUserNotification == null ? null : (anUserNotification.isa.method_msgSend["contentImage"] || _objj_forward)(anUserNotification, (anUserNotification.isa.method_dtable["contentImage"], "contentImage")))), ___r1 == null ? null : (___r1.isa.method_msgSend["filename"] || _objj_forward)(___r1, "filename")), 'tag': (anUserNotification == null ? null : (anUserNotification.isa.method_msgSend["identifier"] || _objj_forward)(anUserNotification, (anUserNotification.isa.method_dtable["identifier"], "identifier")))});
            anUserNotification._presented = YES;
            notification.onclick =             function()
            {
                anUserNotification._activationType = CPUserNotificationActivationTypeContentsClicked;
                (self.isa.method_msgSend["_sendDelegateDidActivateNotification:"] || _objj_forward)(self, (self.isa.method_dtable["_sendDelegateDidActivateNotification:"], "_sendDelegateDidActivateNotification:"), anUserNotification);
                this.close();
            };
            notification.onclose =             function()
            {
            };
        }
        else
        {
            anUserNotification._presented = NO;
        }
        anUserNotification._activationType = CPUserNotificationActivationTypeNone;
        anUserNotification._actualDeliveryDate = (CPDate.isa.method_msgSend["date"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["date"], "date"));
        ((___r1 = self._deliveredNotifications), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, (self._deliveredNotifications.isa.method_dtable["addObject:"], "addObject:"), anUserNotification));
        if (!(anUserNotification == null ? null : (anUserNotification.isa.method_msgSend["deliveryRepeatInterval"] || _objj_forward)(anUserNotification, (anUserNotification.isa.method_dtable["deliveryRepeatInterval"], "deliveryRepeatInterval"))))
            (self.isa.method_msgSend["removeScheduledNotification:"] || _objj_forward)(self, (self.isa.method_dtable["removeScheduledNotification:"], "removeScheduledNotification:"), anUserNotification);
        (self.isa.method_msgSend["_sendDelegateDidDeliverNotification:"] || _objj_forward)(self, (self.isa.method_dtable["_sendDelegateDidDeliverNotification:"], "_sendDelegateDidDeliverNotification:"), anUserNotification);
    }
    var ___r1;
}

,["void","CPUserNotification"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("defaultUserNotificationCenter"), function $CPUserNotificationCenter__defaultUserNotificationCenter(self, _cmd)
{
    if (!CPUserNotificationDefaultCenter)
        CPUserNotificationDefaultCenter = ((___r1 = (CPUserNotificationCenter.isa.method_msgSend["alloc"] || _objj_forward)(CPUserNotificationCenter, (CPUserNotificationCenter.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    return CPUserNotificationDefaultCenter;
    var ___r1;
}

,["CPNotificationCenter"])]);
}
{
var the_class = objj_getClass("CPUserNotificationCenter")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPUserNotificationCenter\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("_delegateRespondsToShouldPresentNotification"), function $CPUserNotificationCenter___delegateRespondsToShouldPresentNotification(self, _cmd)
{
    return self._implementedDelegateMethods & CPUserNotificationCenterDelegate_userNotificationCenter_shouldPresentNotification_;
}

,["BOOL"]), new objj_method(sel_getUid("_sendDelegateShouldPresentNotification:"), function $CPUserNotificationCenter___sendDelegateShouldPresentNotification_(self, _cmd, aNotification)
{
    return ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["userNotificationCenter:shouldPresentNotification:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["userNotificationCenter:shouldPresentNotification:"], self._delegate.isa.method_dtable["userNotificationCenter:shouldPresentNotification:"], "userNotificationCenter:shouldPresentNotification:"), self, aNotification));
    var ___r1;
}

,["BOOL","CPUserNotification"]), new objj_method(sel_getUid("_sendDelegateDidActivateNotification:"), function $CPUserNotificationCenter___sendDelegateDidActivateNotification_(self, _cmd, aNotification)
{
    if (!(self._implementedDelegateMethods & CPUserNotificationCenterDelegate_userNotificationCenter_didActivateNotification_))
        return;
    ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["userNotificationCenter:didActivateNotification:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["userNotificationCenter:didActivateNotification:"], self._delegate.isa.method_dtable["userNotificationCenter:didActivateNotification:"], "userNotificationCenter:didActivateNotification:"), self, aNotification));
    var ___r1;
}

,["void","CPUserNotification"]), new objj_method(sel_getUid("_sendDelegateDidDeliverNotification:"), function $CPUserNotificationCenter___sendDelegateDidDeliverNotification_(self, _cmd, aNotification)
{
    if (!(self._implementedDelegateMethods & CPUserNotificationCenterDelegate_userNotificationCenter_didDeliverNotification_))
        return;
    ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["userNotificationCenter:didDeliverNotification:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["userNotificationCenter:didDeliverNotification:"], self._delegate.isa.method_dtable["userNotificationCenter:didDeliverNotification:"], "userNotificationCenter:didDeliverNotification:"), self, aNotification));
    var ___r1;
}

,["void","CPUserNotification"])]);
}
p;17;CPDateFormatter.jt;311951;@STATIC;1.0;i;9;CPArray.ji;8;CPDate.ji;10;CPString.ji;13;CPFormatter.ji;12;CPTimeZone.ji;10;CPLocale.jS;169408;t;142423;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPDate.j", YES);objj_executeFile("CPString.j", YES);objj_executeFile("CPFormatter.j", YES);objj_executeFile("CPTimeZone.j", YES);objj_executeFile("CPLocale.j", YES);{var the_typedef = objj_allocateTypeDef("CPDateFormatterStyle");
objj_registerTypeDef(the_typedef);
}CPDateFormatterNoStyle = 0;
CPDateFormatterShortStyle = 1;
CPDateFormatterMediumStyle = 2;
CPDateFormatterLongStyle = 3;
CPDateFormatterFullStyle = 4;
{var the_typedef = objj_allocateTypeDef("CPDateFormatterBehavior");
objj_registerTypeDef(the_typedef);
}CPDateFormatterBehaviorDefault = 0;
CPDateFormatterBehavior10_0 = 1000;
CPDateFormatterBehavior10_4 = 1040;
var defaultDateFormatterBehavior = CPDateFormatterBehavior10_4,
    relativeDateFormating,
    patternStringTokens;

{var the_class = objj_allocateClassPair(CPFormatter, "CPDateFormatter"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_allowNaturalLanguage", "BOOL"), new objj_ivar("_doesRelativeDateFormatting", "BOOL"), new objj_ivar("_defaultDate", "CPDate"), new objj_ivar("_twoDigitStartDate", "CPDate"), new objj_ivar("_formatterBehavior", "CPDateFormatterBehavior"), new objj_ivar("_dateStyle", "CPDateFormatterStyle"), new objj_ivar("_timeStyle", "CPDateFormatterStyle"), new objj_ivar("_locale", "CPLocale"), new objj_ivar("_AMSymbol", "CPString"), new objj_ivar("_dateFormat", "CPString"), new objj_ivar("_PMSymbol", "CPString"), new objj_ivar("_timeZone", "CPTimeZone"), new objj_ivar("_symbols", "CPDictionary")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("allowNaturalLanguage"), function $CPDateFormatter__allowNaturalLanguage(self, _cmd)
{
    return self._allowNaturalLanguage;
}

,["BOOL"]), new objj_method(sel_getUid("doesRelativeDateFormatting"), function $CPDateFormatter__doesRelativeDateFormatting(self, _cmd)
{
    return self._doesRelativeDateFormatting;
}

,["BOOL"]), new objj_method(sel_getUid("setDoesRelativeDateFormatting:"), function $CPDateFormatter__setDoesRelativeDateFormatting_(self, _cmd, newValue)
{
    self._doesRelativeDateFormatting = newValue;
}

,["void","BOOL"]), new objj_method(sel_getUid("defaultDate"), function $CPDateFormatter__defaultDate(self, _cmd)
{
    return self._defaultDate;
}

,["CPDate"]), new objj_method(sel_getUid("setDefaultDate:"), function $CPDateFormatter__setDefaultDate_(self, _cmd, newValue)
{
    self._defaultDate = newValue;
}

,["void","CPDate"]), new objj_method(sel_getUid("twoDigitStartDate"), function $CPDateFormatter__twoDigitStartDate(self, _cmd)
{
    return self._twoDigitStartDate;
}

,["CPDate"]), new objj_method(sel_getUid("setTwoDigitStartDate:"), function $CPDateFormatter__setTwoDigitStartDate_(self, _cmd, newValue)
{
    self._twoDigitStartDate = newValue;
}

,["void","CPDate"]), new objj_method(sel_getUid("formatterBehavior"), function $CPDateFormatter__formatterBehavior(self, _cmd)
{
    return self._formatterBehavior;
}

,["CPDateFormatterBehavior"]), new objj_method(sel_getUid("setFormatterBehavior:"), function $CPDateFormatter__setFormatterBehavior_(self, _cmd, newValue)
{
    self._formatterBehavior = newValue;
}

,["void","CPDateFormatterBehavior"]), new objj_method(sel_getUid("dateStyle"), function $CPDateFormatter__dateStyle(self, _cmd)
{
    return self._dateStyle;
}

,["CPDateFormatterStyle"]), new objj_method(sel_getUid("setDateStyle:"), function $CPDateFormatter__setDateStyle_(self, _cmd, newValue)
{
    self._dateStyle = newValue;
}

,["void","CPDateFormatterStyle"]), new objj_method(sel_getUid("timeStyle"), function $CPDateFormatter__timeStyle(self, _cmd)
{
    return self._timeStyle;
}

,["CPDateFormatterStyle"]), new objj_method(sel_getUid("setTimeStyle:"), function $CPDateFormatter__setTimeStyle_(self, _cmd, newValue)
{
    self._timeStyle = newValue;
}

,["void","CPDateFormatterStyle"]), new objj_method(sel_getUid("locale"), function $CPDateFormatter__locale(self, _cmd)
{
    return self._locale;
}

,["CPLocale"]), new objj_method(sel_getUid("setLocale:"), function $CPDateFormatter__setLocale_(self, _cmd, newValue)
{
    self._locale = newValue;
}

,["void","CPLocale"]), new objj_method(sel_getUid("AMSymbol"), function $CPDateFormatter__AMSymbol(self, _cmd)
{
    return self._AMSymbol;
}

,["CPString"]), new objj_method(sel_getUid("setAMSymbol:"), function $CPDateFormatter__setAMSymbol_(self, _cmd, newValue)
{
    self._AMSymbol = newValue;
}

,["void","CPString"]), new objj_method(sel_getUid("dateFormat"), function $CPDateFormatter__dateFormat(self, _cmd)
{
    return self._dateFormat;
}

,["CPString"]), new objj_method(sel_getUid("setDateFormat:"), function $CPDateFormatter__setDateFormat_(self, _cmd, newValue)
{
    self._dateFormat = newValue;
}

,["void","CPString"]), new objj_method(sel_getUid("PMSymbol"), function $CPDateFormatter__PMSymbol(self, _cmd)
{
    return self._PMSymbol;
}

,["CPString"]), new objj_method(sel_getUid("setPMSymbol:"), function $CPDateFormatter__setPMSymbol_(self, _cmd, newValue)
{
    self._PMSymbol = newValue;
}

,["void","CPString"]), new objj_method(sel_getUid("timeZone"), function $CPDateFormatter__timeZone(self, _cmd)
{
    return self._timeZone;
}

,["CPTimeZone"]), new objj_method(sel_getUid("setTimeZone:"), function $CPDateFormatter__setTimeZone_(self, _cmd, newValue)
{
    self._timeZone = newValue;
}

,["void","CPTimeZone"]), new objj_method(sel_getUid("init"), function $CPDateFormatter__init(self, _cmd)
{
    if (self = (objj_getClass("CPDateFormatter").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        self._dateStyle = nil;
        self._timeStyle = nil;
        (self == null ? null : (self.isa.method_msgSend["_init"] || _objj_forward)(self, (self.isa.method_dtable["_init"], "_init")));
    }
    return self;
}

,["id"]), new objj_method(sel_getUid("initWithDateFormat:allowNaturalLanguage:"), function $CPDateFormatter__initWithDateFormat_allowNaturalLanguage_(self, _cmd, format, flag)
{
    if (self = (self == null ? null : (self.isa.method_msgSend["init"] || _objj_forward)(self, (self.isa.method_dtable["init"], "init"))))
    {
        self._dateFormat = format;
        self._allowNaturalLanguage = flag;
    }
    return self;
}

,["id","CPString","BOOL"]), new objj_method(sel_getUid("_init"), function $CPDateFormatter___init(self, _cmd)
{
    var AMSymbol = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%s", "AM"),
        PMSymbol = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%s", "PM"),
        weekdaySymbols = (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"),
        shortWeekdaySymbols = (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"),
        veryShortWeekdaySymbols = (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), "S", "M", "T", "W", "T", "F", "S"),
        standaloneWeekdaySymbols = (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"),
        shortStandaloneWeekdaySymbols = (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"),
        veryShortStandaloneWeekdaySymbols = (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), "S", "M", "T", "W", "T", "F", "S"),
        monthSymbols = (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"),
        shortMonthSymbols = (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"),
        veryShortMonthSymbols = (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), "J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"),
        standaloneMonthSymbols = (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"),
        shortStandaloneMonthSymbols = (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"),
        veryShortStandaloneMonthSymbols = (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), "J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"),
        quarterSymbols = (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), "1st quarter", "2nd quarter", "3rd quarter", "4th quarter"),
        shortQuarterSymbols = (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), "Q1", "Q2", "Q3", "Q4"),
        standaloneQuarterSymbols = (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), "1st quarter", "2nd quarter", "3rd quarter", "4th quarter"),
        shortStandaloneQuarterSymbols = (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), "Q1", "Q2", "Q3", "Q4");
    self._symbols = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", [(___r2 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r2 == null ? null : (___r2.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r2, "initWithObjects:forKeys:", [AMSymbol, PMSymbol, weekdaySymbols, shortWeekdaySymbols, veryShortWeekdaySymbols, standaloneWeekdaySymbols, shortStandaloneWeekdaySymbols, veryShortStandaloneWeekdaySymbols, monthSymbols, shortMonthSymbols, veryShortMonthSymbols, standaloneMonthSymbols, shortStandaloneMonthSymbols, veryShortStandaloneMonthSymbols, quarterSymbols, shortQuarterSymbols, standaloneQuarterSymbols, shortStandaloneQuarterSymbols], ["AMSymbol", "PMSymbol", "weekdaySymbols", "shortWeekdaySymbols", "veryShortWeekdaySymbols", "standaloneWeekdaySymbols", "shortStandaloneWeekdaySymbols", "veryShortStandaloneWeekdaySymbols", "monthSymbols", "shortMonthSymbols", "veryShortMonthSymbols", "standaloneMonthSymbols", "shortStandaloneMonthSymbols", "veryShortStandaloneMonthSymbols", "quarterSymbols", "shortQuarterSymbols", "standaloneQuarterSymbols", "shortStandaloneQuarterSymbols"]))], ["root"]));
    self._timeZone = (CPTimeZone.isa.method_msgSend["systemTimeZone"] || _objj_forward)(CPTimeZone, (CPTimeZone.isa.method_dtable["systemTimeZone"], "systemTimeZone"));
    self._twoDigitStartDate = ((___r1 = (CPDate.isa.method_msgSend["alloc"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithString:"] || _objj_forward)(___r1, "initWithString:", "1950-01-01 00:00:00 +0000"));
    self._locale = (CPLocale.isa.method_msgSend["currentLocale"] || _objj_forward)(CPLocale, (CPLocale.isa.method_dtable["currentLocale"], "currentLocale"));
    var ___r1, ___r2;
}

,["void"]), new objj_method(sel_getUid("symbolsForLanguageCode:"), function $CPDateFormatter__symbolsForLanguageCode_(self, _cmd, languageCode)
{
    var languageSymbols = ((___r1 = self._symbols), ___r1 == null ? null : (___r1.isa.method_msgSend["valueForKey:"] || _objj_forward)(___r1, (self._symbols.isa.method_dtable["valueForKey:"], "valueForKey:"), languageCode));
    if (!languageSymbols)
    {
        languageSymbols = (self.isa.method_msgSend["symbolsForLanguageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolsForLanguageCode:"], "symbolsForLanguageCode:"), "root");
        (self.isa.method_msgSend["setSymbols:forLanguageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbols:forLanguageCode:"], self.isa.method_dtable["setSymbols:forLanguageCode:"], "setSymbols:forLanguageCode:"), languageSymbols, languageCode);
    }
    return languageSymbols;
    var ___r1;
}

,["CPDictionary","CPString"]), new objj_method(sel_getUid("setSymbols:forLanguageCode:"), function $CPDateFormatter__setSymbols_forLanguageCode_(self, _cmd, symbols, languageCode)
{
    ((___r1 = self._symbols), ___r1 == null ? null : (___r1.isa.method_msgSend["setValue:forKey:"] || _objj_forward)(___r1, (self._symbols.isa.method_dtable["setValue:forKey:"], self._symbols.isa.method_dtable["setValue:forKey:"], "setValue:forKey:"), symbols, languageCode));
    var ___r1;
}

,["void","CPDictionary","CPString"]), new objj_method(sel_getUid("symbolForKey:languageCode:"), function $CPDateFormatter__symbolForKey_languageCode_(self, _cmd, aKey, languageCode)
{
    var languageSymbols = (self.isa.method_msgSend["symbolsForLanguageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolsForLanguageCode:"], "symbolsForLanguageCode:"), languageCode),
        symbol = (languageSymbols == null ? null : (languageSymbols.isa.method_msgSend["valueForKey:"] || _objj_forward)(languageSymbols, (languageSymbols.isa.method_dtable["valueForKey:"], "valueForKey:"), aKey));
    if (!symbol)
    {
        symbol = (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), aKey, "root");
        (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), symbol, aKey, languageCode);
    }
    return symbol;
}

,["id","CPString","CPString"]), new objj_method(sel_getUid("setSymbol:forKey:languageCode:"), function $CPDateFormatter__setSymbol_forKey_languageCode_(self, _cmd, aSymbol, aKey, languageCode)
{
    var languageSymbols = (self.isa.method_msgSend["symbolsForLanguageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolsForLanguageCode:"], "symbolsForLanguageCode:"), languageCode);
    (languageSymbols == null ? null : (languageSymbols.isa.method_msgSend["setValue:forKey:"] || _objj_forward)(languageSymbols, (languageSymbols.isa.method_dtable["setValue:forKey:"], languageSymbols.isa.method_dtable["setValue:forKey:"], "setValue:forKey:"), aSymbol, aKey));
}

,["void","CPString","CPString","CPString"]), new objj_method(sel_getUid("AMSymbol"), function $CPDateFormatter__AMSymbol(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "AMSymbol", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPString"]), new objj_method(sel_getUid("setAMSymbol:"), function $CPDateFormatter__setAMSymbol_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "AMSymbol", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPString"]), new objj_method(sel_getUid("PMSymbol"), function $CPDateFormatter__PMSymbol(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "PMSymbol", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPString"]), new objj_method(sel_getUid("setPMSymbol:"), function $CPDateFormatter__setPMSymbol_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "PMSymbol", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPString"]), new objj_method(sel_getUid("weekdaySymbols"), function $CPDateFormatter__weekdaySymbols(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "weekdaySymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("setWeekdaySymbols:"), function $CPDateFormatter__setWeekdaySymbols_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "weekdaySymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("shortWeekdaySymbols"), function $CPDateFormatter__shortWeekdaySymbols(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "shortWeekdaySymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("setShortWeekdaySymbols:"), function $CPDateFormatter__setShortWeekdaySymbols_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "shortWeekdaySymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("veryShortWeekdaySymbols"), function $CPDateFormatter__veryShortWeekdaySymbols(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "veryShortWeekdaySymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("setVeryShortWeekdaySymbols:"), function $CPDateFormatter__setVeryShortWeekdaySymbols_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "veryShortWeekdaySymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("standaloneWeekdaySymbols"), function $CPDateFormatter__standaloneWeekdaySymbols(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "standaloneWeekdaySymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("setStandaloneWeekdaySymbols:"), function $CPDateFormatter__setStandaloneWeekdaySymbols_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "standaloneWeekdaySymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("shortStandaloneWeekdaySymbols"), function $CPDateFormatter__shortStandaloneWeekdaySymbols(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "shortStandaloneWeekdaySymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("setShortStandaloneWeekdaySymbols:"), function $CPDateFormatter__setShortStandaloneWeekdaySymbols_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "shortStandaloneWeekdaySymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("veryShortStandaloneWeekdaySymbols"), function $CPDateFormatter__veryShortStandaloneWeekdaySymbols(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "veryShortStandaloneWeekdaySymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("setVeryShortStandaloneWeekdaySymbols:"), function $CPDateFormatter__setVeryShortStandaloneWeekdaySymbols_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "veryShortStandaloneWeekdaySymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("monthSymbols"), function $CPDateFormatter__monthSymbols(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "monthSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("setMonthSymbols:"), function $CPDateFormatter__setMonthSymbols_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "monthSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("shortMonthSymbols"), function $CPDateFormatter__shortMonthSymbols(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "shortMonthSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("setShortMonthSymbols:"), function $CPDateFormatter__setShortMonthSymbols_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "shortMonthSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("veryShortMonthSymbols"), function $CPDateFormatter__veryShortMonthSymbols(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "veryShortMonthSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("setVeryShortMonthSymbols:"), function $CPDateFormatter__setVeryShortMonthSymbols_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "veryShortMonthSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("standaloneMonthSymbols"), function $CPDateFormatter__standaloneMonthSymbols(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "standaloneMonthSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("setStandaloneMonthSymbols:"), function $CPDateFormatter__setStandaloneMonthSymbols_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "standaloneMonthSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("shortStandaloneMonthSymbols"), function $CPDateFormatter__shortStandaloneMonthSymbols(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "shortStandaloneMonthSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("setShortStandaloneMonthSymbols:"), function $CPDateFormatter__setShortStandaloneMonthSymbols_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "shortStandaloneMonthSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("veryShortStandaloneMonthSymbols"), function $CPDateFormatter__veryShortStandaloneMonthSymbols(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "veryShortStandaloneMonthSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("setVeryShortStandaloneMonthSymbols:"), function $CPDateFormatter__setVeryShortStandaloneMonthSymbols_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "veryShortStandaloneMonthSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("quarterSymbols"), function $CPDateFormatter__quarterSymbols(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "quarterSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("setQuarterSymbols:"), function $CPDateFormatter__setQuarterSymbols_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "quarterSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("shortQuarterSymbols"), function $CPDateFormatter__shortQuarterSymbols(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "shortQuarterSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("setShortQuarterSymbols:"), function $CPDateFormatter__setShortQuarterSymbols_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "shortQuarterSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("standaloneQuarterSymbols"), function $CPDateFormatter__standaloneQuarterSymbols(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "standaloneQuarterSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("setStandaloneQuarterSymbols:"), function $CPDateFormatter__setStandaloneQuarterSymbols_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "standaloneQuarterSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("shortStandaloneQuarterSymbols"), function $CPDateFormatter__shortStandaloneQuarterSymbols(self, _cmd)
{
    return (self.isa.method_msgSend["symbolForKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["symbolForKey:languageCode:"], self.isa.method_dtable["symbolForKey:languageCode:"], "symbolForKey:languageCode:"), "shortStandaloneQuarterSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("setShortStandaloneQuarterSymbols:"), function $CPDateFormatter__setShortStandaloneQuarterSymbols_(self, _cmd, aValue)
{
    (self.isa.method_msgSend["setSymbol:forKey:languageCode:"] || _objj_forward)(self, (self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], self.isa.method_dtable["setSymbol:forKey:languageCode:"], "setSymbol:forKey:languageCode:"), aValue, "shortStandaloneQuarterSymbols", ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("stringFromDate:"), function $CPDateFormatter__stringFromDate_(self, _cmd, aDate)
{
    var format,
        relativeWord,
        result;
    if (!aDate)
        return;
    aDate = (aDate == null ? null : (aDate.isa.method_msgSend["copy"] || _objj_forward)(aDate, (aDate.isa.method_dtable["copy"], "copy")));
    (aDate == null ? null : (aDate.isa.method_msgSend["_dateWithTimeZone:"] || _objj_forward)(aDate, (aDate.isa.method_dtable["_dateWithTimeZone:"], "_dateWithTimeZone:"), self._timeZone));
    if (self._dateFormat)
        return (self.isa.method_msgSend["_stringFromDate:format:"] || _objj_forward)(self, (self.isa.method_dtable["_stringFromDate:format:"], self.isa.method_dtable["_stringFromDate:format:"], "_stringFromDate:format:"), aDate, self._dateFormat);
    switch(self._dateStyle) {
        case CPDateFormatterNoStyle:
            format = "";
            break;
        case CPDateFormatterShortStyle:
            if ((self.isa.method_msgSend["_isAmericanFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isAmericanFormat"], "_isAmericanFormat")))
                format = "M/d/yy";
            else
                format = "dd/MM/yy";
            break;
        case CPDateFormatterMediumStyle:
            if ((self.isa.method_msgSend["_isAmericanFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isAmericanFormat"], "_isAmericanFormat")))
                format = "MMM d, Y";
            else
                format = "d MMM Y";
            break;
        case CPDateFormatterLongStyle:
            if ((self.isa.method_msgSend["_isAmericanFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isAmericanFormat"], "_isAmericanFormat")))
                format = "MMMM d, Y";
            else
                format = "d MMMM Y";
            break;
        case CPDateFormatterFullStyle:
            if ((self.isa.method_msgSend["_isAmericanFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isAmericanFormat"], "_isAmericanFormat")))
                format = "EEEE, MMMM d, Y";
            else
                format = "EEEE d MMMM Y";
            break;
default:
            format = "";
    }
    if ((self.isa.method_msgSend["doesRelativeDateFormatting"] || _objj_forward)(self, (self.isa.method_dtable["doesRelativeDateFormatting"], "doesRelativeDateFormatting")))
    {
        var language = ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)),
            relativeWords = (relativeDateFormating == null ? null : (relativeDateFormating.isa.method_msgSend["valueForKey:"] || _objj_forward)(relativeDateFormating, (relativeDateFormating.isa.method_dtable["valueForKey:"], "valueForKey:"), language));
        for (var i = 1; i < (relativeWords == null ? null : (relativeWords.isa.method_msgSend["count"] || _objj_forward)(relativeWords, (relativeWords.isa.method_dtable["count"], "count"))); i = i + 2)
        {
            var date = (CPDate.isa.method_msgSend["date"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["date"], "date"));
            (date == null ? null : (date.isa.method_msgSend["_dateWithTimeZone:"] || _objj_forward)(date, (date.isa.method_dtable["_dateWithTimeZone:"], "_dateWithTimeZone:"), self._timeZone));
            date.setHours(12);
            date.setMinutes(0);
            date.setSeconds(0);
            date.setDate((relativeWords == null ? null : (relativeWords.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(relativeWords, (relativeWords.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i)) + date.getDate());
            if (date.getDate() == aDate.getDate() && date.getMonth() == aDate.getMonth() && date.getFullYear() == aDate.getFullYear())
            {
                relativeWord = (relativeWords == null ? null : (relativeWords.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(relativeWords, (relativeWords.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i - 1));
                format = "";
                break;
            }
        }
    }
    if ((relativeWord || format.length) && self._timeStyle != CPDateFormatterNoStyle)
        format += " ";
    switch(self._timeStyle) {
        case CPDateFormatterNoStyle:
            format += "";
            break;
        case CPDateFormatterShortStyle:
            if ((self.isa.method_msgSend["_isEnglishFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isEnglishFormat"], "_isEnglishFormat")))
                format += "h:mm a";
            else
                format += "H:mm";
            break;
        case CPDateFormatterMediumStyle:
            if ((self.isa.method_msgSend["_isEnglishFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isEnglishFormat"], "_isEnglishFormat")))
                format += "h:mm:ss a";
            else
                format += "H:mm:ss";
            break;
        case CPDateFormatterLongStyle:
            if ((self.isa.method_msgSend["_isEnglishFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isEnglishFormat"], "_isEnglishFormat")))
                format += "h:mm:ss a z";
            else
                format += "H:mm:ss z";
            break;
        case CPDateFormatterFullStyle:
            if ((self.isa.method_msgSend["_isEnglishFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isEnglishFormat"], "_isEnglishFormat")))
                format += "h:mm:ss a zzzz";
            else
                format += "h:mm:ss zzzz";
            break;
default:
            format += "";
    }
    result = (self.isa.method_msgSend["_stringFromDate:format:"] || _objj_forward)(self, (self.isa.method_dtable["_stringFromDate:format:"], self.isa.method_dtable["_stringFromDate:format:"], "_stringFromDate:format:"), aDate, format);
    if (relativeWord)
        result = relativeWord + result;
    return result;
    var ___r1;
}

,["CPString","CPDate"]), new objj_method(sel_getUid("stringForObjectValue:"), function $CPDateFormatter__stringForObjectValue_(self, _cmd, anObject)
{
    if ((anObject == null ? null : (anObject.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPDate.isa.method_msgSend["class"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["class"], "class")))))
        return (self.isa.method_msgSend["stringFromDate:"] || _objj_forward)(self, (self.isa.method_dtable["stringFromDate:"], "stringFromDate:"), anObject);
    else
        return nil;
}

,["CPString","id"]), new objj_method(sel_getUid("editingStringForObjectValue:"), function $CPDateFormatter__editingStringForObjectValue_(self, _cmd, anObject)
{
    return (self.isa.method_msgSend["stringForObjectValue:"] || _objj_forward)(self, (self.isa.method_dtable["stringForObjectValue:"], "stringForObjectValue:"), anObject);
}

,["CPString","id"]), new objj_method(sel_getUid("_stringFromDate:format:"), function $CPDateFormatter___stringFromDate_format_(self, _cmd, aDate, aFormat)
{
    var length = (aFormat == null ? null : (aFormat.isa.method_msgSend["length"] || _objj_forward)(aFormat, (aFormat.isa.method_dtable["length"], "length"))),
        currentToken = (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new")),
        isTextToken = NO,
        result = (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
    for (var i = 0; i < length; i++)
    {
        var character = (aFormat == null ? null : (aFormat.isa.method_msgSend["characterAtIndex:"] || _objj_forward)(aFormat, (aFormat.isa.method_dtable["characterAtIndex:"], "characterAtIndex:"), i));
        if (isTextToken)
        {
            if ((character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), "'")))
            {
                isTextToken = NO;
                result += currentToken;
                currentToken = (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
            }
            else
            {
                currentToken += character;
            }
            continue;
        }
        if ((character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), "'")))
        {
            if (!isTextToken)
            {
                isTextToken = YES;
                result += currentToken;
                currentToken = (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
            }
            continue;
        }
        if ((character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), ",")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), ":")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), "/")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), "-")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), " ")))
        {
            result += (self.isa.method_msgSend["_stringFromToken:date:"] || _objj_forward)(self, (self.isa.method_dtable["_stringFromToken:date:"], self.isa.method_dtable["_stringFromToken:date:"], "_stringFromToken:date:"), currentToken, aDate);
            result += character;
            currentToken = (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
        }
        else
        {
            if ((currentToken == null ? null : (currentToken.isa.method_msgSend["length"] || _objj_forward)(currentToken, (currentToken.isa.method_dtable["length"], "length"))) && !((___r1 = (currentToken == null ? null : (currentToken.isa.method_msgSend["characterAtIndex:"] || _objj_forward)(currentToken, (currentToken.isa.method_dtable["characterAtIndex:"], "characterAtIndex:"), 0))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqualToString:"] || _objj_forward)(___r1, "isEqualToString:", character)))
            {
                result += (self.isa.method_msgSend["_stringFromToken:date:"] || _objj_forward)(self, (self.isa.method_dtable["_stringFromToken:date:"], self.isa.method_dtable["_stringFromToken:date:"], "_stringFromToken:date:"), currentToken, aDate);
                currentToken = (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
            }
            currentToken += character;
            if (i == length - 1)
                result += (self.isa.method_msgSend["_stringFromToken:date:"] || _objj_forward)(self, (self.isa.method_dtable["_stringFromToken:date:"], self.isa.method_dtable["_stringFromToken:date:"], "_stringFromToken:date:"), currentToken, aDate);
        }
    }
    return result;
    var ___r1;
}

,["CPString","CPDate","CPString"]), new objj_method(sel_getUid("_stringFromToken:date:"), function $CPDateFormatter___stringFromToken_date_(self, _cmd, aToken, aDate)
{
    if (!(aToken == null ? null : (aToken.isa.method_msgSend["length"] || _objj_forward)(aToken, (aToken.isa.method_dtable["length"], "length"))))
        return aToken;
    var character = (aToken == null ? null : (aToken.isa.method_msgSend["characterAtIndex:"] || _objj_forward)(aToken, (aToken.isa.method_dtable["characterAtIndex:"], "characterAtIndex:"), 0)),
        length = (aToken == null ? null : (aToken.isa.method_msgSend["length"] || _objj_forward)(aToken, (aToken.isa.method_dtable["length"], "length"))),
        timeZone = self._timeZone;
    switch(character) {
        case "G":
            CPLog.warn("Token not yet implemented " + aToken);
            return (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
        case "y":
            var currentLength = ((___r1 = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%i", aDate.getFullYear())), ___r1 == null ? null : (___r1.isa.method_msgSend["length"] || _objj_forward)(___r1, "length"));
            return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), aDate.getFullYear(), length == 2 ? length : currentLength);
        case "Y":
            var currentLength = ((___r1 = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%i", aDate.getFullYear())), ___r1 == null ? null : (___r1.isa.method_msgSend["length"] || _objj_forward)(___r1, "length"));
            return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), aDate.getFullYear(), length == 2 ? length : currentLength);
        case "u":
            CPLog.warn("Token not yet implemented " + aToken);
            return (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
        case "U":
            CPLog.warn("Token not yet implemented " + aToken);
            return (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
        case "Q":
            var quarter = 1;
            if (aDate.getMonth() < 6 && aDate.getMonth() > 2)
                quarter = 2;
            if (aDate.getMonth() > 5 && aDate.getMonth() < 9)
                quarter = 3;
            if (aDate.getMonth() >= 9)
                quarter = 4;
            if (length <= 2)
                return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), quarter, MIN(2, length));
            if (length == 3)
                return ((___r1 = (self.isa.method_msgSend["shortQuarterSymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortQuarterSymbols"], "shortQuarterSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", quarter - 1));
            if (length >= 4)
                return ((___r1 = (self.isa.method_msgSend["quarterSymbols"] || _objj_forward)(self, (self.isa.method_dtable["quarterSymbols"], "quarterSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", quarter - 1));
        case "q":
            var quarter = 1;
            if (aDate.getMonth() < 6 && aDate.getMonth() > 2)
                quarter = 2;
            if (aDate.getMonth() > 5 && aDate.getMonth() < 9)
                quarter = 3;
            if (aDate.getMonth() >= 9)
                quarter = 4;
            if (length <= 2)
                return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), quarter, MIN(2, length));
            if (length == 3)
                return ((___r1 = (self.isa.method_msgSend["shortStandaloneQuarterSymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortStandaloneQuarterSymbols"], "shortStandaloneQuarterSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", quarter - 1));
            if (length >= 4)
                return ((___r1 = (self.isa.method_msgSend["standaloneQuarterSymbols"] || _objj_forward)(self, (self.isa.method_dtable["standaloneQuarterSymbols"], "standaloneQuarterSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", quarter - 1));
        case "M":
            var currentLength = ((___r1 = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%i", aDate.getMonth() + 1)), ___r1 == null ? null : (___r1.isa.method_msgSend["length"] || _objj_forward)(___r1, "length"));
            if (length <= 2)
                return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), aDate.getMonth() + 1, MAX(currentLength, length));
            if (length == 3)
                return ((___r1 = (self.isa.method_msgSend["shortMonthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortMonthSymbols"], "shortMonthSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", aDate.getMonth()));
            if (length == 4)
                return ((___r1 = (self.isa.method_msgSend["monthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["monthSymbols"], "monthSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", aDate.getMonth()));
            if (length >= 5)
                return ((___r1 = (self.isa.method_msgSend["veryShortMonthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["veryShortMonthSymbols"], "veryShortMonthSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", aDate.getMonth()));
        case "L":
            var currentLength = ((___r1 = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%i", aDate.getMonth() + 1)), ___r1 == null ? null : (___r1.isa.method_msgSend["length"] || _objj_forward)(___r1, "length"));
            if (length <= 2)
                return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), aDate.getMonth() + 1, MAX(currentLength, length));
            if (length == 3)
                return ((___r1 = (self.isa.method_msgSend["shortStandaloneMonthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortStandaloneMonthSymbols"], "shortStandaloneMonthSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", aDate.getMonth()));
            if (length == 4)
                return ((___r1 = (self.isa.method_msgSend["standaloneMonthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["standaloneMonthSymbols"], "standaloneMonthSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", aDate.getMonth()));
            if (length >= 5)
                return ((___r1 = (self.isa.method_msgSend["veryShortStandaloneMonthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["veryShortStandaloneMonthSymbols"], "veryShortStandaloneMonthSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", aDate.getMonth()));
        case "I":
            CPLog.warn("Depreacted - Token not yet implemented " + aToken);
            return (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
        case "w":
            var d = (aDate == null ? null : (aDate.isa.method_msgSend["copy"] || _objj_forward)(aDate, (aDate.isa.method_dtable["copy"], "copy")));
            d.setHours(0, 0, 0);
            d.setDate(d.getDate() + 4 - (d.getDay() || 7));
            var yearStart = new Date(d.getFullYear(), 0, 1),
                weekOfYear = Math.ceil(((d - yearStart) / 86400000 + 1) / 7);
            return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), weekOfYear + 1, MAX(2, length));
        case "W":
            var firstDay = (new Date(aDate.getFullYear(), aDate.getMonth(), 1)).getDay(),
                weekOfMonth = Math.ceil((aDate.getDate() + firstDay) / 7);
            return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), weekOfMonth, 1);
        case "d":
            var currentLength = ((___r1 = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%i", aDate.getDate())), ___r1 == null ? null : (___r1.isa.method_msgSend["length"] || _objj_forward)(___r1, "length"));
            return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), aDate.getDate(), MAX(length, currentLength));
        case "D":
            var oneJan = new Date(aDate.getFullYear(), 0, 1),
                dayOfYear = Math.ceil((aDate - oneJan) / 86400000),
                currentLength = ((___r1 = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%i", dayOfYear)), ___r1 == null ? null : (___r1.isa.method_msgSend["length"] || _objj_forward)(___r1, "length"));
            return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), dayOfYear, MAX(currentLength, MIN(3, length)));
        case "F":
            var dayOfWeek = 1,
                day = aDate.getDate();
            if (day > 7 && day < 15)
                dayOfWeek = 2;
            if (day > 14 && day < 22)
                dayOfWeek = 3;
            if (day > 21 && day < 29)
                dayOfWeek = 4;
            if (day > 28)
                dayOfWeek = 5;
            return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), dayOfWeek, 1);
        case "g":
            CPLog.warn("Token not yet implemented " + aToken);
            return (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
        case "E":
            var day = aDate.getDay();
            if (length <= 3)
                return ((___r1 = (self.isa.method_msgSend["shortWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortWeekdaySymbols"], "shortWeekdaySymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", day));
            if (length == 4)
                return ((___r1 = (self.isa.method_msgSend["weekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["weekdaySymbols"], "weekdaySymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", day));
            if (length >= 5)
                return ((___r1 = (self.isa.method_msgSend["veryShortWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["veryShortWeekdaySymbols"], "veryShortWeekdaySymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", day));
        case "e":
            var day = aDate.getDay();
            if (length <= 2)
                return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), day + 1, MIN(2, length));
            if (length == 3)
                return ((___r1 = (self.isa.method_msgSend["shortWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortWeekdaySymbols"], "shortWeekdaySymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", day));
            if (length == 4)
                return ((___r1 = (self.isa.method_msgSend["weekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["weekdaySymbols"], "weekdaySymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", day));
            if (length >= 5)
                return ((___r1 = (self.isa.method_msgSend["veryShortWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["veryShortWeekdaySymbols"], "veryShortWeekdaySymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", day));
        case "c":
            var day = aDate.getDay();
            if (length <= 2)
                return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), day + 1, ((aDate.getDay()).toString()).length);
            if (length == 3)
                return ((___r1 = (self.isa.method_msgSend["shortStandaloneWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortStandaloneWeekdaySymbols"], "shortStandaloneWeekdaySymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", day));
            if (length == 4)
                return ((___r1 = (self.isa.method_msgSend["standaloneWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["standaloneWeekdaySymbols"], "standaloneWeekdaySymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", day));
            if (length >= 5)
                return ((___r1 = (self.isa.method_msgSend["veryShortStandaloneWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["veryShortStandaloneWeekdaySymbols"], "veryShortStandaloneWeekdaySymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", day));
        case "a":
            if (aDate.getHours() > 11)
                return (self.isa.method_msgSend["PMSymbol"] || _objj_forward)(self, (self.isa.method_dtable["PMSymbol"], "PMSymbol"));
            else
                return (self.isa.method_msgSend["AMSymbol"] || _objj_forward)(self, (self.isa.method_dtable["AMSymbol"], "AMSymbol"));
        case "h":
            var hours = aDate.getHours();
            if ((self.isa.method_msgSend["_isAmericanFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isAmericanFormat"], "_isAmericanFormat")) || (self.isa.method_msgSend["_isEnglishFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isEnglishFormat"], "_isEnglishFormat")))
            {
                if (hours == 0)
                    hours = 12;
                else if (hours > 12)
                    hours = hours - 12;
            }
            var currentLength = ((___r1 = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%i", hours)), ___r1 == null ? null : (___r1.isa.method_msgSend["length"] || _objj_forward)(___r1, "length"));
            return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), hours, MAX(currentLength, MIN(2, length)));
        case "H":
            var currentLength = ((___r1 = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%i", aDate.getHours())), ___r1 == null ? null : (___r1.isa.method_msgSend["length"] || _objj_forward)(___r1, "length"));
            return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), aDate.getHours(), MAX(currentLength, MIN(2, length)));
        case "K":
            var hours = aDate.getHours();
            if (hours > 12)
                hours -= 12;
            var currentLength = ((___r1 = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%i", hours)), ___r1 == null ? null : (___r1.isa.method_msgSend["length"] || _objj_forward)(___r1, "length"));
            return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), hours, MAX(currentLength, MIN(2, length)));
        case "k":
            var hours = aDate.getHours();
            if (aDate.getHours() == 0)
                hours = 24;
            var currentLength = ((___r1 = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%i", hours)), ___r1 == null ? null : (___r1.isa.method_msgSend["length"] || _objj_forward)(___r1, "length"));
            return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), hours, MAX(currentLength, MIN(2, length)));
        case "j":
            CPLog.warn("Token not yet implemented " + aToken);
            return (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
        case "m":
            var currentLength = ((___r1 = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%i", aDate.getMinutes())), ___r1 == null ? null : (___r1.isa.method_msgSend["length"] || _objj_forward)(___r1, "length"));
            return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), aDate.getMinutes(), MAX(currentLength, MIN(2, length)));
        case "s":
            var currentLength = ((___r1 = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%i", aDate.getMinutes())), ___r1 == null ? null : (___r1.isa.method_msgSend["length"] || _objj_forward)(___r1, "length"));
            return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), aDate.getSeconds(), MIN(2, length));
        case "S":
            return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), aDate.getMilliseconds(), length);
        case "A":
            var value = aDate.getHours() * 60 * 60 * 1000 + aDate.getMinutes() * 60 * 1000 + aDate.getSeconds() * 1000 + aDate.getMilliseconds();
            return (self.isa.method_msgSend["_stringValueForValue:length:"] || _objj_forward)(self, (self.isa.method_dtable["_stringValueForValue:length:"], self.isa.method_dtable["_stringValueForValue:length:"], "_stringValueForValue:length:"), value, (value.toString()).length);
        case "z":
            if (length <= 3)
                return (timeZone == null ? null : (timeZone.isa.method_msgSend["localizedName:locale:"] || _objj_forward)(timeZone, (timeZone.isa.method_dtable["localizedName:locale:"], timeZone.isa.method_dtable["localizedName:locale:"], "localizedName:locale:"), CPTimeZoneNameStyleShortDaylightSaving, self._locale));
            else
                return (timeZone == null ? null : (timeZone.isa.method_msgSend["localizedName:locale:"] || _objj_forward)(timeZone, (timeZone.isa.method_dtable["localizedName:locale:"], timeZone.isa.method_dtable["localizedName:locale:"], "localizedName:locale:"), CPTimeZoneNameStyleDaylightSaving, self._locale));
        case "Z":
            var seconds = (timeZone == null ? null : (timeZone.isa.method_msgSend["secondsFromGMT"] || _objj_forward)(timeZone, (timeZone.isa.method_dtable["secondsFromGMT"], "secondsFromGMT"))),
                minutes = seconds / 60,
                hours = minutes / 60,
                result,
                diffMinutes = (hours - parseInt(hours)) * 100 * 60 / 100;
            if (length <= 3)
            {
                result = diffMinutes.toString();
                while ((result == null ? null : (result.isa.method_msgSend["length"] || _objj_forward)(result, (result.isa.method_dtable["length"], "length"))) < 2)
                    result = "0" + result;
                result = ABS(parseInt(hours)) + result;
                while ((result == null ? null : (result.isa.method_msgSend["length"] || _objj_forward)(result, (result.isa.method_dtable["length"], "length"))) < 4)
                    result = "0" + result;
                if (seconds > 0)
                    result = "+" + result;
                else
                    result = "-" + result;
                return result;
            }
            else if (length == 4)
            {
                result = diffMinutes.toString();
                while ((result == null ? null : (result.isa.method_msgSend["length"] || _objj_forward)(result, (result.isa.method_dtable["length"], "length"))) < 2)
                    result = "0" + result;
                result = ":" + result;
                result = ABS(parseInt(hours)) + result;
                while ((result == null ? null : (result.isa.method_msgSend["length"] || _objj_forward)(result, (result.isa.method_dtable["length"], "length"))) < 5)
                    result = "0" + result;
                if (seconds > 0)
                    result = "+" + result;
                else
                    result = "-" + result;
                return "GMT" + result;
            }
            else
            {
                result = diffMinutes.toString();
                while ((result == null ? null : (result.isa.method_msgSend["length"] || _objj_forward)(result, (result.isa.method_dtable["length"], "length"))) < 2)
                    result = "0" + result;
                result = ":" + result;
                result = ABS(parseInt(hours)) + result;
                while ((result == null ? null : (result.isa.method_msgSend["length"] || _objj_forward)(result, (result.isa.method_dtable["length"], "length"))) < 5)
                    result = "0" + result;
                if (seconds > 0)
                    result = "+" + result;
                else
                    result = "-" + result;
                return result;
            }
        case "v":
            if (length == 1)
                return (timeZone == null ? null : (timeZone.isa.method_msgSend["localizedName:locale:"] || _objj_forward)(timeZone, (timeZone.isa.method_dtable["localizedName:locale:"], timeZone.isa.method_dtable["localizedName:locale:"], "localizedName:locale:"), CPTimeZoneNameStyleShortGeneric, self._locale));
            else if (length == 4)
                return (timeZone == null ? null : (timeZone.isa.method_msgSend["localizedName:locale:"] || _objj_forward)(timeZone, (timeZone.isa.method_dtable["localizedName:locale:"], timeZone.isa.method_dtable["localizedName:locale:"], "localizedName:locale:"), CPTimeZoneNameStyleGeneric, self._locale));
            return " ";
        case "V":
            if (length == 1)
            {
                return (timeZone == null ? null : (timeZone.isa.method_msgSend["localizedName:locale:"] || _objj_forward)(timeZone, (timeZone.isa.method_dtable["localizedName:locale:"], timeZone.isa.method_dtable["localizedName:locale:"], "localizedName:locale:"), CPTimeZoneNameStyleShortDaylightSaving, self._locale));
            }
            else if (length == 4)
            {
                CPLog.warn("No pattern found for " + aToken);
                return "";
            }
            return " ";
default:
            CPLog.warn("No pattern found for " + aToken);
            return aToken;
    }
    return (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
    var ___r1;
}

,["CPString","CPString","CPDate"]), new objj_method(sel_getUid("dateFromString:"), function $CPDateFormatter__dateFromString_(self, _cmd, aString)
{
    var format;
    if (self._dateFormat != nil)
        return (self.isa.method_msgSend["_dateFromString:format:"] || _objj_forward)(self, (self.isa.method_dtable["_dateFromString:format:"], self.isa.method_dtable["_dateFromString:format:"], "_dateFromString:format:"), aString, self._dateFormat);
    switch(self._dateStyle) {
        case CPDateFormatterNoStyle:
            format = "";
            break;
        case CPDateFormatterShortStyle:
            if ((self.isa.method_msgSend["_isAmericanFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isAmericanFormat"], "_isAmericanFormat")))
                format = "M/d/yy";
            else
                format = "dd/MM/yy";
            break;
        case CPDateFormatterMediumStyle:
            if ((self.isa.method_msgSend["_isAmericanFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isAmericanFormat"], "_isAmericanFormat")))
                format = "MMM d, Y";
            else
                format = "d MMM Y";
            break;
        case CPDateFormatterLongStyle:
            if ((self.isa.method_msgSend["_isAmericanFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isAmericanFormat"], "_isAmericanFormat")))
                format = "MMMM d, Y";
            else
                format = "d MMMM Y";
            break;
        case CPDateFormatterFullStyle:
            if ((self.isa.method_msgSend["_isAmericanFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isAmericanFormat"], "_isAmericanFormat")))
                format = "EEEE, MMMM d, Y";
            else
                format = "EEEE d MMMM Y";
            break;
default:
            format = "";
    }
    switch(self._timeStyle) {
        case CPDateFormatterNoStyle:
            format += "";
            break;
        case CPDateFormatterShortStyle:
            if ((self.isa.method_msgSend["_isEnglishFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isEnglishFormat"], "_isEnglishFormat")))
                format += " h:mm a";
            else
                format += " H:mm";
            break;
        case CPDateFormatterMediumStyle:
            if ((self.isa.method_msgSend["_isEnglishFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isEnglishFormat"], "_isEnglishFormat")))
                format += " h:mm:ss a";
            else
                format += " H:mm:ss";
            break;
        case CPDateFormatterLongStyle:
            if ((self.isa.method_msgSend["_isEnglishFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isEnglishFormat"], "_isEnglishFormat")))
                format += " h:mm:ss a z";
            else
                format += " H:mm:ss z";
            break;
        case CPDateFormatterFullStyle:
            if ((self.isa.method_msgSend["_isEnglishFormat"] || _objj_forward)(self, (self.isa.method_dtable["_isEnglishFormat"], "_isEnglishFormat")))
                format += " h:mm:ss a zzzz";
            else
                format += " h:mm:ss zzzz";
            break;
default:
            format += "";
    }
    return (self.isa.method_msgSend["_dateFromString:format:"] || _objj_forward)(self, (self.isa.method_dtable["_dateFromString:format:"], self.isa.method_dtable["_dateFromString:format:"], "_dateFromString:format:"), aString, format);
}

,["CPDate","CPString"]), new objj_method(sel_getUid("getObjectValue:forString:errorDescription:"), function $CPDateFormatter__getObjectValue_forString_errorDescription_(self, _cmd, anObject, aString, anError)
{
    var value = (self.isa.method_msgSend["dateFromString:"] || _objj_forward)(self, (self.isa.method_dtable["dateFromString:"], "dateFromString:"), aString);
    (anObject)(value);
    if (!value)
    {
        if (anError)
            (anError)("The value \"" + aString + "\" is invalid.");
        return NO;
    }
    return YES;
}

,["BOOL","idRef","CPString","CPStringRef"]), new objj_method(sel_getUid("_dateFromString:format:"), function $CPDateFormatter___dateFromString_format_(self, _cmd, aString, aFormat)
{
    if (!aString)
        return ((___r1 = (CPDate.isa.method_msgSend["alloc"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithTimeIntervalSinceReferenceDate:"] || _objj_forward)(___r1, "initWithTimeIntervalSinceReferenceDate:", -31622400));
    if (aFormat == nil)
        return nil;
    var currentToken = (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new")),
        isTextToken = NO,
        tokens = (CPArray.isa.method_msgSend["array"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["array"], "array")),
        dateComponents = (CPArray.isa.method_msgSend["array"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["array"], "array")),
        patternTokens = (CPArray.isa.method_msgSend["array"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["array"], "array"));
    for (var i = 0; i < (aFormat == null ? null : (aFormat.isa.method_msgSend["length"] || _objj_forward)(aFormat, (aFormat.isa.method_dtable["length"], "length"))); i++)
    {
        var character = (aFormat == null ? null : (aFormat.isa.method_msgSend["characterAtIndex:"] || _objj_forward)(aFormat, (aFormat.isa.method_dtable["characterAtIndex:"], "characterAtIndex:"), i));
        if (isTextToken)
        {
            if ((character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), "'")))
                currentToken = (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
            continue;
        }
        if ((character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), "'")))
        {
            if (!isTextToken)
                isTextToken = YES;
            continue;
        }
        if ((character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), ",")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), ":")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), "/")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), "-")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), " ")))
        {
            (tokens == null ? null : (tokens.isa.method_msgSend["addObject:"] || _objj_forward)(tokens, (tokens.isa.method_dtable["addObject:"], "addObject:"), currentToken));
            if ((patternStringTokens == null ? null : (patternStringTokens.isa.method_msgSend["containsObject:"] || _objj_forward)(patternStringTokens, (patternStringTokens.isa.method_dtable["containsObject:"], "containsObject:"), currentToken)))
                (patternTokens == null ? null : (patternTokens.isa.method_msgSend["addObject:"] || _objj_forward)(patternTokens, (patternTokens.isa.method_dtable["addObject:"], "addObject:"), (tokens == null ? null : (tokens.isa.method_msgSend["count"] || _objj_forward)(tokens, (tokens.isa.method_dtable["count"], "count"))) - 1));
            currentToken = (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
        }
        else
        {
            if ((currentToken == null ? null : (currentToken.isa.method_msgSend["length"] || _objj_forward)(currentToken, (currentToken.isa.method_dtable["length"], "length"))) && !((___r1 = (currentToken == null ? null : (currentToken.isa.method_msgSend["characterAtIndex:"] || _objj_forward)(currentToken, (currentToken.isa.method_dtable["characterAtIndex:"], "characterAtIndex:"), 0))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqualToString:"] || _objj_forward)(___r1, "isEqualToString:", character)))
            {
                (tokens == null ? null : (tokens.isa.method_msgSend["addObject:"] || _objj_forward)(tokens, (tokens.isa.method_dtable["addObject:"], "addObject:"), currentToken));
                if ((patternStringTokens == null ? null : (patternStringTokens.isa.method_msgSend["containsObject:"] || _objj_forward)(patternStringTokens, (patternStringTokens.isa.method_dtable["containsObject:"], "containsObject:"), currentToken)))
                    (patternTokens == null ? null : (patternTokens.isa.method_msgSend["addObject:"] || _objj_forward)(patternTokens, (patternTokens.isa.method_dtable["addObject:"], "addObject:"), (tokens == null ? null : (tokens.isa.method_msgSend["count"] || _objj_forward)(tokens, (tokens.isa.method_dtable["count"], "count"))) - 1));
                currentToken = (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
            }
            currentToken += character;
            if (i == (aFormat == null ? null : (aFormat.isa.method_msgSend["length"] || _objj_forward)(aFormat, (aFormat.isa.method_dtable["length"], "length"))) - 1)
            {
                (tokens == null ? null : (tokens.isa.method_msgSend["addObject:"] || _objj_forward)(tokens, (tokens.isa.method_dtable["addObject:"], "addObject:"), currentToken));
                if ((patternStringTokens == null ? null : (patternStringTokens.isa.method_msgSend["containsObject:"] || _objj_forward)(patternStringTokens, (patternStringTokens.isa.method_dtable["containsObject:"], "containsObject:"), currentToken)))
                    (patternTokens == null ? null : (patternTokens.isa.method_msgSend["addObject:"] || _objj_forward)(patternTokens, (patternTokens.isa.method_dtable["addObject:"], "addObject:"), (tokens == null ? null : (tokens.isa.method_msgSend["count"] || _objj_forward)(tokens, (tokens.isa.method_dtable["count"], "count"))) - 1));
            }
        }
    }
    isTextToken = NO;
    currentToken = (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
    var currentIndexSpecialPattern = 0;
    if ((patternTokens == null ? null : (patternTokens.isa.method_msgSend["count"] || _objj_forward)(patternTokens, (patternTokens.isa.method_dtable["count"], "count"))) == 0)
        (patternTokens == null ? null : (patternTokens.isa.method_msgSend["addObject:"] || _objj_forward)(patternTokens, (patternTokens.isa.method_dtable["addObject:"], "addObject:"), CPNotFound));
    for (var i = 0; i < (aString == null ? null : (aString.isa.method_msgSend["length"] || _objj_forward)(aString, (aString.isa.method_dtable["length"], "length"))); i++)
    {
        var character = (aString == null ? null : (aString.isa.method_msgSend["characterAtIndex:"] || _objj_forward)(aString, (aString.isa.method_dtable["characterAtIndex:"], "characterAtIndex:"), i));
        if (isTextToken)
        {
            if ((character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), "'")))
                currentToken = (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
            continue;
        }
        if ((character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), "'")))
        {
            if (!isTextToken)
                isTextToken = YES;
            continue;
        }
        if ((dateComponents == null ? null : (dateComponents.isa.method_msgSend["count"] || _objj_forward)(dateComponents, (dateComponents.isa.method_dtable["count"], "count"))) == (patternTokens == null ? null : (patternTokens.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(patternTokens, (patternTokens.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), currentIndexSpecialPattern)))
        {
            var j = (self.isa.method_msgSend["_lastIndexMatchedString:token:index:"] || _objj_forward)(self, (self.isa.method_dtable["_lastIndexMatchedString:token:index:"], self.isa.method_dtable["_lastIndexMatchedString:token:index:"], self.isa.method_dtable["_lastIndexMatchedString:token:index:"], "_lastIndexMatchedString:token:index:"), aString, (tokens == null ? null : (tokens.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(tokens, (tokens.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), (dateComponents == null ? null : (dateComponents.isa.method_msgSend["count"] || _objj_forward)(dateComponents, (dateComponents.isa.method_dtable["count"], "count"))))), i);
            if (j == CPNotFound)
                return nil;
            currentIndexSpecialPattern++;
            (dateComponents == null ? null : (dateComponents.isa.method_msgSend["addObject:"] || _objj_forward)(dateComponents, (dateComponents.isa.method_dtable["addObject:"], "addObject:"), (aString == null ? null : (aString.isa.method_msgSend["substringWithRange:"] || _objj_forward)(aString, (aString.isa.method_dtable["substringWithRange:"], "substringWithRange:"), CPMakeRange(i, j - i)))));
            i = j;
            continue;
        }
        if ((character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), ",")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), ":")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), "/")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), "-")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), " ")))
        {
            (dateComponents == null ? null : (dateComponents.isa.method_msgSend["addObject:"] || _objj_forward)(dateComponents, (dateComponents.isa.method_dtable["addObject:"], "addObject:"), currentToken));
            currentToken = (CPString.isa.method_msgSend["new"] || _objj_forward)(CPString, (CPString.isa.method_dtable["new"], "new"));
        }
        else
        {
            currentToken += character;
            if (i == (aString == null ? null : (aString.isa.method_msgSend["length"] || _objj_forward)(aString, (aString.isa.method_dtable["length"], "length"))) - 1)
                (dateComponents == null ? null : (dateComponents.isa.method_msgSend["addObject:"] || _objj_forward)(dateComponents, (dateComponents.isa.method_dtable["addObject:"], "addObject:"), currentToken));
        }
    }
    if ((dateComponents == null ? null : (dateComponents.isa.method_msgSend["count"] || _objj_forward)(dateComponents, (dateComponents.isa.method_dtable["count"], "count"))) != (tokens == null ? null : (tokens.isa.method_msgSend["count"] || _objj_forward)(tokens, (tokens.isa.method_dtable["count"], "count"))))
        return nil;
    return (self.isa.method_msgSend["_dateFromTokens:dateComponents:"] || _objj_forward)(self, (self.isa.method_dtable["_dateFromTokens:dateComponents:"], self.isa.method_dtable["_dateFromTokens:dateComponents:"], "_dateFromTokens:dateComponents:"), tokens, dateComponents);
    var ___r1;
}

,["CPDate","CPString","CPString"]), new objj_method(sel_getUid("_dateFromTokens:dateComponents:"), function $CPDateFormatter___dateFromTokens_dateComponents_(self, _cmd, tokens, dateComponents)
{
    var timeZoneseconds = ((___r1 = self._timeZone), ___r1 == null ? null : (___r1.isa.method_msgSend["secondsFromGMT"] || _objj_forward)(___r1, (self._timeZone.isa.method_dtable["secondsFromGMT"], "secondsFromGMT"))),
        dateArray = [2000, 01, 01, 00, 00, 00, "+0000"],
        isPM = NO,
        dayOfYear,
        dayIndexInWeek,
        weekOfYear,
        weekOfMonth;
    for (var i = 0; i < (tokens == null ? null : (tokens.isa.method_msgSend["count"] || _objj_forward)(tokens, (tokens.isa.method_dtable["count"], "count"))); i++)
    {
        var token = (tokens == null ? null : (tokens.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(tokens, (tokens.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i)),
            dateComponent = (dateComponents == null ? null : (dateComponents.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(dateComponents, (dateComponents.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i)),
            character = (token == null ? null : (token.isa.method_msgSend["characterAtIndex:"] || _objj_forward)(token, (token.isa.method_dtable["characterAtIndex:"], "characterAtIndex:"), 0)),
            length = (token == null ? null : (token.isa.method_msgSend["length"] || _objj_forward)(token, (token.isa.method_dtable["length"], "length")));
        switch(character) {
            case "G":
                CPLog.warn("Token not yet implemented " + token);
                break;
            case "y":
                var u = self._twoDigitStartDate.getFullYear() % 10,
                    d = parseInt(self._twoDigitStartDate.getFullYear() / 10) % 10,
                    c = parseInt(self._twoDigitStartDate.getFullYear() / 100) % 10,
                    m = parseInt(self._twoDigitStartDate.getFullYear() / 1000) % 10;
                if (length == 2 && dateComponent.length == 2)
                {
                    if (u + d * 10 >= parseInt(dateComponent))
                        dateArray[0] = (c + 1) * 100 + m * 1000 + parseInt(dateComponent);
                    else
                        dateArray[0] = c * 100 + m * 1000 + parseInt(dateComponent);
                }
                else
                {
                    dateArray[0] = parseInt(dateComponent);
                }
                break;
            case "Y":
                var u = self._twoDigitStartDate.getFullYear() % 10,
                    d = parseInt(self._twoDigitStartDate.getFullYear() / 10) % 10,
                    c = parseInt(self._twoDigitStartDate.getFullYear() / 100) % 10,
                    m = parseInt(self._twoDigitStartDate.getFullYear() / 1000) % 10;
                if (length == 2 && dateComponent.length == 2)
                {
                    if (u + d * 10 >= parseInt(dateComponent))
                        dateArray[0] = (c + 1) * 100 + m * 1000 + parseInt(dateComponent);
                    else
                        dateArray[0] = c * 100 + m * 1000 + parseInt(dateComponent);
                }
                else
                {
                    dateArray[0] = parseInt(dateComponent);
                }
                break;
            case "u":
                CPLog.warn("Token not yet implemented " + token);
                break;
            case "U":
                CPLog.warn("Token not yet implemented " + token);
                break;
            case "Q":
                var month;
                if (length <= 2)
                    month = (parseInt(dateComponent) - 1) * 3;
                if (length == 3)
                {
                    if (!((___r1 = (self.isa.method_msgSend["shortQuarterSymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortQuarterSymbols"], "shortQuarterSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["containsObject:"] || _objj_forward)(___r1, "containsObject:", dateComponent)))
                        return nil;
                    month = ((___r1 = (self.isa.method_msgSend["shortQuarterSymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortQuarterSymbols"], "shortQuarterSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", dateComponent)) * 3;
                }
                if (length >= 4)
                {
                    if (!((___r1 = (self.isa.method_msgSend["quarterSymbols"] || _objj_forward)(self, (self.isa.method_dtable["quarterSymbols"], "quarterSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["containsObject:"] || _objj_forward)(___r1, "containsObject:", dateComponent)))
                        return nil;
                    month = ((___r1 = (self.isa.method_msgSend["quarterSymbols"] || _objj_forward)(self, (self.isa.method_dtable["quarterSymbols"], "quarterSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", dateComponent)) * 3;
                }
                if (month > 11)
                    return nil;
                dateArray[1] = month + 1;
                break;
            case "q":
                var month;
                if (length <= 2)
                    month = (parseInt(dateComponent) - 1) * 3;
                if (length == 3)
                {
                    if (!((___r1 = (self.isa.method_msgSend["shortQuarterSymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortQuarterSymbols"], "shortQuarterSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["containsObject:"] || _objj_forward)(___r1, "containsObject:", dateComponent)))
                        return nil;
                    month = ((___r1 = (self.isa.method_msgSend["shortQuarterSymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortQuarterSymbols"], "shortQuarterSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", dateComponent)) * 3;
                }
                if (length >= 4)
                {
                    if (!((___r1 = (self.isa.method_msgSend["quarterSymbols"] || _objj_forward)(self, (self.isa.method_dtable["quarterSymbols"], "quarterSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["containsObject:"] || _objj_forward)(___r1, "containsObject:", dateComponent)))
                        return nil;
                    month = ((___r1 = (self.isa.method_msgSend["quarterSymbols"] || _objj_forward)(self, (self.isa.method_dtable["quarterSymbols"], "quarterSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", dateComponent)) * 3;
                }
                if (month > 11)
                    return nil;
                dateArray[1] = month + 1;
                break;
            case "M":
                var month;
                if (length <= 2)
                    month = parseInt(dateComponent);
                if (length == 3)
                {
                    if (!((___r1 = (self.isa.method_msgSend["shortMonthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortMonthSymbols"], "shortMonthSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["containsObject:"] || _objj_forward)(___r1, "containsObject:", dateComponent)))
                        return nil;
                    month = ((___r1 = (self.isa.method_msgSend["shortMonthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortMonthSymbols"], "shortMonthSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", dateComponent)) + 1;
                }
                if (length == 4)
                {
                    if (!((___r1 = (self.isa.method_msgSend["monthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["monthSymbols"], "monthSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["containsObject:"] || _objj_forward)(___r1, "containsObject:", dateComponent)))
                        return nil;
                    month = ((___r1 = (self.isa.method_msgSend["monthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["monthSymbols"], "monthSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", dateComponent)) + 1;
                }
                if (month > 12 || length >= 5)
                    return nil;
                dateArray[1] = month;
                break;
            case "L":
                var month;
                if (length <= 2)
                    month = parseInt(dateComponent);
                if (length == 3)
                {
                    if (!((___r1 = (self.isa.method_msgSend["shortStandaloneMonthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortStandaloneMonthSymbols"], "shortStandaloneMonthSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["containsObject:"] || _objj_forward)(___r1, "containsObject:", dateComponent)))
                        return nil;
                    month = ((___r1 = (self.isa.method_msgSend["shortStandaloneMonthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortStandaloneMonthSymbols"], "shortStandaloneMonthSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", dateComponent)) + 1;
                }
                if (length == 4)
                {
                    if (!((___r1 = (self.isa.method_msgSend["standaloneMonthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["standaloneMonthSymbols"], "standaloneMonthSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["containsObject:"] || _objj_forward)(___r1, "containsObject:", dateComponent)))
                        return nil;
                    month = ((___r1 = (self.isa.method_msgSend["standaloneMonthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["standaloneMonthSymbols"], "standaloneMonthSymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", dateComponent)) + 1;
                }
                if (month > 12 || length >= 5)
                    return nil;
                dateArray[1] = month;
                break;
            case "I":
                CPLog.warn("Depreacted - Token not yet implemented " + token);
                break;
            case "w":
                if (dateComponent > 52)
                    return nil;
                weekOfYear = dateComponent;
                break;
            case "W":
                if (dateComponent > 52)
                    return nil;
                weekOfMonth = dateComponent;
                break;
            case "d":
                dateArray[2] = parseInt(dateComponent);
                break;
            case "D":
                if (isNaN(parseInt(dateComponent)) || parseInt(dateComponent) > 345)
                    return nil;
                dayOfYear = parseInt(dateComponent);
                break;
            case "F":
                if (isNaN(parseInt(dateComponent)) || parseInt(dateComponent) > 5 || parseInt(dateComponent) == 0)
                    return nil;
                if (parseInt(dateComponent) == 1)
                    dateArray[2] = 1;
                if (parseInt(dateComponent) == 2)
                    dateArray[2] = 8;
                if (parseInt(dateComponent) == 3)
                    dateArray[2] = 15;
                if (parseInt(dateComponent) == 4)
                    dateArray[2] = 22;
                if (parseInt(dateComponent) == 5)
                    dateArray[2] = 29;
                break;
            case "g":
                CPLog.warn("Token not yet implemented " + token);
                break;
            case "E":
                if (length <= 3)
                    dayIndexInWeek = ((___r1 = (self.isa.method_msgSend["shortWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortWeekdaySymbols"], "shortWeekdaySymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", dateComponent));
                if (length == 4)
                    dayIndexInWeek = ((___r1 = (self.isa.method_msgSend["weekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["weekdaySymbols"], "weekdaySymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", dateComponent));
                if (dayIndexInWeek == CPNotFound || length >= 5)
                    return nil;
                break;
            case "e":
                if (length <= 2 && isNaN(parseInt(dateComponent)))
                    return nil;
                if (length <= 2)
                    dayIndexInWeek = parseInt(dateComponent);
                if (length == 3)
                    dayIndexInWeek = ((___r1 = (self.isa.method_msgSend["shortWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortWeekdaySymbols"], "shortWeekdaySymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", dateComponent));
                if (length == 4)
                    dayIndexInWeek = ((___r1 = (self.isa.method_msgSend["weekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["weekdaySymbols"], "weekdaySymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", dateComponent));
                if (dayIndexInWeek == CPNotFound || length >= 5)
                    return nil;
                break;
            case "c":
                if (length <= 2 && isNaN(parseInt(dateComponent)))
                    return nil;
                if (length <= 2)
                    dayIndexInWeek = dateComponent;
                if (length == 3)
                    dayIndexInWeek = ((___r1 = (self.isa.method_msgSend["shortStandaloneWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortStandaloneWeekdaySymbols"], "shortStandaloneWeekdaySymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", dateComponent));
                if (length == 4)
                    dayIndexInWeek = ((___r1 = (self.isa.method_msgSend["standaloneWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["standaloneWeekdaySymbols"], "standaloneWeekdaySymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", dateComponent));
                if (length == 5)
                    dayIndexInWeek = ((___r1 = (self.isa.method_msgSend["veryShortStandaloneWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["veryShortStandaloneWeekdaySymbols"], "veryShortStandaloneWeekdaySymbols"))), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", dateComponent));
                if (dayIndexInWeek == CPNotFound || length >= 5)
                    return nil;
                break;
            case "a":
                if (!(dateComponent == null ? null : (dateComponent.isa.method_msgSend["isEqualToString:"] || _objj_forward)(dateComponent, (dateComponent.isa.method_dtable["isEqualToString:"], "isEqualToString:"), (self.isa.method_msgSend["PMSymbol"] || _objj_forward)(self, (self.isa.method_dtable["PMSymbol"], "PMSymbol")))) && !(dateComponent == null ? null : (dateComponent.isa.method_msgSend["isEqualToString:"] || _objj_forward)(dateComponent, (dateComponent.isa.method_dtable["isEqualToString:"], "isEqualToString:"), (self.isa.method_msgSend["AMSymbol"] || _objj_forward)(self, (self.isa.method_dtable["AMSymbol"], "AMSymbol")))))
                    return nil;
                if ((dateComponent == null ? null : (dateComponent.isa.method_msgSend["isEqualToString:"] || _objj_forward)(dateComponent, (dateComponent.isa.method_dtable["isEqualToString:"], "isEqualToString:"), (self.isa.method_msgSend["PMSymbol"] || _objj_forward)(self, (self.isa.method_dtable["PMSymbol"], "PMSymbol")))))
                    isPM = YES;
                break;
            case "h":
                if (parseInt(dateComponent) < 0 || parseInt(dateComponent) > 12)
                    return nil;
                dateArray[3] = parseInt(dateComponent);
                break;
            case "H":
                if (parseInt(dateComponent) < 0 || parseInt(dateComponent) > 23)
                    return nil;
                dateArray[3] = parseInt(dateComponent);
                break;
            case "K":
                if (parseInt(dateComponent) < 0 || parseInt(dateComponent) > 11)
                    return nil;
                dateArray[3] = parseInt(dateComponent);
                break;
            case "k":
                if (parseInt(dateComponent) < 0 || parseInt(dateComponent) > 12)
                    return nil;
                dateArray[3] = parseInt(dateComponent);
                break;
            case "j":
                CPLog.warn("Token not yet implemented " + token);
                break;
            case "m":
                var minutes = parseInt(dateComponent);
                if (minutes > 59)
                    return nil;
                dateArray[4] = minutes;
                break;
            case "s":
                var seconds = parseInt(dateComponent);
                if (seconds > 59)
                    return nil;
                dateArray[5] = seconds;
                break;
            case "S":
                if (isNaN(parseInt(dateComponent)))
                    return nil;
                break;
            case "A":
                if (isNaN(parseInt(dateComponent)))
                    return nil;
                var millisecondsInDay = parseInt(dateComponent),
                    tmpDate = new Date();
                tmpDate.setHours(0);
                tmpDate.setMinutes(0);
                tmpDate.setSeconds(0);
                tmpDate.setMilliseconds(0);
                tmpDate.setMilliseconds(millisecondsInDay);
                dateArray[3] = tmpDate.getHours();
                dateArray[4] = tmpDate.getMinutes();
                dateArray[5] = tmpDate.getSeconds();
                break;
            case "z":
                if (length < 4)
                    timeZoneseconds = (self.isa.method_msgSend["_secondsFromTimeZoneString:style:"] || _objj_forward)(self, (self.isa.method_dtable["_secondsFromTimeZoneString:style:"], self.isa.method_dtable["_secondsFromTimeZoneString:style:"], "_secondsFromTimeZoneString:style:"), dateComponent, CPTimeZoneNameStyleShortDaylightSaving);
                else
                    timeZoneseconds = (self.isa.method_msgSend["_secondsFromTimeZoneString:style:"] || _objj_forward)(self, (self.isa.method_dtable["_secondsFromTimeZoneString:style:"], self.isa.method_dtable["_secondsFromTimeZoneString:style:"], "_secondsFromTimeZoneString:style:"), dateComponent, CPTimeZoneNameStyleDaylightSaving);
                if (!timeZoneseconds)
                    timeZoneseconds = (self.isa.method_msgSend["_secondsFromTimeZoneDefaultFormatString:"] || _objj_forward)(self, (self.isa.method_dtable["_secondsFromTimeZoneDefaultFormatString:"], "_secondsFromTimeZoneDefaultFormatString:"), dateComponent);
                if (!timeZoneseconds)
                    return nil;
                timeZoneseconds = timeZoneseconds + 60 * 60;
                break;
            case "Z":
                timeZoneseconds = (self.isa.method_msgSend["_secondsFromTimeZoneDefaultFormatString:"] || _objj_forward)(self, (self.isa.method_dtable["_secondsFromTimeZoneDefaultFormatString:"], "_secondsFromTimeZoneDefaultFormatString:"), dateComponent);
                if (!timeZoneseconds)
                    return nil;
                timeZoneseconds = timeZoneseconds + 60 * 60;
                break;
            case "v":
                if (length <= 3)
                    timeZoneseconds = (self.isa.method_msgSend["_secondsFromTimeZoneString:style:"] || _objj_forward)(self, (self.isa.method_dtable["_secondsFromTimeZoneString:style:"], self.isa.method_dtable["_secondsFromTimeZoneString:style:"], "_secondsFromTimeZoneString:style:"), dateComponent, CPTimeZoneNameStyleShortGeneric);
                else
                    timeZoneseconds = (self.isa.method_msgSend["_secondsFromTimeZoneString:style:"] || _objj_forward)(self, (self.isa.method_dtable["_secondsFromTimeZoneString:style:"], self.isa.method_dtable["_secondsFromTimeZoneString:style:"], "_secondsFromTimeZoneString:style:"), dateComponent, CPTimeZoneNameStyleGeneric);
                if (!timeZoneseconds && length == 4)
                    timeZoneseconds = (self.isa.method_msgSend["_secondsFromTimeZoneDefaultFormatString:"] || _objj_forward)(self, (self.isa.method_dtable["_secondsFromTimeZoneDefaultFormatString:"], "_secondsFromTimeZoneDefaultFormatString:"), dateComponent);
                if (!timeZoneseconds)
                    return nil;
                timeZoneseconds = timeZoneseconds + 60 * 60;
                break;
            case "V":
                if (length <= 3)
                    timeZoneseconds = (self.isa.method_msgSend["_secondsFromTimeZoneString:style:"] || _objj_forward)(self, (self.isa.method_dtable["_secondsFromTimeZoneString:style:"], self.isa.method_dtable["_secondsFromTimeZoneString:style:"], "_secondsFromTimeZoneString:style:"), dateComponent, CPTimeZoneNameStyleShortStandard);
                else
                    timeZoneseconds = (self.isa.method_msgSend["_secondsFromTimeZoneString:style:"] || _objj_forward)(self, (self.isa.method_dtable["_secondsFromTimeZoneString:style:"], self.isa.method_dtable["_secondsFromTimeZoneString:style:"], "_secondsFromTimeZoneString:style:"), dateComponent, CPTimeZoneNameStyleStandard);
                if (!timeZoneseconds)
                    timeZoneseconds = (self.isa.method_msgSend["_secondsFromTimeZoneDefaultFormatString:"] || _objj_forward)(self, (self.isa.method_dtable["_secondsFromTimeZoneDefaultFormatString:"], "_secondsFromTimeZoneDefaultFormatString:"), dateComponent);
                if (!timeZoneseconds)
                    return nil;
                timeZoneseconds = timeZoneseconds + 60 * 60;
                break;
default:
                CPLog.warn("No pattern found for " + token);
                return nil;
        }
    }
    if (dayOfYear)
    {
        var tmpDate = new Date();
        tmpDate.setFullYear(dateArray[0]);
        tmpDate.setMonth(0);
        tmpDate.setDate(dayOfYear);
        dateArray[1] = tmpDate.getMonth() + 1;
        dateArray[2] = tmpDate.getDate();
    }
    if (weekOfMonth)
        dateArray[2] = (weekOfMonth - 1) * 7 + 1;
    if (weekOfYear)
    {
        var tmpDate = new Date();
        tmpDate.setFullYear(dateArray[0]);
        tmpDate.setMonth(0);
        tmpDate.setDate(1);
        while (tmpDate.getDay() != 0)
            tmpDate.setDate(tmpDate.getDate() + 1);
        tmpDate.setDate(tmpDate.getDate() + (weekOfYear - 1) * 7);
        dateArray[1] = tmpDate.getMonth() + 1;
        dateArray[2] = tmpDate.getDate() - 1;
    }
    var tmpDate = new Date();
    tmpDate.setMonth(dateArray[1] - 1);
    tmpDate.setFullYear(dateArray[0]);
    if (dateArray[2] <= 0 || dateArray[2] > (tmpDate == null ? null : (tmpDate.isa.method_msgSend["_daysInMonth"] || _objj_forward)(tmpDate, (tmpDate.isa.method_dtable["_daysInMonth"], "_daysInMonth"))))
        return nil;
    if (isPM)
        dateArray[3] += 12;
    if (isNaN(parseInt(dateArray[0])) || isNaN(parseInt(dateArray[1])) || isNaN(parseInt(dateArray[2])) || isNaN(parseInt(dateArray[3])) || isNaN(parseInt(dateArray[4])) || isNaN(parseInt(dateArray[5])) || isNaN(parseInt(dateArray[6])))
        return nil;
    var dateResult = ((___r1 = (CPDate.isa.method_msgSend["alloc"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithString:"] || _objj_forward)(___r1, "initWithString:", (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%04d-%02d-%02d %02d:%02d:%02d %s", dateArray[0], dateArray[1], dateArray[2], dateArray[3], dateArray[4], dateArray[5], dateArray[6])));
    dateResult.setSeconds(dateResult.getSeconds() - timeZoneseconds + 60 * 60);
    return dateResult;
    var ___r1;
}

,["CPDate","CPArray","CPArray"]), new objj_method(sel_getUid("_stringValueForValue:length:"), function $CPDateFormatter___stringValueForValue_length_(self, _cmd, aValue, length)
{
    var string = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%i", aValue);
    if ((string == null ? null : (string.isa.method_msgSend["length"] || _objj_forward)(string, (string.isa.method_dtable["length"], "length"))) == length)
        return string;
    if ((string == null ? null : (string.isa.method_msgSend["length"] || _objj_forward)(string, (string.isa.method_dtable["length"], "length"))) > length)
        return (string == null ? null : (string.isa.method_msgSend["substringFromIndex:"] || _objj_forward)(string, (string.isa.method_dtable["substringFromIndex:"], "substringFromIndex:"), (string == null ? null : (string.isa.method_msgSend["length"] || _objj_forward)(string, (string.isa.method_dtable["length"], "length"))) - length));
    while ((string == null ? null : (string.isa.method_msgSend["length"] || _objj_forward)(string, (string.isa.method_dtable["length"], "length"))) < length)
        string = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "0%s", string);
    return string;
}

,["CPString","id","int"]), new objj_method(sel_getUid("_isAmericanFormat"), function $CPDateFormatter___isAmericanFormat(self, _cmd)
{
    return ((___r1 = ((___r2 = self._locale), ___r2 == null ? null : (___r2.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r2, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleCountryCode))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqualToString:"] || _objj_forward)(___r1, "isEqualToString:", "US"));
    var ___r1, ___r2;
}

,["BOOL"]), new objj_method(sel_getUid("_isEnglishFormat"), function $CPDateFormatter___isEnglishFormat(self, _cmd)
{
    return ((___r1 = ((___r2 = self._locale), ___r2 == null ? null : (___r2.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r2, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqualToString:"] || _objj_forward)(___r1, "isEqualToString:", "en"));
    var ___r1, ___r2;
}

,["BOOL"]), new objj_method(sel_getUid("_secondsFromTimeZoneDefaultFormatString:"), function $CPDateFormatter___secondsFromTimeZoneDefaultFormatString_(self, _cmd, aTimeZoneFormatString)
{
    var format = new RegExp("\\w*([HPG-GMT])?([+-])(\\d{1,2})([:])?(\\d{2})\\w*"),
        result = aTimeZoneFormatString.match(new RegExp(format)),
        seconds = 0;
    if (!result)
        return nil;
    seconds = result[3] * 60 * 60 + result[5] * 60;
    if (((___r1 = result[2]), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqualToString:"] || _objj_forward)(___r1, "isEqualToString:", "-")))
        seconds = -seconds;
    return seconds;
    var ___r1;
}

,["int","CPString"]), new objj_method(sel_getUid("_secondsFromTimeZoneString:style:"), function $CPDateFormatter___secondsFromTimeZoneString_style_(self, _cmd, aTimeZoneString, aStyle)
{
    var timeZone = (CPTimeZone.isa.method_msgSend["_timeZoneFromString:style:locale:"] || _objj_forward)(CPTimeZone, (CPTimeZone.isa.method_dtable["_timeZoneFromString:style:locale:"], CPTimeZone.isa.method_dtable["_timeZoneFromString:style:locale:"], CPTimeZone.isa.method_dtable["_timeZoneFromString:style:locale:"], "_timeZoneFromString:style:locale:"), aTimeZoneString, aStyle, self._locale);
    if (!timeZone)
        return nil;
    return (timeZone == null ? null : (timeZone.isa.method_msgSend["secondsFromGMT"] || _objj_forward)(timeZone, (timeZone.isa.method_dtable["secondsFromGMT"], "secondsFromGMT")));
}

,["int","CPString","NSTimeZoneNameStyle"]), new objj_method(sel_getUid("_lastIndexMatchedString:token:index:"), function $CPDateFormatter___lastIndexMatchedString_token_index_(self, _cmd, aString, aToken, anIndex)
{
    var character = (aToken == null ? null : (aToken.isa.method_msgSend["characterAtIndex:"] || _objj_forward)(aToken, (aToken.isa.method_dtable["characterAtIndex:"], "characterAtIndex:"), 0)),
        length = (aToken == null ? null : (aToken.isa.method_msgSend["length"] || _objj_forward)(aToken, (aToken.isa.method_dtable["length"], "length"))),
        targetedArray,
        format = new RegExp("\\w*([HPG-GMT])?([+-])(\\d{1,2})([:])?(\\d{2})\\w*"),
        result = aString.match(new RegExp(format));
    switch(character) {
        case "Q":
            if (length == 3)
                targetedArray = (self.isa.method_msgSend["shortQuarterSymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortQuarterSymbols"], "shortQuarterSymbols"));
            if (length >= 4)
                targetedArray = (self.isa.method_msgSend["quarterSymbols"] || _objj_forward)(self, (self.isa.method_dtable["quarterSymbols"], "quarterSymbols"));
            break;
        case "q":
            if (length == 3)
                targetedArray = (self.isa.method_msgSend["shortStandaloneQuarterSymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortStandaloneQuarterSymbols"], "shortStandaloneQuarterSymbols"));
            if (length >= 4)
                targetedArray = (self.isa.method_msgSend["standaloneQuarterSymbols"] || _objj_forward)(self, (self.isa.method_dtable["standaloneQuarterSymbols"], "standaloneQuarterSymbols"));
            break;
        case "M":
            if (length == 3)
                targetedArray = (self.isa.method_msgSend["shortMonthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortMonthSymbols"], "shortMonthSymbols"));
            if (length == 4)
                targetedArray = (self.isa.method_msgSend["monthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["monthSymbols"], "monthSymbols"));
            if (length >= 5)
                targetedArray = (self.isa.method_msgSend["veryShortMonthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["veryShortMonthSymbols"], "veryShortMonthSymbols"));
            break;
        case "L":
            if (length == 3)
                targetedArray = (self.isa.method_msgSend["shortStandaloneMonthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortStandaloneMonthSymbols"], "shortStandaloneMonthSymbols"));
            if (length == 4)
                targetedArray = (self.isa.method_msgSend["standaloneMonthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["standaloneMonthSymbols"], "standaloneMonthSymbols"));
            if (length >= 5)
                targetedArray = (self.isa.method_msgSend["veryShortStandaloneMonthSymbols"] || _objj_forward)(self, (self.isa.method_dtable["veryShortStandaloneMonthSymbols"], "veryShortStandaloneMonthSymbols"));
            break;
        case "E":
            if (length <= 3)
                targetedArray = (self.isa.method_msgSend["shortWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortWeekdaySymbols"], "shortWeekdaySymbols"));
            if (length == 4)
                targetedArray = (self.isa.method_msgSend["weekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["weekdaySymbols"], "weekdaySymbols"));
            if (length >= 5)
                targetedArray = (self.isa.method_msgSend["veryShortWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["veryShortWeekdaySymbols"], "veryShortWeekdaySymbols"));
            break;
        case "e":
            if (length == 3)
                targetedArray = (self.isa.method_msgSend["shortWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortWeekdaySymbols"], "shortWeekdaySymbols"));
            if (length == 4)
                targetedArray = (self.isa.method_msgSend["weekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["weekdaySymbols"], "weekdaySymbols"));
            if (length >= 5)
                targetedArray = (self.isa.method_msgSend["veryShortWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["veryShortWeekdaySymbols"], "veryShortWeekdaySymbols"));
            break;
        case "c":
            if (length == 3)
                targetedArray = (self.isa.method_msgSend["shortStandaloneWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["shortStandaloneWeekdaySymbols"], "shortStandaloneWeekdaySymbols"));
            if (length == 4)
                targetedArray = (self.isa.method_msgSend["standaloneWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["standaloneWeekdaySymbols"], "standaloneWeekdaySymbols"));
            if (length >= 5)
                targetedArray = (self.isa.method_msgSend["veryShortStandaloneWeekdaySymbols"] || _objj_forward)(self, (self.isa.method_dtable["veryShortStandaloneWeekdaySymbols"], "veryShortStandaloneWeekdaySymbols"));
            break;
        case "a":
            targetedArray = [(self.isa.method_msgSend["PMSymbol"] || _objj_forward)(self, (self.isa.method_dtable["PMSymbol"], "PMSymbol")), (self.isa.method_msgSend["AMSymbol"] || _objj_forward)(self, (self.isa.method_dtable["AMSymbol"], "AMSymbol"))];
            break;
        case "z":
            if (length <= 3)
                targetedArray = (CPTimeZone.isa.method_msgSend["_namesForStyle:locale:"] || _objj_forward)(CPTimeZone, (CPTimeZone.isa.method_dtable["_namesForStyle:locale:"], CPTimeZone.isa.method_dtable["_namesForStyle:locale:"], "_namesForStyle:locale:"), CPTimeZoneNameStyleShortDaylightSaving, self._locale);
            else
                targetedArray = (CPTimeZone.isa.method_msgSend["_namesForStyle:locale:"] || _objj_forward)(CPTimeZone, (CPTimeZone.isa.method_dtable["_namesForStyle:locale:"], CPTimeZone.isa.method_dtable["_namesForStyle:locale:"], "_namesForStyle:locale:"), CPTimeZoneNameStyleDaylightSaving, self._locale);
            if (result)
                return anIndex + (result == null ? null : (result.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(result, (result.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), 0)).length;
            break;
        case "Z":
            if (result)
                return anIndex + (result == null ? null : (result.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(result, (result.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), 0)).length;
            return CPNotFound;
        case "v":
            if (length == 1)
                targetedArray = (CPTimeZone.isa.method_msgSend["_namesForStyle:locale:"] || _objj_forward)(CPTimeZone, (CPTimeZone.isa.method_dtable["_namesForStyle:locale:"], CPTimeZone.isa.method_dtable["_namesForStyle:locale:"], "_namesForStyle:locale:"), CPTimeZoneNameStyleShortGeneric, self._locale);
            else if (length == 4)
                targetedArray = (CPTimeZone.isa.method_msgSend["_namesForStyle:locale:"] || _objj_forward)(CPTimeZone, (CPTimeZone.isa.method_dtable["_namesForStyle:locale:"], CPTimeZone.isa.method_dtable["_namesForStyle:locale:"], "_namesForStyle:locale:"), CPTimeZoneNameStyleGeneric, self._locale);
            if (result)
                return anIndex + (result == null ? null : (result.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(result, (result.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), 0)).length;
            break;
        case "V":
            if (length == 1)
                targetedArray = (CPTimeZone.isa.method_msgSend["_namesForStyle:locale:"] || _objj_forward)(CPTimeZone, (CPTimeZone.isa.method_dtable["_namesForStyle:locale:"], CPTimeZone.isa.method_dtable["_namesForStyle:locale:"], "_namesForStyle:locale:"), CPTimeZoneNameStyleShortStandard, self._locale);
            if (result)
                return anIndex + (result == null ? null : (result.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(result, (result.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), 0)).length;
            break;
default:
            CPLog.warn("No pattern found for " + aToken);
            return CPNotFound;
    }
    for (var i = 0; i < (targetedArray == null ? null : (targetedArray.isa.method_msgSend["count"] || _objj_forward)(targetedArray, (targetedArray.isa.method_dtable["count"], "count"))); i++)
    {
        var currentObject = (targetedArray == null ? null : (targetedArray.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(targetedArray, (targetedArray.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i)),
            range = (aString == null ? null : (aString.isa.method_msgSend["rangeOfString:"] || _objj_forward)(aString, (aString.isa.method_dtable["rangeOfString:"], "rangeOfString:"), currentObject));
        if (range.length == 0)
            continue;
        character = (aString == null ? null : (aString.isa.method_msgSend["characterAtIndex:"] || _objj_forward)(aString, (aString.isa.method_dtable["characterAtIndex:"], "characterAtIndex:"), anIndex + range.length));
        if ((character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), "'")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), ",")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), ":")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), "/")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), "-")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), " ")) || (character == null ? null : (character.isa.method_msgSend["isEqualToString:"] || _objj_forward)(character, (character.isa.method_dtable["isEqualToString:"], "isEqualToString:"), "")))
            return anIndex + range.length;
    }
    return CPNotFound;
}

,["int","CPString","CPString","id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("initialize"), function $CPDateFormatter__initialize(self, _cmd)
{
    if (self !== (CPDateFormatter.isa.method_msgSend["class"] || _objj_forward)(CPDateFormatter, (CPDateFormatter.isa.method_dtable["class"], "class")))
        return;
    relativeDateFormating = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", [["demain", 1, "apr" + String.fromCharCode(233) + "s-demain", 2, "apr" + String.fromCharCode(233) + "s-apr" + String.fromCharCode(233) + "s-demain", 3, "hier", -1, "avant-hier", -2, "avant-avant-hier", -3], ["tomorrow", 1, "yesterday", -1], [], []], ["fr", "en", "de", "es"]));
    patternStringTokens = ["QQQ", "qqq", "QQQQ", "qqqq", "MMM", "MMMM", "LLL", "LLLL", "E", "EE", "EEE", "eee", "eeee", "eeeee", "a", "z", "zz", "zzz", "zzzz", "Z", "ZZ", "ZZZ", "ZZZZ", "ZZZZZ", "v", "vv", "vvv", "vvvv", "V", "VV", "VVV", "VVVV"];
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("localizedStringFromDate:dateStyle:timeStyle:"), function $CPDateFormatter__localizedStringFromDate_dateStyle_timeStyle_(self, _cmd, date, dateStyle, timeStyle)
{
    var formatter = ((___r1 = (CPDateFormatter.isa.method_msgSend["alloc"] || _objj_forward)(CPDateFormatter, (CPDateFormatter.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    (formatter == null ? null : (formatter.isa.method_msgSend["setFormatterBehavior:"] || _objj_forward)(formatter, (formatter.isa.method_dtable["setFormatterBehavior:"], "setFormatterBehavior:"), CPDateFormatterBehavior10_4));
    (formatter == null ? null : (formatter.isa.method_msgSend["setDateStyle:"] || _objj_forward)(formatter, (formatter.isa.method_dtable["setDateStyle:"], "setDateStyle:"), dateStyle));
    (formatter == null ? null : (formatter.isa.method_msgSend["setTimeStyle:"] || _objj_forward)(formatter, (formatter.isa.method_dtable["setTimeStyle:"], "setTimeStyle:"), timeStyle));
    return (formatter == null ? null : (formatter.isa.method_msgSend["stringForObjectValue:"] || _objj_forward)(formatter, (formatter.isa.method_dtable["stringForObjectValue:"], "stringForObjectValue:"), date));
    var ___r1;
}

,["CPString","CPDate","CPDateFormatterStyle","CPDateFormatterStyle"]), new objj_method(sel_getUid("dateFormatFromTemplate:options:locale:"), function $CPDateFormatter__dateFormatFromTemplate_options_locale_(self, _cmd, template, opts, locale)
{
}

,["CPString","CPString","CPUInteger","CPLocale"]), new objj_method(sel_getUid("defaultFormatterBehavior"), function $CPDateFormatter__defaultFormatterBehavior(self, _cmd)
{
    return defaultDateFormatterBehavior;
}

,["CPDateFormatterBehavior"]), new objj_method(sel_getUid("setDefaultFormatterBehavior:"), function $CPDateFormatter__setDefaultFormatterBehavior_(self, _cmd, behavior)
{
    defaultDateFormatterBehavior = behavior;
}

,["void","CPDateFormatterBehavior"])]);
}
var CPDateFormatterDateStyleKey = "CPDateFormatterDateStyle",
    CPDateFormatterTimeStyleKey = "CPDateFormatterTimeStyleKey",
    CPDateFormatterFormatterBehaviorKey = "CPDateFormatterFormatterBehaviorKey",
    CPDateFormatterDoseRelativeDateFormattingKey = "CPDateFormatterDoseRelativeDateFormattingKey",
    CPDateFormatterDateFormatKey = "CPDateFormatterDateFormatKey",
    CPDateFormatterAllowNaturalLanguageKey = "CPDateFormatterAllowNaturalLanguageKey",
    CPDateFormatterLocaleKey = "CPDateFormatterLocaleKey";
{
var the_class = objj_getClass("CPDateFormatter")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPDateFormatter\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPDateFormatter__initWithCoder_(self, _cmd, aCoder)
{
    self = (objj_getClass("CPDateFormatter").super_class.method_dtable["initWithCoder:"] || _objj_forward)(self, "initWithCoder:", aCoder);
    if (self)
    {
        self._allowNaturalLanguage = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPDateFormatterAllowNaturalLanguageKey));
        self._dateFormat = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPDateFormatterDateFormatKey));
        self._dateStyle = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPDateFormatterDateStyleKey));
        self._doesRelativeDateFormatting = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPDateFormatterDoseRelativeDateFormattingKey));
        self._formatterBehavior = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPDateFormatterFormatterBehaviorKey));
        self._locale = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPDateFormatterLocaleKey));
        self._timeStyle = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPDateFormatterTimeStyleKey));
    }
    (self == null ? null : (self.isa.method_msgSend["_init"] || _objj_forward)(self, (self.isa.method_dtable["_init"], "_init")));
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPDateFormatter__encodeWithCoder_(self, _cmd, aCoder)
{
    (objj_getClass("CPDateFormatter").super_class.method_dtable["encodeWithCoder:"] || _objj_forward)(self, "encodeWithCoder:", aCoder);
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._allowNaturalLanguage, CPDateFormatterAllowNaturalLanguageKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._dateStyle, CPDateFormatterDateStyleKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._dateFormat, CPDateFormatterDateFormatKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._doesRelativeDateFormatting, CPDateFormatterDoseRelativeDateFormattingKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._formatterBehavior, CPDateFormatterFormatterBehaviorKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._locale, CPDateFormatterLocaleKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._timeStyle, CPDateFormatterTimeStyleKey));
}

,["void","CPCoder"])]);
}
{
var the_class = objj_getClass("CPDate")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPDate\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("_dateWithTimeZone:"), function $CPDate___dateWithTimeZone_(self, _cmd, aTimeZone)
{
    if (!aTimeZone)
        return;
    self.setSeconds(self.getSeconds() - (aTimeZone == null ? null : (aTimeZone.isa.method_msgSend["secondsFromGMTForDate:"] || _objj_forward)(aTimeZone, (aTimeZone.isa.method_dtable["secondsFromGMTForDate:"], "secondsFromGMTForDate:"), self)));
    self.setSeconds(self.getSeconds() + (aTimeZone == null ? null : (aTimeZone.isa.method_msgSend["secondsFromGMT"] || _objj_forward)(aTimeZone, (aTimeZone.isa.method_dtable["secondsFromGMT"], "secondsFromGMT"))));
}

,["void","CPTimeZone"])]);
}
p;17;CPURLConnection.jt;54502;@STATIC;1.0;i;8;CPData.ji;10;CPObject.ji;11;CPRunLoop.ji;14;CPURLRequest.ji;15;CPURLResponse.ji;18;CPOperationQueue.ji;13;CPOperation.jS;29684;t;24667;

objj_executeFile("CPData.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPRunLoop.j", YES);objj_executeFile("CPURLRequest.j", YES);objj_executeFile("CPURLResponse.j", YES);objj_executeFile("CPOperationQueue.j", YES);objj_executeFile("CPOperation.j", YES);{var the_protocol = objj_allocateProtocol("CPURLConnectionDelegate");
var aProtocol = objj_getProtocol("CPObject");
if (!aProtocol) throw new SyntaxError("*** Could not find definition for protocol \"CPURLConnectionDelegate\"");
protocol_addProtocol(the_protocol, aProtocol);
objj_registerProtocol(the_protocol);
protocol_addMethodDescriptions(the_protocol, [new objj_method(sel_getUid("connection:didFailWithError:"), Nil
,["void","CPURLConnection","CPException"]), new objj_method(sel_getUid("connection:didReceiveData:"), Nil
,["void","CPURLConnection","CPString"]), new objj_method(sel_getUid("connection:didReceiveResponse:"), Nil
,["void","CPURLConnection","CPString"]), new objj_method(sel_getUid("connectionDidFinishLoading:"), Nil
,["void","CPURLConnection"]), new objj_method(sel_getUid("connectionDidReceiveAuthenticationChallenge:"), Nil
,["void","CPURLConnection"])], true, true);
}{var the_typedef = objj_allocateTypeDef("HTTPRequest");
objj_registerTypeDef(the_typedef);
}var CPURLConnectionDelegate = nil;

{var the_class = objj_allocateClassPair(CPObject, "CPURLConnection"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_originalRequest", "CPURLRequest"), new objj_ivar("_request", "CPURLRequest"), new objj_ivar("_delegate", "id"), new objj_ivar("_isCanceled", "BOOL"), new objj_ivar("_isLocalFileConnection", "BOOL"), new objj_ivar("_HTTPRequest", "HTTPRequest"), new objj_ivar("_operationQueue", "CPOperationQueue"), new objj_ivar("_connectionOperation", "CPOperation")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("originalRequest"), function $CPURLConnection__originalRequest(self, _cmd)
{
    return self._originalRequest;
}

,["CPURLRequest"]), new objj_method(sel_getUid("currentRequest"), function $CPURLConnection__currentRequest(self, _cmd)
{
    return self._request;
}

,["CPURLRequest"]), new objj_method(sel_getUid("operation"), function $CPURLConnection__operation(self, _cmd)
{
    return self._connectionOperation;
}

,["CPOperation"]), new objj_method(sel_getUid("initWithRequest:delegate:startImmediately:"), function $CPURLConnection__initWithRequest_delegate_startImmediately_(self, _cmd, aRequest, aDelegate, shouldStartImmediately)
{
    self = (objj_getClass("CPURLConnection").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._delegate = aDelegate;
        self._operationQueue = nil;
        self._connectionOperation = nil;
        (self == null ? null : (self.isa.method_msgSend["_initWithRequest:"] || _objj_forward)(self, (self.isa.method_dtable["_initWithRequest:"], "_initWithRequest:"), aRequest));
    }
    if (shouldStartImmediately)
        (self == null ? null : (self.isa.method_msgSend["start"] || _objj_forward)(self, (self.isa.method_dtable["start"], "start")));
    return self;
}

,["id","CPURLRequest","id","BOOL"]), new objj_method(sel_getUid("_initWithRequest:"), function $CPURLConnection___initWithRequest_(self, _cmd, aRequest)
{
    self._request = aRequest;
    self._originalRequest = (aRequest == null ? null : (aRequest.isa.method_msgSend["copy"] || _objj_forward)(aRequest, (aRequest.isa.method_dtable["copy"], "copy")));
    self._isCanceled = NO;
    var URL = ((___r1 = self._request), ___r1 == null ? null : (___r1.isa.method_msgSend["URL"] || _objj_forward)(___r1, (self._request.isa.method_dtable["URL"], "URL"))),
        scheme = (URL == null ? null : (URL.isa.method_msgSend["scheme"] || _objj_forward)(URL, (URL.isa.method_dtable["scheme"], "scheme")));
    self._isLocalFileConnection = scheme === "file" || (scheme === "http" || scheme === "https") && window.location && (window.location.protocol === "file:" || window.location.protocol === "app:");
    self._HTTPRequest = new CFHTTPRequest();
    self._HTTPRequest.setTimeout((aRequest == null ? null : (aRequest.isa.method_msgSend["timeoutInterval"] || _objj_forward)(aRequest, (aRequest.isa.method_dtable["timeoutInterval"], "timeoutInterval"))) * 1000);
    self._HTTPRequest.setWithCredentials((aRequest == null ? null : (aRequest.isa.method_msgSend["withCredentials"] || _objj_forward)(aRequest, (aRequest.isa.method_dtable["withCredentials"], "withCredentials"))));
    var ___r1;
}

,["void","CPURLRequest"]), new objj_method(sel_getUid("_initWithRequest:queue:completionHandler:"), function $CPURLConnection___initWithRequest_queue_completionHandler_(self, _cmd, aRequest, aQueue, aHandler)
{
    self = (objj_getClass("CPURLConnection").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._delegate = nil;
        self._operationQueue = aQueue;
        self._connectionOperation = ((___r1 = (_AsynchronousConnectionOperation == null ? null : (_AsynchronousConnectionOperation.isa.method_msgSend["alloc"] || _objj_forward)(_AsynchronousConnectionOperation, (_AsynchronousConnectionOperation.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithFunction:"] || _objj_forward)(___r1, "initWithFunction:", aHandler));
        (self == null ? null : (self.isa.method_msgSend["_initWithRequest:"] || _objj_forward)(self, (self.isa.method_dtable["_initWithRequest:"], "_initWithRequest:"), aRequest));
        (self == null ? null : (self.isa.method_msgSend["start"] || _objj_forward)(self, (self.isa.method_dtable["start"], "start")));
    }
    return self;
    var ___r1;
}

,["id","CPURLRequest","CPOperationQueue","Function"]), new objj_method(sel_getUid("initWithRequest:delegate:"), function $CPURLConnection__initWithRequest_delegate_(self, _cmd, aRequest, aDelegate)
{
    return (self.isa.method_msgSend["initWithRequest:delegate:startImmediately:"] || _objj_forward)(self, (self.isa.method_dtable["initWithRequest:delegate:startImmediately:"], self.isa.method_dtable["initWithRequest:delegate:startImmediately:"], self.isa.method_dtable["initWithRequest:delegate:startImmediately:"], "initWithRequest:delegate:startImmediately:"), aRequest, aDelegate, YES);
}

,["id","CPURLRequest","id"]), new objj_method(sel_getUid("delegate"), function $CPURLConnection__delegate(self, _cmd)
{
    return self._delegate;
}

,["id"]), new objj_method(sel_getUid("start"), function $CPURLConnection__start(self, _cmd)
{
    self._isCanceled = NO;
    try {
        self._HTTPRequest.open(((___r1 = self._request), ___r1 == null ? null : (___r1.isa.method_msgSend["HTTPMethod"] || _objj_forward)(___r1, (self._request.isa.method_dtable["HTTPMethod"], "HTTPMethod"))), ((___r1 = ((___r2 = self._request), ___r2 == null ? null : (___r2.isa.method_msgSend["URL"] || _objj_forward)(___r2, (self._request.isa.method_dtable["URL"], "URL")))), ___r1 == null ? null : (___r1.isa.method_msgSend["absoluteString"] || _objj_forward)(___r1, "absoluteString")), YES);
        self._HTTPRequest.onreadystatechange =         function()
        {
            (self.isa.method_msgSend["_readyStateDidChange"] || _objj_forward)(self, (self.isa.method_dtable["_readyStateDidChange"], "_readyStateDidChange"));
        };
        self._HTTPRequest.ontimeout =         function()
        {
            (self.isa.method_msgSend["_didTimeout"] || _objj_forward)(self, (self.isa.method_dtable["_didTimeout"], "_didTimeout"));
        };
        var fields = ((___r1 = self._request), ___r1 == null ? null : (___r1.isa.method_msgSend["allHTTPHeaderFields"] || _objj_forward)(___r1, (self._request.isa.method_dtable["allHTTPHeaderFields"], "allHTTPHeaderFields"))),
            key = nil,
            keys = (fields == null ? null : (fields.isa.method_msgSend["keyEnumerator"] || _objj_forward)(fields, (fields.isa.method_dtable["keyEnumerator"], "keyEnumerator")));
        while ((key = (keys == null ? null : (keys.isa.method_msgSend["nextObject"] || _objj_forward)(keys, (keys.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
            self._HTTPRequest.setRequestHeader(key, (fields == null ? null : (fields.isa.method_msgSend["objectForKey:"] || _objj_forward)(fields, (fields.isa.method_dtable["objectForKey:"], "objectForKey:"), key)));
        self._HTTPRequest.send(((___r1 = self._request), ___r1 == null ? null : (___r1.isa.method_msgSend["HTTPBody"] || _objj_forward)(___r1, (self._request.isa.method_dtable["HTTPBody"], "HTTPBody"))));
    }
    catch(anException) {
        (self.isa.method_msgSend["_sendDelegateDidFailWithError:"] || _objj_forward)(self, (self.isa.method_dtable["_sendDelegateDidFailWithError:"], "_sendDelegateDidFailWithError:"), anException);
    }
    var ___r1, ___r2;
}

,["void"]), new objj_method(sel_getUid("_sendDelegateDidFailWithError:"), function $CPURLConnection___sendDelegateDidFailWithError_(self, _cmd, anException)
{
    if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("connection:didFailWithError:"))))
        ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["connection:didFailWithError:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["connection:didFailWithError:"], self._delegate.isa.method_dtable["connection:didFailWithError:"], "connection:didFailWithError:"), self, anException));
    else if (self._connectionOperation !== nil)
        (self.isa.method_msgSend["_connectionOperationDidReceiveResponse:data:error:"] || _objj_forward)(self, (self.isa.method_dtable["_connectionOperationDidReceiveResponse:data:error:"], self.isa.method_dtable["_connectionOperationDidReceiveResponse:data:error:"], self.isa.method_dtable["_connectionOperationDidReceiveResponse:data:error:"], "_connectionOperationDidReceiveResponse:data:error:"), nil, nil, anException);
    var ___r1;
}

,["void","CPException"]), new objj_method(sel_getUid("cancel"), function $CPURLConnection__cancel(self, _cmd)
{
    self._isCanceled = YES;
    try {
        self._HTTPRequest.abort();
        if (self._connectionOperation)
            ((___r1 = self._connectionOperation), ___r1 == null ? null : (___r1.isa.method_msgSend["cancel"] || _objj_forward)(___r1, (self._connectionOperation.isa.method_dtable["cancel"], "cancel")));
    }
    catch(anException) {
    }
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("currentRequest"), function $CPURLConnection__currentRequest(self, _cmd)
{
    return self._request;
}

,["CPURLRequest"]), new objj_method(sel_getUid("isLocalFileConnection"), function $CPURLConnection__isLocalFileConnection(self, _cmd)
{
    return self._isLocalFileConnection;
}

,["BOOL"]), new objj_method(sel_getUid("_didTimeout"), function $CPURLConnection___didTimeout(self, _cmd)
{
    var exception = (CPException.isa.method_msgSend["exceptionWithName:reason:userInfo:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["exceptionWithName:reason:userInfo:"], CPException.isa.method_dtable["exceptionWithName:reason:userInfo:"], CPException.isa.method_dtable["exceptionWithName:reason:userInfo:"], "exceptionWithName:reason:userInfo:"), "Timeout exception", "The request timed out.", (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init")));
    (self.isa.method_msgSend["_sendDelegateDidFailWithError:"] || _objj_forward)(self, (self.isa.method_dtable["_sendDelegateDidFailWithError:"], "_sendDelegateDidFailWithError:"), exception);
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("_readyStateDidChange"), function $CPURLConnection___readyStateDidChange(self, _cmd)
{
    if (self._HTTPRequest.readyState() === CFHTTPRequest.CompleteState && !self._HTTPRequest.isTimeoutRequest())
    {
        var statusCode = self._HTTPRequest.status(),
            URL = ((___r1 = self._request), ___r1 == null ? null : (___r1.isa.method_msgSend["URL"] || _objj_forward)(___r1, (self._request.isa.method_dtable["URL"], "URL")));
        if (statusCode === 401 && (CPURLConnectionDelegate == null ? null : (CPURLConnectionDelegate.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(CPURLConnectionDelegate, (CPURLConnectionDelegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("connectionDidReceiveAuthenticationChallenge:"))))
            (CPURLConnectionDelegate == null ? null : (CPURLConnectionDelegate.isa.method_msgSend["connectionDidReceiveAuthenticationChallenge:"] || _objj_forward)(CPURLConnectionDelegate, (CPURLConnectionDelegate.isa.method_dtable["connectionDidReceiveAuthenticationChallenge:"], "connectionDidReceiveAuthenticationChallenge:"), self));
        else
        {
            var response;
            if (self._isLocalFileConnection)
                response = ((___r1 = (CPURLResponse.isa.method_msgSend["alloc"] || _objj_forward)(CPURLResponse, (CPURLResponse.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithURL:"] || _objj_forward)(___r1, "initWithURL:", URL));
            else
            {
                response = ((___r1 = (CPHTTPURLResponse.isa.method_msgSend["alloc"] || _objj_forward)(CPHTTPURLResponse, (CPHTTPURLResponse.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithURL:"] || _objj_forward)(___r1, "initWithURL:", URL));
                (response == null ? null : (response.isa.method_msgSend["_setStatusCode:"] || _objj_forward)(response, (response.isa.method_dtable["_setStatusCode:"], "_setStatusCode:"), statusCode));
                (response == null ? null : (response.isa.method_msgSend["_setAllResponseHeaders:"] || _objj_forward)(response, (response.isa.method_dtable["_setAllResponseHeaders:"], "_setAllResponseHeaders:"), self._HTTPRequest.getAllResponseHeaders()));
            }
            if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("connection:didReceiveResponse:"))))
                ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["connection:didReceiveResponse:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["connection:didReceiveResponse:"], self._delegate.isa.method_dtable["connection:didReceiveResponse:"], "connection:didReceiveResponse:"), self, response));
            if (!self._isCanceled)
            {
                if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("connection:didReceiveData:"))))
                    ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["connection:didReceiveData:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["connection:didReceiveData:"], self._delegate.isa.method_dtable["connection:didReceiveData:"], "connection:didReceiveData:"), self, self._HTTPRequest.responseText()));
                else if (self._connectionOperation !== nil)
                    (self.isa.method_msgSend["_connectionOperationDidReceiveResponse:data:error:"] || _objj_forward)(self, (self.isa.method_dtable["_connectionOperationDidReceiveResponse:data:error:"], self.isa.method_dtable["_connectionOperationDidReceiveResponse:data:error:"], self.isa.method_dtable["_connectionOperationDidReceiveResponse:data:error:"], "_connectionOperationDidReceiveResponse:data:error:"), response, self._HTTPRequest.responseText(), nil);
                if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("connectionDidFinishLoading:"))))
                    ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["connectionDidFinishLoading:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["connectionDidFinishLoading:"], "connectionDidFinishLoading:"), self));
            }
        }
    }
    ((___r1 = (CPRunLoop.isa.method_msgSend["currentRunLoop"] || _objj_forward)(CPRunLoop, (CPRunLoop.isa.method_dtable["currentRunLoop"], "currentRunLoop"))), ___r1 == null ? null : (___r1.isa.method_msgSend["limitDateForMode:"] || _objj_forward)(___r1, "limitDateForMode:", CPDefaultRunLoopMode));
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("_HTTPRequest"), function $CPURLConnection___HTTPRequest(self, _cmd)
{
    return self._HTTPRequest;
}

,["HTTPRequest"]), new objj_method(sel_getUid("_connectionOperationDidReceiveResponse:data:error:"), function $CPURLConnection___connectionOperationDidReceiveResponse_data_error_(self, _cmd, aResponse, aData, anError)
{
    ((___r1 = self._connectionOperation), ___r1 == null ? null : (___r1.isa.method_msgSend["_setResponse:data:error:"] || _objj_forward)(___r1, (self._connectionOperation.isa.method_dtable["_setResponse:data:error:"], self._connectionOperation.isa.method_dtable["_setResponse:data:error:"], self._connectionOperation.isa.method_dtable["_setResponse:data:error:"], "_setResponse:data:error:"), aResponse, aData, anError));
    if (self._operationQueue)
        ((___r1 = self._operationQueue), ___r1 == null ? null : (___r1.isa.method_msgSend["addOperation:"] || _objj_forward)(___r1, (self._operationQueue.isa.method_dtable["addOperation:"], "addOperation:"), self._connectionOperation));
    else
    {
        ((___r1 = self._connectionOperation), ___r1 == null ? null : (___r1.isa.method_msgSend["main"] || _objj_forward)(___r1, (self._connectionOperation.isa.method_dtable["main"], "main")));
    }
    var ___r1;
}

,["void","CPURLResponse","CPData","CPError"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("setClassDelegate:"), function $CPURLConnection__setClassDelegate_(self, _cmd, delegate)
{
    CPURLConnectionDelegate = delegate;
}

,["void","id"]), new objj_method(sel_getUid("sendSynchronousRequest:returningResponse:"), function $CPURLConnection__sendSynchronousRequest_returningResponse_(self, _cmd, aRequest, aURLResponse)
{
    try {
        var aCFHTTPRequest = new CFHTTPRequest();
        aCFHTTPRequest.setWithCredentials((aRequest == null ? null : (aRequest.isa.method_msgSend["withCredentials"] || _objj_forward)(aRequest, (aRequest.isa.method_dtable["withCredentials"], "withCredentials"))));
        aCFHTTPRequest.open((aRequest == null ? null : (aRequest.isa.method_msgSend["HTTPMethod"] || _objj_forward)(aRequest, (aRequest.isa.method_dtable["HTTPMethod"], "HTTPMethod"))), ((___r1 = (aRequest == null ? null : (aRequest.isa.method_msgSend["URL"] || _objj_forward)(aRequest, (aRequest.isa.method_dtable["URL"], "URL")))), ___r1 == null ? null : (___r1.isa.method_msgSend["absoluteString"] || _objj_forward)(___r1, "absoluteString")), NO);
        var fields = (aRequest == null ? null : (aRequest.isa.method_msgSend["allHTTPHeaderFields"] || _objj_forward)(aRequest, (aRequest.isa.method_dtable["allHTTPHeaderFields"], "allHTTPHeaderFields"))),
            key = nil,
            keys = (fields == null ? null : (fields.isa.method_msgSend["keyEnumerator"] || _objj_forward)(fields, (fields.isa.method_dtable["keyEnumerator"], "keyEnumerator")));
        while ((key = (keys == null ? null : (keys.isa.method_msgSend["nextObject"] || _objj_forward)(keys, (keys.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
            aCFHTTPRequest.setRequestHeader(key, (fields == null ? null : (fields.isa.method_msgSend["objectForKey:"] || _objj_forward)(fields, (fields.isa.method_dtable["objectForKey:"], "objectForKey:"), key)));
        aCFHTTPRequest.send((aRequest == null ? null : (aRequest.isa.method_msgSend["HTTPBody"] || _objj_forward)(aRequest, (aRequest.isa.method_dtable["HTTPBody"], "HTTPBody"))));
        if (!aCFHTTPRequest.success())
            return nil;
        return (CPData.isa.method_msgSend["dataWithRawString:"] || _objj_forward)(CPData, (CPData.isa.method_dtable["dataWithRawString:"], "dataWithRawString:"), aCFHTTPRequest.responseText());
    }
    catch(anException) {
    }
    return nil;
    var ___r1;
}

,["CPData","CPURLRequest","CPURLResponse"]), new objj_method(sel_getUid("sendAsynchronousRequest:queue:completionHandler:"), function $CPURLConnection__sendAsynchronousRequest_queue_completionHandler_(self, _cmd, aRequest, aQueue, aHandler)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["_initWithRequest:queue:completionHandler:"] || _objj_forward)(___r1, "_initWithRequest:queue:completionHandler:", aRequest, aQueue, aHandler));
    var ___r1;
}

,["CPURLConnection","CPURLRequest","CPOperationQueue","Function"]), new objj_method(sel_getUid("connectionWithRequest:delegate:"), function $CPURLConnection__connectionWithRequest_delegate_(self, _cmd, aRequest, aDelegate)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithRequest:delegate:"] || _objj_forward)(___r1, "initWithRequest:delegate:", aRequest, aDelegate));
    var ___r1;
}

,["CPURLConnection","CPURLRequest","id"])]);
}

{var the_class = objj_allocateClassPair(CPOperation, "_AsynchronousConnectionOperation"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_didReceiveResponse", "BOOL"), new objj_ivar("_response", "CPURLResponse"), new objj_ivar("_data", "CPData"), new objj_ivar("_error", "CPError"), new objj_ivar("_operationFunction", "Function")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithFunction:"), function $_AsynchronousConnectionOperation__initWithFunction_(self, _cmd, aFunction)
{
    self = (objj_getClass("_AsynchronousConnectionOperation").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._didReceiveResponse = NO;
        self._response = nil;
        self._data = nil;
        self._error = nil;
        self._operationFunction = aFunction;
    }
    return self;
}

,["id","Function"]), new objj_method(sel_getUid("_setResponse:data:error:"), function $_AsynchronousConnectionOperation___setResponse_data_error_(self, _cmd, aResponse, aData, anError)
{
    self._didReceiveResponse = YES;
    self._response = aResponse;
    self._data = aData;
    self._error = anError;
}

,["void","CPURLResponse","CPData","CPError"]), new objj_method(sel_getUid("main"), function $_AsynchronousConnectionOperation__main(self, _cmd)
{
    self._operationFunction(self._response, self._data, self._error);
}

,["void"]), new objj_method(sel_getUid("isReady"), function $_AsynchronousConnectionOperation__isReady(self, _cmd)
{
    return self._didReceiveResponse && (objj_getClass("_AsynchronousConnectionOperation").super_class.method_dtable["isReady"] || _objj_forward)(self, "isReady");
}

,["BOOL"])]);
}
{
var the_class = objj_getClass("CPURLConnection")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPURLConnection\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("_XMLHTTPRequest"), function $CPURLConnection___XMLHTTPRequest(self, _cmd)
{
    _CPReportLenientDeprecation(self, _cmd, sel_getUid("_HTTPRequest"));
    return (self.isa.method_msgSend["_HTTPRequest"] || _objj_forward)(self, (self.isa.method_dtable["_HTTPRequest"], "_HTTPRequest"));
}

,["HTTPRequest"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("sendSynchronousRequest:returningResponse:error:"), function $CPURLConnection__sendSynchronousRequest_returningResponse_error_(self, _cmd, aRequest, aURLResponse, anError)
{
    _CPReportLenientDeprecation(self, _cmd, sel_getUid("sendSynchronousRequest:returningResponse:"));
    return (self.isa.method_msgSend["sendSynchronousRequest:returningResponse:"] || _objj_forward)(self, (self.isa.method_dtable["sendSynchronousRequest:returningResponse:"], self.isa.method_dtable["sendSynchronousRequest:returningResponse:"], "sendSynchronousRequest:returningResponse:"), aRequest, aURLResponse);
}

,["CPData","CPURLRequest","CPURLResponse","id"])]);
}
p;12;CPURLError.jt;5364;@STATIC;1.0;S;3708;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQVVJMRXJyb3IuaiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLGdCLEdBQXdDLGtCQUF4QztBQUtBLDRCLEdBQXdDLHNCQUF4QztBQUNBLGtDLEdBQXdDLCtCQUF4QztBQUtBLGlCLEdBQXdDLENBQUMsQ0FBekM7QUFDQSxtQixHQUF3QyxvQkFBeEM7QUFDQSxnQixHQUF3QyxpQkFBeEM7QUFDQSxrQixHQUF3QyxtQkFBeEM7QUFDQSx3QixHQUF3Qyx5QkFBeEM7QUFDQSx3QixHQUF3Qyx5QkFBeEM7QUFDQSw2QixHQUF3Qyw4QkFBeEM7QUFDQSwrQixHQUF3QyxnQ0FBeEM7QUFDQSx5QixHQUF3QywwQkFBeEM7QUFDQSw4QixHQUF3QywrQkFBeEM7QUFDQSw2QixHQUF3Qyw4QkFBeEM7QUFDQSxnQyxHQUF3QyxpQ0FBeEM7QUFDQSx1QyxHQUE0Qyx3Q0FBNUM7QUFDQSwyQixHQUF3Qyw0QkFBeEM7QUFDQSxxQyxHQUF3QyxzQ0FBeEM7QUFDQSxvQyxHQUF3QyxxQ0FBeEM7QUFDQSwwQixHQUF3QywyQkFBeEM7QUFDQSw2QixHQUF3Qyw4QkFBeEM7QUFDQSxpQyxHQUF3QyxrQ0FBeEM7QUFDQSw2QixHQUF3Qyw4QkFBeEM7QUFDQSwwQixHQUF3QywyQkFBeEM7QUFDQSx5QixHQUF3QywwQkFBeEM7QUFDQSxpQyxHQUF3QyxrQ0FBeEM7QUFDQSxrQyxHQUF3QyxtQ0FBeEMiLCJmaWxlIjoiQ1BVUkxFcnJvci5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi9Vc2Vycy9kYXZpZC9wcm9ncmFtcy9jYXBwdWNjaW5vL0ZvdW5kYXRpb24vIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKlxuICogIFRoZSBDUFVSTCBFcnJvciBEb21haW5cbiAqL1xuQ1BVUkxFcnJvckRvbWFpbiA9ICAgICAgICAgICAgICAgICAgICAgIEBcIkNQVVJMRXJyb3JEb21haW5cIjtcblxuLypcbiAqICBDUFVSTCBVc2VySW5mbyBFcnJvciBLZXlzXG4gKi9cbkNQVVJMRXJyb3JGYWlsaW5nVVJMRXJyb3JLZXkgPSAgICAgICAgICBAXCJDUEVycm9yRmFpbGluZ1VSTEtleVwiO1xuQ1BVUkxFcnJvckZhaWxpbmdVUkxTdHJpbmdFcnJvcktleSA9ICAgIEBcIkNQVVJMRXJyb3JGYWlsaW5nVVJMU3RyaW5nS2V5XCI7XG5cbi8qXG4gKiAgQ1BVUkwgRXJyb3IgQ29kZXNcbiAqL1xuQ1BVUkxFcnJvclVua25vd24gPSAgICAgICAgICAgICAgICAgICAgIC0xO1xuQ1BVUkxFcnJvckNhbmNlbGxlZCA9ICAgICAgICAgICAgICAgICAgIGtDRlVSTEVycm9yQ2FuY2VsbGVkO1xuQ1BVUkxFcnJvckJhZFVSTCA9ICAgICAgICAgICAgICAgICAgICAgIGtDRlVSTEVycm9yQmFkVVJMO1xuQ1BVUkxFcnJvclRpbWVkT3V0ID0gICAgICAgICAgICAgICAgICAgIGtDRlVSTEVycm9yVGltZWRPdXQ7XG5DUFVSTEVycm9yVW5zdXBwb3J0ZWRVUkwgPSAgICAgICAgICAgICAga0NGVVJMRXJyb3JVbnN1cHBvcnRlZFVSTDtcbkNQVVJMRXJyb3JDYW5ub3RGaW5kSG9zdCA9ICAgICAgICAgICAgICBrQ0ZVUkxFcnJvckNhbm5vdEZpbmRIb3N0O1xuQ1BVUkxFcnJvckNhbm5vdENvbm5lY3RUb0hvc3QgPSAgICAgICAgIGtDRlVSTEVycm9yQ2Fubm90Q29ubmVjdFRvSG9zdDtcbkNQVVJMRXJyb3JOZXR3b3JrQ29ubmVjdGlvbkxvc3QgPSAgICAgICBrQ0ZVUkxFcnJvck5ldHdvcmtDb25uZWN0aW9uTG9zdDtcbkNQVVJMRXJyb3JETlNMb29rdXBGYWlsZWQgPSAgICAgICAgICAgICBrQ0ZVUkxFcnJvckROU0xvb2t1cEZhaWxlZDtcbkNQVVJMRXJyb3JIVFRQVG9vTWFueVJlZGlyZWN0cyA9ICAgICAgICBrQ0ZVUkxFcnJvckhUVFBUb29NYW55UmVkaXJlY3RzO1xuQ1BVUkxFcnJvclJlc291cmNlVW5hdmFpbGFibGUgPSAgICAgICAgIGtDRlVSTEVycm9yUmVzb3VyY2VVbmF2YWlsYWJsZTtcbkNQVVJMRXJyb3JOb3RDb25uZWN0ZWRUb0ludGVybmV0ID0gICAgICBrQ0ZVUkxFcnJvck5vdENvbm5lY3RlZFRvSW50ZXJuZXQ7XG5DUFVSTEVycm9yUmVkaXJlY3RUb05vbkV4aXN0ZW50TG9jYXRpb24gPSAgIGtDRlVSTEVycm9yUmVkaXJlY3RUb05vbkV4aXN0ZW50TG9jYXRpb247XG5DUFVSTEVycm9yQmFkU2VydmVyUmVzcG9uc2UgPSAgICAgICAgICAga0NGVVJMRXJyb3JCYWRTZXJ2ZXJSZXNwb25zZTtcbkNQVVJMRXJyb3JVc2VyQ2FuY2VsbGVkQXV0aGVudGljYXRpb24gPSBrQ0ZVUkxFcnJvclVzZXJDYW5jZWxsZWRBdXRoZW50aWNhdGlvbjtcbkNQVVJMRXJyb3JVc2VyQXV0aGVudGljYXRpb25SZXF1aXJlZCA9ICBrQ0ZVUkxFcnJvclVzZXJBdXRoZW50aWNhdGlvblJlcXVpcmVkO1xuQ1BVUkxFcnJvclplcm9CeXRlUmVzb3VyY2UgPSAgICAgICAgICAgIGtDRlVSTEVycm9yWmVyb0J5dGVSZXNvdXJjZTtcbkNQVVJMRXJyb3JDYW5ub3REZWNvZGVSYXdEYXRhID0gICAgICAgICBrQ0ZVUkxFcnJvckNhbm5vdERlY29kZVJhd0RhdGE7XG5DUFVSTEVycm9yQ2Fubm90RGVjb2RlQ29udGVudERhdGEgPSAgICAga0NGVVJMRXJyb3JDYW5ub3REZWNvZGVDb250ZW50RGF0YTtcbkNQVVJMRXJyb3JDYW5ub3RQYXJzZVJlc3BvbnNlID0gICAgICAgICBrQ0ZVUkxFcnJvckNhbm5vdFBhcnNlUmVzcG9uc2U7XG5DUFVSTEVycm9yRmlsZURvZXNOb3RFeGlzdCA9ICAgICAgICAgICAga0NGVVJMRXJyb3JGaWxlRG9lc05vdEV4aXN0O1xuQ1BVUkxFcnJvckZpbGVJc0RpcmVjdG9yeSA9ICAgICAgICAgICAgIGtDRlVSTEVycm9yRmlsZUlzRGlyZWN0b3J5O1xuQ1BVUkxFcnJvck5vUGVybWlzc2lvbnNUb1JlYWRGaWxlID0gICAgIGtDRlVSTEVycm9yTm9QZXJtaXNzaW9uc1RvUmVhZEZpbGU7XG5DUFVSTEVycm9yRGF0YUxlbmd0aEV4Y2VlZHNNYXhpbXVtID0gICAga0NGVVJMRXJyb3JEYXRhTGVuZ3RoRXhjZWVkc01heGltdW07Il19t;1630;

CPURLErrorDomain = "CPURLErrorDomain";
CPURLErrorFailingURLErrorKey = "CPErrorFailingURLKey";
CPURLErrorFailingURLStringErrorKey = "CPURLErrorFailingURLStringKey";
CPURLErrorUnknown = -1;
CPURLErrorCancelled = kCFURLErrorCancelled;
CPURLErrorBadURL = kCFURLErrorBadURL;
CPURLErrorTimedOut = kCFURLErrorTimedOut;
CPURLErrorUnsupportedURL = kCFURLErrorUnsupportedURL;
CPURLErrorCannotFindHost = kCFURLErrorCannotFindHost;
CPURLErrorCannotConnectToHost = kCFURLErrorCannotConnectToHost;
CPURLErrorNetworkConnectionLost = kCFURLErrorNetworkConnectionLost;
CPURLErrorDNSLookupFailed = kCFURLErrorDNSLookupFailed;
CPURLErrorHTTPTooManyRedirects = kCFURLErrorHTTPTooManyRedirects;
CPURLErrorResourceUnavailable = kCFURLErrorResourceUnavailable;
CPURLErrorNotConnectedToInternet = kCFURLErrorNotConnectedToInternet;
CPURLErrorRedirectToNonExistentLocation = kCFURLErrorRedirectToNonExistentLocation;
CPURLErrorBadServerResponse = kCFURLErrorBadServerResponse;
CPURLErrorUserCancelledAuthentication = kCFURLErrorUserCancelledAuthentication;
CPURLErrorUserAuthenticationRequired = kCFURLErrorUserAuthenticationRequired;
CPURLErrorZeroByteResource = kCFURLErrorZeroByteResource;
CPURLErrorCannotDecodeRawData = kCFURLErrorCannotDecodeRawData;
CPURLErrorCannotDecodeContentData = kCFURLErrorCannotDecodeContentData;
CPURLErrorCannotParseResponse = kCFURLErrorCannotParseResponse;
CPURLErrorFileDoesNotExist = kCFURLErrorFileDoesNotExist;
CPURLErrorFileIsDirectory = kCFURLErrorFileIsDirectory;
CPURLErrorNoPermissionsToReadFile = kCFURLErrorNoPermissionsToReadFile;
CPURLErrorDataLengthExceedsMaximum = kCFURLErrorDataLengthExceedsMaximum;
p;15;CPURLResponse.jt;8737;@STATIC;1.0;i;10;CPObject.ji;7;CPURL.jS;5644;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQVVJMUmVzcG9uc2UuaiJdLCJuYW1lcyI6WyJzZWxmIl0sIm1hcHBpbmdzIjoiOztBQXNCQSxrQixrQkFDQSxrQixlQWVBO0FBQUE7QUFBQSwyQiwyQkFBQSw4Qjs2QkFLQSw0QixrRUFBeUIsSTtBQUN6QjtJQUNJQSxJLEdBQU8sQywwQ0FBQSxnQixJQUFBLGtDQUFQO0lBRUEsSUFBSUEsSUFBSjtRQUNJLFMsR0FBTyxJQUFQO0lBRUosTSxDQUFPQSxJO0FBTlgsQzs7a0JBU0EsNEI7QUFDQTtJQUNJLE0sQ0FBTyxTO0FBRFgsQzs7OztBQWtCQTtBQUFBO0FBQUEsMkIsMkJBQUEsbUMsRUFBQSxnRCxFQUFBLGlEOzZCQTZCQSw0Qiw0RUFBNEIsVztBQUM1QjtJQUNJLGdCLEdBQWMsV0FBZDtBQURKLEM7O2tCQU9BLDRCO0FBQ0E7SUFDSSxNLENBQU8sZ0I7QUFEWCxDOztXQUlBLDRCLDRGQUF5QyxxQjtBQUN6QztJQUNJLHdCLEdBQXNCLHFCQUF0QjtBQURKLEM7O3VCQU9BLDRCO0FBQ0E7SUFFSSxJQUFJLENBQUMscUJBQUw7UUFDSSxxQixHQUFtQixVQUFDLENBQUNBLElBQUQsK0NBQUNBLElBQUQsR0FBTSwrQkFBTixXQUFELHVIQUErQix3QkFBL0IsRUFBbkI7SUFFSixNLENBQU8scUI7O0FBTFgsQzs7OzhCQTVDQSw0QixnRkFBMkMsYTtBQUMzQztJQUNJLElBQUksQyxHQUFJLENBQUMsbUJBQUQsb0RBQUMsbUJBQUQsR0FBcUIsbURBQXJCLGdCQUFSO0lBRUEsSUFBSSxhQUFKO0lBQ0E7UUFDSSxJQUFJLFcsR0FBYyxjQUFjLEssQ0FBTSxNO1lBQ2xDLEssR0FBUSxZQUFZLE1BRHhCO1FBR0EsT0FBTyxLO1FBQ1A7WUFDSSxJQUFJLFUsR0FBYSxZQUFZLEs7Z0JBQ3pCLEssR0FBUSxXQUFXLE8sQ0FBUSxJLENBRC9CO1lBRUEsSUFBSSxLLENBQUEsRyxDQUFVLFVBQWQ7Z0JBQ0ksQ0FBQyxDQUFELG1CQUFDLENBQUQsMERBQUMsQ0FBRCxHQUFHLHVDQUFILEVBQTRDLHVDQUE1Qyx1QkFBWSxXQUFXLFMsQ0FBVSxLLENBQUEsQyxDQUFRLEMsQ0FBekMsRUFBbUQsV0FBVyxTLENBQVUsQyxFQUFHLEssQ0FBM0U7UUFKUixDO0lBTEosQztJQWFBLE0sQ0FBTyxDO0FBakJYLEMiLCJmaWxlIjoiQ1BVUkxSZXNwb25zZS5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi9Vc2Vycy9kYXZpZC9wcm9ncmFtcy9jYXBwdWNjaW5vL0ZvdW5kYXRpb24vIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENQVVJMUmVzcG9uc2UualxuICogRm91bmRhdGlvblxuICpcbiAqIENyZWF0ZWQgYnkgRnJhbmNpc2NvIFRvbG1hc2t5LlxuICogQ29weXJpZ2h0IDIwMDgsIDI4MCBOb3J0aCwgSW5jLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlclxuICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlXG4gKiBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BIDAyMTEwLTEzMDEgVVNBXG4gKi9cblxuQGltcG9ydCBcIkNQT2JqZWN0LmpcIlxuQGltcG9ydCBcIkNQVVJMLmpcIlxuXG4vKlxuICAgIENQVVJMICAgICAgIF9VUkw7XG4gICAgQ1BTdHJpbmcgICAgX01JTUVUeXBlO1xuICAgIHVuc2lnbmVkICAgIF9leHBlY3RlZENvbnRlbnRMZW5ndGg7XG4gICAgQ1BTdHJpbmcgICAgX3RleHRFbmNvZGluZ05hbWU7XG4qL1xuLyohXG4gICAgQGNsYXNzIENQVVJMUmVzcG9uc2VcbiAgICBAaW5ncm91cCBmb3VuZGF0aW9uXG4gICAgQGJyaWVmIFByb3RvY29sIGFnbm9zdGljIGluZm9ybWF0aW9uIGFib3V0IGEgcmVxdWVzdCB0byBhIHNwZWNpZmljIFVSTC5cblxuICAgIENvbnRhaW5zIHByb3RvY29sIGFnbm9zdGljIGluZm9ybWF0aW9uIGFib3V0IGEgcmVxdWVzdCB0byBhIHNwZWNpZmljIFVSTC5cbiovXG5AaW1wbGVtZW50YXRpb24gQ1BVUkxSZXNwb25zZSA6IENQT2JqZWN0XG57XG4gICAgQ1BVUkwgICBfVVJMO1xufVxuXG4tIChpZClpbml0V2l0aFVSTDooQ1BVUkwpYVVSTFxue1xuICAgIHNlbGYgPSBbc3VwZXIgaW5pdF07XG5cbiAgICBpZiAoc2VsZilcbiAgICAgICAgX1VSTCA9IGFVUkw7XG5cbiAgICByZXR1cm4gc2VsZjtcbn1cblxuLSAoQ1BVUkwpVVJMXG57XG4gICAgcmV0dXJuIF9VUkw7XG59XG4vKlxuQ3JlYXRpbmcgYSBSZXNwb25zZVxuaW5pdFdpdGhVUkw6TUlNRVR5cGU6ZXhwZWN0ZWRDb250ZW50TGVuZ3RoOnRleHRFbmNvZGluZ05hbWU6XG5HZXR0aW5nIHRoZSBSZXNwb25zZSBQcm9wZXJ0aWVzXG5leHBlY3RlZENvbnRlbnRMZW5ndGhcbnN1Z2dlc3RlZEZpbGVuYW1lXG5NSU1FVHlwZVxudGV4dEVuY29kaW5nTmFtZVxuVVJMXG4qL1xuQGVuZFxuXG4vKiFcbiAgICBSZXByZXNlbnRzIHRoZSByZXNwb25zZSB0byBhbiBodHRwIHJlcXVlc3QuXG4qL1xuQGltcGxlbWVudGF0aW9uIENQSFRUUFVSTFJlc3BvbnNlIDogQ1BVUkxSZXNwb25zZVxue1xuICAgIGludCAgICAgICAgICAgICBfc3RhdHVzQ29kZTtcbiAgICBDUFN0cmluZyAgICAgICAgX2FsbFJlc3BvbnNlSGVhZGVycztcbiAgICBDUERpY3Rpb25hcnkgICAgX3Jlc3BvbnNlSGVhZGVycztcbn1cblxuKyAoQ1BEaWN0aW9uYXJ5KXBhcnNlSFRUUEhlYWRlcnM6KENQU3RyaW5nKWhlYWRlcnNTdHJpbmdcbntcbiAgICB2YXIgciA9IFtDUE11dGFibGVEaWN0aW9uYXJ5IGRpY3Rpb25hcnldO1xuXG4gICAgaWYgKGhlYWRlcnNTdHJpbmcpXG4gICAge1xuICAgICAgICB2YXIgaGVhZGVyTGluZXMgPSBoZWFkZXJzU3RyaW5nLnNwbGl0KCdcXHJcXG4nKSxcbiAgICAgICAgICAgIGNvdW50ID0gaGVhZGVyTGluZXMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChjb3VudC0tKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgaGVhZGVyTGluZSA9IGhlYWRlckxpbmVzW2NvdW50XSxcbiAgICAgICAgICAgICAgICBpbmRleCA9IGhlYWRlckxpbmUuaW5kZXhPZignOiAnKTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gQ1BOb3RGb3VuZClcbiAgICAgICAgICAgICAgICBbciBzZXRWYWx1ZTpoZWFkZXJMaW5lLnN1YnN0cmluZyhpbmRleCArIDIpIGZvcktleTpoZWFkZXJMaW5lLnN1YnN0cmluZygwLCBpbmRleCldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG59XG5cbi8qIEBpZ25vcmUgKi9cbi0gKHZvaWQpX3NldFN0YXR1c0NvZGU6KGludClhU3RhdHVzQ29kZVxue1xuICAgIF9zdGF0dXNDb2RlID0gYVN0YXR1c0NvZGU7XG59XG5cbi8qIVxuICAgIFJldHVybnMgdGhlIEhUVFAgc3RhdHVzIGNvZGUuXG4qL1xuLSAoaW50KXN0YXR1c0NvZGVcbntcbiAgICByZXR1cm4gX3N0YXR1c0NvZGU7XG59XG5cbi0gKHZvaWQpX3NldEFsbFJlc3BvbnNlSGVhZGVyczooQ1BTdHJpbmcpcmVzcG9uc2VIZWFkZXJzU3RyaW5nXG57XG4gICAgX2FsbFJlc3BvbnNlSGVhZGVycyA9IHJlc3BvbnNlSGVhZGVyc1N0cmluZztcbn1cblxuLyohXG4gICAgUmV0dXJuIHRoZSBIVFRQIHJlc3BvbnNlIGhlYWRlcnMuXG4qL1xuLSAoQ1BEaWN0aW9uYXJ5KWFsbEhlYWRlckZpZWxkc1xue1xuICAgIC8vIExhemlseSBwYXJzZSB0aGUgaGVhZGVycy5cbiAgICBpZiAoIV9yZXNwb25zZUhlYWRlcnMpXG4gICAgICAgIF9yZXNwb25zZUhlYWRlcnMgPSBbW3NlbGYgY2xhc3NdIHBhcnNlSFRUUEhlYWRlcnM6X2FsbFJlc3BvbnNlSGVhZGVyc107XG5cbiAgICByZXR1cm4gX3Jlc3BvbnNlSGVhZGVycztcbn1cblxuQGVuZFxuIl19t;3041;

objj_executeFile("CPObject.j", YES);objj_executeFile("CPURL.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPURLResponse"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_URL", "CPURL")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithURL:"), function $CPURLResponse__initWithURL_(self, _cmd, aURL)
{
    self = (objj_getClass("CPURLResponse").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
        self._URL = aURL;
    return self;
}

,["id","CPURL"]), new objj_method(sel_getUid("URL"), function $CPURLResponse__URL(self, _cmd)
{
    return self._URL;
}

,["CPURL"])]);
}

{var the_class = objj_allocateClassPair(CPURLResponse, "CPHTTPURLResponse"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_statusCode", "int"), new objj_ivar("_allResponseHeaders", "CPString"), new objj_ivar("_responseHeaders", "CPDictionary")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("_setStatusCode:"), function $CPHTTPURLResponse___setStatusCode_(self, _cmd, aStatusCode)
{
    self._statusCode = aStatusCode;
}

,["void","int"]), new objj_method(sel_getUid("statusCode"), function $CPHTTPURLResponse__statusCode(self, _cmd)
{
    return self._statusCode;
}

,["int"]), new objj_method(sel_getUid("_setAllResponseHeaders:"), function $CPHTTPURLResponse___setAllResponseHeaders_(self, _cmd, responseHeadersString)
{
    self._allResponseHeaders = responseHeadersString;
}

,["void","CPString"]), new objj_method(sel_getUid("allHeaderFields"), function $CPHTTPURLResponse__allHeaderFields(self, _cmd)
{
    if (!self._responseHeaders)
        self._responseHeaders = ((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["parseHTTPHeaders:"] || _objj_forward)(___r1, "parseHTTPHeaders:", self._allResponseHeaders));
    return self._responseHeaders;
    var ___r1;
}

,["CPDictionary"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("parseHTTPHeaders:"), function $CPHTTPURLResponse__parseHTTPHeaders_(self, _cmd, headersString)
{
    var r = (CPMutableDictionary.isa.method_msgSend["dictionary"] || _objj_forward)(CPMutableDictionary, (CPMutableDictionary.isa.method_dtable["dictionary"], "dictionary"));
    if (headersString)
    {
        var headerLines = headersString.split('\r\n'),
            count = headerLines.length;
        while (count--)
        {
            var headerLine = headerLines[count],
                index = headerLine.indexOf(': ');
            if (index !== CPNotFound)
                (r == null ? null : (r.isa.method_msgSend["setValue:forKey:"] || _objj_forward)(r, (r.isa.method_dtable["setValue:forKey:"], r.isa.method_dtable["setValue:forKey:"], "setValue:forKey:"), headerLine.substring(index + 2), headerLine.substring(0, index)));
        }
    }
    return r;
}

,["CPDictionary","CPString"])]);
}
p;23;CPInvocationOperation.jt;8129;@STATIC;1.0;i;14;CPInvocation.ji;10;CPObject.ji;13;CPOperation.jS;4880;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQSW52b2NhdGlvbk9wZXJhdGlvbi5qIl0sIm5hbWVzIjpbInNlbGYiXSwibWFwcGluZ3MiOiI7O0FBcUJBLGtCLHNCQUNBLGtCLGtCQUNBLGtCLHFCQU1BO0FBQUE7QUFBQSwyQiwyQkFBQSw0Qzs2QkFNQSw0QjtBQUNBO0lBQ0ksSUFBSSxnQkFBSjtJQUNBO1FBQ0ksVUFBQyxnQkFBRCx3RkFBYSw0Q0FBYjtJQURKLEM7O0FBRkosQzs7WUFPQSw0QjtBQUNBO0lBQ0ksSUFBSUEsSSxHQUFPLEMsa0RBQUEsZ0IsSUFBQSxrQ0FBWDtJQUNBO1FBQ0ksZ0IsR0FBYyxHQUFkO0lBREosQztJQUdBLE0sQ0FBT0EsSTtBQUxYLEM7O1VBWUEsNEIsd0ZBQXVDLEc7QUFDdkM7SUFDSSxJQUFJQSxJLEdBQU8sQ0FBQ0EsSUFBRCxtQkFBQ0EsSUFBRCw4Q0FBQ0EsSUFBRCxHQUFNLDhCQUFOLFdBQVg7SUFDQTtRQUNJLGdCLEdBQWMsR0FBZDtJQURKLEM7SUFJQSxNLENBQU9BLEk7QUFOWCxDOzt5QkFlQSw0QixnSEFBeUIsTSxFQUFxQixHLEVBQWUsRztBQUM3RDtJQUNJLElBQUksRyxHQUFNLFVBQUMsQ0FBQyxZQUFELCtDQUFDLFlBQUQsR0FBYyx1Q0FBZCxXQUFELHFJQUE4QyxHQUE5QyxFQUFWO0lBQ0EsQ0FBQyxHQUFELG1CQUFDLEdBQUQsb0RBQUMsR0FBRCxHQUFLLG1DQUFMLGlCQUFlLE1BQWY7SUFDQSxDQUFDLEdBQUQsbUJBQUMsR0FBRCxzREFBQyxHQUFELEdBQUsscUNBQUwsbUJBQWlCLEdBQWpCO0lBQ0EsQ0FBQyxHQUFELG1CQUFDLEdBQUQsOERBQUMsR0FBRCxHQUFLLDZDQUFMLEVBQXFCLDZDQUFyQiwyQkFBaUIsR0FBakIsRUFBNkIsQ0FBN0I7SUFFQSxNLENBQU8sQ0FBQ0EsSUFBRCw2REFBQ0EsSUFBRCxHQUFNLDZDQUFOLDBCQUF5QixHQUF6QixDOztBQU5YLEM7OzBCQVlBLDRCO0FBQ0E7SUFDSSxNLENBQU8sZ0I7QUFEWCxDOztvQkFPQSw0QjtBQUNBO0lBQ0ksSUFBSSxDQUFDQSxJQUFELG9EQUFDQSxJQUFELEdBQU0sb0NBQU4sZ0IsSUFBcUIsZ0JBQXpCO0lBQ0E7UUFDSSxNLENBQU8sVUFBQyxnQkFBRCw2RkFBYSxpREFBYixrQjtJQURYLEM7SUFJQSxNLENBQU8sRzs7QUFOWCxDIiwiZmlsZSI6IkNQSW52b2NhdGlvbk9wZXJhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi9Vc2Vycy9kYXZpZC9wcm9ncmFtcy9jYXBwdWNjaW5vL0ZvdW5kYXRpb24vIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENQSW52b2NhdGlvbk9wZXJhdGlvbi5qXG4gKlxuICogQ3JlYXRlZCBieSBKb2hhbm5lcyBGYWhyZW5rcnVnLlxuICogQ29weXJpZ2h0IDIwMDksIFNwcmluZ2Vud2Vyay5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXJcbiAqIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgbGlicmFyeTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZVxuICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAwMjExMC0xMzAxIFVTQVxuICovXG5cbkBpbXBvcnQgXCJDUEludm9jYXRpb24ualwiXG5AaW1wb3J0IFwiQ1BPYmplY3QualwiXG5AaW1wb3J0IFwiQ1BPcGVyYXRpb24ualwiXG5cbi8qIVxuICAgIEBjbGFzcyBDUEludm9jYXRpb25PcGVyYXRpb25cbiAgICBAYnJpZWYgUmVwcmVzZW50cyBhbiBvcGVyYXRpb24gdXNpbmcgYW4gaW52b2NhdGlvbiB0aGF0IGNhbiBiZSBydW4gaW4gYW4gQ1BPcGVyYXRpb25RdWV1ZVxuKi9cbkBpbXBsZW1lbnRhdGlvbiBDUEludm9jYXRpb25PcGVyYXRpb24gOiBDUE9wZXJhdGlvblxue1xuICAgIENQSW52b2NhdGlvbiBfaW52b2NhdGlvbjtcbn1cblxuXG4tICh2b2lkKW1haW5cbntcbiAgICBpZiAoX2ludm9jYXRpb24pXG4gICAge1xuICAgICAgICBbX2ludm9jYXRpb24gaW52b2tlXTtcbiAgICB9XG59XG5cbi0gKGlkKWluaXRcbntcbiAgICBpZiAoc2VsZiA9IFtzdXBlciBpbml0XSlcbiAgICB7XG4gICAgICAgIF9pbnZvY2F0aW9uID0gbmlsO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZjtcbn1cblxuLyohXG4gICAgUmV0dXJucyBhIENQSW52b2NhdGlvbk9wZXJhdGlvbiBvYmplY3QgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgc3BlY2lmaWVkIGludm9jYXRpb24gb2JqZWN0LlxuICAgIEBwYXJhbSBpbnYgdGhlIGludm9jYXRpb25cbiovXG4tIChpZClpbml0V2l0aEludm9jYXRpb246KENQSW52b2NhdGlvbilpbnZcbntcbiAgICBpZiAoc2VsZiA9IFtzZWxmIGluaXRdKVxuICAgIHtcbiAgICAgICAgX2ludm9jYXRpb24gPSBpbnY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG59XG5cbi8qIVxuICAgIFJldHVybnMgYSBDUEludm9jYXRpb25PcGVyYXRpb24gb2JqZWN0IGluaXRpYWxpemVkIHdpdGggdGhlIHNwZWNpZmllZCB0YXJnZXQgYW5kIHNlbGVjdG9yLlxuICAgIEBwYXJhbSB0YXJnZXQgdGhlIHRhcmdldFxuICAgIEBwYXJhbSBzZWwgdGhlIHNlbGVjdG9yIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCBvbiB0aGUgdGFyZ2V0XG4gICAgQHBhcmFtIGFyZyB0aGUgYXJndW1lbnRzXG4qL1xuLSAoaWQpaW5pdFdpdGhUYXJnZXQ6KGlkKXRhcmdldCBzZWxlY3RvcjooU0VMKXNlbCBvYmplY3Q6KGlkKWFyZ1xue1xuICAgIHZhciBpbnYgPSBbW0NQSW52b2NhdGlvbiBhbGxvY10gaW5pdFdpdGhNZXRob2RTaWduYXR1cmU6bmlsXTtcbiAgICBbaW52IHNldFRhcmdldDp0YXJnZXRdO1xuICAgIFtpbnYgc2V0U2VsZWN0b3I6c2VsXTtcbiAgICBbaW52IHNldEFyZ3VtZW50OmFyZyBhdEluZGV4OjJdO1xuXG4gICAgcmV0dXJuIFtzZWxmIGluaXRXaXRoSW52b2NhdGlvbjppbnZdO1xufVxuXG4vKiFcbiAgICBSZXR1cm5zIHRoZSByZWNlaXZlcuKAmXMgaW52b2NhdGlvbiBvYmplY3QuXG4qL1xuLSAoQ1BJbnZvY2F0aW9uKWludm9jYXRpb25cbntcbiAgICByZXR1cm4gX2ludm9jYXRpb247XG59XG5cbi8qIVxuICAgIFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2NhdGlvbiBvciBtZXRob2QuXG4qL1xuLSAoaWQpcmVzdWx0XG57XG4gICAgaWYgKFtzZWxmIGlzRmluaXNoZWRdICYmIF9pbnZvY2F0aW9uKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIFtfaW52b2NhdGlvbiByZXR1cm5WYWx1ZV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG5pbDtcbn1cblxuQGVuZFxuIl19t;3171;

objj_executeFile("CPInvocation.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPOperation.j", YES);
{var the_class = objj_allocateClassPair(CPOperation, "CPInvocationOperation"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_invocation", "CPInvocation")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("main"), function $CPInvocationOperation__main(self, _cmd)
{
    if (self._invocation)
    {
        ((___r1 = self._invocation), ___r1 == null ? null : (___r1.isa.method_msgSend["invoke"] || _objj_forward)(___r1, (self._invocation.isa.method_dtable["invoke"], "invoke")));
    }
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("init"), function $CPInvocationOperation__init(self, _cmd)
{
    if (self = (objj_getClass("CPInvocationOperation").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        self._invocation = nil;
    }
    return self;
}

,["id"]), new objj_method(sel_getUid("initWithInvocation:"), function $CPInvocationOperation__initWithInvocation_(self, _cmd, inv)
{
    if (self = (self == null ? null : (self.isa.method_msgSend["init"] || _objj_forward)(self, (self.isa.method_dtable["init"], "init"))))
    {
        self._invocation = inv;
    }
    return self;
}

,["id","CPInvocation"]), new objj_method(sel_getUid("initWithTarget:selector:object:"), function $CPInvocationOperation__initWithTarget_selector_object_(self, _cmd, target, sel, arg)
{
    var inv = ((___r1 = (CPInvocation.isa.method_msgSend["alloc"] || _objj_forward)(CPInvocation, (CPInvocation.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithMethodSignature:"] || _objj_forward)(___r1, "initWithMethodSignature:", nil));
    (inv == null ? null : (inv.isa.method_msgSend["setTarget:"] || _objj_forward)(inv, (inv.isa.method_dtable["setTarget:"], "setTarget:"), target));
    (inv == null ? null : (inv.isa.method_msgSend["setSelector:"] || _objj_forward)(inv, (inv.isa.method_dtable["setSelector:"], "setSelector:"), sel));
    (inv == null ? null : (inv.isa.method_msgSend["setArgument:atIndex:"] || _objj_forward)(inv, (inv.isa.method_dtable["setArgument:atIndex:"], inv.isa.method_dtable["setArgument:atIndex:"], "setArgument:atIndex:"), arg, 2));
    return (self.isa.method_msgSend["initWithInvocation:"] || _objj_forward)(self, (self.isa.method_dtable["initWithInvocation:"], "initWithInvocation:"), inv);
    var ___r1;
}

,["id","id","SEL","id"]), new objj_method(sel_getUid("invocation"), function $CPInvocationOperation__invocation(self, _cmd)
{
    return self._invocation;
}

,["CPInvocation"]), new objj_method(sel_getUid("result"), function $CPInvocationOperation__result(self, _cmd)
{
    if ((self.isa.method_msgSend["isFinished"] || _objj_forward)(self, (self.isa.method_dtable["isFinished"], "isFinished")) && self._invocation)
    {
        return ((___r1 = self._invocation), ___r1 == null ? null : (___r1.isa.method_msgSend["returnValue"] || _objj_forward)(___r1, (self._invocation.isa.method_dtable["returnValue"], "returnValue")));
    }
    return nil;
    var ___r1;
}

,["id"])]);
}
p;20;CPValueTransformer.jt;20852;@STATIC;1.0;i;8;CPData.ji;14;CPDictionary.ji;13;CPException.ji;17;CPKeyedArchiver.ji;19;CPKeyedUnarchiver.ji;10;CPNumber.ji;10;CPObject.jS;10184;;10515;

objj_executeFile("CPData.j", YES);objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPKeyedArchiver.j", YES);objj_executeFile("CPKeyedUnarchiver.j", YES);objj_executeFile("CPNumber.j", YES);objj_executeFile("CPObject.j", YES);var transformerMap = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));

{var the_class = objj_allocateClassPair(CPObject, "CPValueTransformer"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("reverseTransformedValue:"), function $CPValueTransformer__reverseTransformedValue_(self, _cmd, aValue)
{
    if (!((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["allowsReverseTransformation"] || _objj_forward)(___r1, "allowsReverseTransformation")))
    {
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, self + " is not reversible.");
    }
    return (self.isa.method_msgSend["transformedValue:"] || _objj_forward)(self, (self.isa.method_dtable["transformedValue:"], "transformedValue:"), aValue);
    var ___r1;
}

,["id","id"]), new objj_method(sel_getUid("transformedValue:"), function $CPValueTransformer__transformedValue_(self, _cmd, aValue)
{
    return nil;
}

,["id","id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("initialize"), function $CPValueTransformer__initialize(self, _cmd)
{
    if (self !== (CPValueTransformer.isa.method_msgSend["class"] || _objj_forward)(CPValueTransformer, (CPValueTransformer.isa.method_dtable["class"], "class")))
        return;
}

,["void"]), new objj_method(sel_getUid("setValueTransformer:forName:"), function $CPValueTransformer__setValueTransformer_forName_(self, _cmd, transformer, aName)
{
    (transformerMap == null ? null : (transformerMap.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(transformerMap, (transformerMap.isa.method_dtable["setObject:forKey:"], transformerMap.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), transformer, aName));
}

,["void","CPValueTransformer","CPString"]), new objj_method(sel_getUid("valueTransformerForName:"), function $CPValueTransformer__valueTransformerForName_(self, _cmd, aName)
{
    return (transformerMap == null ? null : (transformerMap.isa.method_msgSend["objectForKey:"] || _objj_forward)(transformerMap, (transformerMap.isa.method_dtable["objectForKey:"], "objectForKey:"), aName));
}

,["CPValueTransformer","CPString"]), new objj_method(sel_getUid("valueTransformerNames"), function $CPValueTransformer__valueTransformerNames(self, _cmd)
{
    return (transformerMap == null ? null : (transformerMap.isa.method_msgSend["allKeys"] || _objj_forward)(transformerMap, (transformerMap.isa.method_dtable["allKeys"], "allKeys")));
}

,["CPArray"]), new objj_method(sel_getUid("allowsReverseTransformation"), function $CPValueTransformer__allowsReverseTransformation(self, _cmd)
{
    return NO;
}

,["BOOL"]), new objj_method(sel_getUid("transformedValueClass"), function $CPValueTransformer__transformedValueClass(self, _cmd)
{
    return (CPObject.isa.method_msgSend["class"] || _objj_forward)(CPObject, (CPObject.isa.method_dtable["class"], "class"));
}

,["Class"])]);
}

{var the_class = objj_allocateClassPair(CPValueTransformer, "CPNegateBooleanTransformer"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("reverseTransformedValue:"), function $CPNegateBooleanTransformer__reverseTransformedValue_(self, _cmd, aValue)
{
    return !(aValue == null ? null : (aValue.isa.method_msgSend["boolValue"] || _objj_forward)(aValue, (aValue.isa.method_dtable["boolValue"], "boolValue")));
}

,["id","id"]), new objj_method(sel_getUid("transformedValue:"), function $CPNegateBooleanTransformer__transformedValue_(self, _cmd, aValue)
{
    return !(aValue == null ? null : (aValue.isa.method_msgSend["boolValue"] || _objj_forward)(aValue, (aValue.isa.method_dtable["boolValue"], "boolValue")));
}

,["id","id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("allowsReverseTransformation"), function $CPNegateBooleanTransformer__allowsReverseTransformation(self, _cmd)
{
    return YES;
}

,["BOOL"]), new objj_method(sel_getUid("transformedValueClass"), function $CPNegateBooleanTransformer__transformedValueClass(self, _cmd)
{
    return (CPNumber.isa.method_msgSend["class"] || _objj_forward)(CPNumber, (CPNumber.isa.method_dtable["class"], "class"));
}

,["Class"])]);
}

{var the_class = objj_allocateClassPair(CPValueTransformer, "CPIsNilTransformer"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("transformedValue:"), function $CPIsNilTransformer__transformedValue_(self, _cmd, aValue)
{
    return aValue === nil || aValue === undefined;
}

,["id","id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("allowsReverseTransformation"), function $CPIsNilTransformer__allowsReverseTransformation(self, _cmd)
{
    return NO;
}

,["BOOL"]), new objj_method(sel_getUid("transformedValueClass"), function $CPIsNilTransformer__transformedValueClass(self, _cmd)
{
    return (CPNumber.isa.method_msgSend["class"] || _objj_forward)(CPNumber, (CPNumber.isa.method_dtable["class"], "class"));
}

,["Class"])]);
}

{var the_class = objj_allocateClassPair(CPValueTransformer, "CPIsNotNilTransformer"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("transformedValue:"), function $CPIsNotNilTransformer__transformedValue_(self, _cmd, aValue)
{
    return aValue !== nil && aValue !== undefined;
}

,["id","id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("allowsReverseTransformation"), function $CPIsNotNilTransformer__allowsReverseTransformation(self, _cmd)
{
    return NO;
}

,["BOOL"]), new objj_method(sel_getUid("transformedValueClass"), function $CPIsNotNilTransformer__transformedValueClass(self, _cmd)
{
    return (CPNumber.isa.method_msgSend["class"] || _objj_forward)(CPNumber, (CPNumber.isa.method_dtable["class"], "class"));
}

,["Class"])]);
}

{var the_class = objj_allocateClassPair(CPValueTransformer, "CPUnarchiveFromDataTransformer"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("reverseTransformedValue:"), function $CPUnarchiveFromDataTransformer__reverseTransformedValue_(self, _cmd, aValue)
{
    return (CPKeyedArchiver.isa.method_msgSend["archivedDataWithRootObject:"] || _objj_forward)(CPKeyedArchiver, (CPKeyedArchiver.isa.method_dtable["archivedDataWithRootObject:"], "archivedDataWithRootObject:"), aValue);
}

,["id","id"]), new objj_method(sel_getUid("transformedValue:"), function $CPUnarchiveFromDataTransformer__transformedValue_(self, _cmd, aValue)
{
    return (CPKeyedUnarchiver.isa.method_msgSend["unarchiveObjectWithData:"] || _objj_forward)(CPKeyedUnarchiver, (CPKeyedUnarchiver.isa.method_dtable["unarchiveObjectWithData:"], "unarchiveObjectWithData:"), aValue);
}

,["id","id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("allowsReverseTransformation"), function $CPUnarchiveFromDataTransformer__allowsReverseTransformation(self, _cmd)
{
    return YES;
}

,["BOOL"]), new objj_method(sel_getUid("transformedValueClass"), function $CPUnarchiveFromDataTransformer__transformedValueClass(self, _cmd)
{
    return (CPData.isa.method_msgSend["class"] || _objj_forward)(CPData, (CPData.isa.method_dtable["class"], "class"));
}

,["Class"])]);
}
CPNegateBooleanTransformerName = "CPNegateBoolean";
CPIsNilTransformerName = "CPIsNil";
CPIsNotNilTransformerName = "CPIsNotNil";
CPUnarchiveFromDataTransformerName = "CPUnarchiveFromData";
CPKeyedUnarchiveFromDataTransformerName = "CPKeyedUnarchiveFromData";
(CPValueTransformer.isa.method_msgSend["setValueTransformer:forName:"] || _objj_forward)(CPValueTransformer, (CPValueTransformer.isa.method_dtable["setValueTransformer:forName:"], CPValueTransformer.isa.method_dtable["setValueTransformer:forName:"], "setValueTransformer:forName:"), ((___r1 = (CPNegateBooleanTransformer.isa.method_msgSend["alloc"] || _objj_forward)(CPNegateBooleanTransformer, (CPNegateBooleanTransformer.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init")), CPNegateBooleanTransformerName);
(CPValueTransformer.isa.method_msgSend["setValueTransformer:forName:"] || _objj_forward)(CPValueTransformer, (CPValueTransformer.isa.method_dtable["setValueTransformer:forName:"], CPValueTransformer.isa.method_dtable["setValueTransformer:forName:"], "setValueTransformer:forName:"), ((___r1 = (CPIsNilTransformer.isa.method_msgSend["alloc"] || _objj_forward)(CPIsNilTransformer, (CPIsNilTransformer.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init")), CPIsNilTransformerName);
(CPValueTransformer.isa.method_msgSend["setValueTransformer:forName:"] || _objj_forward)(CPValueTransformer, (CPValueTransformer.isa.method_dtable["setValueTransformer:forName:"], CPValueTransformer.isa.method_dtable["setValueTransformer:forName:"], "setValueTransformer:forName:"), ((___r1 = (CPIsNotNilTransformer.isa.method_msgSend["alloc"] || _objj_forward)(CPIsNotNilTransformer, (CPIsNotNilTransformer.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init")), CPIsNotNilTransformerName);
(CPValueTransformer.isa.method_msgSend["setValueTransformer:forName:"] || _objj_forward)(CPValueTransformer, (CPValueTransformer.isa.method_dtable["setValueTransformer:forName:"], CPValueTransformer.isa.method_dtable["setValueTransformer:forName:"], "setValueTransformer:forName:"), ((___r1 = (CPUnarchiveFromDataTransformer.isa.method_msgSend["alloc"] || _objj_forward)(CPUnarchiveFromDataTransformer, (CPUnarchiveFromDataTransformer.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init")), CPUnarchiveFromDataTransformerName);
p;20;CPUserNotification.jt;17328;@STATIC;1.0;i;20;CPAttributedString.ji;9;CPArray.ji;8;CPDate.ji;14;CPDictionary.ji;10;CPObject.ji;12;CPTimeZone.jS;11284;t;5916;

objj_executeFile("CPAttributedString.j", YES);objj_executeFile("CPArray.j", YES);objj_executeFile("CPDate.j", YES);objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPTimeZone.j", YES);{var the_typedef = objj_allocateTypeDef("CPUserNotificationAction");
objj_registerTypeDef(the_typedef);
}{var the_typedef = objj_allocateTypeDef("CPUserNotificationActivationType");
objj_registerTypeDef(the_typedef);
}CPUserNotificationActivationTypeNone = 0;
CPUserNotificationActivationTypeContentsClicked = 1;
CPUserNotificationActivationTypeActionButtonClicked = 2;
(CPUserNotificationActivationTypeReplied = 3, CPUserNotificationActivationTypeAdditionalActionClicked = 4);

{var the_class = objj_allocateClassPair(CPObject, "CPUserNotification"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_presented", "BOOL"), new objj_ivar("_remote", "BOOL"), new objj_ivar("_actualDeliveryDate", "CPDate"), new objj_ivar("_deliveryDate", "CPDate"), new objj_ivar("_userInfo", "CPDictionary"), new objj_ivar("_contentImage", "CPImage"), new objj_ivar("_identifier", "CPString"), new objj_ivar("_informativeText", "CPString"), new objj_ivar("_title", "CPString"), new objj_ivar("_deliveryRepeatInterval", "CPTimeInterval"), new objj_ivar("_deliveryTimeZone", "CPTimeZone"), new objj_ivar("_activationType", "CPUserNotificationActivationType")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("isPresented"), function $CPUserNotification__isPresented(self, _cmd)
{
    return self._presented;
}

,["BOOL"]), new objj_method(sel_getUid("_setPresented:"), function $CPUserNotification___setPresented_(self, _cmd, newValue)
{
    self._presented = newValue;
}

,["void","BOOL"]), new objj_method(sel_getUid("isRemote"), function $CPUserNotification__isRemote(self, _cmd)
{
    return self._remote;
}

,["BOOL"]), new objj_method(sel_getUid("_setRemote:"), function $CPUserNotification___setRemote_(self, _cmd, newValue)
{
    self._remote = newValue;
}

,["void","BOOL"]), new objj_method(sel_getUid("actualDeliveryDate"), function $CPUserNotification__actualDeliveryDate(self, _cmd)
{
    return self._actualDeliveryDate;
}

,["CPDate"]), new objj_method(sel_getUid("_setActualDeliveryDate:"), function $CPUserNotification___setActualDeliveryDate_(self, _cmd, newValue)
{
    self._actualDeliveryDate = newValue;
}

,["void","CPDate"]), new objj_method(sel_getUid("deliveryDate"), function $CPUserNotification__deliveryDate(self, _cmd)
{
    return self._deliveryDate;
}

,["CPDate"]), new objj_method(sel_getUid("setDeliveryDate:"), function $CPUserNotification__setDeliveryDate_(self, _cmd, newValue)
{
    self._deliveryDate = newValue;
}

,["void","CPDate"]), new objj_method(sel_getUid("userInfo"), function $CPUserNotification__userInfo(self, _cmd)
{
    return self._userInfo;
}

,["CPDictionary"]), new objj_method(sel_getUid("setUserInfo:"), function $CPUserNotification__setUserInfo_(self, _cmd, newValue)
{
    self._userInfo = newValue;
}

,["void","CPDictionary"]), new objj_method(sel_getUid("contentImage"), function $CPUserNotification__contentImage(self, _cmd)
{
    return self._contentImage;
}

,["CPImage"]), new objj_method(sel_getUid("setContentImage:"), function $CPUserNotification__setContentImage_(self, _cmd, newValue)
{
    self._contentImage = newValue;
}

,["void","CPImage"]), new objj_method(sel_getUid("identifier"), function $CPUserNotification__identifier(self, _cmd)
{
    return self._identifier;
}

,["CPString"]), new objj_method(sel_getUid("setIdentifier:"), function $CPUserNotification__setIdentifier_(self, _cmd, newValue)
{
    self._identifier = newValue;
}

,["void","CPString"]), new objj_method(sel_getUid("informativeText"), function $CPUserNotification__informativeText(self, _cmd)
{
    return self._informativeText;
}

,["CPString"]), new objj_method(sel_getUid("setInformativeText:"), function $CPUserNotification__setInformativeText_(self, _cmd, newValue)
{
    self._informativeText = newValue;
}

,["void","CPString"]), new objj_method(sel_getUid("title"), function $CPUserNotification__title(self, _cmd)
{
    return self._title;
}

,["CPString"]), new objj_method(sel_getUid("setTitle:"), function $CPUserNotification__setTitle_(self, _cmd, newValue)
{
    self._title = newValue;
}

,["void","CPString"]), new objj_method(sel_getUid("deliveryRepeatInterval"), function $CPUserNotification__deliveryRepeatInterval(self, _cmd)
{
    return self._deliveryRepeatInterval;
}

,["CPTimeInterval"]), new objj_method(sel_getUid("setDeliveryRepeatInterval:"), function $CPUserNotification__setDeliveryRepeatInterval_(self, _cmd, newValue)
{
    self._deliveryRepeatInterval = newValue;
}

,["void","CPTimeInterval"]), new objj_method(sel_getUid("deliveryTimeZone"), function $CPUserNotification__deliveryTimeZone(self, _cmd)
{
    return self._deliveryTimeZone;
}

,["CPTimeZone"]), new objj_method(sel_getUid("setDeliveryTimeZone:"), function $CPUserNotification__setDeliveryTimeZone_(self, _cmd, newValue)
{
    self._deliveryTimeZone = newValue;
}

,["void","CPTimeZone"]), new objj_method(sel_getUid("activationType"), function $CPUserNotification__activationType(self, _cmd)
{
    return self._activationType;
}

,["CPUserNotificationActivationType"]), new objj_method(sel_getUid("_setActivationType:"), function $CPUserNotification___setActivationType_(self, _cmd, newValue)
{
    self._activationType = newValue;
}

,["void","CPUserNotificationActivationType"]), new objj_method(sel_getUid("init"), function $CPUserNotification__init(self, _cmd)
{
    self = (objj_getClass("CPUserNotification").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._identifier = (self == null ? null : (self.isa.method_msgSend["UID"] || _objj_forward)(self, (self.isa.method_dtable["UID"], "UID")));
    }
    return self;
}

,["id"])]);
}
p;8;CPDate.jt;31136;@STATIC;1.0;i;10;CPObject.ji;10;CPString.ji;13;CPException.jS;18588;t;12472;

objj_executeFile("CPObject.j", YES);objj_executeFile("CPString.j", YES);objj_executeFile("CPException.j", YES);var CPDateReferenceDate = new Date(Date.UTC(2001, 0, 1, 0, 0, 0, 0));

{var the_class = objj_allocateClassPair(CPObject, "CPDate"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithTimeIntervalSinceNow:"), function $CPDate__initWithTimeIntervalSinceNow_(self, _cmd, seconds)
{
    if (!_isNumberType(seconds))
        CPLog.warn("The parameter of the method initWithTimeIntervalSinceNow: should be an integer or a float");
    self = new Date((new Date()).getTime() + seconds * 1000);
    return self;
}

,["id","CPTimeInterval"]), new objj_method(sel_getUid("initWithTimeIntervalSince1970:"), function $CPDate__initWithTimeIntervalSince1970_(self, _cmd, seconds)
{
    if (!_isNumberType(seconds))
        CPLog.warn("The parameter of the method initWithTimeIntervalSince1970: should be an integer or a float");
    self = new Date(seconds * 1000);
    return self;
}

,["id","CPTimeInterval"]), new objj_method(sel_getUid("initWithTimeIntervalSinceReferenceDate:"), function $CPDate__initWithTimeIntervalSinceReferenceDate_(self, _cmd, seconds)
{
    if (!_isNumberType(seconds))
        CPLog.warn("The parameter of the method initWithTimeIntervalSinceReferenceDate: should be an integer or a float");
    self = (self == null ? null : (self.isa.method_msgSend["initWithTimeInterval:sinceDate:"] || _objj_forward)(self, (self.isa.method_dtable["initWithTimeInterval:sinceDate:"], self.isa.method_dtable["initWithTimeInterval:sinceDate:"], "initWithTimeInterval:sinceDate:"), seconds, CPDateReferenceDate));
    return self;
}

,["id","CPTimeInterval"]), new objj_method(sel_getUid("initWithTimeInterval:sinceDate:"), function $CPDate__initWithTimeInterval_sinceDate_(self, _cmd, seconds, refDate)
{
    if (!_isNumberType(seconds))
        CPLog.warn("The parameter of the method initWithTimeInterval:sinceDate: should be an integer or a float");
    self = new Date(refDate.getTime() + seconds * 1000);
    return self;
}

,["id","CPTimeInterval","CPDate"]), new objj_method(sel_getUid("initWithString:"), function $CPDate__initWithString_(self, _cmd, description)
{
    var format = new RegExp("(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2}) ([-+])(\\d{2})(\\d{2})"),
        d = description.match(new RegExp(format));
    if (!d || d.length != 10)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "initWithString: the string must be in YYYY-MM-DD HH:MM:SS ±HHMM format");
    var date = new Date(d[1], d[2] - 1, d[3]),
        timeZoneOffset = (Number(d[8]) * 60 + Number(d[9])) * (d[7] === '-' ? 1 : -1);
    date.setHours(d[4]);
    date.setMinutes(d[5]);
    date.setSeconds(d[6]);
    self = new Date(date.getTime() + (timeZoneOffset - date.getTimezoneOffset()) * 60 * 1000);
    return self;
}

,["id","CPString"]), new objj_method(sel_getUid("timeIntervalSinceDate:"), function $CPDate__timeIntervalSinceDate_(self, _cmd, anotherDate)
{
    return (self.getTime() - anotherDate.getTime()) / 1000.0;
}

,["CPTimeInterval","CPDate"]), new objj_method(sel_getUid("timeIntervalSinceNow"), function $CPDate__timeIntervalSinceNow(self, _cmd)
{
    return (self.isa.method_msgSend["timeIntervalSinceDate:"] || _objj_forward)(self, (self.isa.method_dtable["timeIntervalSinceDate:"], "timeIntervalSinceDate:"), (CPDate.isa.method_msgSend["date"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["date"], "date")));
}

,["CPTimeInterval"]), new objj_method(sel_getUid("timeIntervalSince1970"), function $CPDate__timeIntervalSince1970(self, _cmd)
{
    return self.getTime() / 1000.0;
}

,["CPTimeInterval"]), new objj_method(sel_getUid("timeIntervalSinceReferenceDate"), function $CPDate__timeIntervalSinceReferenceDate(self, _cmd)
{
    return (self.getTime() - CPDateReferenceDate.getTime()) / 1000.0;
}

,["CPTimeInterval"]), new objj_method(sel_getUid("dateByAddingTimeInterval:"), function $CPDate__dateByAddingTimeInterval_(self, _cmd, seconds)
{
    return ((___r1 = (CPDate.isa.method_msgSend["alloc"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithTimeInterval:sinceDate:"] || _objj_forward)(___r1, "initWithTimeInterval:sinceDate:", seconds, self));
    var ___r1;
}

,["id","CPTimeInterval"]), new objj_method(sel_getUid("isEqual:"), function $CPDate__isEqual_(self, _cmd, aDate)
{
    if (self === aDate)
        return YES;
    if (!aDate || !(aDate == null ? null : (aDate.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(aDate, (aDate.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPDate.isa.method_msgSend["class"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["class"], "class")))))
        return NO;
    return (self.isa.method_msgSend["isEqualToDate:"] || _objj_forward)(self, (self.isa.method_dtable["isEqualToDate:"], "isEqualToDate:"), aDate);
}

,["BOOL","CPDate"]), new objj_method(sel_getUid("isEqualToDate:"), function $CPDate__isEqualToDate_(self, _cmd, aDate)
{
    if (!aDate)
        return NO;
    return !(self < aDate || self > aDate);
}

,["BOOL","CPDate"]), new objj_method(sel_getUid("compare:"), function $CPDate__compare_(self, _cmd, anotherDate)
{
    return self > anotherDate ? CPOrderedDescending : self < anotherDate ? CPOrderedAscending : CPOrderedSame;
}

,["CPComparisonResult","CPDate"]), new objj_method(sel_getUid("earlierDate:"), function $CPDate__earlierDate_(self, _cmd, anotherDate)
{
    return self < anotherDate ? self : anotherDate;
}

,["CPDate","CPDate"]), new objj_method(sel_getUid("laterDate:"), function $CPDate__laterDate_(self, _cmd, anotherDate)
{
    return self > anotherDate ? self : anotherDate;
}

,["CPDate","CPDate"]), new objj_method(sel_getUid("description"), function $CPDate__description(self, _cmd)
{
    return (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%04d-%02d-%02d %02d:%02d:%02d %s", self.getFullYear(), self.getMonth() + 1, self.getDate(), self.getHours(), self.getMinutes(), self.getSeconds(), (CPDate.isa.method_msgSend["timezoneOffsetString:"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["timezoneOffsetString:"], "timezoneOffsetString:"), self.getTimezoneOffset()));
}

,["CPString"]), new objj_method(sel_getUid("copy"), function $CPDate__copy(self, _cmd)
{
    return new Date(self.getTime());
}

,["id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPDate__alloc(self, _cmd)
{
    var result = new Date();
    result.isa = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"));
    return result;
}

,["id"]), new objj_method(sel_getUid("date"), function $CPDate__date(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("dateWithTimeIntervalSinceNow:"), function $CPDate__dateWithTimeIntervalSinceNow_(self, _cmd, seconds)
{
    return ((___r1 = (CPDate.isa.method_msgSend["alloc"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithTimeIntervalSinceNow:"] || _objj_forward)(___r1, "initWithTimeIntervalSinceNow:", seconds));
    var ___r1;
}

,["id","CPTimeInterval"]), new objj_method(sel_getUid("dateWithTimeIntervalSince1970:"), function $CPDate__dateWithTimeIntervalSince1970_(self, _cmd, seconds)
{
    return ((___r1 = (CPDate.isa.method_msgSend["alloc"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithTimeIntervalSince1970:"] || _objj_forward)(___r1, "initWithTimeIntervalSince1970:", seconds));
    var ___r1;
}

,["id","CPTimeInterval"]), new objj_method(sel_getUid("dateWithTimeIntervalSinceReferenceDate:"), function $CPDate__dateWithTimeIntervalSinceReferenceDate_(self, _cmd, seconds)
{
    return ((___r1 = (CPDate.isa.method_msgSend["alloc"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithTimeIntervalSinceReferenceDate:"] || _objj_forward)(___r1, "initWithTimeIntervalSinceReferenceDate:", seconds));
    var ___r1;
}

,["id","CPTimeInterval"]), new objj_method(sel_getUid("distantPast"), function $CPDate__distantPast(self, _cmd)
{
    return (CPDate.isa.method_msgSend["dateWithTimeIntervalSinceReferenceDate:"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["dateWithTimeIntervalSinceReferenceDate:"], "dateWithTimeIntervalSinceReferenceDate:"), -63113817600.0);
}

,["id"]), new objj_method(sel_getUid("distantFuture"), function $CPDate__distantFuture(self, _cmd)
{
    return (CPDate.isa.method_msgSend["dateWithTimeIntervalSinceReferenceDate:"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["dateWithTimeIntervalSinceReferenceDate:"], "dateWithTimeIntervalSinceReferenceDate:"), 63113990400.0);
}

,["id"]), new objj_method(sel_getUid("timeIntervalSinceReferenceDate"), function $CPDate__timeIntervalSinceReferenceDate(self, _cmd)
{
    return ((___r1 = (CPDate.isa.method_msgSend["date"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["date"], "date"))), ___r1 == null ? null : (___r1.isa.method_msgSend["timeIntervalSinceReferenceDate"] || _objj_forward)(___r1, "timeIntervalSinceReferenceDate"));
    var ___r1;
}

,["CPTimeInterval"]), new objj_method(sel_getUid("timezoneOffsetString:"), function $CPDate__timezoneOffsetString_(self, _cmd, timezoneOffset)
{
    var offset = -timezoneOffset,
        positive = offset >= 0,
        hours = positive ? FLOOR(offset / 60) : CEIL(offset / 60),
        minutes = offset - hours * 60;
    return (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%s%02d%02d", positive ? "+" : "-", ABS(hours), ABS(minutes));
}

,["CPString","int"])]);
}
var CPDateTimeKey = "CPDateTimeKey";
{
var the_class = objj_getClass("CPDate")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPDate\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPDate__initWithCoder_(self, _cmd, aCoder)
{
    if (self)
    {
        self.setTime((aCoder == null ? null : (aCoder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPDateTimeKey)));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPDate__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self.getTime(), CPDateTimeKey));
}

,["void","CPCoder"])]);
}
var numericKeys = [1, 4, 5, 6, 7, 10, 11];
Date.parseISO8601 = function(date)
{
    var timestamp,
        struct,
        minutesOffset = 0;
    timestamp = Date.parse(date);
    if (isNaN(timestamp) && (struct = (new RegExp("^(\\d{4}|[+\\-]\\d{6})(?:-(\\d{2})(?:-(\\d{2}))?)?(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$")).exec(date)))
    {
        for (var i = 0, k; k = numericKeys[i]; ++i)
            struct[k] = +struct[k] || 0;
        struct[2] = (+struct[2] || 1) - 1;
        struct[3] = +struct[3] || 1;
        if (struct[8] !== 'Z' && struct[9] !== undefined)
        {
            minutesOffset = struct[10] * 60 + struct[11];
            if (struct[9] === '+')
                minutesOffset = 0 - minutesOffset;
        }        return Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
    }    return timestamp;
};
Date.prototype.isa = CPDate;
_isNumberType = function(value)
{
    if (typeof value === 'number')
        return YES;
    else
        return NO;
}
p;18;CPSortDescriptor.jt;17183;@STATIC;1.0;i;10;CPObject.ji;15;CPObjJRuntime.ji;10;CPString.jS;9840;t;7267;

objj_executeFile("CPObject.j", YES);objj_executeFile("CPObjJRuntime.j", YES);objj_executeFile("CPString.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPSortDescriptor"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_key", "CPString"), new objj_ivar("_selector", "SEL"), new objj_ivar("_ascending", "BOOL")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithKey:ascending:"), function $CPSortDescriptor__initWithKey_ascending_(self, _cmd, aKey, isAscending)
{
    return (self.isa.method_msgSend["initWithKey:ascending:selector:"] || _objj_forward)(self, (self.isa.method_dtable["initWithKey:ascending:selector:"], self.isa.method_dtable["initWithKey:ascending:selector:"], self.isa.method_dtable["initWithKey:ascending:selector:"], "initWithKey:ascending:selector:"), aKey, isAscending, sel_getUid("compare:"));
}

,["id","CPString","BOOL"]), new objj_method(sel_getUid("initWithKey:ascending:selector:"), function $CPSortDescriptor__initWithKey_ascending_selector_(self, _cmd, aKey, isAscending, aSelector)
{
    self = (objj_getClass("CPSortDescriptor").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._key = aKey;
        self._ascending = isAscending;
        self._selector = aSelector;
    }
    return self;
}

,["id","CPString","BOOL","SEL"]), new objj_method(sel_getUid("ascending"), function $CPSortDescriptor__ascending(self, _cmd)
{
    return self._ascending;
}

,["BOOL"]), new objj_method(sel_getUid("key"), function $CPSortDescriptor__key(self, _cmd)
{
    return self._key;
}

,["CPString"]), new objj_method(sel_getUid("selector"), function $CPSortDescriptor__selector(self, _cmd)
{
    return self._selector;
}

,["SEL"]), new objj_method(sel_getUid("compareObject:withObject:"), function $CPSortDescriptor__compareObject_withObject_(self, _cmd, lhsObject, rhsObject)
{
    return (self._ascending ? 1 : -1) * ((___r1 = (lhsObject == null ? null : (lhsObject.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(lhsObject, (lhsObject.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), self._key))), ___r1 == null ? null : (___r1.isa.method_msgSend["performSelector:withObject:"] || _objj_forward)(___r1, "performSelector:withObject:", self._selector, (rhsObject == null ? null : (rhsObject.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(rhsObject, (rhsObject.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), self._key))));
    var ___r1;
}

,["CPComparisonResult","id","id"]), new objj_method(sel_getUid("reversedSortDescriptor"), function $CPSortDescriptor__reversedSortDescriptor(self, _cmd)
{
    return ((___r1 = ((___r2 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r2 == null ? null : (___r2.isa.method_msgSend["alloc"] || _objj_forward)(___r2, "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithKey:ascending:selector:"] || _objj_forward)(___r1, "initWithKey:ascending:selector:", self._key, !self._ascending, self._selector));
    var ___r1, ___r2;
}

,["id"]), new objj_method(sel_getUid("description"), function $CPSortDescriptor__description(self, _cmd)
{
    return (CPString == null ? null : (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "(%@, %@, %@)", (self.isa.method_msgSend["key"] || _objj_forward)(self, (self.isa.method_dtable["key"], "key")), (self.isa.method_msgSend["ascending"] || _objj_forward)(self, (self.isa.method_dtable["ascending"], "ascending")) ? "ascending" : "descending", CPStringFromSelector((self.isa.method_msgSend["selector"] || _objj_forward)(self, (self.isa.method_dtable["selector"], "selector")))));
}

,["CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("sortDescriptorWithKey:ascending:"), function $CPSortDescriptor__sortDescriptorWithKey_ascending_(self, _cmd, aKey, isAscending)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithKey:ascending:"] || _objj_forward)(___r1, "initWithKey:ascending:", aKey, isAscending));
    var ___r1;
}

,["id","CPString","BOOL"]), new objj_method(sel_getUid("sortDescriptorWithKey:ascending:selector:"), function $CPSortDescriptor__sortDescriptorWithKey_ascending_selector_(self, _cmd, aKey, isAscending, aSelector)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithKey:ascending:selector:"] || _objj_forward)(___r1, "initWithKey:ascending:selector:", aKey, isAscending, aSelector));
    var ___r1;
}

,["id","CPString","BOOL","SEL"])]);
}
var CPSortDescriptorKeyKey = "CPSortDescriptorKeyKey",
    CPSortDescriptorAscendingKey = "CPSortDescriptorAscendingKey",
    CPSortDescriptorSelectorKey = "CPSortDescriptorSelectorKey";
{
var the_class = objj_getClass("CPSortDescriptor")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPSortDescriptor\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPSortDescriptor__initWithCoder_(self, _cmd, aCoder)
{
    if (self = (objj_getClass("CPSortDescriptor").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        self._key = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPSortDescriptorKeyKey));
        self._ascending = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPSortDescriptorAscendingKey));
        self._selector = CPSelectorFromString((aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPSortDescriptorSelectorKey)));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPSortDescriptor__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._key, CPSortDescriptorKeyKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._ascending, CPSortDescriptorAscendingKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), CPStringFromSelector(self._selector), CPSortDescriptorSelectorKey));
}

,["void","CPCoder"])]);
}
p;21;CPNotificationQueue.jt;35161;@STATIC;1.0;i;10;CPObject.ji;16;CPNotification.ji;22;CPNotificationCenter.jS;19712;;15358;

objj_executeFile("CPObject.j", YES);objj_executeFile("CPNotification.j", YES);objj_executeFile("CPNotificationCenter.j", YES);{var the_typedef = objj_allocateTypeDef("CPPostingStyle");
objj_registerTypeDef(the_typedef);
}CPPostWhenIdle = 1;
CPPostASAP = 2;
CPPostNow = 3;
{var the_typedef = objj_allocateTypeDef("CPNotificationCoalescing");
objj_registerTypeDef(the_typedef);
}CPNotificationNoCoalescing = 1 << 0;
CPNotificationCoalescingOnName = 1 << 1;
CPNotificationCoalescingOnSender = 1 << 2;
var CPNotificationDefaultQueue;
var runLoop = (CPRunLoop.isa.method_msgSend["mainRunLoop"] || _objj_forward)(CPRunLoop, (CPRunLoop.isa.method_dtable["mainRunLoop"], "mainRunLoop"));

{var the_class = objj_allocateClassPair(CPObject, "CPNotificationQueue"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_runLoopLaunched", "BOOL"), new objj_ivar("_postNowNotifications", "CPMutableArray"), new objj_ivar("_postIdleNotifications", "CPMutableArray"), new objj_ivar("_postASAPNotifications", "CPMutableArray"), new objj_ivar("_notificationCenter", "CPNotificationCenter")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithNotificationCenter:"), function $CPNotificationQueue__initWithNotificationCenter_(self, _cmd, aNotificationCenter)
{
    if (self = (objj_getClass("CPNotificationQueue").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        self._notificationCenter = aNotificationCenter;
        self._postNowNotifications = (CPMutableArray.isa.method_msgSend["new"] || _objj_forward)(CPMutableArray, (CPMutableArray.isa.method_dtable["new"], "new"));
        self._postIdleNotifications = (CPMutableArray.isa.method_msgSend["new"] || _objj_forward)(CPMutableArray, (CPMutableArray.isa.method_dtable["new"], "new"));
        self._postASAPNotifications = (CPMutableArray.isa.method_msgSend["new"] || _objj_forward)(CPMutableArray, (CPMutableArray.isa.method_dtable["new"], "new"));
    }
    return self;
}

,["id","CPNotificationCenter"]), new objj_method(sel_getUid("enqueueNotification:postingStyle:"), function $CPNotificationQueue__enqueueNotification_postingStyle_(self, _cmd, notification, postingStyle)
{
    (self.isa.method_msgSend["enqueueNotification:postingStyle:coalesceMask:forModes:"] || _objj_forward)(self, (self.isa.method_dtable["enqueueNotification:postingStyle:coalesceMask:forModes:"], self.isa.method_dtable["enqueueNotification:postingStyle:coalesceMask:forModes:"], self.isa.method_dtable["enqueueNotification:postingStyle:coalesceMask:forModes:"], self.isa.method_dtable["enqueueNotification:postingStyle:coalesceMask:forModes:"], "enqueueNotification:postingStyle:coalesceMask:forModes:"), notification, postingStyle, CPNotificationCoalescingOnName | CPNotificationCoalescingOnSender, [CPDefaultRunLoopMode]);
}

,["void","CPNotification","CPPostingStyle"]), new objj_method(sel_getUid("enqueueNotification:postingStyle:coalesceMask:forModes:"), function $CPNotificationQueue__enqueueNotification_postingStyle_coalesceMask_forModes_(self, _cmd, notification, postingStyle, coalesceMask, modes)
{
    (self.isa.method_msgSend["_removeNotification:coalesceMask:"] || _objj_forward)(self, (self.isa.method_dtable["_removeNotification:coalesceMask:"], self.isa.method_dtable["_removeNotification:coalesceMask:"], "_removeNotification:coalesceMask:"), notification, coalesceMask);
    switch(postingStyle) {
        case CPPostWhenIdle:
            ((___r1 = self._postIdleNotifications), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, (self._postIdleNotifications.isa.method_dtable["addObject:"], "addObject:"), notification));
            break;
        case CPPostASAP:
            ((___r1 = self._postASAPNotifications), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, (self._postASAPNotifications.isa.method_dtable["addObject:"], "addObject:"), notification));
            break;
        case CPPostNow:
            ((___r1 = self._postNowNotifications), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, (self._postNowNotifications.isa.method_dtable["addObject:"], "addObject:"), notification));
            break;
    }
    if (((___r1 = self._postIdleNotifications), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._postIdleNotifications.isa.method_dtable["count"], "count"))) || ((___r1 = self._postASAPNotifications), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._postASAPNotifications.isa.method_dtable["count"], "count"))) || ((___r1 = self._postNowNotifications), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._postNowNotifications.isa.method_dtable["count"], "count"))))
        (self.isa.method_msgSend["_runRunLoop"] || _objj_forward)(self, (self.isa.method_dtable["_runRunLoop"], "_runRunLoop"));
    if (postingStyle == CPPostNow)
    {
        for (var i = (modes == null ? null : (modes.isa.method_msgSend["count"] || _objj_forward)(modes, (modes.isa.method_dtable["count"], "count"))) - 1; i >= 0; i--)
            ((___r1 = (CPRunLoop.isa.method_msgSend["currentRunLoop"] || _objj_forward)(CPRunLoop, (CPRunLoop.isa.method_dtable["currentRunLoop"], "currentRunLoop"))), ___r1 == null ? null : (___r1.isa.method_msgSend["limitDateForMode:"] || _objj_forward)(___r1, "limitDateForMode:", modes[i]));
    }
    var ___r1;
}

,["void","CPNotification","CPPostingStyle","CPNotificationCoalescing","CPArray"]), new objj_method(sel_getUid("dequeueNotificationsMatching:coalesceMask:"), function $CPNotificationQueue__dequeueNotificationsMatching_coalesceMask_(self, _cmd, notification, coalesceMask)
{
    (self.isa.method_msgSend["_removeNotification:coalesceMask:"] || _objj_forward)(self, (self.isa.method_dtable["_removeNotification:coalesceMask:"], self.isa.method_dtable["_removeNotification:coalesceMask:"], "_removeNotification:coalesceMask:"), notification, coalesceMask);
}

,["void","CPNotification","CPUInteger"]), new objj_method(sel_getUid("_runRunLoop"), function $CPNotificationQueue___runRunLoop(self, _cmd)
{
    if (!self._runLoopLaunched)
    {
        (runLoop == null ? null : (runLoop.isa.method_msgSend["performSelector:target:argument:order:modes:"] || _objj_forward)(runLoop, (runLoop.isa.method_dtable["performSelector:target:argument:order:modes:"], runLoop.isa.method_dtable["performSelector:target:argument:order:modes:"], runLoop.isa.method_dtable["performSelector:target:argument:order:modes:"], runLoop.isa.method_dtable["performSelector:target:argument:order:modes:"], runLoop.isa.method_dtable["performSelector:target:argument:order:modes:"], "performSelector:target:argument:order:modes:"), sel_getUid("_launchNotificationsInQueue"), self, nil, 0, [CPDefaultRunLoopMode]));
        self._runLoopLaunched = YES;
    }
}

,["void"]), new objj_method(sel_getUid("_launchNotificationsInQueue"), function $CPNotificationQueue___launchNotificationsInQueue(self, _cmd)
{
    self._runLoopLaunched = NO;
    if (((___r1 = self._postNowNotifications), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._postNowNotifications.isa.method_dtable["count"], "count"))))
    {
        (self.isa.method_msgSend["_launchNotificationsForArray:"] || _objj_forward)(self, (self.isa.method_dtable["_launchNotificationsForArray:"], "_launchNotificationsForArray:"), self._postNowNotifications);
        (self.isa.method_msgSend["_runRunLoop"] || _objj_forward)(self, (self.isa.method_dtable["_runRunLoop"], "_runRunLoop"));
        return;
    }
    if (((___r1 = self._postASAPNotifications), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._postASAPNotifications.isa.method_dtable["count"], "count"))))
    {
        (self.isa.method_msgSend["_launchNotificationsForArray:"] || _objj_forward)(self, (self.isa.method_dtable["_launchNotificationsForArray:"], "_launchNotificationsForArray:"), self._postASAPNotifications);
        (self.isa.method_msgSend["_runRunLoop"] || _objj_forward)(self, (self.isa.method_dtable["_runRunLoop"], "_runRunLoop"));
        return;
    }
    if (((___r1 = self._postIdleNotifications), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._postIdleNotifications.isa.method_dtable["count"], "count"))))
    {
        (self.isa.method_msgSend["_launchNotificationsForArray:"] || _objj_forward)(self, (self.isa.method_dtable["_launchNotificationsForArray:"], "_launchNotificationsForArray:"), self._postIdleNotifications);
        (self.isa.method_msgSend["_runRunLoop"] || _objj_forward)(self, (self.isa.method_dtable["_runRunLoop"], "_runRunLoop"));
        return;
    }
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("_launchNotificationsForArray:"), function $CPNotificationQueue___launchNotificationsForArray_(self, _cmd, anArray)
{
    for (var i = (anArray == null ? null : (anArray.isa.method_msgSend["count"] || _objj_forward)(anArray, (anArray.isa.method_dtable["count"], "count"))) - 1; i >= 0; i--)
    {
        var notification = anArray[i];
        ((___r1 = self._notificationCenter), ___r1 == null ? null : (___r1.isa.method_msgSend["postNotification:"] || _objj_forward)(___r1, (self._notificationCenter.isa.method_dtable["postNotification:"], "postNotification:"), notification));
    }
    (anArray == null ? null : (anArray.isa.method_msgSend["removeAllObjects"] || _objj_forward)(anArray, (anArray.isa.method_dtable["removeAllObjects"], "removeAllObjects")));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("_removeNotification:coalesceMask:"), function $CPNotificationQueue___removeNotification_coalesceMask_(self, _cmd, notification, coalesceMask)
{
    (self.isa.method_msgSend["_removeNotification:coalesceMask:inNotifications:"] || _objj_forward)(self, (self.isa.method_dtable["_removeNotification:coalesceMask:inNotifications:"], self.isa.method_dtable["_removeNotification:coalesceMask:inNotifications:"], self.isa.method_dtable["_removeNotification:coalesceMask:inNotifications:"], "_removeNotification:coalesceMask:inNotifications:"), notification, coalesceMask, self._postNowNotifications);
    (self.isa.method_msgSend["_removeNotification:coalesceMask:inNotifications:"] || _objj_forward)(self, (self.isa.method_dtable["_removeNotification:coalesceMask:inNotifications:"], self.isa.method_dtable["_removeNotification:coalesceMask:inNotifications:"], self.isa.method_dtable["_removeNotification:coalesceMask:inNotifications:"], "_removeNotification:coalesceMask:inNotifications:"), notification, coalesceMask, self._postASAPNotifications);
    (self.isa.method_msgSend["_removeNotification:coalesceMask:inNotifications:"] || _objj_forward)(self, (self.isa.method_dtable["_removeNotification:coalesceMask:inNotifications:"], self.isa.method_dtable["_removeNotification:coalesceMask:inNotifications:"], self.isa.method_dtable["_removeNotification:coalesceMask:inNotifications:"], "_removeNotification:coalesceMask:inNotifications:"), notification, coalesceMask, self._postIdleNotifications);
}

,["void","CPNotification","CPUInteger"]), new objj_method(sel_getUid("_removeNotification:coalesceMask:inNotifications:"), function $CPNotificationQueue___removeNotification_coalesceMask_inNotifications_(self, _cmd, aNotification, coalesceMask, notifications)
{
    var notificationsToRemove = [],
        name = (aNotification == null ? null : (aNotification.isa.method_msgSend["name"] || _objj_forward)(aNotification, (aNotification.isa.method_dtable["name"], "name"))),
        sender = (aNotification == null ? null : (aNotification.isa.method_msgSend["object"] || _objj_forward)(aNotification, (aNotification.isa.method_dtable["object"], "object")));
    for (var i = (notifications == null ? null : (notifications.isa.method_msgSend["count"] || _objj_forward)(notifications, (notifications.isa.method_dtable["count"], "count"))) - 1; i >= 0; i--)
    {
        var notification = notifications[i];
        if (notification == aNotification)
        {
            (notificationsToRemove == null ? null : (notificationsToRemove.isa.method_msgSend["addObject:"] || _objj_forward)(notificationsToRemove, (notificationsToRemove.isa.method_dtable["addObject:"], "addObject:"), notification));
            continue;
        }
        if (coalesceMask & CPNotificationNoCoalescing)
            continue;
        if (coalesceMask & CPNotificationCoalescingOnName && coalesceMask & CPNotificationCoalescingOnSender)
        {
            if ((notification == null ? null : (notification.isa.method_msgSend["object"] || _objj_forward)(notification, (notification.isa.method_dtable["object"], "object"))) == sender && (notification == null ? null : (notification.isa.method_msgSend["name"] || _objj_forward)(notification, (notification.isa.method_dtable["name"], "name"))) == name)
                (notificationsToRemove == null ? null : (notificationsToRemove.isa.method_msgSend["addObject:"] || _objj_forward)(notificationsToRemove, (notificationsToRemove.isa.method_dtable["addObject:"], "addObject:"), notification));
            continue;
        }
        if (coalesceMask & CPNotificationCoalescingOnName)
        {
            if ((notification == null ? null : (notification.isa.method_msgSend["name"] || _objj_forward)(notification, (notification.isa.method_dtable["name"], "name"))) == name)
                (notificationsToRemove == null ? null : (notificationsToRemove.isa.method_msgSend["addObject:"] || _objj_forward)(notificationsToRemove, (notificationsToRemove.isa.method_dtable["addObject:"], "addObject:"), notification));
            continue;
        }
        if (coalesceMask & CPNotificationCoalescingOnSender)
        {
            if ((notification == null ? null : (notification.isa.method_msgSend["object"] || _objj_forward)(notification, (notification.isa.method_dtable["object"], "object"))) == sender)
                (notificationsToRemove == null ? null : (notificationsToRemove.isa.method_msgSend["addObject:"] || _objj_forward)(notificationsToRemove, (notificationsToRemove.isa.method_dtable["addObject:"], "addObject:"), notification));
            continue;
        }
    }
    (notifications == null ? null : (notifications.isa.method_msgSend["removeObjectsInArray:"] || _objj_forward)(notifications, (notifications.isa.method_dtable["removeObjectsInArray:"], "removeObjectsInArray:"), notificationsToRemove));
}

,["void","CPNotification","CPUInteger","CPArray"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("defaultQueue"), function $CPNotificationQueue__defaultQueue(self, _cmd)
{
    if (!CPNotificationDefaultQueue)
        CPNotificationDefaultQueue = ((___r1 = (CPNotificationQueue.isa.method_msgSend["alloc"] || _objj_forward)(CPNotificationQueue, (CPNotificationQueue.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithNotificationCenter:"] || _objj_forward)(___r1, "initWithNotificationCenter:", (CPNotificationCenter.isa.method_msgSend["defaultCenter"] || _objj_forward)(CPNotificationCenter, (CPNotificationCenter.isa.method_dtable["defaultCenter"], "defaultCenter"))));
    return CPNotificationDefaultQueue;
    var ___r1;
}

,["id"])]);
}
p;9;CPValue.jt;7993;@STATIC;1.0;i;9;CPCoder.ji;10;CPObject.jS;5252;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQVmFsdWUuaiJdLCJuYW1lcyI6WyJzZWxmIl0sIm1hcHBpbmdzIjoiOztBQXNCQSxrQixpQkFDQSxrQixrQkFTQTtBQUFBO0FBQUEsMkIsMkJBQUEsc0M7NkJBb0JBLDRCLHNFQUFpQyxTO0FBQ2pDO0lBQ0lBLEksR0FBTyxDLG9DQUFBLGdCLElBQUEsa0NBQVA7SUFFQSxJQUFJQSxJQUFKO1FBQ0ksYyxHQUFZLFNBQVo7SUFFSixNLENBQU9BLEk7QUFOWCxDOztxQkFZQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLGM7QUFEWCxDOzs7OEJBeEJBLDRCLHdFQUFrQyxTO0FBQ2xDO0lBQ0ksTSxDQUFPLFVBQUMsQ0FBQ0EsSUFBRCwrQ0FBQ0EsSUFBRCxHQUFNLCtCQUFOLFdBQUQsdUhBQStCLFNBQS9CLEU7O0FBRFgsQzs7OztBQTZCQSxJQUFJLGUsR0FBa0IsaUJBQXRCO0FBRUE7QUFBQTs7NERBT0EsNEIsZ0VBQTZCLE07QUFDN0I7SUFDSUEsSSxHQUFPLEMsb0NBQUEsZ0IsSUFBQSxrQ0FBUDtJQUVBLElBQUlBLElBQUo7UUFDSSxjLEdBQVksS0FBSyxLLENBQU0sQ0FBQyxNQUFELG1CQUFDLE1BQUQsNkRBQUMsTUFBRCxHQUFRLCtDQUFSLDBCQUEyQixlQUEzQixFLENBQXZCO0lBRUosTSxDQUFPQSxJO0FBTlgsQzs7b0JBYUEsNEIsb0VBQWlDLE07QUFDakM7SUFDSSxDQUFDLE1BQUQsbUJBQUMsTUFBRCw4REFBQyxNQUFELEdBQVEsZ0RBQVIsRUFBK0MsZ0RBQS9DLDJCQUFxQixLQUFLLFMsQ0FBVSxjLENBQXBDLEVBQXNELGVBQXREO0FBREosQzs7Ozt1QkFNQSxRLENBQThCLFM7QUFDOUI7SUFDSSxNQUFNLEksQ0FBSyxvRixDQUFYO0lBQ0EsTSxDQUFPLEtBQUssUyxDQUFVLFM7QUFGMUIsQzsyQkFLQSxRLENBQWtDLE87QUFDbEM7SUFDSSxNQUFNLEksQ0FBSyxvRixDQUFYO0lBQ0EsTSxDQUFPLEtBQUssSyxDQUFNLE87QUFGdEIsQyIsImZpbGUiOiJDUFZhbHVlLmpzIiwic291cmNlUm9vdCI6ImZpbGU6L1VzZXJzL2RhdmlkL3Byb2dyYW1zL2NhcHB1Y2Npbm8vRm91bmRhdGlvbi8iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ1BWYWx1ZS5qXG4gKiBGb3VuZGF0aW9uXG4gKlxuICogQ3JlYXRlZCBieSBGcmFuY2lzY28gVG9sbWFza3kuXG4gKiBDb3B5cmlnaHQgMjAwOCwgMjgwIE5vcnRoLCBJbmMuXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyXG4gKiB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmVcbiAqIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5rbGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgMDIxMTAtMTMwMSBVU0FcbiAqL1xuXG5AaW1wb3J0IFwiQ1BDb2Rlci5qXCJcbkBpbXBvcnQgXCJDUE9iamVjdC5qXCJcblxuLyohXG4gICAgQGNsYXNzIENQVmFsdWVcbiAgICBAaW5ncm91cCBmb3VuZGF0aW9uXG4gICAgQGJyaWVmIEEgZ2VuZXJpYyBcInZhbHVlXCIuIENhbiBiZSBzdWJjbGFzc2VkIHRvIGhvbGQgc3BlY2lmaWMgZGF0YSB0eXBlcy5cblxuICAgIFRoZSBjbGFzcyBjYW4gYmUgc3ViY2xhc3NlZCB0byBob2xkIGRpZmZlcmVudCB0eXBlcyBvZiBzY2FsYXIgdmFsdWVzLlxuKi9cbkBpbXBsZW1lbnRhdGlvbiBDUFZhbHVlIDogQ1BPYmplY3RcbntcbiAgICBKU09iamVjdCAgICBfSlNPYmplY3Q7XG59XG5cbi8qIVxuICAgIENyZWF0ZXMgYSB2YWx1ZSBmcm9tIHRoZSBzcGVjaWZpZWQgSmF2YVNjcmlwdCBvYmplY3RcbiAgICBAcGFyYW0gYUpTT2JqZWN0IGEgSmF2YVNjcmlwdCBvYmplY3QgY29udGFpbmluZyBhIHZhbHVlXG4gICAgQHJldHVybiB0aGUgY29udmVydGVkIENQVmFsdWVcbiovXG4rIChpZCl2YWx1ZVdpdGhKU09iamVjdDooSlNPYmplY3QpYUpTT2JqZWN0XG57XG4gICAgcmV0dXJuIFtbc2VsZiBhbGxvY10gaW5pdFdpdGhKU09iamVjdDphSlNPYmplY3RdO1xufVxuXG4vKiFcbiAgICBJbml0aWFsaXplcyB0aGUgdmFsdWUgZnJvbSBhIEphdmFTY3JpcHQgb2JqZWN0XG4gICAgQHBhcmFtIGFKU09iamVjdCB0aGUgb2JqZWN0IHRvIGdldCBkYXRhIGZyb21cbiAgICBAcmV0dXJuIHRoZSBpbml0aWFsaXplZCBDUFZhbHVlXG4qL1xuLSAoaWQpaW5pdFdpdGhKU09iamVjdDooSlNPYmplY3QpYUpTT2JqZWN0XG57XG4gICAgc2VsZiA9IFtzdXBlciBpbml0XTtcblxuICAgIGlmIChzZWxmKVxuICAgICAgICBfSlNPYmplY3QgPSBhSlNPYmplY3Q7XG5cbiAgICByZXR1cm4gc2VsZjtcbn1cblxuLyohXG4gICAgUmV0dXJucyB0aGUgSmF2YVNjcmlwdCBvYmplY3QgYmFja2luZyB0aGlzIHZhbHVlLlxuKi9cbi0gKEpTT2JqZWN0KUpTT2JqZWN0XG57XG4gICAgcmV0dXJuIF9KU09iamVjdDtcbn1cblxuQGVuZFxuXG52YXIgQ1BWYWx1ZVZhbHVlS2V5ID0gQFwiQ1BWYWx1ZVZhbHVlS2V5XCI7XG5cbkBpbXBsZW1lbnRhdGlvbiBDUFZhbHVlIChDUENvZGluZylcblxuLyohXG4gICAgSW5pdGlhbGl6ZXMgdGhlIHZhbHVlIGZyb20gYSBjb2Rlci5cbiAgICBAcGFyYW0gYUNvZGVyIHRoZSBjb2RlciBmcm9tIHdoaWNoIHRvIGluaXRpYWxpemVcbiAgICBAcmV0dXJuIHRoZSBpbml0aWFsaXplZCBDUFZhbHVlXG4qL1xuLSAoaWQpaW5pdFdpdGhDb2RlcjooQ1BDb2RlcilhQ29kZXJcbntcbiAgICBzZWxmID0gW3N1cGVyIGluaXRdO1xuXG4gICAgaWYgKHNlbGYpXG4gICAgICAgIF9KU09iamVjdCA9IEpTT04ucGFyc2UoW2FDb2RlciBkZWNvZGVPYmplY3RGb3JLZXk6Q1BWYWx1ZVZhbHVlS2V5XSk7XG5cbiAgICByZXR1cm4gc2VsZjtcbn1cblxuLyohXG4gICAgRW5jb2RlcyB0aGUgZGF0YSBpbnRvIHRoZSBzcGVjaWZpZWQgY29kZXIuXG4gICAgQHBhcmFtIHRoZSBjb2RlciBpbnRvIHdoaWNoIHRoZSBkYXRhIHdpbGwgYmUgd3JpdHRlbi5cbiovXG4tICh2b2lkKWVuY29kZVdpdGhDb2RlcjooQ1BDb2RlcilhQ29kZXJcbntcbiAgICBbYUNvZGVyIGVuY29kZU9iamVjdDpKU09OLnN0cmluZ2lmeShfSlNPYmplY3QpIGZvcktleTpDUFZhbHVlVmFsdWVLZXldO1xufVxuXG5AZW5kXG5cbmZ1bmN0aW9uIENQSlNPYmplY3RDcmVhdGVKU09OKGFKU09iamVjdClcbntcbiAgICBDUExvZy53YXJuKFwiQ1BKU09iamVjdENyZWF0ZUpTT04gZGVwcmVjYXRlZCwgdXNlIEpTT04uc3RyaW5naWZ5KCkgb3IgQ1BTdHJpbmcncyBvYmplY3RGcm9tSlNPTlwiKTtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYUpTT2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gQ1BKU09iamVjdENyZWF0ZVdpdGhKU09OKGFTdHJpbmcpXG57XG4gICAgQ1BMb2cud2FybihcIkNQSlNPYmplY3RDcmVhdGVXaXRoSlNPTiBkZXByZWNhdGVkLCB1c2UgSlNPTi5wYXJzZSgpIG9yIENQU3RyaW5nJ3MgSlNPTkZyb21PYmplY3RcIik7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoYVN0cmluZyk7XG59XG4iXX0=t;2687;

objj_executeFile("CPCoder.j", YES);objj_executeFile("CPObject.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPValue"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_JSObject", "JSObject")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithJSObject:"), function $CPValue__initWithJSObject_(self, _cmd, aJSObject)
{
    self = (objj_getClass("CPValue").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
        self._JSObject = aJSObject;
    return self;
}

,["id","JSObject"]), new objj_method(sel_getUid("JSObject"), function $CPValue__JSObject(self, _cmd)
{
    return self._JSObject;
}

,["JSObject"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("valueWithJSObject:"), function $CPValue__valueWithJSObject_(self, _cmd, aJSObject)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithJSObject:"] || _objj_forward)(___r1, "initWithJSObject:", aJSObject));
    var ___r1;
}

,["id","JSObject"])]);
}
var CPValueValueKey = "CPValueValueKey";
{
var the_class = objj_getClass("CPValue")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPValue\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPValue__initWithCoder_(self, _cmd, aCoder)
{
    self = (objj_getClass("CPValue").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
        self._JSObject = JSON.parse((aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPValueValueKey)));
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPValue__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), JSON.stringify(self._JSObject), CPValueValueKey));
}

,["void","CPCoder"])]);
}
CPJSObjectCreateJSON = function(aJSObject)
{
    CPLog.warn("CPJSObjectCreateJSON deprecated, use JSON.stringify() or CPString's objectFromJSON");
    return JSON.stringify(aJSObject);
}
CPJSObjectCreateWithJSON = function(aString)
{
    CPLog.warn("CPJSObjectCreateWithJSON deprecated, use JSON.parse() or CPString's JSONFromObject");
    return JSON.parse(aString);
}
p;29;CPPropertyListSerialization.jt;6705;@STATIC;1.0;i;13;CPException.ji;10;CPObject.jS;4136;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQUHJvcGVydHlMaXN0U2VyaWFsaXphdGlvbi5qIl0sIm5hbWVzIjpbInNlbGYiXSwibWFwcGluZ3MiOiI7O0FBc0JBLGtCLHFCQUNBLGtCLGtCQUdBLDJCLEdBQXNDLENBQXRDO0FBQ0EsNEIsR0FBc0MsNkJBQXRDO0FBQ0EsNEIsR0FBc0MsNkJBQXRDO0FBQ0EsK0IsR0FBc0MsZ0NBQXRDO0FBQ0EsaUMsR0FBc0Msa0NBQXRDO0FBRUE7QUFBQTtBQUFBLDJCOzhCQUlBLDRCLGdIQUFtQyxNLEVBQW9DLE87QUFDdkU7SUFDSSxNLENBQU8sd0IsQ0FBeUIsTSxFQUFRLE87QUFENUMsQzs7MENBSUEsNEIsZ0hBQW1DLEksRUFBa0MsTztBQUNyRTtJQUNJLE0sQ0FBTyw0QixDQUE2QixJLEVBQU0sTztBQUQ5QyxDOzs7O0FBTUE7QUFBQTs7NkRBRUEsNEIsa0pBQW1DLE0sRUFBb0MsTyxFQUE2QixhO0FBQ3BHO0lBQ0ksMkIsQ0FBNEJBLEksRUFBTSxJLEVBQU0sWSwrQkFBeEM7SUFFQSxNLENBQU8sQ0FBQ0EsSUFBRCxzRUFBQ0EsSUFBRCxHQUFNLHNEQUFOLEVBQWtDLHNEQUFsQyxtQ0FBMkIsTUFBM0IsRUFBeUMsT0FBekMsQztBQUhYLEM7OytDQU1BLDRCLGtKQUFtQyxJLEVBQWtDLE8sRUFBNkIsVztBQUNsRztJQUNJLDJCLENBQTRCQSxJLEVBQU0sSSxFQUFNLFksK0JBQXhDO0lBRUEsTSxDQUFPLENBQUNBLElBQUQsc0VBQUNBLElBQUQsR0FBTSxzREFBTixFQUFnQyxzREFBaEMsbUNBQTJCLElBQTNCLEVBQXVDLE9BQXZDLEM7QUFIWCxDIiwiZmlsZSI6IkNQUHJvcGVydHlMaXN0U2VyaWFsaXphdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi9Vc2Vycy9kYXZpZC9wcm9ncmFtcy9jYXBwdWNjaW5vL0ZvdW5kYXRpb24vIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENQUHJvcGVydHlMaXN0U2VyaWFsaXphdGlvbi5qXG4gKiBGb3VuZGF0aW9uXG4gKlxuICogQ3JlYXRlZCBieSBGcmFuY2lzY28gVG9sbWFza3kuXG4gKiBDb3B5cmlnaHQgMjAwOCwgMjgwIE5vcnRoLCBJbmMuXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyXG4gKiB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmVcbiAqIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5rbGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgMDIxMTAtMTMwMSBVU0FcbiAqL1xuXG5AaW1wb3J0IFwiQ1BFeGNlcHRpb24ualwiXG5AaW1wb3J0IFwiQ1BPYmplY3QualwiXG5cblxuQ1BQcm9wZXJ0eUxpc3RVbmtub3duRm9ybWF0ICAgICAgICAgPSAwO1xuQ1BQcm9wZXJ0eUxpc3RPcGVuU3RlcEZvcm1hdCAgICAgICAgPSBrQ0ZQcm9wZXJ0eUxpc3RPcGVuU3RlcEZvcm1hdDtcbkNQUHJvcGVydHlMaXN0WE1MRm9ybWF0X3YxXzAgICAgICAgID0ga0NGUHJvcGVydHlMaXN0WE1MRm9ybWF0X3YxXzA7XG5DUFByb3BlcnR5TGlzdEJpbmFyeUZvcm1hdF92MV8wICAgICA9IGtDRlByb3BlcnR5TGlzdEJpbmFyeUZvcm1hdF92MV8wO1xuQ1BQcm9wZXJ0eUxpc3QyODBOb3J0aEZvcm1hdF92MV8wICAgPSBrQ0ZQcm9wZXJ0eUxpc3QyODBOb3J0aEZvcm1hdF92MV8wO1xuXG5AaW1wbGVtZW50YXRpb24gQ1BQcm9wZXJ0eUxpc3RTZXJpYWxpemF0aW9uIDogQ1BPYmplY3Rcbntcbn1cblxuKyAoQ1BEYXRhKWRhdGFGcm9tUHJvcGVydHlMaXN0OihpZClhUGxpc3QgZm9ybWF0OihDUFByb3BlcnR5TGlzdEZvcm1hdClhRm9ybWF0XG57XG4gICAgcmV0dXJuIENQUHJvcGVydHlMaXN0Q3JlYXRlRGF0YShhUGxpc3QsIGFGb3JtYXQpO1xufVxuXG4rIChpZClwcm9wZXJ0eUxpc3RGcm9tRGF0YTooQ1BEYXRhKWRhdGEgZm9ybWF0OihDUFByb3BlcnR5TGlzdEZvcm1hdClhRm9ybWF0XG57XG4gICAgcmV0dXJuIENQUHJvcGVydHlMaXN0Q3JlYXRlRnJvbURhdGEoZGF0YSwgYUZvcm1hdCk7XG59XG5cbkBlbmRcblxuQGltcGxlbWVudGF0aW9uIENQUHJvcGVydHlMaXN0U2VyaWFsaXphdGlvbiAoRGVwcmVjYXRlZClcblxuKyAoQ1BEYXRhKWRhdGFGcm9tUHJvcGVydHlMaXN0OihpZClhUGxpc3QgZm9ybWF0OihDUFByb3BlcnR5TGlzdEZvcm1hdClhRm9ybWF0IGVycm9yRGVzY3JpcHRpb246KGlkKWFuRXJyb3JTdHJpbmdcbntcbiAgICBfQ1BSZXBvcnRMZW5pZW50RGVwcmVjYXRpb24oc2VsZiwgX2NtZCwgQHNlbGVjdG9yKGRhdGFGcm9tUHJvcGVydHlMaXN0OmZvcm1hdDopKTtcblxuICAgIHJldHVybiBbc2VsZiBkYXRhRnJvbVByb3BlcnR5TGlzdDphUGxpc3QgZm9ybWF0OmFGb3JtYXRdO1xufVxuXG4rIChpZClwcm9wZXJ0eUxpc3RGcm9tRGF0YTooQ1BEYXRhKWRhdGEgZm9ybWF0OihDUFByb3BlcnR5TGlzdEZvcm1hdClhRm9ybWF0IGVycm9yRGVzY3JpcHRpb246KGlkKWVycm9yU3RyaW5nXG57XG4gICAgX0NQUmVwb3J0TGVuaWVudERlcHJlY2F0aW9uKHNlbGYsIF9jbWQsIEBzZWxlY3Rvcihwcm9wZXJ0eUxpc3RGcm9tRGF0YTpmb3JtYXQ6KSk7XG5cbiAgICByZXR1cm4gW3NlbGYgcHJvcGVydHlMaXN0RnJvbURhdGE6ZGF0YSBmb3JtYXQ6YUZvcm1hdF07XG59XG5cbkBlbmRcbiJdfQ==t;2510;

objj_executeFile("CPException.j", YES);objj_executeFile("CPObject.j", YES);CPPropertyListUnknownFormat = 0;
CPPropertyListOpenStepFormat = kCFPropertyListOpenStepFormat;
CPPropertyListXMLFormat_v1_0 = kCFPropertyListXMLFormat_v1_0;
CPPropertyListBinaryFormat_v1_0 = kCFPropertyListBinaryFormat_v1_0;
CPPropertyList280NorthFormat_v1_0 = kCFPropertyList280NorthFormat_v1_0;

{var the_class = objj_allocateClassPair(CPObject, "CPPropertyListSerialization"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(meta_class, [new objj_method(sel_getUid("dataFromPropertyList:format:"), function $CPPropertyListSerialization__dataFromPropertyList_format_(self, _cmd, aPlist, aFormat)
{
    return CPPropertyListCreateData(aPlist, aFormat);
}

,["CPData","id","CPPropertyListFormat"]), new objj_method(sel_getUid("propertyListFromData:format:"), function $CPPropertyListSerialization__propertyListFromData_format_(self, _cmd, data, aFormat)
{
    return CPPropertyListCreateFromData(data, aFormat);
}

,["id","CPData","CPPropertyListFormat"])]);
}
{
var the_class = objj_getClass("CPPropertyListSerialization")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPPropertyListSerialization\"");
var meta_class = the_class.isa;class_addMethods(meta_class, [new objj_method(sel_getUid("dataFromPropertyList:format:errorDescription:"), function $CPPropertyListSerialization__dataFromPropertyList_format_errorDescription_(self, _cmd, aPlist, aFormat, anErrorString)
{
    _CPReportLenientDeprecation(self, _cmd, sel_getUid("dataFromPropertyList:format:"));
    return (self.isa.method_msgSend["dataFromPropertyList:format:"] || _objj_forward)(self, (self.isa.method_dtable["dataFromPropertyList:format:"], self.isa.method_dtable["dataFromPropertyList:format:"], "dataFromPropertyList:format:"), aPlist, aFormat);
}

,["CPData","id","CPPropertyListFormat","id"]), new objj_method(sel_getUid("propertyListFromData:format:errorDescription:"), function $CPPropertyListSerialization__propertyListFromData_format_errorDescription_(self, _cmd, data, aFormat, errorString)
{
    _CPReportLenientDeprecation(self, _cmd, sel_getUid("propertyListFromData:format:"));
    return (self.isa.method_msgSend["propertyListFromData:format:"] || _objj_forward)(self, (self.isa.method_dtable["propertyListFromData:format:"], self.isa.method_dtable["propertyListFromData:format:"], "propertyListFromData:format:"), data, aFormat);
}

,["id","CPData","CPPropertyListFormat","id"])]);
}
p;10;CPString.jt;82860;@STATIC;1.0;i;13;CPException.ji;10;CPObject.ji;15;CPObjJRuntime.ji;9;CPRange.ji;18;CPSortDescriptor.ji;7;CPURL.ji;9;CPValue.ji;8;CPNull.jS;56040;t;26667;

objj_executeFile("CPException.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPObjJRuntime.j", YES);objj_executeFile("CPRange.j", YES);objj_executeFile("CPSortDescriptor.j", YES);objj_executeFile("CPURL.j", YES);objj_executeFile("CPValue.j", YES);objj_executeFile("CPNull.j", YES);CPCaseInsensitiveSearch = 1;
CPLiteralSearch = 2;
CPBackwardsSearch = 4;
CPAnchoredSearch = 8;
CPNumericSearch = 64;
CPDiacriticInsensitiveSearch = 128;
var CPStringUIDs = new CFMutableDictionary(),
    CPStringRegexSpecialCharacters = ['/', '.', '*', '+', '?', '|', '$', '^', '(', ')', '[', ']', '{', '}', '\\'],
    CPStringRegexEscapeExpression = new RegExp("(\\" + CPStringRegexSpecialCharacters.join("|\\") + ")", 'g'),
    CPStringRegexTrimWhitespace = new RegExp("(^\\s+|\\s+$)", 'g');

{var the_class = objj_allocateClassPair(CPObject, "CPString"),
meta_class = the_class.isa;var CPStringNull = (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null"));
objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithString:"), function $CPString__initWithString_(self, _cmd, aString)
{
    if ((self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")) === CPString)
        return String(aString);
    var result = new String(aString);
    result.isa = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"));
    return result;
}

,["id","CPString"]), new objj_method(sel_getUid("initWithFormat:"), function $CPString__initWithFormat_(self, _cmd, format)
{
    if (!format)
        (CPException == null ? null : (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "initWithFormat: the format can't be 'nil'"));
    self = ObjectiveJ.sprintf.apply(this, Array.prototype.slice.call(arguments, 2));
    return self;
}

,["id","CPString"]), new objj_method(sel_getUid("description"), function $CPString__description(self, _cmd)
{
    return self;
}

,["CPString"]), new objj_method(sel_getUid("length"), function $CPString__length(self, _cmd)
{
    return self.length;
}

,["int"]), new objj_method(sel_getUid("characterAtIndex:"), function $CPString__characterAtIndex_(self, _cmd, anIndex)
{
    return self.charAt(anIndex);
}

,["CPString","CPUInteger"]), new objj_method(sel_getUid("stringByAppendingFormat:"), function $CPString__stringByAppendingFormat_(self, _cmd, format)
{
    if (!format)
        (CPException == null ? null : (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "initWithFormat: the format can't be 'nil'"));
    return self + ObjectiveJ.sprintf.apply(this, Array.prototype.slice.call(arguments, 2));
}

,["CPString","CPString"]), new objj_method(sel_getUid("stringByAppendingString:"), function $CPString__stringByAppendingString_(self, _cmd, aString)
{
    return self + aString;
}

,["CPString","CPString"]), new objj_method(sel_getUid("stringByPaddingToLength:withString:startingAtIndex:"), function $CPString__stringByPaddingToLength_withString_startingAtIndex_(self, _cmd, aLength, aString, anIndex)
{
    if (self.length == aLength)
        return self;
    if (aLength < self.length)
        return self.substr(0, aLength);
    var string = self,
        substring = aString.substring(anIndex),
        difference = aLength - self.length;
    while ((difference -= substring.length) >= 0)
        string += substring;
    if (-difference < substring.length)
        string += substring.substring(0, -difference);
    return string;
}

,["CPString","unsigned","CPString","CPUInteger"]), new objj_method(sel_getUid("componentsSeparatedByString:"), function $CPString__componentsSeparatedByString_(self, _cmd, aString)
{
    return self.split(aString);
}

,["CPArray","CPString"]), new objj_method(sel_getUid("substringFromIndex:"), function $CPString__substringFromIndex_(self, _cmd, anIndex)
{
    return self.substr(anIndex);
}

,["CPString","unsigned"]), new objj_method(sel_getUid("substringWithRange:"), function $CPString__substringWithRange_(self, _cmd, aRange)
{
    if (aRange.location < 0 || CPMaxRange(aRange) > self.length)
        (CPException == null ? null : (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPRangeException, "aRange out of bounds"));
    return self.substr(aRange.location, aRange.length);
}

,["CPString","CPRange"]), new objj_method(sel_getUid("substringToIndex:"), function $CPString__substringToIndex_(self, _cmd, anIndex)
{
    if (anIndex > self.length)
        (CPException == null ? null : (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPRangeException, "index out of bounds"));
    return self.substring(0, anIndex);
}

,["CPString","unsigned"]), new objj_method(sel_getUid("rangeOfString:"), function $CPString__rangeOfString_(self, _cmd, aString)
{
    return (self.isa.method_msgSend["rangeOfString:options:"] || _objj_forward)(self, (self.isa.method_dtable["rangeOfString:options:"], self.isa.method_dtable["rangeOfString:options:"], "rangeOfString:options:"), aString, 0);
}

,["CPRange","CPString"]), new objj_method(sel_getUid("rangeOfString:options:"), function $CPString__rangeOfString_options_(self, _cmd, aString, aMask)
{
    return (self.isa.method_msgSend["rangeOfString:options:range:"] || _objj_forward)(self, (self.isa.method_dtable["rangeOfString:options:range:"], self.isa.method_dtable["rangeOfString:options:range:"], self.isa.method_dtable["rangeOfString:options:range:"], "rangeOfString:options:range:"), aString, aMask, nil);
}

,["CPRange","CPString","int"]), new objj_method(sel_getUid("rangeOfString:options:range:"), function $CPString__rangeOfString_options_range_(self, _cmd, aString, aMask, aRange)
{
    if (!aString)
        return CPMakeRange(CPNotFound, 0);
    var string = aRange == nil ? self : (self.isa.method_msgSend["substringWithRange:"] || _objj_forward)(self, (self.isa.method_dtable["substringWithRange:"], "substringWithRange:"), aRange),
        location = CPNotFound;
    if (aMask & CPCaseInsensitiveSearch)
    {
        string = string.toLowerCase();
        aString = aString.toLowerCase();
    }
    if (aMask & CPDiacriticInsensitiveSearch)
    {
        string = string.stripDiacritics();
        aString = aString.stripDiacritics();
    }
    if (aMask & CPBackwardsSearch)
    {
        location = string.lastIndexOf(aString);
        if (aMask & CPAnchoredSearch && location + aString.length != string.length)
            location = CPNotFound;
    }
    else if (aMask & CPAnchoredSearch)
        location = (string.substr(0, aString.length)).indexOf(aString) != CPNotFound ? 0 : CPNotFound;
    else
        location = string.indexOf(aString);
    if (location == CPNotFound)
        return CPMakeRange(CPNotFound, 0);
    return CPMakeRange(location + (aRange ? aRange.location : 0), aString.length);
}

,["CPRange","CPString","int","CPrange"]), new objj_method(sel_getUid("stringByEscapingRegexControlCharacters"), function $CPString__stringByEscapingRegexControlCharacters(self, _cmd)
{
    return self.replace(CPStringRegexEscapeExpression, "\\$1");
}

,["CPString"]), new objj_method(sel_getUid("stringByReplacingOccurrencesOfString:withString:"), function $CPString__stringByReplacingOccurrencesOfString_withString_(self, _cmd, target, replacement)
{
    return self.replace(new RegExp((target == null ? null : (target.isa.method_msgSend["stringByEscapingRegexControlCharacters"] || _objj_forward)(target, (target.isa.method_dtable["stringByEscapingRegexControlCharacters"], "stringByEscapingRegexControlCharacters"))), "g"), replacement);
}

,["CPString","CPString","CPString"]), new objj_method(sel_getUid("stringByReplacingOccurrencesOfString:withString:options:range:"), function $CPString__stringByReplacingOccurrencesOfString_withString_options_range_(self, _cmd, target, replacement, options, searchRange)
{
    var start = self.substring(0, searchRange.location),
        stringSegmentToSearch = self.substr(searchRange.location, searchRange.length),
        end = self.substring(searchRange.location + searchRange.length, self.length),
        target = (target == null ? null : (target.isa.method_msgSend["stringByEscapingRegexControlCharacters"] || _objj_forward)(target, (target.isa.method_dtable["stringByEscapingRegexControlCharacters"], "stringByEscapingRegexControlCharacters"))),
        regExp;
    if (options & CPCaseInsensitiveSearch)
        regExp = new RegExp(target, "gi");
    else
        regExp = new RegExp(target, "g");
    return start + '' + stringSegmentToSearch.replace(regExp, replacement) + '' + end;
}

,["CPString","CPString","CPString","int","CPRange"]), new objj_method(sel_getUid("stringByReplacingCharactersInRange:withString:"), function $CPString__stringByReplacingCharactersInRange_withString_(self, _cmd, range, replacement)
{
    return '' + self.substring(0, range.location) + replacement + self.substring(range.location + range.length, self.length);
}

,["CPString","CPRange","CPString"]), new objj_method(sel_getUid("stringByTrimmingWhitespace"), function $CPString__stringByTrimmingWhitespace(self, _cmd)
{
    return self.replace(CPStringRegexTrimWhitespace, "");
}

,["CPString"]), new objj_method(sel_getUid("compare:"), function $CPString__compare_(self, _cmd, aString)
{
    return (self.isa.method_msgSend["compare:options:"] || _objj_forward)(self, (self.isa.method_dtable["compare:options:"], self.isa.method_dtable["compare:options:"], "compare:options:"), aString, nil);
}

,["CPComparisonResult","CPString"]), new objj_method(sel_getUid("caseInsensitiveCompare:"), function $CPString__caseInsensitiveCompare_(self, _cmd, aString)
{
    return (self.isa.method_msgSend["compare:options:"] || _objj_forward)(self, (self.isa.method_dtable["compare:options:"], self.isa.method_dtable["compare:options:"], "compare:options:"), aString, CPCaseInsensitiveSearch);
}

,["CPComparisonResult","CPString"]), new objj_method(sel_getUid("compare:options:"), function $CPString__compare_options_(self, _cmd, aString, aMask)
{
    if (aString === nil)
        return CPOrderedDescending;
    if (aString === CPStringNull)
        (CPException == null ? null : (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "compare: argument can't be 'CPNull'"));
    var lhs = self,
        rhs = aString;
    if (aMask & CPCaseInsensitiveSearch)
    {
        lhs = lhs.toLowerCase();
        rhs = rhs.toLowerCase();
    }
    if (aMask & CPDiacriticInsensitiveSearch)
    {
        lhs = lhs.stripDiacritics();
        rhs = rhs.stripDiacritics();
    }
    if (lhs < rhs)
        return CPOrderedAscending;
    if (lhs > rhs)
        return CPOrderedDescending;
    return CPOrderedSame;
}

,["CPComparisonResult","CPString","int"]), new objj_method(sel_getUid("compare:options:range:"), function $CPString__compare_options_range_(self, _cmd, aString, aMask, range)
{
    var lhs = (self.isa.method_msgSend["substringWithRange:"] || _objj_forward)(self, (self.isa.method_dtable["substringWithRange:"], "substringWithRange:"), range),
        rhs = aString;
    return (lhs == null ? null : (lhs.isa.method_msgSend["compare:options:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["compare:options:"], lhs.isa.method_dtable["compare:options:"], "compare:options:"), rhs, aMask));
}

,["CPComparisonResult","CPString","int","CPRange"]), new objj_method(sel_getUid("hasPrefix:"), function $CPString__hasPrefix_(self, _cmd, aString)
{
    return aString && aString != "" && self.indexOf(aString) == 0;
}

,["BOOL","CPString"]), new objj_method(sel_getUid("hasSuffix:"), function $CPString__hasSuffix_(self, _cmd, aString)
{
    return aString && aString != "" && self.length >= aString.length && self.lastIndexOf(aString) == self.length - aString.length;
}

,["BOOL","CPString"]), new objj_method(sel_getUid("isEqual:"), function $CPString__isEqual_(self, _cmd, anObject)
{
    if (self === anObject)
        return YES;
    if (!anObject || !(anObject == null ? null : (anObject.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPString.isa.method_msgSend["class"] || _objj_forward)(CPString, (CPString.isa.method_dtable["class"], "class")))))
        return NO;
    return (self.isa.method_msgSend["isEqualToString:"] || _objj_forward)(self, (self.isa.method_dtable["isEqualToString:"], "isEqualToString:"), anObject);
}

,["BOOL","id"]), new objj_method(sel_getUid("isEqualToString:"), function $CPString__isEqualToString_(self, _cmd, aString)
{
    return self == String(aString);
}

,["BOOL","CPString"]), new objj_method(sel_getUid("UID"), function $CPString__UID(self, _cmd)
{
    var UID = CPStringUIDs.valueForKey(self);
    if (!UID)
    {
        UID = objj_generateObjectUID();
        CPStringUIDs.setValueForKey(self, UID);
    }
    return UID + "";
}

,["CPString"]), new objj_method(sel_getUid("commonPrefixWithString:"), function $CPString__commonPrefixWithString_(self, _cmd, aString)
{
    return (self.isa.method_msgSend["commonPrefixWithString:options:"] || _objj_forward)(self, (self.isa.method_dtable["commonPrefixWithString:options:"], self.isa.method_dtable["commonPrefixWithString:options:"], "commonPrefixWithString:options:"), aString, 0);
}

,["CPString","CPString"]), new objj_method(sel_getUid("commonPrefixWithString:options:"), function $CPString__commonPrefixWithString_options_(self, _cmd, aString, aMask)
{
    var len = 0,
        lhs = self,
        rhs = aString,
        min = MIN((lhs == null ? null : (lhs.isa.method_msgSend["length"] || _objj_forward)(lhs, (lhs.isa.method_dtable["length"], "length"))), (rhs == null ? null : (rhs.isa.method_msgSend["length"] || _objj_forward)(rhs, (rhs.isa.method_dtable["length"], "length"))));
    if (aMask & CPCaseInsensitiveSearch)
    {
        lhs = (lhs == null ? null : (lhs.isa.method_msgSend["lowercaseString"] || _objj_forward)(lhs, (lhs.isa.method_dtable["lowercaseString"], "lowercaseString")));
        rhs = (rhs == null ? null : (rhs.isa.method_msgSend["lowercaseString"] || _objj_forward)(rhs, (rhs.isa.method_dtable["lowercaseString"], "lowercaseString")));
    }
    for (; len < min; len++)
    {
        if ((lhs == null ? null : (lhs.isa.method_msgSend["characterAtIndex:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["characterAtIndex:"], "characterAtIndex:"), len)) !== (rhs == null ? null : (rhs.isa.method_msgSend["characterAtIndex:"] || _objj_forward)(rhs, (rhs.isa.method_dtable["characterAtIndex:"], "characterAtIndex:"), len)))
            break;
    }
    return (self.isa.method_msgSend["substringToIndex:"] || _objj_forward)(self, (self.isa.method_dtable["substringToIndex:"], "substringToIndex:"), len);
}

,["CPString","CPString","int"]), new objj_method(sel_getUid("capitalizedString"), function $CPString__capitalizedString(self, _cmd)
{
    var parts = self.split(/\b/g),
        i = 0,
        count = parts.length;
    for (; i < count; i++)
    {
        if (i == 0 || /\s$/.test(parts[i - 1]))
            parts[i] = (parts[i].substring(0, 1)).toUpperCase() + (parts[i].substring(1)).toLowerCase();
        else
            parts[i] = parts[i].toLowerCase();
    }
    return parts.join("");
}

,["CPString"]), new objj_method(sel_getUid("lowercaseString"), function $CPString__lowercaseString(self, _cmd)
{
    return self.toLowerCase();
}

,["CPString"]), new objj_method(sel_getUid("uppercaseString"), function $CPString__uppercaseString(self, _cmd)
{
    return self.toUpperCase();
}

,["CPString"]), new objj_method(sel_getUid("stripDiacritics"), function $CPString__stripDiacritics(self, _cmd)
{
    return self.stripDiacritics();
}

,["CPString"]), new objj_method(sel_getUid("doubleValue"), function $CPString__doubleValue(self, _cmd)
{
    return parseFloat(self, 10);
}

,["double"]), new objj_method(sel_getUid("boolValue"), function $CPString__boolValue(self, _cmd)
{
    var replaceRegExp = new RegExp("^\\s*[\\+,\\-]?0*");
    return (RegExp("^[Y,y,t,T,1-9]")).test(self.replace(replaceRegExp, ''));
}

,["BOOL"]), new objj_method(sel_getUid("floatValue"), function $CPString__floatValue(self, _cmd)
{
    return parseFloat(self, 10);
}

,["float"]), new objj_method(sel_getUid("intValue"), function $CPString__intValue(self, _cmd)
{
    return parseInt(self, 10);
}

,["int"]), new objj_method(sel_getUid("integerValue"), function $CPString__integerValue(self, _cmd)
{
    return parseInt(self, 10);
}

,["int"]), new objj_method(sel_getUid("pathComponents"), function $CPString__pathComponents(self, _cmd)
{
    if (self.length === 0)
        return [""];
    if (self === "/")
        return ["/"];
    var result = self.split('/');
    if (result[0] === "")
        result[0] = "/";
    var index = result.length - 1;
    if (index > 0)
    {
        if (result[index] === "")
            result[index] = "/";
        while (index--)
        {
            while (result[index] === "")
                result.splice(index--, 1);
        }
    }
    return result;
}

,["CPArray"]), new objj_method(sel_getUid("pathExtension"), function $CPString__pathExtension(self, _cmd)
{
    if (self.lastIndexOf('.') === CPNotFound)
        return "";
    return self.substr(self.lastIndexOf('.') + 1);
}

,["CPString"]), new objj_method(sel_getUid("lastPathComponent"), function $CPString__lastPathComponent(self, _cmd)
{
    var components = (self.isa.method_msgSend["pathComponents"] || _objj_forward)(self, (self.isa.method_dtable["pathComponents"], "pathComponents")),
        lastIndex = components.length - 1,
        lastComponent = components[lastIndex];
    return lastIndex > 0 && lastComponent === "/" ? components[lastIndex - 1] : lastComponent;
}

,["CPString"]), new objj_method(sel_getUid("stringByAppendingPathComponent:"), function $CPString__stringByAppendingPathComponent_(self, _cmd, aString)
{
    var components = (self.isa.method_msgSend["pathComponents"] || _objj_forward)(self, (self.isa.method_dtable["pathComponents"], "pathComponents")),
        addComponents = aString && aString !== "/" ? (aString == null ? null : (aString.isa.method_msgSend["pathComponents"] || _objj_forward)(aString, (aString.isa.method_dtable["pathComponents"], "pathComponents"))) : [];
    return (CPString.isa.method_msgSend["pathWithComponents:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["pathWithComponents:"], "pathWithComponents:"), components.concat(addComponents));
}

,["CPString","CPString"]), new objj_method(sel_getUid("stringByAppendingPathExtension:"), function $CPString__stringByAppendingPathExtension_(self, _cmd, ext)
{
    if (ext.indexOf('/') >= 0 || self.length === 0 || self === "/")
        return self;
    var components = (self.isa.method_msgSend["pathComponents"] || _objj_forward)(self, (self.isa.method_dtable["pathComponents"], "pathComponents")),
        last = components.length - 1;
    if (last > 0 && components[last] === "/")
        components.splice(last--, 1);
    components[last] = components[last] + "." + ext;
    return (CPString.isa.method_msgSend["pathWithComponents:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["pathWithComponents:"], "pathWithComponents:"), components);
}

,["CPString","CPString"]), new objj_method(sel_getUid("stringByDeletingLastPathComponent"), function $CPString__stringByDeletingLastPathComponent(self, _cmd)
{
    if (self.length === 0)
        return "";
    else if (self === "/")
        return "/";
    var components = (self.isa.method_msgSend["pathComponents"] || _objj_forward)(self, (self.isa.method_dtable["pathComponents"], "pathComponents")),
        last = components.length - 1;
    if (components[last] === "/")
        last--;
    components.splice(last, components.length - last);
    return (CPString.isa.method_msgSend["pathWithComponents:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["pathWithComponents:"], "pathWithComponents:"), components);
}

,["CPString"]), new objj_method(sel_getUid("stringByDeletingPathExtension"), function $CPString__stringByDeletingPathExtension(self, _cmd)
{
    var extension = (self.isa.method_msgSend["pathExtension"] || _objj_forward)(self, (self.isa.method_dtable["pathExtension"], "pathExtension"));
    if (extension === "")
        return self;
    else if (self.lastIndexOf('.') < 1)
        return self;
    return self.substr(0, (self.isa.method_msgSend["length"] || _objj_forward)(self, (self.isa.method_dtable["length"], "length")) - (extension.length + 1));
}

,["CPString"]), new objj_method(sel_getUid("stringByStandardizingPath"), function $CPString__stringByStandardizingPath(self, _cmd)
{
    return ((___r1 = (CPURL == null ? null : (CPURL.isa.method_msgSend["URLWithString:"] || _objj_forward)(CPURL, (CPURL.isa.method_dtable["URLWithString:"], "URLWithString:"), self))), ___r1 == null ? null : (___r1.isa.method_msgSend["absoluteString"] || _objj_forward)(___r1, "absoluteString"));
    var ___r1;
}

,["CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPString__alloc(self, _cmd)
{
    if ((self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")) !== CPString)
        return (objj_getMetaClass("CPString").super_class.method_dtable["alloc"] || _objj_forward)(self, "alloc");
    return new String();
}

,["id"]), new objj_method(sel_getUid("string"), function $CPString__string(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("stringWithHash:"), function $CPString__stringWithHash_(self, _cmd, aHash)
{
    var hashString = (parseInt(aHash, 10)).toString(16);
    return "000000".substring(0, MAX(6 - hashString.length, 0)) + hashString;
}

,["id","unsigned"]), new objj_method(sel_getUid("stringWithString:"), function $CPString__stringWithString_(self, _cmd, aString)
{
    if (!aString)
        (CPException == null ? null : (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "stringWithString: the string can't be 'nil'"));
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithString:"] || _objj_forward)(___r1, "initWithString:", aString));
    var ___r1;
}

,["id","CPString"]), new objj_method(sel_getUid("stringWithFormat:"), function $CPString__stringWithFormat_(self, _cmd, format)
{
    if (!format)
        (CPException == null ? null : (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "initWithFormat: the format can't be 'nil'"));
    return ObjectiveJ.sprintf.apply(this, Array.prototype.slice.call(arguments, 2));
}

,["id","CPString"]), new objj_method(sel_getUid("pathWithComponents:"), function $CPString__pathWithComponents_(self, _cmd, components)
{
    var size = components.length,
        result = "",
        i = -1,
        firstRound = true,
        firstIsSlash = false;
    while (++i < size)
    {
        var component = components[i],
            lenMinusOne = component.length - 1;
        if (lenMinusOne >= 0 && (component !== "/" || firstRound))
        {
            if (lenMinusOne > 0 && component.indexOf("/", lenMinusOne) === lenMinusOne)
                component = component.substring(0, lenMinusOne);
            if (firstRound)
            {
                if (component === "/")
                    firstIsSlash = true;
                firstRound = false;
            }
            else if (!firstIsSlash)
                result += "/";
            else
                firstIsSlash = false;
            result += component;
        }
    }
    return result;
}

,["CPString","CPArray"])]);
}
{
var the_class = objj_getClass("CPString")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPString\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("objectFromJSON"), function $CPString__objectFromJSON(self, _cmd)
{
    return JSON.parse(self);
}

,["JSObject"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("JSONFromObject:"), function $CPString__JSONFromObject_(self, _cmd, anObject)
{
    return JSON.stringify(anObject);
}

,["CPString","JSObject"])]);
}
{
var the_class = objj_getClass("CPString")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPString\"");
var meta_class = the_class.isa;class_addMethods(meta_class, [new objj_method(sel_getUid("UUID"), function $CPString__UUID(self, _cmd)
{
    var g = "",
        i = 0;
    for (; i < 32; i++)
        g += (FLOOR(RAND() * 0xF)).toString(0xF);
    return g;
}

,["CPString"])]);
}
var diacritics = [[192, 198], [200, 203], [204, 207], [210, 214], [217, 220], [224, 230], [231, 231], [232, 235], [236, 239], [242, 246], [249, 252]],
    normalized = [65, 69, 73, 79, 85, 97, 99, 101, 105, 111, 117];
String.prototype.stripDiacritics = function()
{
    var output = "";
    for (var indexSource = 0; indexSource < this.length; indexSource++)
    {
        var code = this.charCodeAt(indexSource);
        for (var i = 0; i < diacritics.length; i++)
        {
            var drange = diacritics[i];
            if (code >= drange[0] && code <= drange[drange.length - 1])
            {
                code = normalized[i];
                break;
            }        }        output += String.fromCharCode(code);
    }    return output;
};
String.prototype.isa = CPString;
p;13;CPFormatter.jt;16784;@STATIC;1.0;i;13;CPException.ji;10;CPObject.jS;13708;t;3016;

objj_executeFile("CPException.j", YES);objj_executeFile("CPObject.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPFormatter"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("stringForObjectValue:"), function $CPFormatter__stringForObjectValue_(self, _cmd, anObject)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
    return nil;
}

,["CPString","id"]), new objj_method(sel_getUid("editingStringForObjectValue:"), function $CPFormatter__editingStringForObjectValue_(self, _cmd, anObject)
{
    return (self.isa.method_msgSend["stringForObjectValue:"] || _objj_forward)(self, (self.isa.method_dtable["stringForObjectValue:"], "stringForObjectValue:"), anObject);
}

,["CPString","id"]), new objj_method(sel_getUid("getObjectValue:forString:errorDescription:"), function $CPFormatter__getObjectValue_forString_errorDescription_(self, _cmd, anObject, aString, anError)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
    return NO;
}

,["BOOL","idRef","CPString","CPStringRef"]), new objj_method(sel_getUid("isPartialStringValid:newEditingString:errorDescription:"), function $CPFormatter__isPartialStringValid_newEditingString_errorDescription_(self, _cmd, aPartialString, aNewString, anError)
{
    (aPartialString)(nil);
    if (anError)
        (anError)(nil);
    return YES;
}

,["BOOL","CPString","CPStringRef","CPStringRef"]), new objj_method(sel_getUid("isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:"), function $CPFormatter__isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_(self, _cmd, aPartialStringRef, aProposedSelectedRangeRef, originalString, originalSelectedRange, anError)
{
    var newString = nil,
        valid = (self.isa.method_msgSend["isPartialStringValid:newEditingString:errorDescription:"] || _objj_forward)(self, (self.isa.method_dtable["isPartialStringValid:newEditingString:errorDescription:"], self.isa.method_dtable["isPartialStringValid:newEditingString:errorDescription:"], self.isa.method_dtable["isPartialStringValid:newEditingString:errorDescription:"], "isPartialStringValid:newEditingString:errorDescription:"), aPartialStringRef, function(__input) { if (arguments.length) return newString = __input; return newString; }, anError);
    if (!valid)
    {
        (aPartialStringRef)(newString);
        if (newString !== nil)
            (aProposedSelectedRangeRef)(CPMakeRange(newString.length, 0));
    }
    return valid;
}

,["BOOL","CPStringRef","CPRangeRef","CPString","CPRange","CPStringRef"]), new objj_method(sel_getUid("initWithCoder:"), function $CPFormatter__initWithCoder_(self, _cmd, aCoder)
{
    return (self.isa.method_msgSend["init"] || _objj_forward)(self, (self.isa.method_dtable["init"], "init"));
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPFormatter__encodeWithCoder_(self, _cmd, aCoder)
{
}

,["void","CPCoder"])]);
}
p;9;CPCache.jt;39610;@STATIC;1.0;i;10;CPObject.ji;14;CPDictionary.ji;10;CPString.jS;22400;t;17133;

objj_executeFile("CPObject.j", YES);objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPString.j", YES);{var the_protocol = objj_allocateProtocol("CPCacheDelegate");
var aProtocol = objj_getProtocol("CPObject");
if (!aProtocol) throw new SyntaxError("*** Could not find definition for protocol \"CPCacheDelegate\"");
protocol_addProtocol(the_protocol, aProtocol);
objj_registerProtocol(the_protocol);
}var CPCacheDelegate_cache_willEvictObject_ = 1 << 1;

{var the_class = objj_allocateClassPair(CPObject, "CPCache"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_items", "CPDictionary"), new objj_ivar("_currentPosition", "int"), new objj_ivar("_totalCostCache", "int"), new objj_ivar("_implementedDelegateMethods", "unsigned"), new objj_ivar("_name", "CPString"), new objj_ivar("_countLimit", "int"), new objj_ivar("_totalCostLimit", "int"), new objj_ivar("_delegate", "id")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("name"), function $CPCache__name(self, _cmd)
{
    return self._name;
}

,["CPString"]), new objj_method(sel_getUid("setName:"), function $CPCache__setName_(self, _cmd, newValue)
{
    self._name = newValue;
}

,["void","CPString"]), new objj_method(sel_getUid("countLimit"), function $CPCache__countLimit(self, _cmd)
{
    return self._countLimit;
}

,["int"]), new objj_method(sel_getUid("setCountLimit:"), function $CPCache__setCountLimit_(self, _cmd, newValue)
{
    self._countLimit = newValue;
}

,["void","int"]), new objj_method(sel_getUid("totalCostLimit"), function $CPCache__totalCostLimit(self, _cmd)
{
    return self._totalCostLimit;
}

,["int"]), new objj_method(sel_getUid("setTotalCostLimit:"), function $CPCache__setTotalCostLimit_(self, _cmd, newValue)
{
    self._totalCostLimit = newValue;
}

,["void","int"]), new objj_method(sel_getUid("delegate"), function $CPCache__delegate(self, _cmd)
{
    return self._delegate;
}

,["id"]), new objj_method(sel_getUid("setDelegate:"), function $CPCache__setDelegate_(self, _cmd, newValue)
{
    self._delegate = newValue;
}

,["void","id"]), new objj_method(sel_getUid("init"), function $CPCache__init(self, _cmd)
{
    if (self = (objj_getClass("CPCache").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        self._items = ((___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, (CPDictionary.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        self._currentPosition = 0;
        self._totalCostCache = -1;
        self._implementedDelegateMethods = 0;
        self._name = "";
        self._countLimit = 0;
        self._totalCostLimit = 0;
        self._delegate = nil;
    }
    return self;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("objectForKey:"), function $CPCache__objectForKey_(self, _cmd, aKey)
{
    return ((___r1 = ((___r2 = self._items), ___r2 == null ? null : (___r2.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r2, (self._items.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey))), ___r1 == null ? null : (___r1.isa.method_msgSend["object"] || _objj_forward)(___r1, "object"));
    var ___r1, ___r2;
}

,["id","id"]), new objj_method(sel_getUid("setObject:forKey:"), function $CPCache__setObject_forKey_(self, _cmd, anObject, aKey)
{
    (self.isa.method_msgSend["setObject:forKey:cost:"] || _objj_forward)(self, (self.isa.method_dtable["setObject:forKey:cost:"], self.isa.method_dtable["setObject:forKey:cost:"], self.isa.method_dtable["setObject:forKey:cost:"], "setObject:forKey:cost:"), anObject, aKey, 0);
}

,["void","id","id"]), new objj_method(sel_getUid("setObject:forKey:cost:"), function $CPCache__setObject_forKey_cost_(self, _cmd, anObject, aKey, aCost)
{
    if (((___r1 = self._items), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._items.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey)))
        (self.isa.method_msgSend["removeObjectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["removeObjectForKey:"], "removeObjectForKey:"), aKey);
    ((___r1 = self._items), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._items.isa.method_dtable["setObject:forKey:"], self._items.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), (_CPCacheItem == null ? null : (_CPCacheItem.isa.method_msgSend["cacheItemWithObject:cost:position:"] || _objj_forward)(_CPCacheItem, (_CPCacheItem.isa.method_dtable["cacheItemWithObject:cost:position:"], _CPCacheItem.isa.method_dtable["cacheItemWithObject:cost:position:"], _CPCacheItem.isa.method_dtable["cacheItemWithObject:cost:position:"], "cacheItemWithObject:cost:position:"), anObject, aCost, ++self._currentPosition)), aKey));
    self._totalCostCache = -1;
    (self.isa.method_msgSend["_cleanCache"] || _objj_forward)(self, (self.isa.method_dtable["_cleanCache"], "_cleanCache"));
    var ___r1;
}

,["void","id","id","int"]), new objj_method(sel_getUid("removeObjectForKey:"), function $CPCache__removeObjectForKey_(self, _cmd, aKey)
{
    (self.isa.method_msgSend["_sendDelegateWillEvictObjectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["_sendDelegateWillEvictObjectForKey:"], "_sendDelegateWillEvictObjectForKey:"), aKey);
    ((___r1 = self._items), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObjectForKey:"] || _objj_forward)(___r1, (self._items.isa.method_dtable["removeObjectForKey:"], "removeObjectForKey:"), aKey));
    self._totalCostCache = -1;
    var ___r1;
}

,["void","id"]), new objj_method(sel_getUid("removeAllObjects"), function $CPCache__removeAllObjects(self, _cmd)
{
    var enumerator = ((___r1 = self._items), ___r1 == null ? null : (___r1.isa.method_msgSend["keyEnumerator"] || _objj_forward)(___r1, (self._items.isa.method_dtable["keyEnumerator"], "keyEnumerator"))),
        key;
    while (key = (enumerator == null ? null : (enumerator.isa.method_msgSend["nextObject"] || _objj_forward)(enumerator, (enumerator.isa.method_dtable["nextObject"], "nextObject"))))
        (self.isa.method_msgSend["_sendDelegateWillEvictObjectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["_sendDelegateWillEvictObjectForKey:"], "_sendDelegateWillEvictObjectForKey:"), key);
    ((___r1 = self._items), ___r1 == null ? null : (___r1.isa.method_msgSend["removeAllObjects"] || _objj_forward)(___r1, (self._items.isa.method_dtable["removeAllObjects"], "removeAllObjects")));
    self._totalCostCache = -1;
    self._currentPosition = 0;
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("setCountLimit:"), function $CPCache__setCountLimit_(self, _cmd, aCountLimit)
{
    self._countLimit = aCountLimit;
    (self.isa.method_msgSend["_cleanCache"] || _objj_forward)(self, (self.isa.method_dtable["_cleanCache"], "_cleanCache"));
}

,["void","int"]), new objj_method(sel_getUid("setTotalCostLimit:"), function $CPCache__setTotalCostLimit_(self, _cmd, aTotalCostLimit)
{
    self._totalCostLimit = aTotalCostLimit;
    (self.isa.method_msgSend["_cleanCache"] || _objj_forward)(self, (self.isa.method_dtable["_cleanCache"], "_cleanCache"));
}

,["void","int"]), new objj_method(sel_getUid("setDelegate:"), function $CPCache__setDelegate_(self, _cmd, aDelegate)
{
    if (self._delegate === aDelegate)
        return;
    self._delegate = aDelegate;
    self._implementedDelegateMethods = 0;
    if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("cache:willEvictObject:"))))
        self._implementedDelegateMethods |= CPCacheDelegate_cache_willEvictObject_;
    var ___r1;
}

,["void","id"]), new objj_method(sel_getUid("_count"), function $CPCache___count(self, _cmd)
{
    return ((___r1 = self._items), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._items.isa.method_dtable["count"], "count")));
    var ___r1;
}

,["int"]), new objj_method(sel_getUid("_totalCost"), function $CPCache___totalCost(self, _cmd)
{
    if (self._totalCostCache >= 0)
        return self._totalCostCache;
    var enumerator = ((___r1 = self._items), ___r1 == null ? null : (___r1.isa.method_msgSend["objectEnumerator"] || _objj_forward)(___r1, (self._items.isa.method_dtable["objectEnumerator"], "objectEnumerator"))),
        value;
    self._totalCostCache = 0;
    while (value = (enumerator == null ? null : (enumerator.isa.method_msgSend["nextObject"] || _objj_forward)(enumerator, (enumerator.isa.method_dtable["nextObject"], "nextObject"))))
        self._totalCostCache += (value == null ? null : (value.isa.method_msgSend["cost"] || _objj_forward)(value, (value.isa.method_dtable["cost"], "cost")));
    return self._totalCostCache;
    var ___r1;
}

,["int"]), new objj_method(sel_getUid("_resequencePosition"), function $CPCache___resequencePosition(self, _cmd)
{
    self._currentPosition = 1;
    var sortedKeys = ((___r1 = ((___r2 = self._items), ___r2 == null ? null : (___r2.isa.method_msgSend["allKeys"] || _objj_forward)(___r2, (self._items.isa.method_dtable["allKeys"], "allKeys")))), ___r1 == null ? null : (___r1.isa.method_msgSend["sortedArrayUsingFunction:"] || _objj_forward)(___r1, "sortedArrayUsingFunction:",     function(k1, k2)
    {
        return ((___r1 = ((___r2 = ((___r3 = self._items), ___r3 == null ? null : (___r3.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r3, (self._items.isa.method_dtable["objectForKey:"], "objectForKey:"), k1))), ___r2 == null ? null : (___r2.isa.method_msgSend["position"] || _objj_forward)(___r2, "position"))), ___r1 == null ? null : (___r1.isa.method_msgSend["compare:"] || _objj_forward)(___r1, "compare:", ((___r2 = ((___r3 = self._items), ___r3 == null ? null : (___r3.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r3, (self._items.isa.method_dtable["objectForKey:"], "objectForKey:"), k2))), ___r2 == null ? null : (___r2.isa.method_msgSend["position"] || _objj_forward)(___r2, "position"))));
        var ___r1, ___r2, ___r3;
    }));
    for (var i = 0; i < sortedKeys.length; ++i)
        ((___r1 = ((___r2 = self._items), ___r2 == null ? null : (___r2.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r2, (self._items.isa.method_dtable["objectForKey:"], "objectForKey:"), sortedKeys[i]))), ___r1 == null ? null : (___r1.isa.method_msgSend["setPosition:"] || _objj_forward)(___r1, "setPosition:", self._currentPosition++));
    var ___r1, ___r2;
}

,["void"]), new objj_method(sel_getUid("_isTotalCostLimitExceeded"), function $CPCache___isTotalCostLimitExceeded(self, _cmd)
{
    return (self.isa.method_msgSend["_totalCost"] || _objj_forward)(self, (self.isa.method_dtable["_totalCost"], "_totalCost")) > self._totalCostLimit && self._totalCostLimit > 0;
}

,["BOOL"]), new objj_method(sel_getUid("_isCountLimitExceeded"), function $CPCache___isCountLimitExceeded(self, _cmd)
{
    return (self.isa.method_msgSend["_count"] || _objj_forward)(self, (self.isa.method_dtable["_count"], "_count")) > self._countLimit && self._countLimit > 0;
}

,["BOOL"]), new objj_method(sel_getUid("_cleanCache"), function $CPCache___cleanCache(self, _cmd)
{
    if (!(self.isa.method_msgSend["_isTotalCostLimitExceeded"] || _objj_forward)(self, (self.isa.method_dtable["_isTotalCostLimitExceeded"], "_isTotalCostLimitExceeded")) && !(self.isa.method_msgSend["_isCountLimitExceeded"] || _objj_forward)(self, (self.isa.method_dtable["_isCountLimitExceeded"], "_isCountLimitExceeded")))
        return;
    var sortedKeys = ((___r1 = ((___r2 = self._items), ___r2 == null ? null : (___r2.isa.method_msgSend["allKeys"] || _objj_forward)(___r2, (self._items.isa.method_dtable["allKeys"], "allKeys")))), ___r1 == null ? null : (___r1.isa.method_msgSend["sortedArrayUsingFunction:"] || _objj_forward)(___r1, "sortedArrayUsingFunction:",     function(k1, k2)
    {
        return ((___r1 = ((___r2 = ((___r3 = self._items), ___r3 == null ? null : (___r3.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r3, (self._items.isa.method_dtable["objectForKey:"], "objectForKey:"), k1))), ___r2 == null ? null : (___r2.isa.method_msgSend["position"] || _objj_forward)(___r2, "position"))), ___r1 == null ? null : (___r1.isa.method_msgSend["compare:"] || _objj_forward)(___r1, "compare:", ((___r2 = ((___r3 = self._items), ___r3 == null ? null : (___r3.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r3, (self._items.isa.method_dtable["objectForKey:"], "objectForKey:"), k2))), ___r2 == null ? null : (___r2.isa.method_msgSend["position"] || _objj_forward)(___r2, "position"))));
        var ___r1, ___r2, ___r3;
    }));
    for (var i = 0; i < sortedKeys.length; ++i)
    {
        if (!(self.isa.method_msgSend["_isTotalCostLimitExceeded"] || _objj_forward)(self, (self.isa.method_dtable["_isTotalCostLimitExceeded"], "_isTotalCostLimitExceeded")) && !(self.isa.method_msgSend["_isCountLimitExceeded"] || _objj_forward)(self, (self.isa.method_dtable["_isCountLimitExceeded"], "_isCountLimitExceeded")))
            break;
        (self.isa.method_msgSend["_sendDelegateWillEvictObjectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["_sendDelegateWillEvictObjectForKey:"], "_sendDelegateWillEvictObjectForKey:"), sortedKeys[i]);
        ((___r1 = self._items), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObjectForKey:"] || _objj_forward)(___r1, (self._items.isa.method_dtable["removeObjectForKey:"], "removeObjectForKey:"), sortedKeys[i]));
        self._totalCostCache = -1;
    }
    (self.isa.method_msgSend["_resequencePosition"] || _objj_forward)(self, (self.isa.method_dtable["_resequencePosition"], "_resequencePosition"));
    var ___r1, ___r2;
}

,["void"])]);
}
{
var the_class = objj_getClass("CPCache")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPCache\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("_sendDelegateWillEvictObjectForKey:"), function $CPCache___sendDelegateWillEvictObjectForKey_(self, _cmd, aKey)
{
    if (self._implementedDelegateMethods & CPCacheDelegate_cache_willEvictObject_)
        ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["cache:willEvictObject:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["cache:willEvictObject:"], self._delegate.isa.method_dtable["cache:willEvictObject:"], "cache:willEvictObject:"), self, ((___r2 = ((___r3 = self._items), ___r3 == null ? null : (___r3.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r3, (self._items.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey))), ___r2 == null ? null : (___r2.isa.method_msgSend["object"] || _objj_forward)(___r2, "object"))));
    var ___r1, ___r2, ___r3;
}

,["void","id"])]);
}

{var the_class = objj_allocateClassPair(CPObject, "_CPCacheItem"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_object", "CPObject"), new objj_ivar("_cost", "int"), new objj_ivar("_position", "int")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("object"), function $_CPCacheItem__object(self, _cmd)
{
    return self._object;
}

,["CPObject"]), new objj_method(sel_getUid("setObject:"), function $_CPCacheItem__setObject_(self, _cmd, newValue)
{
    self._object = newValue;
}

,["void","CPObject"]), new objj_method(sel_getUid("cost"), function $_CPCacheItem__cost(self, _cmd)
{
    return self._cost;
}

,["int"]), new objj_method(sel_getUid("setCost:"), function $_CPCacheItem__setCost_(self, _cmd, newValue)
{
    self._cost = newValue;
}

,["void","int"]), new objj_method(sel_getUid("position"), function $_CPCacheItem__position(self, _cmd)
{
    return self._position;
}

,["int"]), new objj_method(sel_getUid("setPosition:"), function $_CPCacheItem__setPosition_(self, _cmd, newValue)
{
    self._position = newValue;
}

,["void","int"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("cacheItemWithObject:cost:position:"), function $_CPCacheItem__cacheItemWithObject_cost_position_(self, _cmd, anObject, aCost, aPosition)
{
    var cacheItem = ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    if (cacheItem)
    {
        (cacheItem == null ? null : (cacheItem.isa.method_msgSend["setObject:"] || _objj_forward)(cacheItem, (cacheItem.isa.method_dtable["setObject:"], "setObject:"), anObject));
        (cacheItem == null ? null : (cacheItem.isa.method_msgSend["setCost:"] || _objj_forward)(cacheItem, (cacheItem.isa.method_dtable["setCost:"], "setCost:"), aCost));
        (cacheItem == null ? null : (cacheItem.isa.method_msgSend["setPosition:"] || _objj_forward)(cacheItem, (cacheItem.isa.method_dtable["setPosition:"], "setPosition:"), aPosition));
    }
    return cacheItem;
    var ___r1;
}

,["id","CPObject","int","int"])]);
}
p;11;CPSet+KVO.jt;57215;@STATIC;1.0;i;13;CPException.ji;10;CPObject.ji;14;CPMutableSet.ji;8;CPNull.ji;27;_CPCollectionKVCOperators.jS;28048;;29043;

objj_executeFile("CPException.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPMutableSet.j", YES);objj_executeFile("CPNull.j", YES);objj_executeFile("_CPCollectionKVCOperators.j", YES);{
var the_class = objj_getClass("CPObject")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPObject\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("mutableSetValueForKey:"), function $CPObject__mutableSetValueForKey_(self, _cmd, aKey)
{
    return ((___r1 = (_CPKVCSet == null ? null : (_CPKVCSet.isa.method_msgSend["alloc"] || _objj_forward)(_CPKVCSet, (_CPKVCSet.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithKey:forProxyObject:"] || _objj_forward)(___r1, "initWithKey:forProxyObject:", aKey, self));
    var ___r1;
}

,["id","id"]), new objj_method(sel_getUid("mutableSetValueForKeyPath:"), function $CPObject__mutableSetValueForKeyPath_(self, _cmd, aKeyPath)
{
    var dotIndex = aKeyPath.indexOf(".");
    if (dotIndex < 0)
        return (self.isa.method_msgSend["mutableSetValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["mutableSetValueForKey:"], "mutableSetValueForKey:"), aKeyPath);
    var firstPart = aKeyPath.substring(0, dotIndex),
        lastPart = aKeyPath.substring(dotIndex + 1);
    return ((___r1 = (self.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(self, (self.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), firstPart)), ___r1 == null ? null : (___r1.isa.method_msgSend["mutableSetValueForKeyPath:"] || _objj_forward)(___r1, "mutableSetValueForKeyPath:", lastPart));
    var ___r1;
}

,["id","id"])]);
}

{var the_class = objj_allocateClassPair(CPMutableSet, "_CPKVCSet"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_proxyObject", "id"), new objj_ivar("_key", "id"), new objj_ivar("_accessSEL", "SEL"), new objj_ivar("_access", "Function"), new objj_ivar("_setSEL", "SEL"), new objj_ivar("_set", "Function"), new objj_ivar("_countSEL", "SEL"), new objj_ivar("_count", "Function"), new objj_ivar("_enumeratorSEL", "SEL"), new objj_ivar("_enumerator", "Function"), new objj_ivar("_memberSEL", "SEL"), new objj_ivar("_member", "Function"), new objj_ivar("_addSEL", "SEL"), new objj_ivar("_add", "Function"), new objj_ivar("_addManySEL", "SEL"), new objj_ivar("_addMany", "Function"), new objj_ivar("_removeSEL", "SEL"), new objj_ivar("_remove", "Function"), new objj_ivar("_removeManySEL", "SEL"), new objj_ivar("_removeMany", "Function"), new objj_ivar("_intersectSEL", "SEL"), new objj_ivar("_intersect", "Function")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithKey:forProxyObject:"), function $_CPKVCSet__initWithKey_forProxyObject_(self, _cmd, aKey, anObject)
{
    self = (objj_getClass("_CPKVCSet").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    self._key = aKey;
    self._proxyObject = anObject;
    var capitalizedKey = (self._key.charAt(0)).toUpperCase() + self._key.substring(1);
    self._accessSEL = sel_getName(self._key);
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._accessSEL)))
        self._access = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._accessSEL));
    self._setSEL = sel_getName("set" + capitalizedKey + ":");
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._setSEL)))
        self._set = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._setSEL));
    self._countSEL = sel_getName("countOf" + capitalizedKey);
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._countSEL)))
        self._count = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._countSEL));
    self._enumeratorSEL = sel_getName("enumeratorOf" + capitalizedKey);
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._enumeratorSEL)))
        self._enumerator = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._enumeratorSEL));
    self._memberSEL = sel_getName("memberOf" + capitalizedKey + ":");
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._memberSEL)))
        self._member = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._memberSEL));
    self._addSEL = sel_getName("add" + capitalizedKey + "Object:");
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._addSEL)))
        self._add = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._addSEL));
    self._addManySEL = sel_getName("add" + capitalizedKey + ":");
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._addManySEL)))
        self._addMany = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._addManySEL));
    self._removeSEL = sel_getName("remove" + capitalizedKey + "Object:");
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._removeSEL)))
        self._remove = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._removeSEL));
    self._removeManySEL = sel_getName("remove" + capitalizedKey + ":");
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._removeManySEL)))
        self._removeMany = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._removeManySEL));
    self._intersectSEL = sel_getName("intersect" + capitalizedKey + ":");
    if (((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), self._intersectSEL)))
        self._intersect = ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["methodForSelector:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), self._intersectSEL));
    return self;
    var ___r1;
}

,["id","id","id"]), new objj_method(sel_getUid("_representedObject"), function $_CPKVCSet___representedObject(self, _cmd)
{
    if (self._access)
        return self._access(self._proxyObject, self._accessSEL);
    return ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["valueForKey:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["valueForKey:"], "valueForKey:"), self._key));
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("_setRepresentedObject:"), function $_CPKVCSet___setRepresentedObject_(self, _cmd, anObject)
{
    if (self._set)
        return self._set(self._proxyObject, self._setSEL, anObject);
    ((___r1 = self._proxyObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setValue:forKey:"] || _objj_forward)(___r1, (self._proxyObject.isa.method_dtable["setValue:forKey:"], self._proxyObject.isa.method_dtable["setValue:forKey:"], "setValue:forKey:"), anObject, self._key));
    var ___r1;
}

,["void","id"]), new objj_method(sel_getUid("count"), function $_CPKVCSet__count(self, _cmd)
{
    if (self._count)
        return self._count(self._proxyObject, self._countSEL);
    return ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, "count"));
    var ___r1;
}

,["CPUInteger"]), new objj_method(sel_getUid("objectEnumerator"), function $_CPKVCSet__objectEnumerator(self, _cmd)
{
    if (self._enumerator)
        return self._enumerator(self._proxyObject, self._enumeratorSEL);
    return ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectEnumerator"] || _objj_forward)(___r1, "objectEnumerator"));
    var ___r1;
}

,["CPEnumerator"]), new objj_method(sel_getUid("member:"), function $_CPKVCSet__member_(self, _cmd, anObject)
{
    if (self._member)
        return self._member(self._proxyObject, self._memberSEL, anObject);
    return ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["member:"] || _objj_forward)(___r1, "member:", anObject));
    var ___r1;
}

,["id","id"]), new objj_method(sel_getUid("addObject:"), function $_CPKVCSet__addObject_(self, _cmd, anObject)
{
    if (self._add)
        self._add(self._proxyObject, self._addSEL, anObject);
    else if (self._addMany)
    {
        var objectSet = (CPSet.isa.method_msgSend["setWithObject:"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["setWithObject:"], "setWithObject:"), anObject);
        self._addMany(self._proxyObject, self._addManySEL, objectSet);
    }
    else
    {
        var target = ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
        (target == null ? null : (target.isa.method_msgSend["addObject:"] || _objj_forward)(target, (target.isa.method_dtable["addObject:"], "addObject:"), anObject));
        (self.isa.method_msgSend["_setRepresentedObject:"] || _objj_forward)(self, (self.isa.method_dtable["_setRepresentedObject:"], "_setRepresentedObject:"), target);
    }
    var ___r1;
}

,["void","id"]), new objj_method(sel_getUid("addObjectsFromArray:"), function $_CPKVCSet__addObjectsFromArray_(self, _cmd, objects)
{
    if (self._addMany)
    {
        var objectSet = (CPSet.isa.method_msgSend["setWithArray:"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["setWithArray:"], "setWithArray:"), objects);
        self._addMany(self._proxyObject, self._addManySEL, objectSet);
    }
    else if (self._add)
    {
        var object,
            objectEnumerator = (objects == null ? null : (objects.isa.method_msgSend["objectEnumerator"] || _objj_forward)(objects, (objects.isa.method_dtable["objectEnumerator"], "objectEnumerator")));
        while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
            self._add(self._proxyObject, self._addSEL, object);
    }
    else
    {
        var target = ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
        (target == null ? null : (target.isa.method_msgSend["addObjectsFromArray:"] || _objj_forward)(target, (target.isa.method_dtable["addObjectsFromArray:"], "addObjectsFromArray:"), objects));
        (self.isa.method_msgSend["_setRepresentedObject:"] || _objj_forward)(self, (self.isa.method_dtable["_setRepresentedObject:"], "_setRepresentedObject:"), target);
    }
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("unionSet:"), function $_CPKVCSet__unionSet_(self, _cmd, aSet)
{
    if (self._addMany)
        self._addMany(self._proxyObject, self._addManySEL, aSet);
    else if (self._add)
    {
        var object,
            objectEnumerator = (aSet == null ? null : (aSet.isa.method_msgSend["objectEnumerator"] || _objj_forward)(aSet, (aSet.isa.method_dtable["objectEnumerator"], "objectEnumerator")));
        while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
            self._add(self._proxyObject, self._addSEL, object);
    }
    else
    {
        var target = ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
        (target == null ? null : (target.isa.method_msgSend["unionSet:"] || _objj_forward)(target, (target.isa.method_dtable["unionSet:"], "unionSet:"), aSet));
        (self.isa.method_msgSend["_setRepresentedObject:"] || _objj_forward)(self, (self.isa.method_dtable["_setRepresentedObject:"], "_setRepresentedObject:"), target);
    }
    var ___r1;
}

,["void","CPSet"]), new objj_method(sel_getUid("removeObject:"), function $_CPKVCSet__removeObject_(self, _cmd, anObject)
{
    if (self._remove)
        self._remove(self._proxyObject, self._removeSEL, anObject);
    else if (self._removeMany)
    {
        var objectSet = (CPSet.isa.method_msgSend["setWithObject:"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["setWithObject:"], "setWithObject:"), anObject);
        self._removeMany(self._proxyObject, self._removeManySEL, objectSet);
    }
    else
    {
        var target = ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
        (target == null ? null : (target.isa.method_msgSend["removeObject:"] || _objj_forward)(target, (target.isa.method_dtable["removeObject:"], "removeObject:"), anObject));
        (self.isa.method_msgSend["_setRepresentedObject:"] || _objj_forward)(self, (self.isa.method_dtable["_setRepresentedObject:"], "_setRepresentedObject:"), target);
    }
    var ___r1;
}

,["void","id"]), new objj_method(sel_getUid("minusSet:"), function $_CPKVCSet__minusSet_(self, _cmd, aSet)
{
    if (self._removeMany)
        self._removeMany(self._proxyObject, self._removeManySEL, aSet);
    else if (self._remove)
    {
        var object,
            objectEnumerator = (aSet == null ? null : (aSet.isa.method_msgSend["objectEnumerator"] || _objj_forward)(aSet, (aSet.isa.method_dtable["objectEnumerator"], "objectEnumerator")));
        while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
            self._remove(self._proxyObject, self._removeSEL, object);
    }
    else
    {
        var target = ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
        (target == null ? null : (target.isa.method_msgSend["minusSet:"] || _objj_forward)(target, (target.isa.method_dtable["minusSet:"], "minusSet:"), aSet));
        (self.isa.method_msgSend["_setRepresentedObject:"] || _objj_forward)(self, (self.isa.method_dtable["_setRepresentedObject:"], "_setRepresentedObject:"), target);
    }
    var ___r1;
}

,["void","CPSet"]), new objj_method(sel_getUid("removeObjectsInArray:"), function $_CPKVCSet__removeObjectsInArray_(self, _cmd, objects)
{
    if (self._removeMany)
    {
        var objectSet = (CPSet.isa.method_msgSend["setWithArray:"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["setWithArray:"], "setWithArray:"), objects);
        self._removeMany(self._proxyObject, self._removeManySEL, objectSet);
    }
    else if (self._remove)
    {
        var object,
            objectEnumerator = (objects == null ? null : (objects.isa.method_msgSend["objectEnumerator"] || _objj_forward)(objects, (objects.isa.method_dtable["objectEnumerator"], "objectEnumerator")));
        while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
            self._remove(self._proxyObject, self._removeSEL, object);
    }
    else
    {
        var target = ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
        (target == null ? null : (target.isa.method_msgSend["removeObjectsInArray:"] || _objj_forward)(target, (target.isa.method_dtable["removeObjectsInArray:"], "removeObjectsInArray:"), objects));
        (self.isa.method_msgSend["_setRepresentedObject:"] || _objj_forward)(self, (self.isa.method_dtable["_setRepresentedObject:"], "_setRepresentedObject:"), target);
    }
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("removeAllObjects"), function $_CPKVCSet__removeAllObjects(self, _cmd)
{
    if (self._removeMany)
    {
        var allObjectsSet = ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
        self._removeMany(self._proxyObject, self._removeManySEL, allObjectsSet);
    }
    else if (self._remove)
    {
        var object,
            objectEnumerator = ((___r1 = ((___r2 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r2 == null ? null : (___r2.isa.method_msgSend["copy"] || _objj_forward)(___r2, "copy"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectEnumerator"] || _objj_forward)(___r1, "objectEnumerator"));
        while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
            self._remove(self._proxyObject, self._removeSEL, object);
    }
    else
    {
        var target = ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
        (target == null ? null : (target.isa.method_msgSend["removeAllObjects"] || _objj_forward)(target, (target.isa.method_dtable["removeAllObjects"], "removeAllObjects")));
        (self.isa.method_msgSend["_setRepresentedObject:"] || _objj_forward)(self, (self.isa.method_dtable["_setRepresentedObject:"], "_setRepresentedObject:"), target);
    }
    var ___r1, ___r2;
}

,["void"]), new objj_method(sel_getUid("intersectSet:"), function $_CPKVCSet__intersectSet_(self, _cmd, aSet)
{
    if (self._intersect)
        self._intersect(self._proxyObject, self._intersectSEL, aSet);
    else
    {
        var target = ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
        (target == null ? null : (target.isa.method_msgSend["intersectSet:"] || _objj_forward)(target, (target.isa.method_dtable["intersectSet:"], "intersectSet:"), aSet));
        (self.isa.method_msgSend["_setRepresentedObject:"] || _objj_forward)(self, (self.isa.method_dtable["_setRepresentedObject:"], "_setRepresentedObject:"), target);
    }
    var ___r1;
}

,["void","CPSet"]), new objj_method(sel_getUid("setSet:"), function $_CPKVCSet__setSet_(self, _cmd, set)
{
    (self.isa.method_msgSend["_setRepresentedObject:"] || _objj_forward)(self, (self.isa.method_dtable["_setRepresentedObject:"], "_setRepresentedObject:"), set);
}

,["void","CPSet"]), new objj_method(sel_getUid("allObjects"), function $_CPKVCSet__allObjects(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["allObjects"] || _objj_forward)(___r1, "allObjects"));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("anyObject"), function $_CPKVCSet__anyObject(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["anyObject"] || _objj_forward)(___r1, "anyObject"));
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("containsObject:"), function $_CPKVCSet__containsObject_(self, _cmd, anObject)
{
    return ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["containsObject:"] || _objj_forward)(___r1, "containsObject:", anObject));
    var ___r1;
}

,["BOOL","id"]), new objj_method(sel_getUid("intersectsSet:"), function $_CPKVCSet__intersectsSet_(self, _cmd, aSet)
{
    return ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["intersectsSet:"] || _objj_forward)(___r1, "intersectsSet:", aSet));
    var ___r1;
}

,["BOOL","CPSet"]), new objj_method(sel_getUid("isEqualToSet:"), function $_CPKVCSet__isEqualToSet_(self, _cmd, aSet)
{
    return ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqualToSet:"] || _objj_forward)(___r1, "isEqualToSet:", aSet));
    var ___r1;
}

,["BOOL","CPSet"]), new objj_method(sel_getUid("copy"), function $_CPKVCSet__copy(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["_representedObject"] || _objj_forward)(self, (self.isa.method_dtable["_representedObject"], "_representedObject"))), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
    var ___r1;
}

,["id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $_CPKVCSet__alloc(self, _cmd)
{
    var set = (CPMutableSet.isa.method_msgSend["set"] || _objj_forward)(CPMutableSet, (CPMutableSet.isa.method_dtable["set"], "set"));
    set.isa = self;
    var ivars = class_copyIvarList(self),
        count = ivars.length;
    while (count--)
        set[ivar_getName(ivars[count])] = nil;
    return set;
}

,["id"])]);
}
{
var the_class = objj_getClass("CPSet")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPSet\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("valueForKeyPath:"), function $CPSet__valueForKeyPath_(self, _cmd, aKeyPath)
{
    if (!aKeyPath)
        (self.isa.method_msgSend["valueForUndefinedKey:"] || _objj_forward)(self, (self.isa.method_dtable["valueForUndefinedKey:"], "valueForUndefinedKey:"), "<empty path>");
    if (aKeyPath.charAt(0) === "@")
    {
        var dotIndex = aKeyPath.indexOf("."),
            operator,
            parameter;
        if (dotIndex !== -1)
        {
            operator = aKeyPath.substring(1, dotIndex);
            parameter = aKeyPath.substring(dotIndex + 1);
        }
        else
            operator = aKeyPath.substring(1);
        return (_CPCollectionKVCOperator.isa.method_msgSend["performOperation:withCollection:propertyPath:"] || _objj_forward)(_CPCollectionKVCOperator, (_CPCollectionKVCOperator.isa.method_dtable["performOperation:withCollection:propertyPath:"], _CPCollectionKVCOperator.isa.method_dtable["performOperation:withCollection:propertyPath:"], _CPCollectionKVCOperator.isa.method_dtable["performOperation:withCollection:propertyPath:"], "performOperation:withCollection:propertyPath:"), operator, self, parameter);
    }
    else
    {
        var valuesForKeySet = (CPSet.isa.method_msgSend["set"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["set"], "set")),
            containedObject,
            containedObjectValue,
            containedObjectEnumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator"));
        while ((containedObject = (containedObjectEnumerator == null ? null : (containedObjectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(containedObjectEnumerator, (containedObjectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        {
            containedObjectValue = (containedObject == null ? null : (containedObject.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(containedObject, (containedObject.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), aKeyPath));
            if (containedObjectValue === nil || containedObjectValue === undefined)
                containedObjectValue = (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null"));
            (valuesForKeySet == null ? null : (valuesForKeySet.isa.method_msgSend["addObject:"] || _objj_forward)(valuesForKeySet, (valuesForKeySet.isa.method_dtable["addObject:"], "addObject:"), containedObjectValue));
        }
        return valuesForKeySet;
    }
}

,["id","CPString"]), new objj_method(sel_getUid("setValue:forKey:"), function $CPSet__setValue_forKey_(self, _cmd, aValue, aKey)
{
    var containedObject,
        containedObjectEnumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator"));
    while ((containedObject = (containedObjectEnumerator == null ? null : (containedObjectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(containedObjectEnumerator, (containedObjectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        (containedObject == null ? null : (containedObject.isa.method_msgSend["setValue:forKey:"] || _objj_forward)(containedObject, (containedObject.isa.method_dtable["setValue:forKey:"], containedObject.isa.method_dtable["setValue:forKey:"], "setValue:forKey:"), aValue, aKey));
}

,["void","id","CPString"])]);
}
p;16;CPUserDefaults.jt;78316;@STATIC;1.0;i;10;CPBundle.ji;8;CPData.ji;14;CPDictionary.ji;13;CPException.ji;17;CPKeyedArchiver.ji;19;CPKeyedUnarchiver.ji;22;CPNotificationCenter.ji;10;CPObject.ji;11;CPRunLoop.ji;10;CPString.ji;7;CPURL.ji;17;CPURLConnection.ji;14;CPURLRequest.jS;42092;t;35961;

objj_executeFile("CPBundle.j", YES);objj_executeFile("CPData.j", YES);objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPKeyedArchiver.j", YES);objj_executeFile("CPKeyedUnarchiver.j", YES);objj_executeFile("CPNotificationCenter.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPRunLoop.j", YES);objj_executeFile("CPString.j", YES);objj_executeFile("CPURL.j", YES);objj_executeFile("CPURLConnection.j", YES);objj_executeFile("CPURLRequest.j", YES);CPArgumentDomain = "CPArgumentDomain";
CPApplicationDomain = ((___r1 = ((___r2 = (CPBundle.isa.method_msgSend["mainBundle"] || _objj_forward)(CPBundle, (CPBundle.isa.method_dtable["mainBundle"], "mainBundle"))), ___r2 == null ? null : (___r2.isa.method_msgSend["infoDictionary"] || _objj_forward)(___r2, "infoDictionary"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, "objectForKey:", "CPBundleIdentifier")) || "CPApplicationDomain";
CPGlobalDomain = "CPGlobalDomain";
CPLocaleDomain = "CPLocaleDomain";
CPRegistrationDomain = "CPRegistrationDomain";
CPUserDefaultsDidChangeNotification = "CPUserDefaultsDidChangeNotification";
var StandardUserDefaults;

{var the_class = objj_allocateClassPair(CPObject, "CPUserDefaults"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_domains", "CPDictionary"), new objj_ivar("_stores", "CPDictionary"), new objj_ivar("_searchList", "CPDictionary"), new objj_ivar("_searchListNeedsReload", "BOOL")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPUserDefaults__init(self, _cmd)
{
    self = (objj_getClass("CPUserDefaults").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._domains = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        (self == null ? null : (self.isa.method_msgSend["_setupArgumentsDomain"] || _objj_forward)(self, (self.isa.method_dtable["_setupArgumentsDomain"], "_setupArgumentsDomain")));
        var defaultStore = (CPUserDefaultsLocalStore == null ? null : (CPUserDefaultsLocalStore.isa.method_msgSend["supportsLocalStorage"] || _objj_forward)(CPUserDefaultsLocalStore, (CPUserDefaultsLocalStore.isa.method_dtable["supportsLocalStorage"], "supportsLocalStorage"))) ? CPUserDefaultsLocalStore : CPUserDefaultsCookieStore;
        self._stores = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        (self == null ? null : (self.isa.method_msgSend["setPersistentStoreClass:forDomain:reloadData:"] || _objj_forward)(self, (self.isa.method_dtable["setPersistentStoreClass:forDomain:reloadData:"], self.isa.method_dtable["setPersistentStoreClass:forDomain:reloadData:"], self.isa.method_dtable["setPersistentStoreClass:forDomain:reloadData:"], "setPersistentStoreClass:forDomain:reloadData:"), defaultStore, CPGlobalDomain, YES));
        (self == null ? null : (self.isa.method_msgSend["setPersistentStoreClass:forDomain:reloadData:"] || _objj_forward)(self, (self.isa.method_dtable["setPersistentStoreClass:forDomain:reloadData:"], self.isa.method_dtable["setPersistentStoreClass:forDomain:reloadData:"], self.isa.method_dtable["setPersistentStoreClass:forDomain:reloadData:"], "setPersistentStoreClass:forDomain:reloadData:"), defaultStore, CPApplicationDomain, YES));
    }
    return self;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("_setupArgumentsDomain"), function $CPUserDefaults___setupArgumentsDomain(self, _cmd)
{
    var args = (CPApp == null ? null : (CPApp.isa.method_msgSend["namedArguments"] || _objj_forward)(CPApp, (CPApp.isa.method_dtable["namedArguments"], "namedArguments"))),
        keys = (args == null ? null : (args.isa.method_msgSend["allKeys"] || _objj_forward)(args, (args.isa.method_dtable["allKeys"], "allKeys"))),
        count = (keys == null ? null : (keys.isa.method_msgSend["count"] || _objj_forward)(keys, (keys.isa.method_dtable["count"], "count"))),
        i = 0;
    for (; i < count; i++)
    {
        var key = keys[i];
        (self.isa.method_msgSend["setObject:forKey:inDomain:"] || _objj_forward)(self, (self.isa.method_dtable["setObject:forKey:inDomain:"], self.isa.method_dtable["setObject:forKey:inDomain:"], self.isa.method_dtable["setObject:forKey:inDomain:"], "setObject:forKey:inDomain:"), (args == null ? null : (args.isa.method_msgSend["objectForKey:"] || _objj_forward)(args, (args.isa.method_dtable["objectForKey:"], "objectForKey:"), key)), key, CPArgumentDomain);
    }
}

,["void"]), new objj_method(sel_getUid("objectForKey:"), function $CPUserDefaults__objectForKey_(self, _cmd, aKey)
{
    if (self._searchListNeedsReload)
        (self.isa.method_msgSend["_reloadSearchList"] || _objj_forward)(self, (self.isa.method_dtable["_reloadSearchList"], "_reloadSearchList"));
    return ((___r1 = self._searchList), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._searchList.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey));
    var ___r1;
}

,["id","CPString"]), new objj_method(sel_getUid("setObject:forKey:"), function $CPUserDefaults__setObject_forKey_(self, _cmd, anObject, aKey)
{
    (self.isa.method_msgSend["setObject:forKey:inDomain:"] || _objj_forward)(self, (self.isa.method_dtable["setObject:forKey:inDomain:"], self.isa.method_dtable["setObject:forKey:inDomain:"], self.isa.method_dtable["setObject:forKey:inDomain:"], "setObject:forKey:inDomain:"), anObject, aKey, CPApplicationDomain);
}

,["void","id","CPString"]), new objj_method(sel_getUid("objectForKey:inDomain:"), function $CPUserDefaults__objectForKey_inDomain_(self, _cmd, aKey, aDomain)
{
    var domain = ((___r1 = self._domains), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._domains.isa.method_dtable["objectForKey:"], "objectForKey:"), aDomain));
    if (!domain)
        return nil;
    return (domain == null ? null : (domain.isa.method_msgSend["objectForKey:"] || _objj_forward)(domain, (domain.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey));
    var ___r1;
}

,["id","CPString","CPString"]), new objj_method(sel_getUid("setObject:forKey:inDomain:"), function $CPUserDefaults__setObject_forKey_inDomain_(self, _cmd, anObject, aKey, aDomain)
{
    if (!aKey || !aDomain)
        return;
    var domain = ((___r1 = self._domains), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._domains.isa.method_dtable["objectForKey:"], "objectForKey:"), aDomain));
    if (!domain)
    {
        domain = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        ((___r1 = self._domains), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._domains.isa.method_dtable["setObject:forKey:"], self._domains.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), domain, aDomain));
    }
    (domain == null ? null : (domain.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(domain, (domain.isa.method_dtable["setObject:forKey:"], domain.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), anObject, aKey));
    self._searchListNeedsReload = YES;
    (self.isa.method_msgSend["domainDidChange:"] || _objj_forward)(self, (self.isa.method_dtable["domainDidChange:"], "domainDidChange:"), aDomain);
    var ___r1;
}

,["void","id","CPString","CPString"]), new objj_method(sel_getUid("removeObjectForKey:"), function $CPUserDefaults__removeObjectForKey_(self, _cmd, aKey)
{
    (self.isa.method_msgSend["removeObjectForKey:inDomain:"] || _objj_forward)(self, (self.isa.method_dtable["removeObjectForKey:inDomain:"], self.isa.method_dtable["removeObjectForKey:inDomain:"], "removeObjectForKey:inDomain:"), aKey, CPApplicationDomain);
}

,["void","CPString"]), new objj_method(sel_getUid("removeObjectForKey:inDomain:"), function $CPUserDefaults__removeObjectForKey_inDomain_(self, _cmd, aKey, aDomain)
{
    if (!aKey || !aDomain)
        return;
    var domain = ((___r1 = self._domains), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._domains.isa.method_dtable["objectForKey:"], "objectForKey:"), aDomain));
    if (!domain)
        return;
    (domain == null ? null : (domain.isa.method_msgSend["removeObjectForKey:"] || _objj_forward)(domain, (domain.isa.method_dtable["removeObjectForKey:"], "removeObjectForKey:"), aKey));
    self._searchListNeedsReload = YES;
    (self.isa.method_msgSend["domainDidChange:"] || _objj_forward)(self, (self.isa.method_dtable["domainDidChange:"], "domainDidChange:"), aDomain);
    var ___r1;
}

,["void","CPString","CPString"]), new objj_method(sel_getUid("registerDefaults:"), function $CPUserDefaults__registerDefaults_(self, _cmd, aDictionary)
{
    var keys = (aDictionary == null ? null : (aDictionary.isa.method_msgSend["allKeys"] || _objj_forward)(aDictionary, (aDictionary.isa.method_dtable["allKeys"], "allKeys"))),
        count = (keys == null ? null : (keys.isa.method_msgSend["count"] || _objj_forward)(keys, (keys.isa.method_dtable["count"], "count"))),
        i = 0;
    for (; i < count; i++)
    {
        var key = keys[i];
        (self.isa.method_msgSend["setObject:forKey:inDomain:"] || _objj_forward)(self, (self.isa.method_dtable["setObject:forKey:inDomain:"], self.isa.method_dtable["setObject:forKey:inDomain:"], self.isa.method_dtable["setObject:forKey:inDomain:"], "setObject:forKey:inDomain:"), (aDictionary == null ? null : (aDictionary.isa.method_msgSend["objectForKey:"] || _objj_forward)(aDictionary, (aDictionary.isa.method_dtable["objectForKey:"], "objectForKey:"), key)), key, CPRegistrationDomain);
    }
}

,["void","CPDictionary"]), new objj_method(sel_getUid("registerDefaultsFromContentsOfFile:"), function $CPUserDefaults__registerDefaultsFromContentsOfFile_(self, _cmd, aURL)
{
    var contents = (CPURLConnection.isa.method_msgSend["sendSynchronousRequest:returningResponse:"] || _objj_forward)(CPURLConnection, (CPURLConnection.isa.method_dtable["sendSynchronousRequest:returningResponse:"], CPURLConnection.isa.method_dtable["sendSynchronousRequest:returningResponse:"], "sendSynchronousRequest:returningResponse:"), (CPURLRequest.isa.method_msgSend["requestWithURL:"] || _objj_forward)(CPURLRequest, (CPURLRequest.isa.method_dtable["requestWithURL:"], "requestWithURL:"), aURL), nil),
        data = (CPData.isa.method_msgSend["dataWithRawString:"] || _objj_forward)(CPData, (CPData.isa.method_dtable["dataWithRawString:"], "dataWithRawString:"), (contents == null ? null : (contents.isa.method_msgSend["rawString"] || _objj_forward)(contents, (contents.isa.method_dtable["rawString"], "rawString")))),
        plist = (data == null ? null : (data.isa.method_msgSend["plistObject"] || _objj_forward)(data, (data.isa.method_dtable["plistObject"], "plistObject")));
    (self.isa.method_msgSend["registerDefaults:"] || _objj_forward)(self, (self.isa.method_dtable["registerDefaults:"], "registerDefaults:"), plist);
}

,["void","CPURL"]), new objj_method(sel_getUid("_reloadSearchList"), function $CPUserDefaults___reloadSearchList(self, _cmd)
{
    self._searchListNeedsReload = NO;
    var dicts = [CPRegistrationDomain, CPGlobalDomain, CPApplicationDomain, CPArgumentDomain],
        count = (dicts == null ? null : (dicts.isa.method_msgSend["count"] || _objj_forward)(dicts, (dicts.isa.method_dtable["count"], "count"))),
        i = 0;
    self._searchList = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    for (; i < count; i++)
    {
        var domain = ((___r1 = self._domains), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._domains.isa.method_dtable["objectForKey:"], "objectForKey:"), dicts[i]));
        if (!domain)
            continue;
        var keys = (domain == null ? null : (domain.isa.method_msgSend["allKeys"] || _objj_forward)(domain, (domain.isa.method_dtable["allKeys"], "allKeys"))),
            keysCount = (keys == null ? null : (keys.isa.method_msgSend["count"] || _objj_forward)(keys, (keys.isa.method_dtable["count"], "count"))),
            j = 0;
        for (; j < keysCount; j++)
        {
            var key = keys[j];
            ((___r1 = self._searchList), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._searchList.isa.method_dtable["setObject:forKey:"], self._searchList.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), (domain == null ? null : (domain.isa.method_msgSend["objectForKey:"] || _objj_forward)(domain, (domain.isa.method_dtable["objectForKey:"], "objectForKey:"), key)), key));
        }
    }
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("volatileDomainNames"), function $CPUserDefaults__volatileDomainNames(self, _cmd)
{
    return [CPArgumentDomain, CPLocaleDomain, CPRegistrationDomain];
}

,["CPArray"]), new objj_method(sel_getUid("persistentDomainNames"), function $CPUserDefaults__persistentDomainNames(self, _cmd)
{
    return [CPGlobalDomain, CPApplicationDomain];
}

,["CPArray"]), new objj_method(sel_getUid("persistentStoreForDomain:"), function $CPUserDefaults__persistentStoreForDomain_(self, _cmd, aDomain)
{
    return ((___r1 = self._stores), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._stores.isa.method_dtable["objectForKey:"], "objectForKey:"), aDomain));
    var ___r1;
}

,["CPUserDefaultsStore","CPString"]), new objj_method(sel_getUid("setPersistentStoreClass:forDomain:reloadData:"), function $CPUserDefaults__setPersistentStoreClass_forDomain_reloadData_(self, _cmd, aStoreClass, aDomain, aFlag)
{
    var currentStore = ((___r1 = self._stores), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._stores.isa.method_dtable["objectForKey:"], "objectForKey:"), aDomain));
    if (currentStore && (currentStore == null ? null : (currentStore.isa.method_msgSend["class"] || _objj_forward)(currentStore, (currentStore.isa.method_dtable["class"], "class"))) === aStoreClass)
        return currentStore;
    var store = ((___r1 = (aStoreClass == null ? null : (aStoreClass.isa.method_msgSend["alloc"] || _objj_forward)(aStoreClass, (aStoreClass.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    (store == null ? null : (store.isa.method_msgSend["setDomain:"] || _objj_forward)(store, (store.isa.method_dtable["setDomain:"], "setDomain:"), aDomain));
    ((___r1 = self._stores), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._stores.isa.method_dtable["setObject:forKey:"], self._stores.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), store, aDomain));
    if (aFlag)
        (self.isa.method_msgSend["reloadDataFromStoreForDomain:"] || _objj_forward)(self, (self.isa.method_dtable["reloadDataFromStoreForDomain:"], "reloadDataFromStoreForDomain:"), aDomain);
    return store;
    var ___r1;
}

,["CPUserDefaultsStore","Class","CPString","BOOL"]), new objj_method(sel_getUid("reloadDataFromStoreForDomain:"), function $CPUserDefaults__reloadDataFromStoreForDomain_(self, _cmd, aDomain)
{
    var data = ((___r1 = (self.isa.method_msgSend["persistentStoreForDomain:"] || _objj_forward)(self, (self.isa.method_dtable["persistentStoreForDomain:"], "persistentStoreForDomain:"), aDomain)), ___r1 == null ? null : (___r1.isa.method_msgSend["data"] || _objj_forward)(___r1, "data")),
        domain = data ? (CPKeyedUnarchiver.isa.method_msgSend["unarchiveObjectWithData:"] || _objj_forward)(CPKeyedUnarchiver, (CPKeyedUnarchiver.isa.method_dtable["unarchiveObjectWithData:"], "unarchiveObjectWithData:"), data) : nil;
    if (domain === nil)
        ((___r1 = self._domains), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObjectForKey:"] || _objj_forward)(___r1, (self._domains.isa.method_dtable["removeObjectForKey:"], "removeObjectForKey:"), aDomain));
    else
        ((___r1 = self._domains), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._domains.isa.method_dtable["setObject:forKey:"], self._domains.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), domain, aDomain));
    self._searchListNeedsReload = YES;
    var ___r1;
}

,["void","CPString"]), new objj_method(sel_getUid("domainDidChange:"), function $CPUserDefaults__domainDidChange_(self, _cmd, aDomain)
{
    if (aDomain === CPGlobalDomain || aDomain === CPApplicationDomain)
        ((___r1 = (CPRunLoop.isa.method_msgSend["currentRunLoop"] || _objj_forward)(CPRunLoop, (CPRunLoop.isa.method_dtable["currentRunLoop"], "currentRunLoop"))), ___r1 == null ? null : (___r1.isa.method_msgSend["performSelector:target:argument:order:modes:"] || _objj_forward)(___r1, "performSelector:target:argument:order:modes:", sel_getUid("synchronize"), self, nil, 0, [CPDefaultRunLoopMode]));
    ((___r1 = (CPNotificationCenter.isa.method_msgSend["defaultCenter"] || _objj_forward)(CPNotificationCenter, (CPNotificationCenter.isa.method_dtable["defaultCenter"], "defaultCenter"))), ___r1 == null ? null : (___r1.isa.method_msgSend["postNotificationName:object:"] || _objj_forward)(___r1, "postNotificationName:object:", CPUserDefaultsDidChangeNotification, self));
    var ___r1;
}

,["void","CPString"]), new objj_method(sel_getUid("synchronize"), function $CPUserDefaults__synchronize(self, _cmd)
{
    var globalDomain = ((___r1 = self._domains), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._domains.isa.method_dtable["objectForKey:"], "objectForKey:"), CPGlobalDomain));
    if (globalDomain)
    {
        var data = (CPKeyedArchiver.isa.method_msgSend["archivedDataWithRootObject:"] || _objj_forward)(CPKeyedArchiver, (CPKeyedArchiver.isa.method_dtable["archivedDataWithRootObject:"], "archivedDataWithRootObject:"), globalDomain);
        ((___r1 = (self.isa.method_msgSend["persistentStoreForDomain:"] || _objj_forward)(self, (self.isa.method_dtable["persistentStoreForDomain:"], "persistentStoreForDomain:"), CPGlobalDomain)), ___r1 == null ? null : (___r1.isa.method_msgSend["setData:"] || _objj_forward)(___r1, "setData:", data));
    }
    var appDomain = ((___r1 = self._domains), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._domains.isa.method_dtable["objectForKey:"], "objectForKey:"), CPApplicationDomain));
    if (appDomain)
    {
        var data = (CPKeyedArchiver.isa.method_msgSend["archivedDataWithRootObject:"] || _objj_forward)(CPKeyedArchiver, (CPKeyedArchiver.isa.method_dtable["archivedDataWithRootObject:"], "archivedDataWithRootObject:"), appDomain);
        ((___r1 = (self.isa.method_msgSend["persistentStoreForDomain:"] || _objj_forward)(self, (self.isa.method_dtable["persistentStoreForDomain:"], "persistentStoreForDomain:"), CPApplicationDomain)), ___r1 == null ? null : (___r1.isa.method_msgSend["setData:"] || _objj_forward)(___r1, "setData:", data));
    }
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("arrayForKey:"), function $CPUserDefaults__arrayForKey_(self, _cmd, aKey)
{
    var value = (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey);
    if ((value == null ? null : (value.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(value, (value.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), CPArray)))
        return value;
    return nil;
}

,["CPArray","CPString"]), new objj_method(sel_getUid("boolForKey:"), function $CPUserDefaults__boolForKey_(self, _cmd, aKey)
{
    var value = (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey);
    if ((value == null ? null : (value.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(value, (value.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("boolValue"))))
        return (value == null ? null : (value.isa.method_msgSend["boolValue"] || _objj_forward)(value, (value.isa.method_dtable["boolValue"], "boolValue")));
    return NO;
}

,["BOOL","CPString"]), new objj_method(sel_getUid("dataForKey:"), function $CPUserDefaults__dataForKey_(self, _cmd, aKey)
{
    var value = (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey);
    if ((value == null ? null : (value.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(value, (value.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), CPData)))
        return value;
    return nil;
}

,["CPData","CPString"]), new objj_method(sel_getUid("dictionaryForKey:"), function $CPUserDefaults__dictionaryForKey_(self, _cmd, aKey)
{
    var value = (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey);
    if ((value == null ? null : (value.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(value, (value.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), CPDictionary)))
        return value;
    return nil;
}

,["CPDictionary","CPString"]), new objj_method(sel_getUid("floatForKey:"), function $CPUserDefaults__floatForKey_(self, _cmd, aKey)
{
    var value = (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey);
    if (value === nil)
        return 0;
    if ((value == null ? null : (value.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(value, (value.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("floatValue"))))
        value = (value == null ? null : (value.isa.method_msgSend["floatValue"] || _objj_forward)(value, (value.isa.method_dtable["floatValue"], "floatValue")));
    return parseFloat(value);
}

,["float","CPString"]), new objj_method(sel_getUid("integerForKey:"), function $CPUserDefaults__integerForKey_(self, _cmd, aKey)
{
    var value = (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey);
    if (value === nil)
        return 0;
    if ((value == null ? null : (value.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(value, (value.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("intValue"))))
        value = (value == null ? null : (value.isa.method_msgSend["intValue"] || _objj_forward)(value, (value.isa.method_dtable["intValue"], "intValue")));
    return parseInt(value);
}

,["int","CPString"]), new objj_method(sel_getUid("doubleForKey:"), function $CPUserDefaults__doubleForKey_(self, _cmd, aKey)
{
    return (self.isa.method_msgSend["floatForKey:"] || _objj_forward)(self, (self.isa.method_dtable["floatForKey:"], "floatForKey:"), aKey);
}

,["double","CPString"]), new objj_method(sel_getUid("stringForKey:"), function $CPUserDefaults__stringForKey_(self, _cmd, aKey)
{
    var value = (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey);
    if ((value == null ? null : (value.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(value, (value.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), CPString)))
        return value;
    else if ((value == null ? null : (value.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(value, (value.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("stringValue"))))
        return (value == null ? null : (value.isa.method_msgSend["stringValue"] || _objj_forward)(value, (value.isa.method_dtable["stringValue"], "stringValue")));
    return nil;
}

,["CPString","CPString"]), new objj_method(sel_getUid("stringArrayForKey:"), function $CPUserDefaults__stringArrayForKey_(self, _cmd, aKey)
{
    var value = (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey);
    if (!(value == null ? null : (value.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(value, (value.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), CPArray)))
        return nil;
    for (var i = 0, count = (value == null ? null : (value.isa.method_msgSend["count"] || _objj_forward)(value, (value.isa.method_dtable["count"], "count"))); i < count; i++)
        if (!((___r1 = value[i]), ___r1 == null ? null : (___r1.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(___r1, "isKindOfClass:", CPString)))
            return nil;
    return value;
    var ___r1;
}

,["CPArray","CPString"]), new objj_method(sel_getUid("URLForKey:"), function $CPUserDefaults__URLForKey_(self, _cmd, aKey)
{
    var value = (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey);
    if ((value == null ? null : (value.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(value, (value.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), CPURL)))
        return value;
    if ((value == null ? null : (value.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(value, (value.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), CPString)))
        return (CPURL.isa.method_msgSend["URLWithString:"] || _objj_forward)(CPURL, (CPURL.isa.method_dtable["URLWithString:"], "URLWithString:"), value);
    return nil;
}

,["CPURL","CPString"]), new objj_method(sel_getUid("setBool:forKey:"), function $CPUserDefaults__setBool_forKey_(self, _cmd, aValue, aKey)
{
    if ((aValue == null ? null : (aValue.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(aValue, (aValue.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("boolValue"))))
        (self.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["setObject:forKey:"], self.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), (aValue == null ? null : (aValue.isa.method_msgSend["boolValue"] || _objj_forward)(aValue, (aValue.isa.method_dtable["boolValue"], "boolValue"))), aKey);
}

,["void","BOOL","CPString"]), new objj_method(sel_getUid("setFloat:forKey:"), function $CPUserDefaults__setFloat_forKey_(self, _cmd, aValue, aKey)
{
    if ((aValue == null ? null : (aValue.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(aValue, (aValue.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("floatValue"))))
        aValue = (aValue == null ? null : (aValue.isa.method_msgSend["floatValue"] || _objj_forward)(aValue, (aValue.isa.method_dtable["floatValue"], "floatValue")));
    (self.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["setObject:forKey:"], self.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), parseFloat(aValue), aKey);
}

,["void","float","CPString"]), new objj_method(sel_getUid("setDouble:forKey:"), function $CPUserDefaults__setDouble_forKey_(self, _cmd, aValue, aKey)
{
    (self.isa.method_msgSend["setFloat:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["setFloat:forKey:"], self.isa.method_dtable["setFloat:forKey:"], "setFloat:forKey:"), aValue, aKey);
}

,["void","double","CPString"]), new objj_method(sel_getUid("setInteger:forKey:"), function $CPUserDefaults__setInteger_forKey_(self, _cmd, aValue, aKey)
{
    if ((aValue == null ? null : (aValue.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(aValue, (aValue.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("intValue"))))
        aValue = (aValue == null ? null : (aValue.isa.method_msgSend["intValue"] || _objj_forward)(aValue, (aValue.isa.method_dtable["intValue"], "intValue")));
    (self.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["setObject:forKey:"], self.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), parseInt(aValue), aKey);
}

,["void","int","CPString"]), new objj_method(sel_getUid("setURL:forKey:"), function $CPUserDefaults__setURL_forKey_(self, _cmd, aValue, aKey)
{
    if ((aValue == null ? null : (aValue.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(aValue, (aValue.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), CPString)))
        aValue = (CPURL.isa.method_msgSend["URLWithString:"] || _objj_forward)(CPURL, (CPURL.isa.method_dtable["URLWithString:"], "URLWithString:"), aValue);
    (self.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["setObject:forKey:"], self.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), aValue, aKey);
}

,["void","CPURL","CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("standardUserDefaults"), function $CPUserDefaults__standardUserDefaults(self, _cmd)
{
    if (!StandardUserDefaults)
        StandardUserDefaults = ((___r1 = (CPUserDefaults.isa.method_msgSend["alloc"] || _objj_forward)(CPUserDefaults, (CPUserDefaults.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    return StandardUserDefaults;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("resetStandardUserDefaults"), function $CPUserDefaults__resetStandardUserDefaults(self, _cmd)
{
    if (StandardUserDefaults)
        (StandardUserDefaults == null ? null : (StandardUserDefaults.isa.method_msgSend["synchronize"] || _objj_forward)(StandardUserDefaults, (StandardUserDefaults.isa.method_dtable["synchronize"], "synchronize")));
    StandardUserDefaults = nil;
}

,["void"])]);
}

{var the_class = objj_allocateClassPair(CPObject, "CPUserDefaultsStore"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_domain", "CPString")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("domain"), function $CPUserDefaultsStore__domain(self, _cmd)
{
    return self._domain;
}

,["CPString"]), new objj_method(sel_getUid("setDomain:"), function $CPUserDefaultsStore__setDomain_(self, _cmd, newValue)
{
    self._domain = newValue;
}

,["void","CPString"]), new objj_method(sel_getUid("data"), function $CPUserDefaultsStore__data(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
    return nil;
}

,["CPData"]), new objj_method(sel_getUid("setData:"), function $CPUserDefaultsStore__setData_(self, _cmd, aData)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
}

,["void","CPData"])]);
}

{var the_class = objj_allocateClassPair(CPUserDefaultsStore, "CPUserDefaultsCookieStore"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_cookie", "CPCookie")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("setDomain:"), function $CPUserDefaultsCookieStore__setDomain_(self, _cmd, aDomain)
{
    if (self._domain === aDomain)
        return;
    self._domain = aDomain;
    self._cookie = ((___r1 = (CPCookie == null ? null : (CPCookie.isa.method_msgSend["alloc"] || _objj_forward)(CPCookie, (CPCookie.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithName:"] || _objj_forward)(___r1, "initWithName:", self._domain));
    var ___r1;
}

,["void","CPString"]), new objj_method(sel_getUid("data"), function $CPUserDefaultsCookieStore__data(self, _cmd)
{
    var result = ((___r1 = self._cookie), ___r1 == null ? null : (___r1.isa.method_msgSend["value"] || _objj_forward)(___r1, (self._cookie.isa.method_dtable["value"], "value")));
    if (!result || (result == null ? null : (result.isa.method_msgSend["length"] || _objj_forward)(result, (result.isa.method_dtable["length"], "length"))) < 1)
        return nil;
    return (CPData.isa.method_msgSend["dataWithRawString:"] || _objj_forward)(CPData, (CPData.isa.method_dtable["dataWithRawString:"], "dataWithRawString:"), decodeURIComponent(result));
    var ___r1;
}

,["CPData"]), new objj_method(sel_getUid("setData:"), function $CPUserDefaultsCookieStore__setData_(self, _cmd, aData)
{
    ((___r1 = self._cookie), ___r1 == null ? null : (___r1.isa.method_msgSend["setValue:expires:domain:"] || _objj_forward)(___r1, (self._cookie.isa.method_dtable["setValue:expires:domain:"], self._cookie.isa.method_dtable["setValue:expires:domain:"], self._cookie.isa.method_dtable["setValue:expires:domain:"], "setValue:expires:domain:"), encodeURIComponent((aData == null ? null : (aData.isa.method_msgSend["rawString"] || _objj_forward)(aData, (aData.isa.method_dtable["rawString"], "rawString")))), (CPDate.isa.method_msgSend["distantFuture"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["distantFuture"], "distantFuture")), window.location.href.hostname));
    var ___r1;
}

,["void","CPData"])]);
}
var CPUserDefaultsLocalStoreTestKey = "9961800812587769-Cappuccino-Storage-Test";

{var the_class = objj_allocateClassPair(CPUserDefaultsStore, "CPUserDefaultsLocalStore"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPUserDefaultsLocalStore__init(self, _cmd)
{
    if (!((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["supportsLocalStorage"] || _objj_forward)(___r1, "supportsLocalStorage")))
    {
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), "UnsupportedFeature", "Browser does not support localStorage for CPUserDefaultsLocalStore");
        return self = nil;
    }
    return self = (objj_getClass("CPUserDefaultsLocalStore").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("data"), function $CPUserDefaultsLocalStore__data(self, _cmd)
{
    var result = localStorage.getItem(self._domain);
    if (!result || (result == null ? null : (result.isa.method_msgSend["length"] || _objj_forward)(result, (result.isa.method_dtable["length"], "length"))) < 1)
        return nil;
    return (CPData.isa.method_msgSend["dataWithRawString:"] || _objj_forward)(CPData, (CPData.isa.method_dtable["dataWithRawString:"], "dataWithRawString:"), decodeURIComponent(result));
}

,["CPData"]), new objj_method(sel_getUid("setData:"), function $CPUserDefaultsLocalStore__setData_(self, _cmd, aData)
{
    try {
        localStorage.setItem(self._domain, encodeURIComponent((aData == null ? null : (aData.isa.method_msgSend["rawString"] || _objj_forward)(aData, (aData.isa.method_dtable["rawString"], "rawString")))));
    }
    catch(e) {
        CPLog.warn("Unable to write to local storage: " + e);
    }
}

,["void","CPData"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("supportsLocalStorage"), function $CPUserDefaultsLocalStore__supportsLocalStorage(self, _cmd)
{
    if (!window.localStorage)
        return NO;
    try {
        localStorage.setItem(CPUserDefaultsLocalStoreTestKey, "1");
        if (localStorage.getItem(CPUserDefaultsLocalStoreTestKey) != "1")
            return NO;
        localStorage.removeItem(CPUserDefaultsLocalStoreTestKey);
    }
    catch(e) {
        return NO;
    }
    return YES;
}

,["BOOL"])]);
}
p;19;CPNumberFormatter.jt;54392;@STATIC;1.0;i;10;CPString.ji;13;CPFormatter.ji;17;CPDecimalNumber.jS;30744;t;23565;

objj_executeFile("CPString.j", YES);objj_executeFile("CPFormatter.j", YES);objj_executeFile("CPDecimalNumber.j", YES);{var the_typedef = objj_allocateTypeDef("CPNumberFormatterStyle");
objj_registerTypeDef(the_typedef);
}CPNumberFormatterNoStyle = 0;
CPNumberFormatterDecimalStyle = 1;
CPNumberFormatterCurrencyStyle = 2;
CPNumberFormatterPercentStyle = 3;
CPNumberFormatterScientificStyle = 4;
CPNumberFormatterSpellOutStyle = 5;
{var the_typedef = objj_allocateTypeDef("CPNumberFormatterRoundingMode");
objj_registerTypeDef(the_typedef);
}CPNumberFormatterRoundCeiling = CPRoundUp;
CPNumberFormatterRoundFloor = CPRoundDown;
CPNumberFormatterRoundDown = CPRoundDown;
CPNumberFormatterRoundUp = CPRoundUp;
CPNumberFormatterRoundHalfEven = CPRoundBankers;
CPNumberFormatterRoundHalfDown = _CPRoundHalfDown;
CPNumberFormatterRoundHalfUp = CPRoundPlain;
var NumberRegex = new RegExp('(-)?(\\d*)(\\.(\\d*))?');

{var the_class = objj_allocateClassPair(CPFormatter, "CPNumberFormatter"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_numberStyle", "CPNumberFormatterStyle"), new objj_ivar("_perMillSymbol", "CPString"), new objj_ivar("_groupingSeparator", "CPString"), new objj_ivar("_roundingMode", "CPNumberFormatterRoundingMode"), new objj_ivar("_minimumFractionDigits", "CPUInteger"), new objj_ivar("_maximumFractionDigits", "CPUInteger"), new objj_ivar("_minimum", "CPUInteger"), new objj_ivar("_maximum", "CPUInteger"), new objj_ivar("_currencyCode", "CPString"), new objj_ivar("_currencySymbol", "CPString"), new objj_ivar("_generatesDecimalNumbers", "BOOL"), new objj_ivar("_numberHandler", "CPDecimalNumberHandler")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("numberStyle"), function $CPNumberFormatter__numberStyle(self, _cmd)
{
    return self._numberStyle;
}

,["CPNumberFormatterStyle"]), new objj_method(sel_getUid("setNumberStyle:"), function $CPNumberFormatter__setNumberStyle_(self, _cmd, newValue)
{
    self._numberStyle = newValue;
}

,["void","CPNumberFormatterStyle"]), new objj_method(sel_getUid("perMillSymbol"), function $CPNumberFormatter__perMillSymbol(self, _cmd)
{
    return self._perMillSymbol;
}

,["CPString"]), new objj_method(sel_getUid("setPerMillSymbol:"), function $CPNumberFormatter__setPerMillSymbol_(self, _cmd, newValue)
{
    self._perMillSymbol = newValue;
}

,["void","CPString"]), new objj_method(sel_getUid("groupingSeparator"), function $CPNumberFormatter__groupingSeparator(self, _cmd)
{
    return self._groupingSeparator;
}

,["CPString"]), new objj_method(sel_getUid("setGroupingSeparator:"), function $CPNumberFormatter__setGroupingSeparator_(self, _cmd, newValue)
{
    self._groupingSeparator = newValue;
}

,["void","CPString"]), new objj_method(sel_getUid("roundingMode"), function $CPNumberFormatter__roundingMode(self, _cmd)
{
    return self._roundingMode;
}

,["CPNumberFormatterRoundingMode"]), new objj_method(sel_getUid("setRoundingMode:"), function $CPNumberFormatter__setRoundingMode_(self, _cmd, newValue)
{
    self._roundingMode = newValue;
}

,["void","CPNumberFormatterRoundingMode"]), new objj_method(sel_getUid("minimumFractionDigits"), function $CPNumberFormatter__minimumFractionDigits(self, _cmd)
{
    return self._minimumFractionDigits;
}

,["CPUInteger"]), new objj_method(sel_getUid("setMinimumFractionDigits:"), function $CPNumberFormatter__setMinimumFractionDigits_(self, _cmd, newValue)
{
    self._minimumFractionDigits = newValue;
}

,["void","CPUInteger"]), new objj_method(sel_getUid("maximumFractionDigits"), function $CPNumberFormatter__maximumFractionDigits(self, _cmd)
{
    return self._maximumFractionDigits;
}

,["CPUInteger"]), new objj_method(sel_getUid("setMaximumFractionDigits:"), function $CPNumberFormatter__setMaximumFractionDigits_(self, _cmd, newValue)
{
    self._maximumFractionDigits = newValue;
}

,["void","CPUInteger"]), new objj_method(sel_getUid("minimum"), function $CPNumberFormatter__minimum(self, _cmd)
{
    return self._minimum;
}

,["CPUInteger"]), new objj_method(sel_getUid("setMinimum:"), function $CPNumberFormatter__setMinimum_(self, _cmd, newValue)
{
    self._minimum = newValue;
}

,["void","CPUInteger"]), new objj_method(sel_getUid("maximum"), function $CPNumberFormatter__maximum(self, _cmd)
{
    return self._maximum;
}

,["CPUInteger"]), new objj_method(sel_getUid("setMaximum:"), function $CPNumberFormatter__setMaximum_(self, _cmd, newValue)
{
    self._maximum = newValue;
}

,["void","CPUInteger"]), new objj_method(sel_getUid("currencyCode"), function $CPNumberFormatter__currencyCode(self, _cmd)
{
    return self._currencyCode;
}

,["CPString"]), new objj_method(sel_getUid("setCurrencyCode:"), function $CPNumberFormatter__setCurrencyCode_(self, _cmd, newValue)
{
    self._currencyCode = newValue;
}

,["void","CPString"]), new objj_method(sel_getUid("currencySymbol"), function $CPNumberFormatter__currencySymbol(self, _cmd)
{
    return self._currencySymbol;
}

,["CPString"]), new objj_method(sel_getUid("setCurrencySymbol:"), function $CPNumberFormatter__setCurrencySymbol_(self, _cmd, newValue)
{
    self._currencySymbol = newValue;
}

,["void","CPString"]), new objj_method(sel_getUid("generatesDecimalNumbers"), function $CPNumberFormatter__generatesDecimalNumbers(self, _cmd)
{
    return self._generatesDecimalNumbers;
}

,["BOOL"]), new objj_method(sel_getUid("setGeneratesDecimalNumbers:"), function $CPNumberFormatter__setGeneratesDecimalNumbers_(self, _cmd, newValue)
{
    self._generatesDecimalNumbers = newValue;
}

,["void","BOOL"]), new objj_method(sel_getUid("init"), function $CPNumberFormatter__init(self, _cmd)
{
    if (self = (objj_getClass("CPNumberFormatter").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        self._roundingMode = CPNumberFormatterRoundHalfEven;
        self._minimumFractionDigits = 0;
        self._maximumFractionDigits = 0;
        self._groupingSeparator = ",";
        self._generatesDecimalNumbers = YES;
        self._minimum = nil;
        self._maximum = nil;
        self._currencyCode = "USD";
        self._currencySymbol = "$";
    }
    return self;
}

,["id"]), new objj_method(sel_getUid("stringFromNumber:"), function $CPNumberFormatter__stringFromNumber_(self, _cmd, number)
{
    if (self._numberStyle == CPNumberFormatterPercentStyle)
    {
        number *= 100.0;
    }
    var dcmn = (number == null ? null : (number.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(number, (number.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), CPDecimalNumber)) ? number : ((___r1 = (CPDecimalNumber.isa.method_msgSend["alloc"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["_initWithJSNumber:"] || _objj_forward)(___r1, "_initWithJSNumber:", number));
    switch(self._numberStyle) {
        case CPNumberFormatterCurrencyStyle:
        case CPNumberFormatterDecimalStyle:
        case CPNumberFormatterPercentStyle:
            (self.isa.method_msgSend["_updateNumberHandlerIfNecessary"] || _objj_forward)(self, (self.isa.method_dtable["_updateNumberHandlerIfNecessary"], "_updateNumberHandlerIfNecessary"));
            dcmn = (dcmn == null ? null : (dcmn.isa.method_msgSend["decimalNumberByRoundingAccordingToBehavior:"] || _objj_forward)(dcmn, (dcmn.isa.method_dtable["decimalNumberByRoundingAccordingToBehavior:"], "decimalNumberByRoundingAccordingToBehavior:"), self._numberHandler));
            var output = (dcmn == null ? null : (dcmn.isa.method_msgSend["descriptionWithLocale:"] || _objj_forward)(dcmn, (dcmn.isa.method_dtable["descriptionWithLocale:"], "descriptionWithLocale:"), nil)),
                parts = output.match(NumberRegex) || ["", undefined, "", undefined, undefined],
                negativePrefix = parts[1] || "",
                preFraction = parts[2] || "",
                fraction = parts[4] || "",
                preFractionLength = (preFraction == null ? null : (preFraction.isa.method_msgSend["length"] || _objj_forward)(preFraction, (preFraction.isa.method_dtable["length"], "length"))),
                commaPosition = 3;
            while (fraction.length < self._minimumFractionDigits)
                fraction += "0";
            if (self._groupingSeparator)
            {
                for (var commaPosition = 3, prefLength = (preFraction == null ? null : (preFraction.isa.method_msgSend["length"] || _objj_forward)(preFraction, (preFraction.isa.method_dtable["length"], "length"))); commaPosition < prefLength; commaPosition += 4)
                {
                    preFraction = (preFraction == null ? null : (preFraction.isa.method_msgSend["stringByReplacingCharactersInRange:withString:"] || _objj_forward)(preFraction, (preFraction.isa.method_dtable["stringByReplacingCharactersInRange:withString:"], preFraction.isa.method_dtable["stringByReplacingCharactersInRange:withString:"], "stringByReplacingCharactersInRange:withString:"), CPMakeRange(prefLength - commaPosition, 0), self._groupingSeparator));
                    prefLength += 1;
                }
            }
            var string = preFraction;
            if (fraction)
                string += "." + fraction;
            if (self._numberStyle === CPNumberFormatterCurrencyStyle)
            {
                if (self._currencySymbol)
                    string = self._currencySymbol + string;
                else
                    string = self._currencyCode + string;
            }
            if (self._numberStyle == CPNumberFormatterPercentStyle)
                string += "%";
            if (negativePrefix)
                string = negativePrefix + string;
            return string;
default:
            return (number == null ? null : (number.isa.method_msgSend["description"] || _objj_forward)(number, (number.isa.method_dtable["description"], "description")));
    }
    var ___r1;
}

,["CPString","CPNumber"]), new objj_method(sel_getUid("numberFromString:"), function $CPNumberFormatter__numberFromString_(self, _cmd, aString)
{
    if (self._generatesDecimalNumbers)
        return (CPDecimalNumber.isa.method_msgSend["decimalNumberWithString:"] || _objj_forward)(CPDecimalNumber, (CPDecimalNumber.isa.method_dtable["decimalNumberWithString:"], "decimalNumberWithString:"), aString);
    else
        return parseFloat(aString);
}

,["CPNumber","CPString"]), new objj_method(sel_getUid("stringForObjectValue:"), function $CPNumberFormatter__stringForObjectValue_(self, _cmd, anObject)
{
    if ((anObject == null ? null : (anObject.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPNumber.isa.method_msgSend["class"] || _objj_forward)(CPNumber, (CPNumber.isa.method_dtable["class"], "class")))))
        return (self.isa.method_msgSend["stringFromNumber:"] || _objj_forward)(self, (self.isa.method_dtable["stringFromNumber:"], "stringFromNumber:"), anObject);
    else
        return (anObject == null ? null : (anObject.isa.method_msgSend["description"] || _objj_forward)(anObject, (anObject.isa.method_dtable["description"], "description")));
}

,["CPString","id"]), new objj_method(sel_getUid("editingStringForObjectValue:"), function $CPNumberFormatter__editingStringForObjectValue_(self, _cmd, anObject)
{
    return (self.isa.method_msgSend["stringForObjectValue:"] || _objj_forward)(self, (self.isa.method_dtable["stringForObjectValue:"], "stringForObjectValue:"), anObject);
}

,["CPString","id"]), new objj_method(sel_getUid("getObjectValue:forString:errorDescription:"), function $CPNumberFormatter__getObjectValue_forString_errorDescription_(self, _cmd, anObjectRef, aString, anErrorRef)
{
    if (aString === "")
    {
        (anObjectRef)(nil);
        return YES;
    }
    var value = (self.isa.method_msgSend["numberFromString:"] || _objj_forward)(self, (self.isa.method_dtable["numberFromString:"], "numberFromString:"), aString),
        error = "";
    if (!isFinite(value))
        error = "Value is not a number";
    else if (self._minimum !== nil && value < self._minimum)
        error = "Value is less than the minimum allowed value";
    else if (self._maximum !== nil && value > self._maximum)
        error = "Value is greater than the maximum allowed value";
    if (error)
    {
        if (anErrorRef)
            (anErrorRef)(error);
        return NO;
    }
    (anObjectRef)(value);
    return YES;
}

,["BOOL","idRef","CPString","CPStringRef"]), new objj_method(sel_getUid("setNumberStyle:"), function $CPNumberFormatter__setNumberStyle_(self, _cmd, aStyle)
{
    self._numberStyle = aStyle;
    switch(aStyle) {
        case CPNumberFormatterDecimalStyle:
            self._minimumFractionDigits = 0;
            self._maximumFractionDigits = 3;
            self._numberHandler = nil;
            break;
        case CPNumberFormatterCurrencyStyle:
            self._minimumFractionDigits = 2;
            self._maximumFractionDigits = 2;
            self._numberHandler = nil;
            break;
    }
}

,["void","CPNumberFormatterStyle"]), new objj_method(sel_getUid("setRoundingMode:"), function $CPNumberFormatter__setRoundingMode_(self, _cmd, aRoundingMode)
{
    self._roundingMode = aRoundingMode;
    self._numberHandler = nil;
}

,["void","CPNumberFormatterRoundingMode"]), new objj_method(sel_getUid("setMinimumFractionDigits:"), function $CPNumberFormatter__setMinimumFractionDigits_(self, _cmd, aNumber)
{
    self._minimumFractionDigits = aNumber;
    self._numberHandler = nil;
}

,["void","CPUInteger"]), new objj_method(sel_getUid("setMaximumFractionDigits:"), function $CPNumberFormatter__setMaximumFractionDigits_(self, _cmd, aNumber)
{
    self._maximumFractionDigits = aNumber;
    self._numberHandler = nil;
}

,["void","CPUInteger"]), new objj_method(sel_getUid("setMinimum:"), function $CPNumberFormatter__setMinimum_(self, _cmd, aNumber)
{
    self._minimum = aNumber;
    self._numberHandler = nil;
}

,["void","CPUInteger"]), new objj_method(sel_getUid("setMaximum:"), function $CPNumberFormatter__setMaximum_(self, _cmd, aNumber)
{
    self._maximum = aNumber;
    self._numberHandler = nil;
}

,["void","CPUInteger"]), new objj_method(sel_getUid("_updateNumberHandlerIfNecessary"), function $CPNumberFormatter___updateNumberHandlerIfNecessary(self, _cmd)
{
    if (!self._numberHandler)
        self._numberHandler = (CPDecimalNumberHandler.isa.method_msgSend["decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"] || _objj_forward)(CPDecimalNumberHandler, (CPDecimalNumberHandler.isa.method_dtable["decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], CPDecimalNumberHandler.isa.method_dtable["decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], CPDecimalNumberHandler.isa.method_dtable["decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], CPDecimalNumberHandler.isa.method_dtable["decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], CPDecimalNumberHandler.isa.method_dtable["decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], CPDecimalNumberHandler.isa.method_dtable["decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"], "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"), self._roundingMode, self._maximumFractionDigits, NO, NO, NO, YES);
}

,["void"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("localizedStringFromNumber:numberStyle:"), function $CPNumberFormatter__localizedStringFromNumber_numberStyle_(self, _cmd, num, localizationStyle)
{
    var formatter = ((___r1 = (CPNumberFormatter.isa.method_msgSend["alloc"] || _objj_forward)(CPNumberFormatter, (CPNumberFormatter.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    (formatter == null ? null : (formatter.isa.method_msgSend["setNumberStyle:"] || _objj_forward)(formatter, (formatter.isa.method_dtable["setNumberStyle:"], "setNumberStyle:"), localizationStyle));
    return (formatter == null ? null : (formatter.isa.method_msgSend["stringFromNumber:"] || _objj_forward)(formatter, (formatter.isa.method_dtable["stringFromNumber:"], "stringFromNumber:"), num));
    var ___r1;
}

,["CPString","CPNumber","CPNumberFormatterStyle"])]);
}
var CPNumberFormatterStyleKey = "CPNumberFormatterStyleKey",
    CPNumberFormatterMinimumFractionDigitsKey = "CPNumberFormatterMinimumFractionDigitsKey",
    CPNumberFormatterMaximumFractionDigitsKey = "CPNumberFormatterMaximumFractionDigitsKey",
    CPNumberFormatterMinimumKey = "CPNumberFormatterMinimumKey",
    CPNumberFormatterMaximumKey = "CPNumberFormatterMaximumKey",
    CPNumberFormatterRoundingModeKey = "CPNumberFormatterRoundingModeKey",
    CPNumberFormatterGroupingSeparatorKey = "CPNumberFormatterGroupingSeparatorKey",
    CPNumberFormatterCurrencyCodeKey = "CPNumberFormatterCurrencyCodeKey",
    CPNumberFormatterCurrencySymbolKey = "CPNumberFormatterCurrencySymbolKey",
    CPNumberFormatterGeneratesDecimalNumbers = "CPNumberFormatterGeneratesDecimalNumbers";
{
var the_class = objj_getClass("CPNumberFormatter")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPNumberFormatter\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPNumberFormatter__initWithCoder_(self, _cmd, aCoder)
{
    self = (objj_getClass("CPNumberFormatter").super_class.method_dtable["initWithCoder:"] || _objj_forward)(self, "initWithCoder:", aCoder);
    if (self)
    {
        self._numberStyle = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPNumberFormatterStyleKey));
        self._minimumFractionDigits = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPNumberFormatterMinimumFractionDigitsKey));
        self._maximumFractionDigits = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPNumberFormatterMaximumFractionDigitsKey));
        self._roundingMode = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPNumberFormatterRoundingModeKey));
        self._groupingSeparator = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPNumberFormatterGroupingSeparatorKey));
        self._currencyCode = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPNumberFormatterCurrencyCodeKey));
        self._currencySymbol = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPNumberFormatterCurrencySymbolKey));
        self._generatesDecimalNumbers = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPNumberFormatterGeneratesDecimalNumbers));
        self._minimum = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPNumberFormatterMinimumKey));
        self._maximum = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPNumberFormatterMaximumKey));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPNumberFormatter__encodeWithCoder_(self, _cmd, aCoder)
{
    (objj_getClass("CPNumberFormatter").super_class.method_dtable["encodeWithCoder:"] || _objj_forward)(self, "encodeWithCoder:", aCoder);
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._numberStyle, CPNumberFormatterStyleKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._minimumFractionDigits, CPNumberFormatterMinimumFractionDigitsKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._maximumFractionDigits, CPNumberFormatterMaximumFractionDigitsKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._minimum, CPNumberFormatterMinimumKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._maximum, CPNumberFormatterMaximumKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._roundingMode, CPNumberFormatterRoundingModeKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._groupingSeparator, CPNumberFormatterGroupingSeparatorKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._currencyCode, CPNumberFormatterCurrencyCodeKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._currencySymbol, CPNumberFormatterCurrencySymbolKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._generatesDecimalNumbers, CPNumberFormatterGeneratesDecimalNumbers));
}

,["void","CPCoder"])]);
}
p;15;CPObjJRuntime.jt;3292;@STATIC;1.0;S;2844;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQT2JqSlJ1bnRpbWUuaiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzt1QkFzQkEsUSxDQUE4QixTO0FBQzlCO0lBQ0ksTSxDQUFPLFcsQ0FBWSxTO0FBRHZCLEM7dUJBSUEsUSxDQUE4QixhO0FBQzlCO0lBQ0ksTSxDQUFPLGdCLENBQWlCLGE7QUFENUIsQztvQkFJQSxRLENBQTJCLFU7QUFDM0I7SUFDSSxNLENBQU8sYSxDQUFjLFU7QUFEekIsQztvQkFJQSxRLENBQTJCLE07QUFDM0I7SUFDSSxNLENBQU8sYSxDQUFjLE07QUFEekIsQztBQVNBLGtCLEdBQTBCLENBQUMsQ0FBM0I7QUFNQSxhLEdBQTJCLENBQTNCO0FBTUEsbUIsR0FBMkIsQ0FBM0I7QUFFQSxVLEdBQTBCLENBQUMsQ0FBM0IiLCJmaWxlIjoiQ1BPYmpKUnVudGltZS5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi9Vc2Vycy9kYXZpZC9wcm9ncmFtcy9jYXBwdWNjaW5vL0ZvdW5kYXRpb24vIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENQT2JqSlJ1bnRpbWUualxuICogRm91bmRhdGlvblxuICpcbiAqIENyZWF0ZWQgYnkgRnJhbmNpc2NvIFRvbG1hc2t5LlxuICogQ29weXJpZ2h0IDIwMDgsIDI4MCBOb3J0aCwgSW5jLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlclxuICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlXG4gKiBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BIDAyMTEwLTEzMDEgVVNBXG4gKi9cblxuZnVuY3Rpb24gQ1BTdHJpbmdGcm9tU2VsZWN0b3IoYVNlbGVjdG9yKVxue1xuICAgIHJldHVybiBzZWxfZ2V0TmFtZShhU2VsZWN0b3IpO1xufVxuXG5mdW5jdGlvbiBDUFNlbGVjdG9yRnJvbVN0cmluZyhhU2VsZWN0b3JOYW1lKVxue1xuICAgIHJldHVybiBzZWxfcmVnaXN0ZXJOYW1lKGFTZWxlY3Rvck5hbWUpO1xufVxuXG5mdW5jdGlvbiBDUENsYXNzRnJvbVN0cmluZyhhQ2xhc3NOYW1lKVxue1xuICAgIHJldHVybiBvYmpqX2dldENsYXNzKGFDbGFzc05hbWUpO1xufVxuXG5mdW5jdGlvbiBDUFN0cmluZ0Zyb21DbGFzcyhhQ2xhc3MpXG57XG4gICAgcmV0dXJuIGNsYXNzX2dldE5hbWUoYUNsYXNzKTtcbn1cblxuLyohXG4gICAgVGhlIGxlZnQgb3BlcmFuZCBpcyBzbWFsbGVyIHRoYW4gdGhlIHJpZ2h0LlxuICAgIEBnbG9iYWxcbiAgICBAZ3JvdXAgQ1BDb21wYXJpc29uUmVzdWx0XG4qL1xuQ1BPcmRlcmVkQXNjZW5kaW5nICAgICAgPSAtMTtcbi8qIVxuICAgIFRoZSBsZWZ0IGFuZCByaWdodCBvcGVyYW5kcyBhcmUgZXF1YWwuXG4gICAgQGdsb2JhbFxuICAgIEBncm91cCBDUENvbXBhcmlzb25SZXN1bHRcbiovXG5DUE9yZGVyZWRTYW1lICAgICAgICAgICA9ICAwO1xuLyohXG4gICAgVGhlIGxlZnQgb3BlcmFuZCBpcyBncmVhdGVyIHRoYW4gdGhlIHJpZ2h0LlxuICAgIEBnbG9iYWxcbiAgICBAZ3JvdXAgQ1BDb21wYXJpc29uUmVzdWx0XG4qL1xuQ1BPcmRlcmVkRGVzY2VuZGluZyAgICAgPSAgMTtcblxuQ1BOb3RGb3VuZCAgICAgICAgICAgICAgPSAtMTtcbiJdfQ==t;423;

CPStringFromSelector = function(aSelector)
{
    return sel_getName(aSelector);
}
CPSelectorFromString = function(aSelectorName)
{
    return sel_registerName(aSelectorName);
}
CPClassFromString = function(aClassName)
{
    return objj_getClass(aClassName);
}
CPStringFromClass = function(aClass)
{
    return class_getName(aClass);
}
CPOrderedAscending = -1;
CPOrderedSame = 0;
CPOrderedDescending = 1;
CPNotFound = -1;
p;16;CPCharacterSet.jt;153058;@STATIC;1.0;i;9;CPArray.ji;13;CPException.ji;10;CPObject.ji;10;CPString.ji;7;CPURL.jS;105644;t;47313;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPString.j", YES);objj_executeFile("CPURL.j", YES);var _builtInCharacterSets = {};

{var the_class = objj_allocateClassPair(CPObject, "CPCharacterSet"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_inverted", "BOOL")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPCharacterSet__init(self, _cmd)
{
    self = (objj_getClass("CPCharacterSet").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
        self._inverted = NO;
    return self;
}

,["id"]), new objj_method(sel_getUid("invert"), function $CPCharacterSet__invert(self, _cmd)
{
    self._inverted = !self._inverted;
}

,["void"]), new objj_method(sel_getUid("characterIsMember:"), function $CPCharacterSet__characterIsMember_(self, _cmd, aCharacter)
{
}

,["BOOL","CPString"]), new objj_method(sel_getUid("hasMemberInPlane:"), function $CPCharacterSet__hasMemberInPlane_(self, _cmd, aPlane)
{
}

,["BOOL","int"]), new objj_method(sel_getUid("_setInverted:"), function $CPCharacterSet___setInverted_(self, _cmd, flag)
{
    self._inverted = flag;
}

,["void","id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("characterSetWithCharactersInString:"), function $CPCharacterSet__characterSetWithCharactersInString_(self, _cmd, aString)
{
    return ((___r1 = (_CPStringContentCharacterSet == null ? null : (_CPStringContentCharacterSet.isa.method_msgSend["alloc"] || _objj_forward)(_CPStringContentCharacterSet, (_CPStringContentCharacterSet.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithString:"] || _objj_forward)(___r1, "initWithString:", aString));
    var ___r1;
}

,["id","CPString"]), new objj_method(sel_getUid("characterSetWithRange:"), function $CPCharacterSet__characterSetWithRange_(self, _cmd, aRange)
{
    return ((___r1 = (_CPRangeCharacterSet == null ? null : (_CPRangeCharacterSet.isa.method_msgSend["alloc"] || _objj_forward)(_CPRangeCharacterSet, (_CPRangeCharacterSet.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithRange:"] || _objj_forward)(___r1, "initWithRange:", aRange));
    var ___r1;
}

,["id","CPRange"]), new objj_method(sel_getUid("alphanumericCharacterSet"), function $CPCharacterSet__alphanumericCharacterSet(self, _cmd)
{
    return (CPCharacterSet.isa.method_msgSend["_sharedCharacterSetWithName:"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["_sharedCharacterSetWithName:"], "_sharedCharacterSetWithName:"), _cmd);
}

,["id"]), new objj_method(sel_getUid("controlCharacterSet"), function $CPCharacterSet__controlCharacterSet(self, _cmd)
{
    return (CPCharacterSet.isa.method_msgSend["_sharedCharacterSetWithName:"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["_sharedCharacterSetWithName:"], "_sharedCharacterSetWithName:"), _cmd);
}

,["id"]), new objj_method(sel_getUid("decimalDigitCharacterSet"), function $CPCharacterSet__decimalDigitCharacterSet(self, _cmd)
{
    return (CPCharacterSet.isa.method_msgSend["_sharedCharacterSetWithName:"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["_sharedCharacterSetWithName:"], "_sharedCharacterSetWithName:"), _cmd);
}

,["id"]), new objj_method(sel_getUid("decomposableCharacterSet"), function $CPCharacterSet__decomposableCharacterSet(self, _cmd)
{
    return (CPCharacterSet.isa.method_msgSend["_sharedCharacterSetWithName:"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["_sharedCharacterSetWithName:"], "_sharedCharacterSetWithName:"), _cmd);
}

,["id"]), new objj_method(sel_getUid("illegalCharacterSet"), function $CPCharacterSet__illegalCharacterSet(self, _cmd)
{
    return (CPCharacterSet.isa.method_msgSend["_sharedCharacterSetWithName:"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["_sharedCharacterSetWithName:"], "_sharedCharacterSetWithName:"), _cmd);
}

,["id"]), new objj_method(sel_getUid("letterCharacterSet"), function $CPCharacterSet__letterCharacterSet(self, _cmd)
{
    return (CPCharacterSet.isa.method_msgSend["_sharedCharacterSetWithName:"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["_sharedCharacterSetWithName:"], "_sharedCharacterSetWithName:"), _cmd);
}

,["id"]), new objj_method(sel_getUid("lowercaseLetterCharacterSet"), function $CPCharacterSet__lowercaseLetterCharacterSet(self, _cmd)
{
    return (CPCharacterSet.isa.method_msgSend["_sharedCharacterSetWithName:"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["_sharedCharacterSetWithName:"], "_sharedCharacterSetWithName:"), _cmd);
}

,["id"]), new objj_method(sel_getUid("nonBaseCharacterSet"), function $CPCharacterSet__nonBaseCharacterSet(self, _cmd)
{
    return (CPCharacterSet.isa.method_msgSend["_sharedCharacterSetWithName:"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["_sharedCharacterSetWithName:"], "_sharedCharacterSetWithName:"), _cmd);
}

,["id"]), new objj_method(sel_getUid("punctuationCharacterSet"), function $CPCharacterSet__punctuationCharacterSet(self, _cmd)
{
    return (CPCharacterSet.isa.method_msgSend["_sharedCharacterSetWithName:"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["_sharedCharacterSetWithName:"], "_sharedCharacterSetWithName:"), _cmd);
}

,["id"]), new objj_method(sel_getUid("uppercaseLetterCharacterSet"), function $CPCharacterSet__uppercaseLetterCharacterSet(self, _cmd)
{
    return (CPCharacterSet.isa.method_msgSend["_sharedCharacterSetWithName:"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["_sharedCharacterSetWithName:"], "_sharedCharacterSetWithName:"), _cmd);
}

,["id"]), new objj_method(sel_getUid("whitespaceAndNewlineCharacterSet"), function $CPCharacterSet__whitespaceAndNewlineCharacterSet(self, _cmd)
{
    return (CPCharacterSet.isa.method_msgSend["_sharedCharacterSetWithName:"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["_sharedCharacterSetWithName:"], "_sharedCharacterSetWithName:"), _cmd);
}

,["id"]), new objj_method(sel_getUid("whitespaceCharacterSet"), function $CPCharacterSet__whitespaceCharacterSet(self, _cmd)
{
    return (CPCharacterSet.isa.method_msgSend["_sharedCharacterSetWithName:"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["_sharedCharacterSetWithName:"], "_sharedCharacterSetWithName:"), _cmd);
}

,["id"]), new objj_method(sel_getUid("_sharedCharacterSetWithName:"), function $CPCharacterSet___sharedCharacterSetWithName_(self, _cmd, csname)
{
    var cs = _builtInCharacterSets[csname];
    if (!cs)
    {
        var i = 0,
            ranges = (CPArray.isa.method_msgSend["array"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["array"], "array")),
            rangeArray = eval(csname);
        for (; i < rangeArray.length; i += 2)
        {
            var loc = rangeArray[i],
                length = rangeArray[i + 1],
                range = CPMakeRange(loc, length);
            (ranges == null ? null : (ranges.isa.method_msgSend["addObject:"] || _objj_forward)(ranges, (ranges.isa.method_dtable["addObject:"], "addObject:"), range));
        }
        cs = ((___r1 = (_CPRangeCharacterSet == null ? null : (_CPRangeCharacterSet.isa.method_msgSend["alloc"] || _objj_forward)(_CPRangeCharacterSet, (_CPRangeCharacterSet.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithRanges:"] || _objj_forward)(___r1, "initWithRanges:", ranges));
        _builtInCharacterSets[csname] = cs;
    }
    return cs;
    var ___r1;
}

,["id","id"])]);
}
var CPCharacterSetInvertedKey = "CPCharacterSetInvertedKey";
{
var the_class = objj_getClass("CPCharacterSet")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPCharacterSet\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPCharacterSet__initWithCoder_(self, _cmd, aCoder)
{
    if (self = (objj_getClass("CPCharacterSet").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        self._inverted = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPCharacterSetInvertedKey));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPCharacterSet__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._inverted, CPCharacterSetInvertedKey));
}

,["void","CPCoder"])]);
}

{var the_class = objj_allocateClassPair(CPCharacterSet, "_CPRangeCharacterSet"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_ranges", "CPArray")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithRange:"), function $_CPRangeCharacterSet__initWithRange_(self, _cmd, r)
{
    return (self.isa.method_msgSend["initWithRanges:"] || _objj_forward)(self, (self.isa.method_dtable["initWithRanges:"], "initWithRanges:"), (CPArray.isa.method_msgSend["arrayWithObject:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObject:"], "arrayWithObject:"), r));
}

,["id","CPRange"]), new objj_method(sel_getUid("initWithRanges:"), function $_CPRangeCharacterSet__initWithRanges_(self, _cmd, ranges)
{
    self = (objj_getClass("_CPRangeCharacterSet").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._ranges = ranges;
    }
    return self;
}

,["id","CPArray"]), new objj_method(sel_getUid("copy"), function $_CPRangeCharacterSet__copy(self, _cmd)
{
    var set = ((___r1 = (_CPRangeCharacterSet.isa.method_msgSend["alloc"] || _objj_forward)(_CPRangeCharacterSet, (_CPRangeCharacterSet.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithRanges:"] || _objj_forward)(___r1, "initWithRanges:", self._ranges));
    (set == null ? null : (set.isa.method_msgSend["_setInverted:"] || _objj_forward)(set, (set.isa.method_dtable["_setInverted:"], "_setInverted:"), self._inverted));
    return set;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("invertedSet"), function $_CPRangeCharacterSet__invertedSet(self, _cmd)
{
    var set = ((___r1 = (_CPRangeCharacterSet.isa.method_msgSend["alloc"] || _objj_forward)(_CPRangeCharacterSet, (_CPRangeCharacterSet.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithRanges:"] || _objj_forward)(___r1, "initWithRanges:", self._ranges));
    (set == null ? null : (set.isa.method_msgSend["invert"] || _objj_forward)(set, (set.isa.method_dtable["invert"], "invert")));
    return set;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("characterIsMember:"), function $_CPRangeCharacterSet__characterIsMember_(self, _cmd, aCharacter)
{
    var c = aCharacter.charCodeAt(0),
        enu = ((___r1 = self._ranges), ___r1 == null ? null : (___r1.isa.method_msgSend["objectEnumerator"] || _objj_forward)(___r1, (self._ranges.isa.method_dtable["objectEnumerator"], "objectEnumerator"))),
        range;
    while ((range = (enu == null ? null : (enu.isa.method_msgSend["nextObject"] || _objj_forward)(enu, (enu.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
    {
        if (CPLocationInRange(c, range))
            return !self._inverted;
    }
    return self._inverted;
    var ___r1;
}

,["BOOL","CPString"]), new objj_method(sel_getUid("hasMemberInPlane:"), function $_CPRangeCharacterSet__hasMemberInPlane_(self, _cmd, plane)
{
    if (plane !== 0)
        return NO;
    var enu = ((___r1 = self._ranges), ___r1 == null ? null : (___r1.isa.method_msgSend["objectEnumerator"] || _objj_forward)(___r1, (self._ranges.isa.method_dtable["objectEnumerator"], "objectEnumerator"))),
        range;
    while ((range = (enu == null ? null : (enu.isa.method_msgSend["nextObject"] || _objj_forward)(enu, (enu.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
    {
        if (!CPEmptyRange(range))
            return YES;
    }
    return NO;
    var ___r1;
}

,["BOOL","int"]), new objj_method(sel_getUid("addCharactersInRange:"), function $_CPRangeCharacterSet__addCharactersInRange_(self, _cmd, aRange)
{
    ((___r1 = self._ranges), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, (self._ranges.isa.method_dtable["addObject:"], "addObject:"), aRange));
    var ___r1;
}

,["void","CPRange"]), new objj_method(sel_getUid("addCharactersInString:"), function $_CPRangeCharacterSet__addCharactersInString_(self, _cmd, aString)
{
    var i = 0;
    for (; i < aString.length; i++)
    {
        var code = aString.charCodeAt(i),
            range = CPMakeRange(code, 1);
        ((___r1 = self._ranges), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, (self._ranges.isa.method_dtable["addObject:"], "addObject:"), range));
    }
    var ___r1;
}

,["void","CPString"])]);
}

{var the_class = objj_allocateClassPair(CPCharacterSet, "_CPStringContentCharacterSet"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_string", "CPString")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithString:"), function $_CPStringContentCharacterSet__initWithString_(self, _cmd, s)
{
    self = (objj_getClass("_CPStringContentCharacterSet").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._string = s;
    }
    return self;
}

,["id","CPString"]), new objj_method(sel_getUid("copy"), function $_CPStringContentCharacterSet__copy(self, _cmd)
{
    var set = ((___r1 = (_CPStringContentCharacterSet.isa.method_msgSend["alloc"] || _objj_forward)(_CPStringContentCharacterSet, (_CPStringContentCharacterSet.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithString:"] || _objj_forward)(___r1, "initWithString:", self._string));
    (set == null ? null : (set.isa.method_msgSend["_setInverted:"] || _objj_forward)(set, (set.isa.method_dtable["_setInverted:"], "_setInverted:"), self._inverted));
    return set;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("invertedSet"), function $_CPStringContentCharacterSet__invertedSet(self, _cmd)
{
    var set = ((___r1 = (_CPStringContentCharacterSet.isa.method_msgSend["alloc"] || _objj_forward)(_CPStringContentCharacterSet, (_CPStringContentCharacterSet.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithString:"] || _objj_forward)(___r1, "initWithString:", self._string));
    (set == null ? null : (set.isa.method_msgSend["invert"] || _objj_forward)(set, (set.isa.method_dtable["invert"], "invert")));
    return set;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("characterIsMember:"), function $_CPStringContentCharacterSet__characterIsMember_(self, _cmd, c)
{
    return self._string.indexOf(c.charAt(0)) !== -1 === !self._inverted;
}

,["BOOL","CPString"]), new objj_method(sel_getUid("description"), function $_CPStringContentCharacterSet__description(self, _cmd)
{
    return (objj_getClass("_CPStringContentCharacterSet").super_class.method_dtable["description"] || _objj_forward)(self, "description") + " { string = '" + self._string + "'}";
}

,["CPString"]), new objj_method(sel_getUid("hasMemberInPlane:"), function $_CPStringContentCharacterSet__hasMemberInPlane_(self, _cmd, plane)
{
    return self._string.length && plane === 0;
}

,["BOOL","int"]), new objj_method(sel_getUid("addCharactersInRange:"), function $_CPStringContentCharacterSet__addCharactersInRange_(self, _cmd, aRange)
{
    var i = aRange.location,
        count = aRange.location + aRange.length;
    for (; i < count; i++)
    {
        var s = String.fromCharCode(i);
        if (!(self.isa.method_msgSend["characterIsMember:"] || _objj_forward)(self, (self.isa.method_dtable["characterIsMember:"], "characterIsMember:"), s))
            self._string = ((___r1 = self._string), ___r1 == null ? null : (___r1.isa.method_msgSend["stringByAppendingString:"] || _objj_forward)(___r1, (self._string.isa.method_dtable["stringByAppendingString:"], "stringByAppendingString:"), s));
    }
    var ___r1;
}

,["void","CPRange"]), new objj_method(sel_getUid("addCharactersInString:"), function $_CPStringContentCharacterSet__addCharactersInString_(self, _cmd, aString)
{
    var i = 0;
    for (; i < aString.length; i++)
    {
        var s = aString.charAt(i);
        if (!(self.isa.method_msgSend["characterIsMember:"] || _objj_forward)(self, (self.isa.method_dtable["characterIsMember:"], "characterIsMember:"), s))
            self._string = ((___r1 = self._string), ___r1 == null ? null : (___r1.isa.method_msgSend["stringByAppendingString:"] || _objj_forward)(___r1, (self._string.isa.method_dtable["stringByAppendingString:"], "stringByAppendingString:"), s));
    }
    var ___r1;
}

,["void","CPString"]), new objj_method(sel_getUid("isEqual:"), function $_CPStringContentCharacterSet__isEqual_(self, _cmd, aCharacterSet)
{
    if (self === aCharacterSet)
        return YES;
    if (!aCharacterSet || !(aCharacterSet == null ? null : (aCharacterSet.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(aCharacterSet, (aCharacterSet.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")))))
        return NO;
    return (self.isa.method_msgSend["_isEqualToStringContentCharacterSet:"] || _objj_forward)(self, (self.isa.method_dtable["_isEqualToStringContentCharacterSet:"], "_isEqualToStringContentCharacterSet:"), aCharacterSet);
}

,["BOOL","CPCharacterSet"]), new objj_method(sel_getUid("_isEqualToStringContentCharacterSet:"), function $_CPStringContentCharacterSet___isEqualToStringContentCharacterSet_(self, _cmd, aCharacterSet)
{
    if (!aCharacterSet)
        return NO;
    return self._string === aCharacterSet._string && self._inverted === aCharacterSet._inverted;
}

,["BOOL","_CPStringContentCharacterSet"])]);
}
var _CPStringContentCharacterSetStringKey = "_CPStringContentCharacterSetStringKey";
{
var the_class = objj_getClass("_CPStringContentCharacterSet")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"_CPStringContentCharacterSet\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $_CPStringContentCharacterSet__initWithCoder_(self, _cmd, aCoder)
{
    if (self = (objj_getClass("_CPStringContentCharacterSet").super_class.method_dtable["initWithCoder:"] || _objj_forward)(self, "initWithCoder:", aCoder))
    {
        self._string = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), _CPStringContentCharacterSetStringKey));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $_CPStringContentCharacterSet__encodeWithCoder_(self, _cmd, aCoder)
{
    (objj_getClass("_CPStringContentCharacterSet").super_class.method_dtable["encodeWithCoder:"] || _objj_forward)(self, "encodeWithCoder:", aCoder);
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._string, _CPStringContentCharacterSetStringKey));
}

,["void","CPCoder"])]);
}
_CPCharacterSetTrimAtBeginning = 1 << 1;
_CPCharacterSetTrimAtEnd = 1 << 2;
{
var the_class = objj_getClass("CPString")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPString\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("componentsSeparatedByCharactersInSet:"), function $CPString__componentsSeparatedByCharactersInSet_(self, _cmd, separator)
{
    if (!separator)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "componentsSeparatedByCharactersInSet: the separator can't be 'nil'");
    var components = (CPMutableArray.isa.method_msgSend["array"] || _objj_forward)(CPMutableArray, (CPMutableArray.isa.method_dtable["array"], "array")),
        componentRange = CPMakeRange(0, 0),
        i = 0;
    for (; i < self.length; i++)
    {
        if ((separator == null ? null : (separator.isa.method_msgSend["characterIsMember:"] || _objj_forward)(separator, (separator.isa.method_dtable["characterIsMember:"], "characterIsMember:"), self.charAt(i))))
        {
            componentRange.length = i - componentRange.location;
            (components == null ? null : (components.isa.method_msgSend["addObject:"] || _objj_forward)(components, (components.isa.method_dtable["addObject:"], "addObject:"), (self.isa.method_msgSend["substringWithRange:"] || _objj_forward)(self, (self.isa.method_dtable["substringWithRange:"], "substringWithRange:"), componentRange)));
            componentRange.location += componentRange.length + 1;
        }
    }
    componentRange.length = self.length - componentRange.location;
    (components == null ? null : (components.isa.method_msgSend["addObject:"] || _objj_forward)(components, (components.isa.method_dtable["addObject:"], "addObject:"), (self.isa.method_msgSend["substringWithRange:"] || _objj_forward)(self, (self.isa.method_dtable["substringWithRange:"], "substringWithRange:"), componentRange)));
    return components;
}

,["CPArray","CPCharacterSet"]), new objj_method(sel_getUid("stringByTrimmingCharactersInSet:"), function $CPString__stringByTrimmingCharactersInSet_(self, _cmd, set)
{
    return (self.isa.method_msgSend["_stringByTrimmingCharactersInSet:options:"] || _objj_forward)(self, (self.isa.method_dtable["_stringByTrimmingCharactersInSet:options:"], self.isa.method_dtable["_stringByTrimmingCharactersInSet:options:"], "_stringByTrimmingCharactersInSet:options:"), set, _CPCharacterSetTrimAtBeginning | _CPCharacterSetTrimAtEnd);
}

,["id","CPCharacterSet"]), new objj_method(sel_getUid("_stringByTrimmingCharactersInSet:options:"), function $CPString___stringByTrimmingCharactersInSet_options_(self, _cmd, set, options)
{
    var str = self;
    if (options & _CPCharacterSetTrimAtBeginning)
    {
        var cutEdgeBeginning = 0;
        while (cutEdgeBeginning < self.length && (set == null ? null : (set.isa.method_msgSend["characterIsMember:"] || _objj_forward)(set, (set.isa.method_dtable["characterIsMember:"], "characterIsMember:"), self.charAt(cutEdgeBeginning))))
            cutEdgeBeginning++;
        str = str.substr(cutEdgeBeginning);
    }
    if (options & _CPCharacterSetTrimAtEnd)
    {
        var cutEdgeEnd = str.length;
        while (cutEdgeEnd > 0 && (set == null ? null : (set.isa.method_msgSend["characterIsMember:"] || _objj_forward)(set, (set.isa.method_dtable["characterIsMember:"], "characterIsMember:"), str.charAt(cutEdgeEnd - 1))))
            cutEdgeEnd--;
        str = str.substr(0, cutEdgeEnd);
    }
    return str;
}

,["id","CPCharacterSet","int"])]);
}
alphanumericCharacterSet = [48, 10, 65, 26, 97, 26, 170, 1, 178, 2, 181, 1, 185, 2, 188, 3, 192, 23, 216, 31, 248, 458, 710, 12, 736, 5, 750, 1, 768, 112, 890, 4, 902, 1, 904, 3, 908, 1, 910, 20, 931, 44, 976, 38, 1015, 139, 1155, 4, 1160, 140, 1329, 38, 1369, 1, 1377, 39, 1425, 45, 1471, 1, 1473, 2, 1476, 2, 1479, 1, 1488, 27, 1520, 3, 1552, 6, 1569, 26, 1600, 31, 1632, 10, 1646, 102, 1749, 8, 1758, 11, 1770, 19, 1791, 1, 1808, 59, 1869, 33, 1920, 50, 1984, 54, 2042, 1, 2305, 57, 2364, 18, 2384, 5, 2392, 12, 2406, 10, 2427, 5, 2433, 3, 2437, 8, 2447, 2, 2451, 22, 2474, 7, 2482, 1, 2486, 4, 2492, 9, 2503, 2, 2507, 4, 2519, 1, 2524, 2, 2527, 5, 2534, 12, 2548, 6, 2561, 3, 2565, 6, 2575, 2, 2579, 22, 2602, 7, 2610, 2, 2613, 2, 2616, 2, 2620, 1, 2622, 5, 2631, 2, 2635, 3, 2649, 4, 2654, 1, 2662, 15, 2689, 3, 2693, 9, 2703, 3, 2707, 22, 2730, 7, 2738, 2, 2741, 5, 2748, 10, 2759, 3, 2763, 3, 2768, 1, 2784, 4, 2790, 10, 2817, 3, 2821, 8, 2831, 2, 2835, 22, 2858, 7, 2866, 2, 2869, 5, 2876, 8, 2887, 2, 2891, 3, 2902, 2, 2908, 2, 2911, 3, 2918, 10, 2929, 1, 2946, 2, 2949, 6, 2958, 3, 2962, 4, 2969, 2, 2972, 1, 2974, 2, 2979, 2, 2984, 3, 2990, 12, 3006, 5, 3014, 3, 3018, 4, 3031, 1, 3046, 13, 3073, 3, 3077, 8, 3086, 3, 3090, 23, 3114, 10, 3125, 5, 3134, 7, 3142, 3, 3146, 4, 3157, 2, 3168, 2, 3174, 10, 3202, 2, 3205, 8, 3214, 3, 3218, 23, 3242, 10, 3253, 5, 3260, 9, 3270, 3, 3274, 4, 3285, 2, 3294, 1, 3296, 4, 3302, 10, 3330, 2, 3333, 8, 3342, 3, 3346, 23, 3370, 16, 3390, 6, 3398, 3, 3402, 4, 3415, 1, 3424, 2, 3430, 10, 3458, 2, 3461, 18, 3482, 24, 3507, 9, 3517, 1, 3520, 7, 3530, 1, 3535, 6, 3542, 1, 3544, 8, 3570, 2, 3585, 58, 3648, 15, 3664, 10, 3713, 2, 3716, 1, 3719, 2, 3722, 1, 3725, 1, 3732, 4, 3737, 7, 3745, 3, 3749, 1, 3751, 1, 3754, 2, 3757, 13, 3771, 3, 3776, 5, 3782, 1, 3784, 6, 3792, 10, 3804, 2, 3840, 1, 3864, 2, 3872, 20, 3893, 1, 3895, 1, 3897, 1, 3902, 10, 3913, 34, 3953, 20, 3974, 6, 3984, 8, 3993, 36, 4038, 1, 4096, 34, 4131, 5, 4137, 2, 4140, 7, 4150, 4, 4160, 10, 4176, 10, 4256, 38, 4304, 43, 4348, 1, 4352, 90, 4447, 68, 4520, 82, 4608, 73, 4682, 4, 4688, 7, 4696, 1, 4698, 4, 4704, 41, 4746, 4, 4752, 33, 4786, 4, 4792, 7, 4800, 1, 4802, 4, 4808, 15, 4824, 57, 4882, 4, 4888, 67, 4959, 1, 4969, 20, 4992, 16, 5024, 85, 5121, 620, 5743, 8, 5761, 26, 5792, 75, 5870, 3, 5888, 13, 5902, 7, 5920, 21, 5952, 20, 5984, 13, 5998, 3, 6002, 2, 6016, 52, 6070, 30, 6103, 1, 6108, 2, 6112, 10, 6128, 10, 6155, 3, 6160, 10, 6176, 88, 6272, 42, 6400, 29, 6432, 12, 6448, 12, 6470, 40, 6512, 5, 6528, 42, 6576, 26, 6608, 10, 6656, 28, 6912, 76, 6992, 10, 7019, 9, 7424, 203, 7678, 158, 7840, 90, 7936, 22, 7960, 6, 7968, 38, 8008, 6, 8016, 8, 8025, 1, 8027, 1, 8029, 1, 8031, 31, 8064, 53, 8118, 7, 8126, 1, 8130, 3, 8134, 7, 8144, 4, 8150, 6, 8160, 13, 8178, 3, 8182, 7, 8304, 2, 8308, 6, 8319, 11, 8336, 5, 8400, 32, 8450, 1, 8455, 1, 8458, 10, 8469, 1, 8473, 5, 8484, 1, 8486, 1, 8488, 1, 8490, 4, 8495, 11, 8508, 4, 8517, 5, 8526, 1, 8531, 50, 9312, 60, 9450, 22, 10102, 30, 11264, 47, 11312, 47, 11360, 13, 11380, 4, 11392, 101, 11517, 1, 11520, 38, 11568, 54, 11631, 1, 11648, 23, 11680, 7, 11688, 7, 11696, 7, 11704, 7, 11712, 7, 11720, 7, 11728, 7, 11736, 7, 12293, 3, 12321, 15, 12337, 5, 12344, 5, 12353, 86, 12441, 2, 12445, 3, 12449, 90, 12540, 4, 12549, 40, 12593, 94, 12690, 4, 12704, 24, 12784, 16, 12832, 10, 12881, 15, 12928, 10, 12977, 15, 13312, 6582, 19968, 20924, 40960, 1165, 42775, 4, 43008, 40, 43072, 52, 44032, 11172, 63744, 302, 64048, 59, 64112, 106, 64256, 7, 64275, 5, 64285, 12, 64298, 13, 64312, 5, 64318, 1, 64320, 2, 64323, 2, 64326, 108, 64467, 363, 64848, 64, 64914, 54, 65008, 12, 65024, 16, 65056, 4, 65136, 5, 65142, 135, 65296, 10, 65313, 26, 65345, 26, 65382, 89, 65474, 6, 65482, 6, 65490, 6];
controlCharacterSet = [0, 32, 127, 33, 173, 1, 1536, 4, 1757, 1, 1807, 1, 6068, 2, 8203, 5, 8234, 5, 8288, 4, 8298, 6, 65279, 1];
decimalDigitCharacterSet = [48, 10, 1632, 10, 1776, 10, 1984, 10, 2406, 10, 2534, 10, 2662, 10, 2790, 10, 2918, 10, 3046, 10, 3174, 10, 3302, 10, 3430, 10, 3664, 10, 3792, 10, 3872, 10, 4160, 10, 6112, 10, 6160, 10, 6470, 10, 6608, 10, 6992, 10];
decomposableCharacterSet = [192, 6, 199, 9, 209, 6, 217, 5, 224, 6, 231, 9, 241, 6, 249, 5, 255, 17, 274, 20, 296, 9, 308, 4, 313, 6, 323, 6, 332, 6, 340, 18, 360, 23, 416, 2, 431, 2, 461, 16, 478, 6, 486, 11, 500, 2, 504, 36, 542, 2, 550, 14, 832, 2, 835, 2, 884, 1, 894, 1, 901, 6, 908, 1, 910, 3, 938, 7, 970, 5, 979, 2, 1024, 2, 1027, 1, 1031, 1, 1036, 3, 1049, 1, 1081, 1, 1104, 2, 1107, 1, 1111, 1, 1116, 3, 1142, 2, 1217, 2, 1232, 4, 1238, 2, 1242, 6, 1250, 6, 1258, 12, 1272, 2, 1570, 5, 1728, 1, 1730, 1, 1747, 1, 2345, 1, 2353, 1, 2356, 1, 2392, 8, 2507, 2, 2524, 2, 2527, 1, 2611, 1, 2614, 1, 2649, 3, 2654, 1, 2888, 1, 2891, 2, 2908, 2, 2964, 1, 3018, 3, 3144, 1, 3264, 1, 3271, 2, 3274, 2, 3402, 3, 3546, 1, 3548, 3, 3907, 1, 3917, 1, 3922, 1, 3927, 1, 3932, 1, 3945, 1, 3955, 1, 3957, 2, 3960, 1, 3969, 1, 3987, 1, 3997, 1, 4002, 1, 4007, 1, 4012, 1, 4025, 1, 4134, 1, 6918, 1, 6920, 1, 6922, 1, 6924, 1, 6926, 1, 6930, 1, 6971, 1, 6973, 1, 6976, 2, 6979, 1, 7680, 154, 7835, 1, 7840, 90, 7936, 22, 7960, 6, 7968, 38, 8008, 6, 8016, 8, 8025, 1, 8027, 1, 8029, 1, 8031, 31, 8064, 53, 8118, 7, 8126, 1, 8129, 4, 8134, 14, 8150, 6, 8157, 19, 8178, 3, 8182, 8, 8192, 2, 8486, 1, 8490, 2, 8602, 2, 8622, 1, 8653, 3, 8708, 1, 8713, 1, 8716, 1, 8740, 1, 8742, 1, 8769, 1, 8772, 1, 8775, 1, 8777, 1, 8800, 1, 8802, 1, 8813, 5, 8820, 2, 8824, 2, 8832, 2, 8836, 2, 8840, 2, 8876, 4, 8928, 4, 8938, 4, 9001, 2, 10972, 1, 12364, 1, 12366, 1, 12368, 1, 12370, 1, 12372, 1, 12374, 1, 12376, 1, 12378, 1, 12380, 1, 12382, 1, 12384, 1, 12386, 1, 12389, 1, 12391, 1, 12393, 1, 12400, 2, 12403, 2, 12406, 2, 12409, 2, 12412, 2, 12436, 1, 12446, 1, 12460, 1, 12462, 1, 12464, 1, 12466, 1, 12468, 1, 12470, 1, 12472, 1, 12474, 1, 12476, 1, 12478, 1, 12480, 1, 12482, 1, 12485, 1, 12487, 1, 12489, 1, 12496, 2, 12499, 2, 12502, 2, 12505, 2, 12508, 2, 12532, 1, 12535, 4, 12542, 1, 44032, 11172, 63744, 270, 64016, 1, 64018, 1, 64021, 10, 64032, 1, 64034, 1, 64037, 2, 64042, 4, 64048, 59, 64112, 106, 64285, 1, 64287, 1, 64298, 13, 64312, 5, 64318, 1, 64320, 2, 64323, 2];
illegalCharacterSet = [880, 4, 886, 4, 895, 5, 907, 1, 909, 1, 930, 1, 975, 1, 1159, 1, 1300, 29, 1367, 2, 1376, 1, 1416, 1, 1419, 6, 1480, 8, 1515, 5, 1525, 11, 1540, 7, 1558, 5, 1564, 2, 1568, 1, 1595, 5, 1631, 1, 1806, 1, 1867, 2, 1902, 18, 1970, 14, 2043, 262, 2362, 2, 2382, 2, 2389, 3, 2417, 10, 2432, 1, 2436, 1, 2445, 2, 2449, 2, 2473, 1, 2481, 1, 2483, 3, 2490, 2, 2501, 2, 2505, 2, 2511, 8, 2520, 4, 2526, 1, 2532, 2, 2555, 6, 2564, 1, 2571, 4, 2577, 2, 2601, 1, 2609, 1, 2612, 1, 2615, 1, 2618, 2, 2621, 1, 2627, 4, 2633, 2, 2638, 11, 2653, 1, 2655, 7, 2677, 12, 2692, 1, 2702, 1, 2706, 1, 2729, 1, 2737, 1, 2740, 1, 2746, 2, 2758, 1, 2762, 1, 2766, 2, 2769, 15, 2788, 2, 2800, 1, 2802, 15, 2820, 1, 2829, 2, 2833, 2, 2857, 1, 2865, 1, 2868, 1, 2874, 2, 2884, 3, 2889, 2, 2894, 8, 2904, 4, 2910, 1, 2914, 4, 2930, 16, 2948, 1, 2955, 3, 2961, 1, 2966, 3, 2971, 1, 2973, 1, 2976, 3, 2981, 3, 2987, 3, 3002, 4, 3011, 3, 3017, 1, 3022, 9, 3032, 14, 3067, 6, 3076, 1, 3085, 1, 3089, 1, 3113, 1, 3124, 1, 3130, 4, 3141, 1, 3145, 1, 3150, 7, 3159, 9, 3170, 4, 3184, 18, 3204, 1, 3213, 1, 3217, 1, 3241, 1, 3252, 1, 3258, 2, 3269, 1, 3273, 1, 3278, 7, 3287, 7, 3295, 1, 3300, 2, 3312, 1, 3315, 15, 3332, 1, 3341, 1, 3345, 1, 3369, 1, 3386, 4, 3396, 2, 3401, 1, 3406, 9, 3416, 8, 3426, 4, 3440, 18, 3460, 1, 3479, 3, 3506, 1, 3516, 1, 3518, 2, 3527, 3, 3531, 4, 3541, 1, 3543, 1, 3552, 18, 3573, 12, 3643, 4, 3676, 37, 3715, 1, 3717, 2, 3721, 1, 3723, 2, 3726, 6, 3736, 1, 3744, 1, 3748, 1, 3750, 1, 3752, 2, 3756, 1, 3770, 1, 3774, 2, 3781, 1, 3783, 1, 3790, 2, 3802, 2, 3806, 34, 3912, 1, 3947, 6, 3980, 4, 3992, 1, 4029, 1, 4045, 2, 4050, 46, 4130, 1, 4136, 1, 4139, 1, 4147, 3, 4154, 6, 4186, 70, 4294, 10, 4349, 3, 4442, 5, 4515, 5, 4602, 6, 4681, 1, 4686, 2, 4695, 1, 4697, 1, 4702, 2, 4745, 1, 4750, 2, 4785, 1, 4790, 2, 4799, 1, 4801, 1, 4806, 2, 4823, 1, 4881, 1, 4886, 2, 4955, 4, 4989, 3, 5018, 6, 5109, 12, 5751, 9, 5789, 3, 5873, 15, 5901, 1, 5909, 11, 5943, 9, 5972, 12, 5997, 1, 6001, 1, 6004, 12, 6110, 2, 6122, 6, 6138, 6, 6159, 1, 6170, 6, 6264, 8, 6314, 86, 6429, 3, 6444, 4, 6460, 4, 6465, 3, 6510, 2, 6517, 11, 6570, 6, 6602, 6, 6618, 4, 6684, 2, 6688, 224, 6988, 4, 7037, 387, 7627, 51, 7836, 4, 7930, 6, 7958, 2, 7966, 2, 8006, 2, 8014, 2, 8024, 1, 8026, 1, 8028, 1, 8030, 1, 8062, 2, 8117, 1, 8133, 1, 8148, 2, 8156, 1, 8176, 2, 8181, 1, 8191, 1, 8292, 6, 8306, 2, 8335, 1, 8341, 11, 8374, 26, 8432, 16, 8527, 4, 8581, 11, 9192, 24, 9255, 25, 9291, 21, 9885, 3, 9907, 78, 9989, 1, 9994, 2, 10024, 1, 10060, 1, 10062, 1, 10067, 3, 10071, 1, 10079, 2, 10133, 3, 10160, 1, 10175, 1, 10187, 5, 10220, 4, 11035, 5, 11044, 220, 11311, 1, 11359, 1, 11373, 7, 11384, 8, 11499, 14, 11558, 10, 11622, 9, 11632, 16, 11671, 9, 11687, 1, 11695, 1, 11703, 1, 11711, 1, 11719, 1, 11727, 1, 11735, 1, 11743, 33, 11800, 4, 11806, 98, 11930, 1, 12020, 12, 12246, 26, 12284, 4, 12352, 1, 12439, 2, 12544, 5, 12589, 4, 12687, 1, 12728, 8, 12752, 32, 12831, 1, 12868, 12, 13055, 1, 19894, 10, 40892, 68, 42125, 3, 42183, 569, 42779, 5, 42786, 222, 43052, 20, 43128, 904, 55204, 92, 64046, 2, 64107, 5, 64218, 38, 64263, 12, 64280, 5, 64311, 1, 64317, 1, 64319, 1, 64322, 1, 64325, 1, 64434, 33, 64832, 16, 64912, 2, 64968, 40, 65022, 2, 65050, 6, 65060, 12, 65107, 1, 65127, 1, 65132, 4, 65141, 1, 65277, 2, 65280, 1, 65471, 3, 65480, 2, 65488, 2, 65496, 2, 65501, 3, 65511, 1, 65519, 10];
letterCharacterSet = [65, 26, 97, 26, 170, 1, 181, 1, 186, 1, 192, 23, 216, 31, 248, 458, 710, 12, 736, 5, 750, 1, 768, 112, 890, 4, 902, 1, 904, 3, 908, 1, 910, 20, 931, 44, 976, 38, 1015, 139, 1155, 4, 1160, 140, 1329, 38, 1369, 1, 1377, 39, 1425, 45, 1471, 1, 1473, 2, 1476, 2, 1479, 1, 1488, 27, 1520, 3, 1552, 6, 1569, 26, 1600, 31, 1646, 102, 1749, 8, 1758, 11, 1770, 6, 1786, 3, 1791, 1, 1808, 59, 1869, 33, 1920, 50, 1994, 44, 2042, 1, 2305, 57, 2364, 18, 2384, 5, 2392, 12, 2427, 5, 2433, 3, 2437, 8, 2447, 2, 2451, 22, 2474, 7, 2482, 1, 2486, 4, 2492, 9, 2503, 2, 2507, 4, 2519, 1, 2524, 2, 2527, 5, 2544, 2, 2561, 3, 2565, 6, 2575, 2, 2579, 22, 2602, 7, 2610, 2, 2613, 2, 2616, 2, 2620, 1, 2622, 5, 2631, 2, 2635, 3, 2649, 4, 2654, 1, 2672, 5, 2689, 3, 2693, 9, 2703, 3, 2707, 22, 2730, 7, 2738, 2, 2741, 5, 2748, 10, 2759, 3, 2763, 3, 2768, 1, 2784, 4, 2817, 3, 2821, 8, 2831, 2, 2835, 22, 2858, 7, 2866, 2, 2869, 5, 2876, 8, 2887, 2, 2891, 3, 2902, 2, 2908, 2, 2911, 3, 2929, 1, 2946, 2, 2949, 6, 2958, 3, 2962, 4, 2969, 2, 2972, 1, 2974, 2, 2979, 2, 2984, 3, 2990, 12, 3006, 5, 3014, 3, 3018, 4, 3031, 1, 3073, 3, 3077, 8, 3086, 3, 3090, 23, 3114, 10, 3125, 5, 3134, 7, 3142, 3, 3146, 4, 3157, 2, 3168, 2, 3202, 2, 3205, 8, 3214, 3, 3218, 23, 3242, 10, 3253, 5, 3260, 9, 3270, 3, 3274, 4, 3285, 2, 3294, 1, 3296, 4, 3330, 2, 3333, 8, 3342, 3, 3346, 23, 3370, 16, 3390, 6, 3398, 3, 3402, 4, 3415, 1, 3424, 2, 3458, 2, 3461, 18, 3482, 24, 3507, 9, 3517, 1, 3520, 7, 3530, 1, 3535, 6, 3542, 1, 3544, 8, 3570, 2, 3585, 58, 3648, 15, 3713, 2, 3716, 1, 3719, 2, 3722, 1, 3725, 1, 3732, 4, 3737, 7, 3745, 3, 3749, 1, 3751, 1, 3754, 2, 3757, 13, 3771, 3, 3776, 5, 3782, 1, 3784, 6, 3804, 2, 3840, 1, 3864, 2, 3893, 1, 3895, 1, 3897, 1, 3902, 10, 3913, 34, 3953, 20, 3974, 6, 3984, 8, 3993, 36, 4038, 1, 4096, 34, 4131, 5, 4137, 2, 4140, 7, 4150, 4, 4176, 10, 4256, 38, 4304, 43, 4348, 1, 4352, 90, 4447, 68, 4520, 82, 4608, 73, 4682, 4, 4688, 7, 4696, 1, 4698, 4, 4704, 41, 4746, 4, 4752, 33, 4786, 4, 4792, 7, 4800, 1, 4802, 4, 4808, 15, 4824, 57, 4882, 4, 4888, 67, 4959, 1, 4992, 16, 5024, 85, 5121, 620, 5743, 8, 5761, 26, 5792, 75, 5888, 13, 5902, 7, 5920, 21, 5952, 20, 5984, 13, 5998, 3, 6002, 2, 6016, 52, 6070, 30, 6103, 1, 6108, 2, 6155, 3, 6176, 88, 6272, 42, 6400, 29, 6432, 12, 6448, 12, 6480, 30, 6512, 5, 6528, 42, 6576, 26, 6656, 28, 6912, 76, 7019, 9, 7424, 203, 7678, 158, 7840, 90, 7936, 22, 7960, 6, 7968, 38, 8008, 6, 8016, 8, 8025, 1, 8027, 1, 8029, 1, 8031, 31, 8064, 53, 8118, 7, 8126, 1, 8130, 3, 8134, 7, 8144, 4, 8150, 6, 8160, 13, 8178, 3, 8182, 7, 8305, 1, 8319, 1, 8336, 5, 8400, 32, 8450, 1, 8455, 1, 8458, 10, 8469, 1, 8473, 5, 8484, 1, 8486, 1, 8488, 1, 8490, 4, 8495, 11, 8508, 4, 8517, 5, 8526, 1, 8579, 2, 11264, 47, 11312, 47, 11360, 13, 11380, 4, 11392, 101, 11520, 38, 11568, 54, 11631, 1, 11648, 23, 11680, 7, 11688, 7, 11696, 7, 11704, 7, 11712, 7, 11720, 7, 11728, 7, 11736, 7, 12293, 2, 12330, 6, 12337, 5, 12347, 2, 12353, 86, 12441, 2, 12445, 3, 12449, 90, 12540, 4, 12549, 40, 12593, 94, 12704, 24, 12784, 16, 13312, 6582, 19968, 20924, 40960, 1165, 42775, 4, 43008, 40, 43072, 52, 44032, 11172, 63744, 302, 64048, 59, 64112, 106, 64256, 7, 64275, 5, 64285, 12, 64298, 13, 64312, 5, 64318, 1, 64320, 2, 64323, 2, 64326, 108, 64467, 363, 64848, 64, 64914, 54, 65008, 12, 65024, 16, 65056, 4, 65136, 5, 65142, 135, 65313, 26, 65345, 26, 65382, 89, 65474, 6, 65482, 6, 65490, 6];
lowercaseLetterCharacterSet = [97, 26, 170, 1, 181, 1, 186, 1, 223, 24, 248, 8, 257, 1, 259, 1, 261, 1, 263, 1, 265, 1, 267, 1, 269, 1, 271, 1, 273, 1, 275, 1, 277, 1, 279, 1, 281, 1, 283, 1, 285, 1, 287, 1, 289, 1, 291, 1, 293, 1, 295, 1, 297, 1, 299, 1, 301, 1, 303, 1, 305, 1, 307, 1, 309, 1, 311, 2, 314, 1, 316, 1, 318, 1, 320, 1, 322, 1, 324, 1, 326, 1, 328, 2, 331, 1, 333, 1, 335, 1, 337, 1, 339, 1, 341, 1, 343, 1, 345, 1, 347, 1, 349, 1, 351, 1, 353, 1, 355, 1, 357, 1, 359, 1, 361, 1, 363, 1, 365, 1, 367, 1, 369, 1, 371, 1, 373, 1, 375, 1, 378, 1, 380, 1, 382, 3, 387, 1, 389, 1, 392, 1, 396, 2, 402, 1, 405, 1, 409, 3, 414, 1, 417, 1, 419, 1, 421, 1, 424, 1, 426, 2, 429, 1, 432, 1, 436, 1, 438, 1, 441, 2, 445, 3, 454, 1, 457, 1, 460, 1, 462, 1, 464, 1, 466, 1, 468, 1, 470, 1, 472, 1, 474, 1, 476, 2, 479, 1, 481, 1, 483, 1, 485, 1, 487, 1, 489, 1, 491, 1, 493, 1, 495, 2, 499, 1, 501, 1, 505, 1, 507, 1, 509, 1, 511, 1, 513, 1, 515, 1, 517, 1, 519, 1, 521, 1, 523, 1, 525, 1, 527, 1, 529, 1, 531, 1, 533, 1, 535, 1, 537, 1, 539, 1, 541, 1, 543, 1, 545, 1, 547, 1, 549, 1, 551, 1, 553, 1, 555, 1, 557, 1, 559, 1, 561, 1, 563, 7, 572, 1, 575, 2, 578, 1, 583, 1, 585, 1, 587, 1, 589, 1, 591, 69, 661, 27, 891, 3, 912, 1, 940, 35, 976, 2, 981, 3, 985, 1, 987, 1, 989, 1, 991, 1, 993, 1, 995, 1, 997, 1, 999, 1, 1001, 1, 1003, 1, 1005, 1, 1007, 5, 1013, 1, 1016, 1, 1019, 2, 1072, 48, 1121, 1, 1123, 1, 1125, 1, 1127, 1, 1129, 1, 1131, 1, 1133, 1, 1135, 1, 1137, 1, 1139, 1, 1141, 1, 1143, 1, 1145, 1, 1147, 1, 1149, 1, 1151, 1, 1153, 1, 1163, 1, 1165, 1, 1167, 1, 1169, 1, 1171, 1, 1173, 1, 1175, 1, 1177, 1, 1179, 1, 1181, 1, 1183, 1, 1185, 1, 1187, 1, 1189, 1, 1191, 1, 1193, 1, 1195, 1, 1197, 1, 1199, 1, 1201, 1, 1203, 1, 1205, 1, 1207, 1, 1209, 1, 1211, 1, 1213, 1, 1215, 1, 1218, 1, 1220, 1, 1222, 1, 1224, 1, 1226, 1, 1228, 1, 1230, 2, 1233, 1, 1235, 1, 1237, 1, 1239, 1, 1241, 1, 1243, 1, 1245, 1, 1247, 1, 1249, 1, 1251, 1, 1253, 1, 1255, 1, 1257, 1, 1259, 1, 1261, 1, 1263, 1, 1265, 1, 1267, 1, 1269, 1, 1271, 1, 1273, 1, 1275, 1, 1277, 1, 1279, 1, 1281, 1, 1283, 1, 1285, 1, 1287, 1, 1289, 1, 1291, 1, 1293, 1, 1295, 1, 1297, 1, 1299, 1, 1377, 39, 7424, 44, 7522, 22, 7545, 34, 7681, 1, 7683, 1, 7685, 1, 7687, 1, 7689, 1, 7691, 1, 7693, 1, 7695, 1, 7697, 1, 7699, 1, 7701, 1, 7703, 1, 7705, 1, 7707, 1, 7709, 1, 7711, 1, 7713, 1, 7715, 1, 7717, 1, 7719, 1, 7721, 1, 7723, 1, 7725, 1, 7727, 1, 7729, 1, 7731, 1, 7733, 1, 7735, 1, 7737, 1, 7739, 1, 7741, 1, 7743, 1, 7745, 1, 7747, 1, 7749, 1, 7751, 1, 7753, 1, 7755, 1, 7757, 1, 7759, 1, 7761, 1, 7763, 1, 7765, 1, 7767, 1, 7769, 1, 7771, 1, 7773, 1, 7775, 1, 7777, 1, 7779, 1, 7781, 1, 7783, 1, 7785, 1, 7787, 1, 7789, 1, 7791, 1, 7793, 1, 7795, 1, 7797, 1, 7799, 1, 7801, 1, 7803, 1, 7805, 1, 7807, 1, 7809, 1, 7811, 1, 7813, 1, 7815, 1, 7817, 1, 7819, 1, 7821, 1, 7823, 1, 7825, 1, 7827, 1, 7829, 7, 7841, 1, 7843, 1, 7845, 1, 7847, 1, 7849, 1, 7851, 1, 7853, 1, 7855, 1, 7857, 1, 7859, 1, 7861, 1, 7863, 1, 7865, 1, 7867, 1, 7869, 1, 7871, 1, 7873, 1, 7875, 1, 7877, 1, 7879, 1, 7881, 1, 7883, 1, 7885, 1, 7887, 1, 7889, 1, 7891, 1, 7893, 1, 7895, 1, 7897, 1, 7899, 1, 7901, 1, 7903, 1, 7905, 1, 7907, 1, 7909, 1, 7911, 1, 7913, 1, 7915, 1, 7917, 1, 7919, 1, 7921, 1, 7923, 1, 7925, 1, 7927, 1, 7929, 1, 7936, 8, 7952, 6, 7968, 8, 7984, 8, 8000, 6, 8016, 8, 8032, 8, 8048, 14, 8064, 8, 8080, 8, 8096, 8, 8112, 5, 8118, 2, 8126, 1, 8130, 3, 8134, 2, 8144, 4, 8150, 2, 8160, 8, 8178, 3, 8182, 2, 8305, 1, 8319, 1, 8458, 1, 8462, 2, 8467, 1, 8495, 1, 8500, 1, 8505, 1, 8508, 2, 8518, 4, 8526, 1, 8580, 1, 11312, 47, 11361, 1, 11365, 2, 11368, 1, 11370, 1, 11372, 1, 11380, 1, 11382, 2, 11393, 1, 11395, 1, 11397, 1, 11399, 1, 11401, 1, 11403, 1, 11405, 1, 11407, 1, 11409, 1, 11411, 1, 11413, 1, 11415, 1, 11417, 1, 11419, 1, 11421, 1, 11423, 1, 11425, 1, 11427, 1, 11429, 1, 11431, 1, 11433, 1, 11435, 1, 11437, 1, 11439, 1, 11441, 1, 11443, 1, 11445, 1, 11447, 1, 11449, 1, 11451, 1, 11453, 1, 11455, 1, 11457, 1, 11459, 1, 11461, 1, 11463, 1, 11465, 1, 11467, 1, 11469, 1, 11471, 1, 11473, 1, 11475, 1, 11477, 1, 11479, 1, 11481, 1, 11483, 1, 11485, 1, 11487, 1, 11489, 1, 11491, 2, 11520, 38, 64256, 7, 64275, 5];
nonBaseCharacterSet = [768, 112, 1155, 4, 1160, 2, 1425, 45, 1471, 1, 1473, 2, 1476, 2, 1479, 1, 1552, 6, 1611, 20, 1648, 1, 1750, 7, 1758, 7, 1767, 2, 1770, 4, 1809, 1, 1840, 27, 1958, 11, 2027, 9, 2305, 3, 2364, 1, 2366, 16, 2385, 4, 2402, 2, 2433, 3, 2492, 1, 2494, 7, 2503, 2, 2507, 3, 2519, 1, 2530, 2, 2561, 3, 2620, 1, 2622, 5, 2631, 2, 2635, 3, 2672, 2, 2689, 3, 2748, 1, 2750, 8, 2759, 3, 2763, 3, 2786, 2, 2817, 3, 2876, 1, 2878, 6, 2887, 2, 2891, 3, 2902, 2, 2946, 1, 3006, 5, 3014, 3, 3018, 4, 3031, 1, 3073, 3, 3134, 7, 3142, 3, 3146, 4, 3157, 2, 3202, 2, 3260, 1, 3262, 7, 3270, 3, 3274, 4, 3285, 2, 3298, 2, 3330, 2, 3390, 6, 3398, 3, 3402, 4, 3415, 1, 3458, 2, 3530, 1, 3535, 6, 3542, 1, 3544, 8, 3570, 2, 3633, 1, 3636, 7, 3655, 8, 3761, 1, 3764, 6, 3771, 2, 3784, 6, 3864, 2, 3893, 1, 3895, 1, 3897, 1, 3902, 2, 3953, 20, 3974, 2, 3984, 8, 3993, 36, 4038, 1, 4140, 7, 4150, 4, 4182, 4, 4959, 1, 5906, 3, 5938, 3, 5970, 2, 6002, 2, 6070, 30, 6109, 1, 6155, 3, 6313, 1, 6432, 12, 6448, 12, 6576, 17, 6600, 2, 6679, 5, 6912, 5, 6964, 17, 7019, 9, 7616, 11, 7678, 2, 8400, 32, 12330, 6, 12441, 2, 43010, 1, 43014, 1, 43019, 1, 43043, 5, 64286, 1, 65024, 16];
punctuationCharacterSet = [33, 3, 37, 6, 44, 4, 58, 2, 63, 2, 91, 3, 95, 1, 123, 1, 125, 1, 161, 1, 171, 1, 183, 1, 187, 1, 191, 1, 894, 1, 903, 1, 1370, 6, 1417, 2, 1470, 1, 1472, 1, 1475, 1, 1478, 1, 1523, 2, 1548, 2, 1563, 1, 1566, 2, 1642, 4, 1748, 1, 1792, 14, 2039, 3, 2404, 2, 2416, 1, 3572, 1, 3663, 1, 3674, 2, 3844, 15, 3898, 4, 3973, 1, 4048, 2, 4170, 6, 4347, 1, 4961, 8, 5741, 2, 5787, 2, 5867, 3, 5941, 2, 6100, 3, 6104, 3, 6144, 11, 6468, 2, 6622, 2, 6686, 2, 7002, 7, 8208, 24, 8240, 20, 8261, 13, 8275, 12, 8317, 2, 8333, 2, 9001, 2, 10088, 14, 10181, 2, 10214, 6, 10627, 22, 10712, 4, 10748, 2, 11513, 4, 11518, 2, 11776, 24, 11804, 2, 12289, 3, 12296, 10, 12308, 12, 12336, 1, 12349, 1, 12448, 1, 12539, 1, 43124, 4, 64830, 2, 65040, 10, 65072, 35, 65108, 14, 65123, 1, 65128, 1, 65130, 2, 65281, 3, 65285, 6, 65292, 4, 65306, 2, 65311, 2, 65339, 3, 65343, 1, 65371, 1, 65373, 1];
uppercaseLetterCharacterSet = [65, 26, 192, 23, 216, 7, 256, 1, 258, 1, 260, 1, 262, 1, 264, 1, 266, 1, 268, 1, 270, 1, 272, 1, 274, 1, 276, 1, 278, 1, 280, 1, 282, 1, 284, 1, 286, 1, 288, 1, 290, 1, 292, 1, 294, 1, 296, 1, 298, 1, 300, 1, 302, 1, 304, 1, 306, 1, 308, 1, 310, 1, 313, 1, 315, 1, 317, 1, 319, 1, 321, 1, 323, 1, 325, 1, 327, 1, 330, 1, 332, 1, 334, 1, 336, 1, 338, 1, 340, 1, 342, 1, 344, 1, 346, 1, 348, 1, 350, 1, 352, 1, 354, 1, 356, 1, 358, 1, 360, 1, 362, 1, 364, 1, 366, 1, 368, 1, 370, 1, 372, 1, 374, 1, 376, 2, 379, 1, 381, 1, 385, 2, 388, 1, 390, 2, 393, 3, 398, 4, 403, 2, 406, 3, 412, 2, 415, 2, 418, 1, 420, 1, 422, 2, 425, 1, 428, 1, 430, 2, 433, 3, 437, 1, 439, 2, 444, 1, 452, 2, 455, 2, 458, 2, 461, 1, 463, 1, 465, 1, 467, 1, 469, 1, 471, 1, 473, 1, 475, 1, 478, 1, 480, 1, 482, 1, 484, 1, 486, 1, 488, 1, 490, 1, 492, 1, 494, 1, 497, 2, 500, 1, 502, 3, 506, 1, 508, 1, 510, 1, 512, 1, 514, 1, 516, 1, 518, 1, 520, 1, 522, 1, 524, 1, 526, 1, 528, 1, 530, 1, 532, 1, 534, 1, 536, 1, 538, 1, 540, 1, 542, 1, 544, 1, 546, 1, 548, 1, 550, 1, 552, 1, 554, 1, 556, 1, 558, 1, 560, 1, 562, 1, 570, 2, 573, 2, 577, 1, 579, 4, 584, 1, 586, 1, 588, 1, 590, 1, 902, 1, 904, 3, 908, 1, 910, 2, 913, 17, 931, 9, 978, 3, 984, 1, 986, 1, 988, 1, 990, 1, 992, 1, 994, 1, 996, 1, 998, 1, 1000, 1, 1002, 1, 1004, 1, 1006, 1, 1012, 1, 1015, 1, 1017, 2, 1021, 51, 1120, 1, 1122, 1, 1124, 1, 1126, 1, 1128, 1, 1130, 1, 1132, 1, 1134, 1, 1136, 1, 1138, 1, 1140, 1, 1142, 1, 1144, 1, 1146, 1, 1148, 1, 1150, 1, 1152, 1, 1162, 1, 1164, 1, 1166, 1, 1168, 1, 1170, 1, 1172, 1, 1174, 1, 1176, 1, 1178, 1, 1180, 1, 1182, 1, 1184, 1, 1186, 1, 1188, 1, 1190, 1, 1192, 1, 1194, 1, 1196, 1, 1198, 1, 1200, 1, 1202, 1, 1204, 1, 1206, 1, 1208, 1, 1210, 1, 1212, 1, 1214, 1, 1216, 2, 1219, 1, 1221, 1, 1223, 1, 1225, 1, 1227, 1, 1229, 1, 1232, 1, 1234, 1, 1236, 1, 1238, 1, 1240, 1, 1242, 1, 1244, 1, 1246, 1, 1248, 1, 1250, 1, 1252, 1, 1254, 1, 1256, 1, 1258, 1, 1260, 1, 1262, 1, 1264, 1, 1266, 1, 1268, 1, 1270, 1, 1272, 1, 1274, 1, 1276, 1, 1278, 1, 1280, 1, 1282, 1, 1284, 1, 1286, 1, 1288, 1, 1290, 1, 1292, 1, 1294, 1, 1296, 1, 1298, 1, 1329, 38, 4256, 38, 7680, 1, 7682, 1, 7684, 1, 7686, 1, 7688, 1, 7690, 1, 7692, 1, 7694, 1, 7696, 1, 7698, 1, 7700, 1, 7702, 1, 7704, 1, 7706, 1, 7708, 1, 7710, 1, 7712, 1, 7714, 1, 7716, 1, 7718, 1, 7720, 1, 7722, 1, 7724, 1, 7726, 1, 7728, 1, 7730, 1, 7732, 1, 7734, 1, 7736, 1, 7738, 1, 7740, 1, 7742, 1, 7744, 1, 7746, 1, 7748, 1, 7750, 1, 7752, 1, 7754, 1, 7756, 1, 7758, 1, 7760, 1, 7762, 1, 7764, 1, 7766, 1, 7768, 1, 7770, 1, 7772, 1, 7774, 1, 7776, 1, 7778, 1, 7780, 1, 7782, 1, 7784, 1, 7786, 1, 7788, 1, 7790, 1, 7792, 1, 7794, 1, 7796, 1, 7798, 1, 7800, 1, 7802, 1, 7804, 1, 7806, 1, 7808, 1, 7810, 1, 7812, 1, 7814, 1, 7816, 1, 7818, 1, 7820, 1, 7822, 1, 7824, 1, 7826, 1, 7828, 1, 7840, 1, 7842, 1, 7844, 1, 7846, 1, 7848, 1, 7850, 1, 7852, 1, 7854, 1, 7856, 1, 7858, 1, 7860, 1, 7862, 1, 7864, 1, 7866, 1, 7868, 1, 7870, 1, 7872, 1, 7874, 1, 7876, 1, 7878, 1, 7880, 1, 7882, 1, 7884, 1, 7886, 1, 7888, 1, 7890, 1, 7892, 1, 7894, 1, 7896, 1, 7898, 1, 7900, 1, 7902, 1, 7904, 1, 7906, 1, 7908, 1, 7910, 1, 7912, 1, 7914, 1, 7916, 1, 7918, 1, 7920, 1, 7922, 1, 7924, 1, 7926, 1, 7928, 1, 7944, 8, 7960, 6, 7976, 8, 7992, 8, 8008, 6, 8025, 1, 8027, 1, 8029, 1, 8031, 1, 8040, 8, 8072, 8, 8088, 8, 8104, 8, 8120, 5, 8136, 5, 8152, 4, 8168, 5, 8184, 5, 8450, 1, 8455, 1, 8459, 3, 8464, 3, 8469, 1, 8473, 5, 8484, 1, 8486, 1, 8488, 1, 8490, 4, 8496, 4, 8510, 2, 8517, 1, 8579, 1, 11264, 47, 11360, 1, 11362, 3, 11367, 1, 11369, 1, 11371, 1, 11381, 1, 11392, 1, 11394, 1, 11396, 1, 11398, 1, 11400, 1, 11402, 1, 11404, 1, 11406, 1, 11408, 1, 11410, 1, 11412, 1, 11414, 1, 11416, 1, 11418, 1, 11420, 1, 11422, 1, 11424, 1, 11426, 1, 11428, 1, 11430, 1, 11432, 1, 11434, 1, 11436, 1, 11438, 1, 11440, 1, 11442, 1, 11444, 1, 11446, 1, 11448, 1, 11450, 1, 11452, 1, 11454, 1, 11456, 1, 11458, 1, 11460, 1, 11462, 1, 11464, 1, 11466, 1, 11468, 1, 11470, 1, 11472, 1, 11474, 1, 11476, 1, 11478, 1, 11480, 1, 11482, 1, 11484, 1, 11486, 1, 11488, 1, 11490, 1];
whitespaceAndNewlineCharacterSet = [9, 5, 32, 1, 133, 1, 160, 1, 5760, 1, 8192, 12, 8232, 2, 8239, 1, 8287, 1];
whitespaceCharacterSet = [9, 1, 32, 1, 160, 1, 5760, 1, 8192, 12, 8239, 1, 8287, 1];
p;22;CPUserSessionManager.jt;8682;@STATIC;1.0;i;22;CPNotificationCenter.ji;10;CPObject.ji;10;CPString.jS;5080;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQVXNlclNlc3Npb25NYW5hZ2VyLmoiXSwibmFtZXMiOlsic2VsZiJdLCJtYXBwaW5ncyI6Ijs7QUFzQkEsa0IsOEJBQ0Esa0Isa0JBQ0Esa0Isa0JBRUEsK0Q7O0NBQ0EsK0IsR0FBa0MsQ0FBbEM7QUFDQSwyQixHQUFrQyxDQUFsQztBQUNBLDRCLEdBQWtDLENBQWxDO0FBRUEsK0MsR0FBMEQsaURBQTFEO0FBQ0EsdUQsR0FBMEQseURBQTFEO0FBRUEsSUFBSSwyQixHQUE4QixHQUFsQztBQUVBO0FBQUE7QUFBQSwyQiwyQkFBQSwrQyxFQUFBLDRDOzZCQWVBLDRCO0FBQ0E7SUFDSUEsSSxHQUFPLEMsaURBQUEsZ0IsSUFBQSxrQ0FBUDtJQUVBLElBQUlBLElBQUo7UUFDSSxZLEdBQVUsK0JBQVY7SUFFSixNLENBQU9BLEk7QUFOWCxDOztVQVNBLDRCO0FBQ0E7SUFDSSxNLENBQU8sWTtBQURYLEM7OzJCQUlBLDRCLHFFQUF1QyxPO0FBQ3ZDO0lBQ0ksSUFBSSxZLENBQUEsRSxDQUFXLE9BQWY7UUFDSSxNO0lBRUosWSxHQUFVLE9BQVY7SUFFQSxVQUFDLENBQUMsb0JBQUQsdURBQUMsb0JBQUQsR0FBc0IsdURBQXRCLG1CQUFELDZJQUN5QiwrQ0FEekIsRUFFeUJBLElBRnpCO0lBSUEsSUFBSSxZLENBQUEsRSxDQUFXLDJCQUFmO1FBQ0ksQ0FBQ0EsSUFBRCw0REFBQ0EsSUFBRCxHQUFNLDRDQUFOLHlCQUF3QixHQUF4Qjs7QUFYUixDOztrQ0FjQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLG9CO0FBRFgsQzs7Z0JBSUEsNEIscUZBQW9DLFk7QUFDcEM7SUFDSSxJQUFJLG9CLENBQUEsRSxDQUFtQixZQUF2QjtRQUNJLE07SUFFSixvQixHQUFrQixZQUFsQjtJQUVBLFVBQUMsQ0FBQyxvQkFBRCx1REFBQyxvQkFBRCxHQUFzQix1REFBdEIsbUJBQUQsNklBQ3lCLHVEQUR6QixFQUV5QkEsSUFGekI7O0FBTkosQzs7OzhCQTVDQSw0QjtBQUNBO0lBQ0ksSUFBSSxDQUFDLDJCQUFMO1FBQ0ksMkIsR0FBOEIsVUFBQyxDQUFDLG9CQUFELCtDQUFDLG9CQUFELEdBQXNCLCtDQUF0QixXQUFELDZGQUE5QjtJQUVKLE0sQ0FBTywyQjs7QUFKWCxDIiwiZmlsZSI6IkNQVXNlclNlc3Npb25NYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6ImZpbGU6L1VzZXJzL2RhdmlkL3Byb2dyYW1zL2NhcHB1Y2Npbm8vRm91bmRhdGlvbi8iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ1BVc2VyU2Vzc2lvbk1hbmFnZXIualxuICogRm91bmRhdGlvblxuICpcbiAqIENyZWF0ZWQgYnkgRnJhbmNpc2NvIFRvbG1hc2t5LlxuICogQ29weXJpZ2h0IDIwMDgsIDI4MCBOb3J0aCwgSW5jLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlclxuICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlXG4gKiBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BIDAyMTEwLTEzMDEgVVNBXG4gKi9cblxuQGltcG9ydCBcIkNQTm90aWZpY2F0aW9uQ2VudGVyLmpcIlxuQGltcG9ydCBcIkNQT2JqZWN0LmpcIlxuQGltcG9ydCBcIkNQU3RyaW5nLmpcIlxuXG5AdHlwZWRlZiBDUFVzZXJTZXNzaW9uU3RhdHVzXG5DUFVzZXJTZXNzaW9uVW5kZXRlcm1pbmVkU3RhdHVzID0gMDtcbkNQVXNlclNlc3Npb25Mb2dnZWRJblN0YXR1cyAgICAgPSAxO1xuQ1BVc2VyU2Vzc2lvbkxvZ2dlZE91dFN0YXR1cyAgICA9IDI7XG5cbkNQVXNlclNlc3Npb25NYW5hZ2VyU3RhdHVzRGlkQ2hhbmdlTm90aWZpY2F0aW9uICAgICAgICAgPSBAXCJDUFVzZXJTZXNzaW9uTWFuYWdlclN0YXR1c0RpZENoYW5nZU5vdGlmaWNhdGlvblwiO1xuQ1BVc2VyU2Vzc2lvbk1hbmFnZXJVc2VySWRlbnRpZmllckRpZENoYW5nZU5vdGlmaWNhdGlvbiA9IEBcIkNQVXNlclNlc3Npb25NYW5hZ2VyVXNlcklkZW50aWZpZXJEaWRDaGFuZ2VOb3RpZmljYXRpb25cIjtcblxudmFyIENQRGVmYXVsdFVzZXJTZXNzaW9uTWFuYWdlciA9IG5pbDtcblxuQGltcGxlbWVudGF0aW9uIENQVXNlclNlc3Npb25NYW5hZ2VyIDogQ1BPYmplY3RcbntcbiAgICBDUFVzZXJTZXNzaW9uU3RhdHVzIF9zdGF0dXM7XG5cbiAgICBDUFN0cmluZyAgICAgICAgICAgIF91c2VySWRlbnRpZmllcjtcbn1cblxuKyAoaWQpZGVmYXVsdE1hbmFnZXJcbntcbiAgICBpZiAoIUNQRGVmYXVsdFVzZXJTZXNzaW9uTWFuYWdlcilcbiAgICAgICAgQ1BEZWZhdWx0VXNlclNlc3Npb25NYW5hZ2VyID0gW1tDUFVzZXJTZXNzaW9uTWFuYWdlciBhbGxvY10gaW5pdF07XG5cbiAgICByZXR1cm4gQ1BEZWZhdWx0VXNlclNlc3Npb25NYW5hZ2VyO1xufVxuXG4tIChpZClpbml0XG57XG4gICAgc2VsZiA9IFtzdXBlciBpbml0XTtcblxuICAgIGlmIChzZWxmKVxuICAgICAgICBfc3RhdHVzID0gQ1BVc2VyU2Vzc2lvblVuZGV0ZXJtaW5lZFN0YXR1cztcblxuICAgIHJldHVybiBzZWxmO1xufVxuXG4tIChDUFVzZXJTZXNzaW9uU3RhdHVzKXN0YXR1c1xue1xuICAgIHJldHVybiBfc3RhdHVzO1xufVxuXG4tICh2b2lkKXNldFN0YXR1czooQ1BVc2VyU2Vzc2lvblN0YXR1cylhU3RhdHVzXG57XG4gICAgaWYgKF9zdGF0dXMgPT0gYVN0YXR1cylcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgX3N0YXR1cyA9IGFTdGF0dXM7XG5cbiAgICBbW0NQTm90aWZpY2F0aW9uQ2VudGVyIGRlZmF1bHRDZW50ZXJdXG4gICAgICAgIHBvc3ROb3RpZmljYXRpb25OYW1lOkNQVXNlclNlc3Npb25NYW5hZ2VyU3RhdHVzRGlkQ2hhbmdlTm90aWZpY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OnNlbGZdO1xuXG4gICAgaWYgKF9zdGF0dXMgIT0gQ1BVc2VyU2Vzc2lvbkxvZ2dlZEluU3RhdHVzKVxuICAgICAgICBbc2VsZiBzZXRVc2VySWRlbnRpZmllcjpuaWxdO1xufVxuXG4tIChDUFN0cmluZyl1c2VySWRlbnRpZmllclxue1xuICAgIHJldHVybiBfdXNlcklkZW50aWZpZXI7XG59XG5cbi0gKHZvaWQpc2V0VXNlcklkZW50aWZpZXI6KENQU3RyaW5nKWFuSWRlbnRpZmllclxue1xuICAgIGlmIChfdXNlcklkZW50aWZpZXIgPT0gYW5JZGVudGlmaWVyKVxuICAgICAgICByZXR1cm47XG5cbiAgICBfdXNlcklkZW50aWZpZXIgPSBhbklkZW50aWZpZXI7XG5cbiAgICBbW0NQTm90aWZpY2F0aW9uQ2VudGVyIGRlZmF1bHRDZW50ZXJdXG4gICAgICAgIHBvc3ROb3RpZmljYXRpb25OYW1lOkNQVXNlclNlc3Npb25NYW5hZ2VyVXNlcklkZW50aWZpZXJEaWRDaGFuZ2VOb3RpZmljYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6c2VsZl07XG59XG5cbkBlbmRcbiJdfQ==t;3519;

objj_executeFile("CPNotificationCenter.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPString.j", YES);{var the_typedef = objj_allocateTypeDef("CPUserSessionStatus");
objj_registerTypeDef(the_typedef);
}CPUserSessionUndeterminedStatus = 0;
CPUserSessionLoggedInStatus = 1;
CPUserSessionLoggedOutStatus = 2;
CPUserSessionManagerStatusDidChangeNotification = "CPUserSessionManagerStatusDidChangeNotification";
CPUserSessionManagerUserIdentifierDidChangeNotification = "CPUserSessionManagerUserIdentifierDidChangeNotification";
var CPDefaultUserSessionManager = nil;

{var the_class = objj_allocateClassPair(CPObject, "CPUserSessionManager"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_status", "CPUserSessionStatus"), new objj_ivar("_userIdentifier", "CPString")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPUserSessionManager__init(self, _cmd)
{
    self = (objj_getClass("CPUserSessionManager").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
        self._status = CPUserSessionUndeterminedStatus;
    return self;
}

,["id"]), new objj_method(sel_getUid("status"), function $CPUserSessionManager__status(self, _cmd)
{
    return self._status;
}

,["CPUserSessionStatus"]), new objj_method(sel_getUid("setStatus:"), function $CPUserSessionManager__setStatus_(self, _cmd, aStatus)
{
    if (self._status == aStatus)
        return;
    self._status = aStatus;
    ((___r1 = (CPNotificationCenter.isa.method_msgSend["defaultCenter"] || _objj_forward)(CPNotificationCenter, (CPNotificationCenter.isa.method_dtable["defaultCenter"], "defaultCenter"))), ___r1 == null ? null : (___r1.isa.method_msgSend["postNotificationName:object:"] || _objj_forward)(___r1, "postNotificationName:object:", CPUserSessionManagerStatusDidChangeNotification, self));
    if (self._status != CPUserSessionLoggedInStatus)
        (self.isa.method_msgSend["setUserIdentifier:"] || _objj_forward)(self, (self.isa.method_dtable["setUserIdentifier:"], "setUserIdentifier:"), nil);
    var ___r1;
}

,["void","CPUserSessionStatus"]), new objj_method(sel_getUid("userIdentifier"), function $CPUserSessionManager__userIdentifier(self, _cmd)
{
    return self._userIdentifier;
}

,["CPString"]), new objj_method(sel_getUid("setUserIdentifier:"), function $CPUserSessionManager__setUserIdentifier_(self, _cmd, anIdentifier)
{
    if (self._userIdentifier == anIdentifier)
        return;
    self._userIdentifier = anIdentifier;
    ((___r1 = (CPNotificationCenter.isa.method_msgSend["defaultCenter"] || _objj_forward)(CPNotificationCenter, (CPNotificationCenter.isa.method_dtable["defaultCenter"], "defaultCenter"))), ___r1 == null ? null : (___r1.isa.method_msgSend["postNotificationName:object:"] || _objj_forward)(___r1, "postNotificationName:object:", CPUserSessionManagerUserIdentifierDidChangeNotification, self));
    var ___r1;
}

,["void","CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("defaultManager"), function $CPUserSessionManager__defaultManager(self, _cmd)
{
    if (!CPDefaultUserSessionManager)
        CPDefaultUserSessionManager = ((___r1 = (CPUserSessionManager.isa.method_msgSend["alloc"] || _objj_forward)(CPUserSessionManager, (CPUserSessionManager.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    return CPDefaultUserSessionManager;
    var ___r1;
}

,["id"])]);
}
p;9;CPTimer.jt;32032;@STATIC;1.0;i;8;CPDate.ji;14;CPInvocation.ji;10;CPObject.ji;11;CPRunLoop.jS;18636;t;13306;

objj_executeFile("CPDate.j", YES);objj_executeFile("CPInvocation.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPRunLoop.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPTimer"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_timeInterval", "CPTimeInterval"), new objj_ivar("_invocation", "CPInvocation"), new objj_ivar("_callback", "Function"), new objj_ivar("_repeats", "BOOL"), new objj_ivar("_isValid", "BOOL"), new objj_ivar("_fireDate", "CPDate"), new objj_ivar("_userInfo", "id")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithFireDate:interval:invocation:repeats:"), function $CPTimer__initWithFireDate_interval_invocation_repeats_(self, _cmd, aDate, seconds, anInvocation, shouldRepeat)
{
    self = (objj_getClass("CPTimer").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._timeInterval = seconds <= 0 ? 0.1 : seconds;
        self._invocation = anInvocation;
        self._repeats = shouldRepeat;
        self._isValid = YES;
        self._fireDate = aDate;
    }
    return self;
}

,["id","CPDate","CPTimeInterval","CPInvocation","BOOL"]), new objj_method(sel_getUid("initWithFireDate:interval:target:selector:userInfo:repeats:"), function $CPTimer__initWithFireDate_interval_target_selector_userInfo_repeats_(self, _cmd, aDate, seconds, aTarget, aSelector, userInfo, shouldRepeat)
{
    var invocation = (CPInvocation.isa.method_msgSend["invocationWithMethodSignature:"] || _objj_forward)(CPInvocation, (CPInvocation.isa.method_dtable["invocationWithMethodSignature:"], "invocationWithMethodSignature:"), 1);
    (invocation == null ? null : (invocation.isa.method_msgSend["setTarget:"] || _objj_forward)(invocation, (invocation.isa.method_dtable["setTarget:"], "setTarget:"), aTarget));
    (invocation == null ? null : (invocation.isa.method_msgSend["setSelector:"] || _objj_forward)(invocation, (invocation.isa.method_dtable["setSelector:"], "setSelector:"), aSelector));
    (invocation == null ? null : (invocation.isa.method_msgSend["setArgument:atIndex:"] || _objj_forward)(invocation, (invocation.isa.method_dtable["setArgument:atIndex:"], invocation.isa.method_dtable["setArgument:atIndex:"], "setArgument:atIndex:"), self, 2));
    self = (self == null ? null : (self.isa.method_msgSend["initWithFireDate:interval:invocation:repeats:"] || _objj_forward)(self, (self.isa.method_dtable["initWithFireDate:interval:invocation:repeats:"], self.isa.method_dtable["initWithFireDate:interval:invocation:repeats:"], self.isa.method_dtable["initWithFireDate:interval:invocation:repeats:"], self.isa.method_dtable["initWithFireDate:interval:invocation:repeats:"], "initWithFireDate:interval:invocation:repeats:"), aDate, seconds, invocation, shouldRepeat));
    if (self)
        self._userInfo = userInfo;
    return self;
}

,["id","CPDate","CPTimeInterval","id","SEL","id","BOOL"]), new objj_method(sel_getUid("initWithFireDate:interval:callback:repeats:"), function $CPTimer__initWithFireDate_interval_callback_repeats_(self, _cmd, aDate, seconds, aFunction, shouldRepeat)
{
    self = (objj_getClass("CPTimer").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._timeInterval = seconds <= 0 ? 0.1 : seconds;
        self._callback = aFunction;
        self._repeats = shouldRepeat;
        self._isValid = YES;
        self._fireDate = aDate;
    }
    return self;
}

,["id","CPDate","CPTimeInterval","Function","BOOL"]), new objj_method(sel_getUid("timeInterval"), function $CPTimer__timeInterval(self, _cmd)
{
    return self._timeInterval;
}

,["CPTimeInterval"]), new objj_method(sel_getUid("fireDate"), function $CPTimer__fireDate(self, _cmd)
{
    return self._fireDate;
}

,["CPDate"]), new objj_method(sel_getUid("setFireDate:"), function $CPTimer__setFireDate_(self, _cmd, aDate)
{
    self._fireDate = aDate;
}

,["void","CPDate"]), new objj_method(sel_getUid("fire"), function $CPTimer__fire(self, _cmd)
{
    if (!self._isValid)
        return;
    if (self._callback)
        self._callback();
    else
        ((___r1 = self._invocation), ___r1 == null ? null : (___r1.isa.method_msgSend["invoke"] || _objj_forward)(___r1, (self._invocation.isa.method_dtable["invoke"], "invoke")));
    if (!self._isValid)
        return;
    if (self._repeats)
        self._fireDate = (CPDate.isa.method_msgSend["dateWithTimeIntervalSinceNow:"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["dateWithTimeIntervalSinceNow:"], "dateWithTimeIntervalSinceNow:"), self._timeInterval);
    else
        (self.isa.method_msgSend["invalidate"] || _objj_forward)(self, (self.isa.method_dtable["invalidate"], "invalidate"));
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("isValid"), function $CPTimer__isValid(self, _cmd)
{
    return self._isValid;
}

,["BOOL"]), new objj_method(sel_getUid("invalidate"), function $CPTimer__invalidate(self, _cmd)
{
    self._isValid = NO;
    self._userInfo = nil;
    self._invocation = nil;
    self._callback = nil;
}

,["void"]), new objj_method(sel_getUid("userInfo"), function $CPTimer__userInfo(self, _cmd)
{
    return self._userInfo;
}

,["id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("scheduledTimerWithTimeInterval:invocation:repeats:"), function $CPTimer__scheduledTimerWithTimeInterval_invocation_repeats_(self, _cmd, seconds, anInvocation, shouldRepeat)
{
    var timer = ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithFireDate:interval:invocation:repeats:"] || _objj_forward)(___r1, "initWithFireDate:interval:invocation:repeats:", (CPDate.isa.method_msgSend["dateWithTimeIntervalSinceNow:"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["dateWithTimeIntervalSinceNow:"], "dateWithTimeIntervalSinceNow:"), seconds), seconds, anInvocation, shouldRepeat));
    ((___r1 = (CPRunLoop.isa.method_msgSend["currentRunLoop"] || _objj_forward)(CPRunLoop, (CPRunLoop.isa.method_dtable["currentRunLoop"], "currentRunLoop"))), ___r1 == null ? null : (___r1.isa.method_msgSend["addTimer:forMode:"] || _objj_forward)(___r1, "addTimer:forMode:", timer, CPDefaultRunLoopMode));
    return timer;
    var ___r1;
}

,["CPTimer","CPTimeInterval","CPInvocation","BOOL"]), new objj_method(sel_getUid("scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"), function $CPTimer__scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(self, _cmd, seconds, aTarget, aSelector, userInfo, shouldRepeat)
{
    var timer = ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithFireDate:interval:target:selector:userInfo:repeats:"] || _objj_forward)(___r1, "initWithFireDate:interval:target:selector:userInfo:repeats:", (CPDate.isa.method_msgSend["dateWithTimeIntervalSinceNow:"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["dateWithTimeIntervalSinceNow:"], "dateWithTimeIntervalSinceNow:"), seconds), seconds, aTarget, aSelector, userInfo, shouldRepeat));
    ((___r1 = (CPRunLoop.isa.method_msgSend["currentRunLoop"] || _objj_forward)(CPRunLoop, (CPRunLoop.isa.method_dtable["currentRunLoop"], "currentRunLoop"))), ___r1 == null ? null : (___r1.isa.method_msgSend["addTimer:forMode:"] || _objj_forward)(___r1, "addTimer:forMode:", timer, CPDefaultRunLoopMode));
    return timer;
    var ___r1;
}

,["CPTimer","CPTimeInterval","id","SEL","id","BOOL"]), new objj_method(sel_getUid("scheduledTimerWithTimeInterval:callback:repeats:"), function $CPTimer__scheduledTimerWithTimeInterval_callback_repeats_(self, _cmd, seconds, aFunction, shouldRepeat)
{
    var timer = ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithFireDate:interval:callback:repeats:"] || _objj_forward)(___r1, "initWithFireDate:interval:callback:repeats:", (CPDate.isa.method_msgSend["dateWithTimeIntervalSinceNow:"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["dateWithTimeIntervalSinceNow:"], "dateWithTimeIntervalSinceNow:"), seconds), seconds, aFunction, shouldRepeat));
    ((___r1 = (CPRunLoop.isa.method_msgSend["currentRunLoop"] || _objj_forward)(CPRunLoop, (CPRunLoop.isa.method_dtable["currentRunLoop"], "currentRunLoop"))), ___r1 == null ? null : (___r1.isa.method_msgSend["addTimer:forMode:"] || _objj_forward)(___r1, "addTimer:forMode:", timer, CPDefaultRunLoopMode));
    return timer;
    var ___r1;
}

,["CPTimer","CPTimeInterval","Function","BOOL"]), new objj_method(sel_getUid("timerWithTimeInterval:invocation:repeats:"), function $CPTimer__timerWithTimeInterval_invocation_repeats_(self, _cmd, seconds, anInvocation, shouldRepeat)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithFireDate:interval:invocation:repeats:"] || _objj_forward)(___r1, "initWithFireDate:interval:invocation:repeats:", (CPDate.isa.method_msgSend["dateWithTimeIntervalSinceNow:"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["dateWithTimeIntervalSinceNow:"], "dateWithTimeIntervalSinceNow:"), seconds), seconds, anInvocation, shouldRepeat));
    var ___r1;
}

,["CPTimer","CPTimeInterval","CPInvocation","BOOL"]), new objj_method(sel_getUid("timerWithTimeInterval:target:selector:userInfo:repeats:"), function $CPTimer__timerWithTimeInterval_target_selector_userInfo_repeats_(self, _cmd, seconds, aTarget, aSelector, userInfo, shouldRepeat)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithFireDate:interval:target:selector:userInfo:repeats:"] || _objj_forward)(___r1, "initWithFireDate:interval:target:selector:userInfo:repeats:", (CPDate.isa.method_msgSend["dateWithTimeIntervalSinceNow:"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["dateWithTimeIntervalSinceNow:"], "dateWithTimeIntervalSinceNow:"), seconds), seconds, aTarget, aSelector, userInfo, shouldRepeat));
    var ___r1;
}

,["CPTimer","CPTimeInterval","id","SEL","id","BOOL"]), new objj_method(sel_getUid("timerWithTimeInterval:callback:repeats:"), function $CPTimer__timerWithTimeInterval_callback_repeats_(self, _cmd, seconds, aFunction, shouldRepeat)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithFireDate:interval:callback:repeats:"] || _objj_forward)(___r1, "initWithFireDate:interval:callback:repeats:", (CPDate.isa.method_msgSend["dateWithTimeIntervalSinceNow:"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["dateWithTimeIntervalSinceNow:"], "dateWithTimeIntervalSinceNow:"), seconds), seconds, aFunction, shouldRepeat));
    var ___r1;
}

,["CPTimer","CPTimeInterval","Function","BOOL"])]);
}
var CPTimersTimeoutID = 1000,
    CPTimersForTimeoutIDs = {};
var _CPTimerBridgeTimer = function(codeOrFunction, aDelay, shouldRepeat, functionArgs)
{
    var timeoutID = CPTimersTimeoutID++,
        theFunction = nil;
    if (typeof codeOrFunction === "string")
    {
        theFunction =         function()
        {
            (new Function(codeOrFunction))();
            if (!shouldRepeat)
                CPTimersForTimeoutIDs[timeoutID] = nil;
        };
    }    else
    {
        if (!functionArgs)
            functionArgs = [];
        theFunction =         function()
        {
            codeOrFunction.apply(window, functionArgs);
            if (!shouldRepeat)
                CPTimersForTimeoutIDs[timeoutID] = nil;
        };
    }    aDelay = aDelay | 0.0;
    CPTimersForTimeoutIDs[timeoutID] = (CPTimer.isa.method_msgSend["scheduledTimerWithTimeInterval:callback:repeats:"] || _objj_forward)(CPTimer, (CPTimer.isa.method_dtable["scheduledTimerWithTimeInterval:callback:repeats:"], CPTimer.isa.method_dtable["scheduledTimerWithTimeInterval:callback:repeats:"], CPTimer.isa.method_dtable["scheduledTimerWithTimeInterval:callback:repeats:"], "scheduledTimerWithTimeInterval:callback:repeats:"), aDelay / 1000, theFunction, shouldRepeat);
    return timeoutID;
};
if (typeof window !== 'undefined')
{
    window.setTimeout =     function(codeOrFunction, aDelay)
    {
        return _CPTimerBridgeTimer(codeOrFunction, aDelay, NO, Array.prototype.slice.apply(arguments, [2]));
    };
    window.clearTimeout =     function(aTimeoutID)
    {
        var timer = CPTimersForTimeoutIDs[aTimeoutID];
        if (timer)
            (timer == null ? null : (timer.isa.method_msgSend["invalidate"] || _objj_forward)(timer, (timer.isa.method_dtable["invalidate"], "invalidate")));
        CPTimersForTimeoutIDs[aTimeoutID] = nil;
    };
    window.setInterval =     function(codeOrFunction, aDelay, functionArgs)
    {
        return _CPTimerBridgeTimer(codeOrFunction, aDelay, YES, Array.prototype.slice.apply(arguments, [2]));
    };
    window.clearInterval =     function(aTimeoutID)
    {
        window.clearTimeout(aTimeoutID);
    };
}
p;14;CPCountedSet.jt;6889;@STATIC;1.0;i;10;CPObject.ji;23;_CPConcreteMutableSet.jS;4588;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQQ291bnRlZFNldC5qIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBc0JBLGtCLGtCQUNBLGtCLCtCQVFBO0FBQUE7QUFBQSwyQiwyQkFBQSxrQzs2QkFLQSw0Qiw2REFBc0IsUTtBQUN0QjtJQUNJLElBQUksQ0FBQyxZQUFMO1FBQ0ksWSxHQUFVLEMsQ0FBVjtJQUVKLEMseUNBQUEsZ0IsVUFBQSx5Q0FBaUIsUUFBakI7SUFFQSxJQUFJLEcsR0FBTSxDQUFDLFFBQUQsbUJBQUMsUUFBRCw2Q0FBQyxRQUFELEdBQVUsaUNBQVYsVUFBVjtJQUVBLElBQUksYUFBUSxHLEVBQVIsRyxDQUFpQixTQUFyQjtRQUNJLGFBQVEsRyxJQUFPLENBQWY7SUFESjtRQUdJLEVBQUUsYUFBUSxHLENBQVY7QUFYUixDOztpQkFjQSw0QixtRUFBeUIsUTtBQUN6QjtJQUNJLElBQUksQ0FBQyxZQUFMO1FBQ0ksTTtJQUVKLElBQUksRyxHQUFNLENBQUMsUUFBRCxtQkFBQyxRQUFELDZDQUFDLFFBQUQsR0FBVSxpQ0FBVixVQUFWO0lBRUEsSUFBSSxhQUFRLEcsRUFBUixHLENBQWlCLFNBQXJCO1FBQ0ksTTtJQURKO0lBSUE7UUFDSSxFQUFFLGFBQVEsRyxDQUFWO1FBRUEsSUFBSSxhQUFRLEcsRUFBUixHLENBQWlCLENBQXJCO1FBQ0E7WUFDSSxNLENBQU8sYUFBUSxHLENBQWY7WUFDQSxDLHlDQUFBLGdCLGFBQUEsNENBQW9CLFFBQXBCO1FBRkosQztJQUpKLEM7QUFWSixDOztpQkFxQkEsNEI7QUFDQTtJQUNJLEMseUNBQUEsZ0IsZ0JBQUE7SUFDQSxZLEdBQVUsQyxDQUFWO0FBRkosQzs7WUFTQSw0Qix1RUFBK0IsUTtBQUMvQjtJQUNJLElBQUksQ0FBQyxZQUFMO1FBQ0ksWSxHQUFVLEMsQ0FBVjtJQUVKLElBQUksRyxHQUFNLENBQUMsUUFBRCxtQkFBQyxRQUFELDZDQUFDLFFBQUQsR0FBVSxpQ0FBVixVQUFWO0lBRUEsSUFBSSxhQUFRLEcsRUFBUixHLENBQWlCLFNBQXJCO1FBQ0ksTSxDQUFPLEM7SUFFWCxNLENBQU8sYUFBUSxHO0FBVG5CLEMiLCJmaWxlIjoiQ1BDb3VudGVkU2V0LmpzIiwic291cmNlUm9vdCI6ImZpbGU6L1VzZXJzL2RhdmlkL3Byb2dyYW1zL2NhcHB1Y2Npbm8vRm91bmRhdGlvbi8iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ1BDb3VudGVkU2V0LmpcbiAqIEZvdW5kYXRpb25cbiAqXG4gKiBDcmVhdGVkIGJ5IC5cbiAqIENvcHlyaWdodCAyMDA4LCAyODAgTm9ydGgsIEluYy5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXJcbiAqIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgbGlicmFyeTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZVxuICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAwMjExMC0xMzAxIFVTQVxuICovXG5cbkBpbXBvcnQgXCJDUE9iamVjdC5qXCJcbkBpbXBvcnQgXCJfQ1BDb25jcmV0ZU11dGFibGVTZXQualwiXG5cbi8qIVxuICAgIEBjbGFzcyBDUENvdW50ZWRTZXRcbiAgICBAaW5ncm91cCBmb3VuZGF0aW9uXG4gICAgQGJyaWVmIEFuIG11dGFibGUgY29sbGVjdGlvbiB3aGljaCBtYXkgY29udGFpbiBhIHNwZWNpZmljIG9iamVjdFxuICAgIG51bWVyb3VzIHRpbWVzLlxuKi9cbkBpbXBsZW1lbnRhdGlvbiBDUENvdW50ZWRTZXQgOiBfQ1BDb25jcmV0ZU11dGFibGVTZXRcbntcbiAgICBPYmplY3QgIF9jb3VudHM7XG59XG5cbi0gKHZvaWQpYWRkT2JqZWN0OihpZClhbk9iamVjdFxue1xuICAgIGlmICghX2NvdW50cylcbiAgICAgICAgX2NvdW50cyA9IHt9O1xuXG4gICAgW3N1cGVyIGFkZE9iamVjdDphbk9iamVjdF07XG5cbiAgICB2YXIgVUlEID0gW2FuT2JqZWN0IFVJRF07XG5cbiAgICBpZiAoX2NvdW50c1tVSURdID09PSB1bmRlZmluZWQpXG4gICAgICAgIF9jb3VudHNbVUlEXSA9IDE7XG4gICAgZWxzZVxuICAgICAgICArK19jb3VudHNbVUlEXTtcbn1cblxuLSAodm9pZClyZW1vdmVPYmplY3Q6KGlkKWFuT2JqZWN0XG57XG4gICAgaWYgKCFfY291bnRzKVxuICAgICAgICByZXR1cm47XG5cbiAgICB2YXIgVUlEID0gW2FuT2JqZWN0IFVJRF07XG5cbiAgICBpZiAoX2NvdW50c1tVSURdID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybjtcblxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIC0tX2NvdW50c1tVSURdO1xuXG4gICAgICAgIGlmIChfY291bnRzW1VJRF0gPT09IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlbGV0ZSBfY291bnRzW1VJRF07XG4gICAgICAgICAgICBbc3VwZXIgcmVtb3ZlT2JqZWN0OmFuT2JqZWN0XTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLSAodm9pZClyZW1vdmVBbGxPYmplY3RzXG57XG4gICAgW3N1cGVyIHJlbW92ZUFsbE9iamVjdHNdO1xuICAgIF9jb3VudHMgPSB7fTtcbn1cblxuLypcbiAgICBSZXR1cm5zIHRoZSBudW1iZXIgb2YgdGltZXMgYW5PYmplY3QgYXBwZWFycyBpbiB0aGUgcmVjZWl2ZXIuXG4gICAgQHBhcmFtIGFuT2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2sgdGhlIGNvdW50IGZvci5cbiovXG4tICh1bnNpZ25lZCljb3VudEZvck9iamVjdDooaWQpYW5PYmplY3RcbntcbiAgICBpZiAoIV9jb3VudHMpXG4gICAgICAgIF9jb3VudHMgPSB7fTtcblxuICAgIHZhciBVSUQgPSBbYW5PYmplY3QgVUlEXTtcblxuICAgIGlmIChfY291bnRzW1VJRF0gPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIDA7XG5cbiAgICByZXR1cm4gX2NvdW50c1tVSURdO1xufVxuXG5cbi8qXG5cbkV2ZW50dWFsbHkgd2Ugc2hvdWxkIHNlZSB3aGF0IHRoZXNlIGFyZSBzdXBwb3NlZCB0byBkbywgYW5kIHRoZW4gZG8gdGhhdC5cblxuLSAodm9pZClpbnRlcnNlY3RTZXQ6KENQU2V0KXNldFxuXG4tICh2b2lkKW1pbnVzU2V0OihDUFNldClzZXRcblxuLSAodm9pZCl1bmlvblNldDooQ1BTZXQpc2V0XG5cbiovXG5cbkBlbmRcbiJdfQ==t;2232;

objj_executeFile("CPObject.j", YES);objj_executeFile("_CPConcreteMutableSet.j", YES);
{var the_class = objj_allocateClassPair(_CPConcreteMutableSet, "CPCountedSet"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_counts", "Object")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("addObject:"), function $CPCountedSet__addObject_(self, _cmd, anObject)
{
    if (!self._counts)
        self._counts = {};
    (objj_getClass("CPCountedSet").super_class.method_dtable["addObject:"] || _objj_forward)(self, "addObject:", anObject);
    var UID = (anObject == null ? null : (anObject.isa.method_msgSend["UID"] || _objj_forward)(anObject, (anObject.isa.method_dtable["UID"], "UID")));
    if (self._counts[UID] === undefined)
        self._counts[UID] = 1;
    else
        ++self._counts[UID];
}

,["void","id"]), new objj_method(sel_getUid("removeObject:"), function $CPCountedSet__removeObject_(self, _cmd, anObject)
{
    if (!self._counts)
        return;
    var UID = (anObject == null ? null : (anObject.isa.method_msgSend["UID"] || _objj_forward)(anObject, (anObject.isa.method_dtable["UID"], "UID")));
    if (self._counts[UID] === undefined)
        return;
    else
    {
        --self._counts[UID];
        if (self._counts[UID] === 0)
        {
            delete self._counts[UID];
            (objj_getClass("CPCountedSet").super_class.method_dtable["removeObject:"] || _objj_forward)(self, "removeObject:", anObject);
        }
    }
}

,["void","id"]), new objj_method(sel_getUid("removeAllObjects"), function $CPCountedSet__removeAllObjects(self, _cmd)
{
    (objj_getClass("CPCountedSet").super_class.method_dtable["removeAllObjects"] || _objj_forward)(self, "removeAllObjects");
    self._counts = {};
}

,["void"]), new objj_method(sel_getUid("countForObject:"), function $CPCountedSet__countForObject_(self, _cmd, anObject)
{
    if (!self._counts)
        self._counts = {};
    var UID = (anObject == null ? null : (anObject.isa.method_msgSend["UID"] || _objj_forward)(anObject, (anObject.isa.method_dtable["UID"], "UID")));
    if (self._counts[UID] === undefined)
        return 0;
    return self._counts[UID];
}

,["unsigned","id"])]);
}
p;9;CPProxy.jt;15349;@STATIC;1.0;i;13;CPException.ji;14;CPInvocation.ji;10;CPObject.ji;10;CPString.jS;8216;t;7040;

objj_executeFile("CPException.j", YES);objj_executeFile("CPInvocation.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPString.j", YES);{var the_class = objj_allocateClassPair(Nil, "CPProxy"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("isa", "Class")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("methodSignatureForSelector:"), function $CPProxy__methodSignatureForSelector_(self, _cmd, aSelector)
{
    (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "-methodSignatureForSelector: called on abstract CPProxy class.");
}

,["CPMethodSignature","SEL"]), new objj_method(sel_getUid("forwardInvocation:"), function $CPProxy__forwardInvocation_(self, _cmd, anInvocation)
{
    (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "-forwardInvocation: called on abstract CPProxy class.");
}

,["void","CPInvocation"]), new objj_method(sel_getUid("forward::"), function $CPProxy__forward__(self, _cmd, aSelector, args)
{
    return (CPObject.isa.method_msgSend["methodForSelector:"] || _objj_forward)(CPObject, (CPObject.isa.method_dtable["methodForSelector:"], "methodForSelector:"), _cmd)(self, _cmd, aSelector, args);
}

,["void","SEL","marg_list"]), new objj_method(sel_getUid("hash"), function $CPProxy__hash(self, _cmd)
{
    return (self.isa.method_msgSend["UID"] || _objj_forward)(self, (self.isa.method_dtable["UID"], "UID"));
}

,["unsigned"]), new objj_method(sel_getUid("UID"), function $CPProxy__UID(self, _cmd)
{
    if (typeof self._UID === "undefined")
        self._UID = objj_generateObjectUID();
    return self._UID;
}

,["unsigned"]), new objj_method(sel_getUid("isEqual:"), function $CPProxy__isEqual_(self, _cmd, anObject)
{
    return self === anObject;
}

,["BOOL","id"]), new objj_method(sel_getUid("self"), function $CPProxy__self(self, _cmd)
{
    return self;
}

,["id"]), new objj_method(sel_getUid("class"), function $CPProxy__class(self, _cmd)
{
    return self.isa;
}

,["Class"]), new objj_method(sel_getUid("superclass"), function $CPProxy__superclass(self, _cmd)
{
    return class_getSuperclass(self.isa);
}

,["Class"]), new objj_method(sel_getUid("performSelector:"), function $CPProxy__performSelector_(self, _cmd, aSelector)
{
    return self.isa.objj_msgSend0(self, aSelector);
}

,["id","SEL"]), new objj_method(sel_getUid("performSelector:withObject:"), function $CPProxy__performSelector_withObject_(self, _cmd, aSelector, anObject)
{
    return self.isa.objj_msgSend1(self, aSelector, anObject);
}

,["id","SEL","id"]), new objj_method(sel_getUid("performSelector:withObject:withObject:"), function $CPProxy__performSelector_withObject_withObject_(self, _cmd, aSelector, anObject, anotherObject)
{
    return self.isa.objj_msgSend2(self, aSelector, anObject, anotherObject);
}

,["id","SEL","id","id"]), new objj_method(sel_getUid("isProxy"), function $CPProxy__isProxy(self, _cmd)
{
    return YES;
}

,["BOOL"]), new objj_method(sel_getUid("isKindOfClass:"), function $CPProxy__isKindOfClass_(self, _cmd, aClass)
{
    var signature = (self.isa.method_msgSend["methodSignatureForSelector:"] || _objj_forward)(self, (self.isa.method_dtable["methodSignatureForSelector:"], "methodSignatureForSelector:"), _cmd),
        invocation = (CPInvocation.isa.method_msgSend["invocationWithMethodSignature:"] || _objj_forward)(CPInvocation, (CPInvocation.isa.method_dtable["invocationWithMethodSignature:"], "invocationWithMethodSignature:"), signature);
    (self.isa.method_msgSend["forwardInvocation:"] || _objj_forward)(self, (self.isa.method_dtable["forwardInvocation:"], "forwardInvocation:"), invocation);
    return (invocation == null ? null : (invocation.isa.method_msgSend["returnValue"] || _objj_forward)(invocation, (invocation.isa.method_dtable["returnValue"], "returnValue")));
}

,["BOOL","Class"]), new objj_method(sel_getUid("isMemberOfClass:"), function $CPProxy__isMemberOfClass_(self, _cmd, aClass)
{
    var signature = (self.isa.method_msgSend["methodSignatureForSelector:"] || _objj_forward)(self, (self.isa.method_dtable["methodSignatureForSelector:"], "methodSignatureForSelector:"), _cmd),
        invocation = (CPInvocation.isa.method_msgSend["invocationWithMethodSignature:"] || _objj_forward)(CPInvocation, (CPInvocation.isa.method_dtable["invocationWithMethodSignature:"], "invocationWithMethodSignature:"), signature);
    (self.isa.method_msgSend["forwardInvocation:"] || _objj_forward)(self, (self.isa.method_dtable["forwardInvocation:"], "forwardInvocation:"), invocation);
    return (invocation == null ? null : (invocation.isa.method_msgSend["returnValue"] || _objj_forward)(invocation, (invocation.isa.method_dtable["returnValue"], "returnValue")));
}

,["BOOL","Class"]), new objj_method(sel_getUid("respondsToSelector:"), function $CPProxy__respondsToSelector_(self, _cmd, aSelector)
{
    var signature = (self.isa.method_msgSend["methodSignatureForSelector:"] || _objj_forward)(self, (self.isa.method_dtable["methodSignatureForSelector:"], "methodSignatureForSelector:"), _cmd),
        invocation = (CPInvocation.isa.method_msgSend["invocationWithMethodSignature:"] || _objj_forward)(CPInvocation, (CPInvocation.isa.method_dtable["invocationWithMethodSignature:"], "invocationWithMethodSignature:"), signature);
    (self.isa.method_msgSend["forwardInvocation:"] || _objj_forward)(self, (self.isa.method_dtable["forwardInvocation:"], "forwardInvocation:"), invocation);
    return (invocation == null ? null : (invocation.isa.method_msgSend["returnValue"] || _objj_forward)(invocation, (invocation.isa.method_dtable["returnValue"], "returnValue")));
}

,["BOOL","SEL"]), new objj_method(sel_getUid("description"), function $CPProxy__description(self, _cmd)
{
    return "<" + class_getName(self.isa) + " 0x" + (CPString.isa.method_msgSend["stringWithHash:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithHash:"], "stringWithHash:"), (self.isa.method_msgSend["UID"] || _objj_forward)(self, (self.isa.method_dtable["UID"], "UID"))) + ">";
}

,["CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("load"), function $CPProxy__load(self, _cmd)
{
}

,["void"]), new objj_method(sel_getUid("initialize"), function $CPProxy__initialize(self, _cmd)
{
}

,["void"]), new objj_method(sel_getUid("class"), function $CPProxy__class(self, _cmd)
{
    return self;
}

,["Class"]), new objj_method(sel_getUid("alloc"), function $CPProxy__alloc(self, _cmd)
{
    return class_createInstance(self);
}

,["id"]), new objj_method(sel_getUid("respondsToSelector:"), function $CPProxy__respondsToSelector_(self, _cmd, selector)
{
    return !!class_getInstanceMethod(isa, aSelector);
}

,["BOOL","SEL"])]);
}
p;14;CPDictionary.jt;68828;@STATIC;1.0;i;9;CPArray.ji;14;CPEnumerator.ji;13;CPException.ji;8;CPNull.ji;10;CPObject.jS;41972;;26751;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPEnumerator.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPNull.j", YES);objj_executeFile("CPObject.j", YES);var CPDictionaryMaxDescriptionRecursion = 10;

{var the_class = objj_allocateClassPair(CPObject, "CPDictionary"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithDictionary:"), function $CPDictionary__initWithDictionary_(self, _cmd, aDictionary)
{
    var key = "",
        dictionary = ((___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, (CPDictionary.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    for (key in aDictionary._buckets)
        (dictionary == null ? null : (dictionary.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(dictionary, (dictionary.isa.method_dtable["setObject:forKey:"], dictionary.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), (aDictionary == null ? null : (aDictionary.isa.method_msgSend["objectForKey:"] || _objj_forward)(aDictionary, (aDictionary.isa.method_dtable["objectForKey:"], "objectForKey:"), key)), key));
    return dictionary;
    var ___r1;
}

,["id","CPDictionary"]), new objj_method(sel_getUid("initWithObjects:forKeys:"), function $CPDictionary__initWithObjects_forKeys_(self, _cmd, objects, keyArray)
{
    self = (objj_getClass("CPDictionary").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    var i = (keyArray == null ? null : (keyArray.isa.method_msgSend["count"] || _objj_forward)(keyArray, (keyArray.isa.method_dtable["count"], "count")));
    if ((objects == null ? null : (objects.isa.method_msgSend["count"] || _objj_forward)(objects, (objects.isa.method_dtable["count"], "count"))) != i)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "Counts are different.(%d != %d)", (objects == null ? null : (objects.isa.method_msgSend["count"] || _objj_forward)(objects, (objects.isa.method_dtable["count"], "count"))), (keyArray == null ? null : (keyArray.isa.method_msgSend["count"] || _objj_forward)(keyArray, (keyArray.isa.method_dtable["count"], "count")))));
    if (self)
    {
        while (i--)
        {
            var value = objects[i],
                key = keyArray[i];
            if (value === nil)
                (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "Attempt to insert nil object from objects[" + i + "]");
            if (key === nil)
                (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "Attempt to insert nil key from keys[" + i + "]");
            (self == null ? null : (self.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["setObject:forKey:"], self.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), value, key));
        }
    }
    return self;
}

,["id","CPArray","CPArray"]), new objj_method(sel_getUid("initWithObjectsAndKeys:"), function $CPDictionary__initWithObjectsAndKeys_(self, _cmd, firstObject)
{
    var argCount = arguments.length;
    if (argCount % 2 !== 0)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "Key-value count is mismatched. (" + argCount + " arguments passed)");
    self = (objj_getClass("CPDictionary").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        while (argCount-- > 2)
        {
            var key = arguments[argCount--],
                value = arguments[argCount];
            if (value === nil)
                (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "Attempt to insert nil object from objects[" + (argCount / 2 - 1) + "]");
            if (key === nil)
                (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "Attempt to insert nil key from keys[" + (argCount / 2 - 1) + "]");
            (self == null ? null : (self.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["setObject:forKey:"], self.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), value, key));
        }
    }
    return self;
}

,["id","id"]), new objj_method(sel_getUid("copy"), function $CPDictionary__copy(self, _cmd)
{
    return (CPDictionary.isa.method_msgSend["dictionaryWithDictionary:"] || _objj_forward)(CPDictionary, (CPDictionary.isa.method_dtable["dictionaryWithDictionary:"], "dictionaryWithDictionary:"), self);
}

,["CPDictionary"]), new objj_method(sel_getUid("count"), function $CPDictionary__count(self, _cmd)
{
    return self._count;
}

,["int"]), new objj_method(sel_getUid("allKeys"), function $CPDictionary__allKeys(self, _cmd)
{
    return ((___r1 = self._keys), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
    var ___r1;
}

,["CPArray"]), new objj_method(sel_getUid("allValues"), function $CPDictionary__allValues(self, _cmd)
{
    var keys = self._keys,
        index = keys.length,
        values = [];
    while (index--)
        values.push(self.valueForKey(keys[index]));
    return values;
}

,["CPArray"]), new objj_method(sel_getUid("allKeysForObject:"), function $CPDictionary__allKeysForObject_(self, _cmd, anObject)
{
    var keys = self._keys,
        count = keys.length,
        index = 0,
        matchingKeys = [],
        key = nil,
        value = nil;
    for (; index < count; ++index)
    {
        key = keys[index];
        value = self._buckets[key];
        if (value.isa && anObject && anObject.isa && (value == null ? null : (value.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(value, (value.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("isEqual:"))) && (value == null ? null : (value.isa.method_msgSend["isEqual:"] || _objj_forward)(value, (value.isa.method_dtable["isEqual:"], "isEqual:"), anObject)))
            matchingKeys.push(key);
        else if (value === anObject)
            matchingKeys.push(key);
    }
    return matchingKeys;
}

,["CPArray","id"]), new objj_method(sel_getUid("keysOfEntriesPassingTest:"), function $CPDictionary__keysOfEntriesPassingTest_(self, _cmd, predicate)
{
    return (self.isa.method_msgSend["keysOfEntriesWithOptions:passingTest:"] || _objj_forward)(self, (self.isa.method_dtable["keysOfEntriesWithOptions:passingTest:"], self.isa.method_dtable["keysOfEntriesWithOptions:passingTest:"], "keysOfEntriesWithOptions:passingTest:"), CPEnumerationNormal, predicate);
}

,["CPArray","Function"]), new objj_method(sel_getUid("keysOfEntriesWithOptions:passingTest:"), function $CPDictionary__keysOfEntriesWithOptions_passingTest_(self, _cmd, options, predicate)
{
    var keys = self._keys;
    if (options & CPEnumerationReverse)
    {
        var index = (keys == null ? null : (keys.isa.method_msgSend["count"] || _objj_forward)(keys, (keys.isa.method_dtable["count"], "count"))) - 1,
            stop = -1,
            increment = -1;
    }
    else
    {
        var index = 0,
            stop = (keys == null ? null : (keys.isa.method_msgSend["count"] || _objj_forward)(keys, (keys.isa.method_dtable["count"], "count"))),
            increment = 1;
    }
    var matchingKeys = [],
        key = nil,
        value = nil,
        shouldStop = NO,
        stopRef = function(__input) { if (arguments.length) return shouldStop = __input; return shouldStop; };
    for (; index !== stop; index += increment)
    {
        key = keys[index];
        value = self._buckets[key];
        if (predicate(key, value, stopRef))
            matchingKeys.push(key);
        if (shouldStop)
            break;
    }
    return matchingKeys;
}

,["CPArray","CPEnumerationOptions","Function"]), new objj_method(sel_getUid("keysSortedByValueUsingComparator:"), function $CPDictionary__keysSortedByValueUsingComparator_(self, _cmd, comparator)
{
    return ((___r1 = (self.isa.method_msgSend["allKeys"] || _objj_forward)(self, (self.isa.method_dtable["allKeys"], "allKeys"))), ___r1 == null ? null : (___r1.isa.method_msgSend["sortedArrayUsingFunction:"] || _objj_forward)(___r1, "sortedArrayUsingFunction:",     function(a, b)
    {
        a = (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), a);
        b = (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), b);
        return comparator(a, b);
    }));
    var ___r1;
}

,["CPArray","Function"]), new objj_method(sel_getUid("keysSortedByValueUsingSelector:"), function $CPDictionary__keysSortedByValueUsingSelector_(self, _cmd, theSelector)
{
    return ((___r1 = (self.isa.method_msgSend["allKeys"] || _objj_forward)(self, (self.isa.method_dtable["allKeys"], "allKeys"))), ___r1 == null ? null : (___r1.isa.method_msgSend["sortedArrayUsingFunction:"] || _objj_forward)(___r1, "sortedArrayUsingFunction:",     function(a, b)
    {
        a = (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), a);
        b = (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), b);
        return (a == null ? null : (a.isa.method_msgSend["performSelector:withObject:"] || _objj_forward)(a, (a.isa.method_dtable["performSelector:withObject:"], a.isa.method_dtable["performSelector:withObject:"], "performSelector:withObject:"), theSelector, b));
    }));
    var ___r1;
}

,["CPArray","SEL"]), new objj_method(sel_getUid("keyEnumerator"), function $CPDictionary__keyEnumerator(self, _cmd)
{
    return ((___r1 = self._keys), ___r1 == null ? null : (___r1.isa.method_msgSend["objectEnumerator"] || _objj_forward)(___r1, "objectEnumerator"));
    var ___r1;
}

,["CPEnumerator"]), new objj_method(sel_getUid("objectEnumerator"), function $CPDictionary__objectEnumerator(self, _cmd)
{
    return ((___r1 = (_CPDictionaryValueEnumerator == null ? null : (_CPDictionaryValueEnumerator.isa.method_msgSend["alloc"] || _objj_forward)(_CPDictionaryValueEnumerator, (_CPDictionaryValueEnumerator.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithDictionary:"] || _objj_forward)(___r1, "initWithDictionary:", self));
    var ___r1;
}

,["CPEnumerator"]), new objj_method(sel_getUid("isEqualToDictionary:"), function $CPDictionary__isEqualToDictionary_(self, _cmd, aDictionary)
{
    if (self === aDictionary)
        return YES;
    var count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"));
    if (count !== (aDictionary == null ? null : (aDictionary.isa.method_msgSend["count"] || _objj_forward)(aDictionary, (aDictionary.isa.method_dtable["count"], "count"))))
        return NO;
    var index = count,
        keys = self._keys;
    while (index--)
    {
        var currentKey = keys[index],
            lhsObject = self._buckets[currentKey],
            rhsObject = aDictionary._buckets[currentKey];
        if (lhsObject === rhsObject)
            continue;
        if (lhsObject && lhsObject.isa && rhsObject && rhsObject.isa && (lhsObject == null ? null : (lhsObject.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(lhsObject, (lhsObject.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("isEqual:"))) && (lhsObject == null ? null : (lhsObject.isa.method_msgSend["isEqual:"] || _objj_forward)(lhsObject, (lhsObject.isa.method_dtable["isEqual:"], "isEqual:"), rhsObject)))
            continue;
        return NO;
    }
    return YES;
}

,["BOOL","CPDictionary"]), new objj_method(sel_getUid("isEqual:"), function $CPDictionary__isEqual_(self, _cmd, anObject)
{
    if (self === anObject)
        return YES;
    if (!(anObject == null ? null : (anObject.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPDictionary.isa.method_msgSend["class"] || _objj_forward)(CPDictionary, (CPDictionary.isa.method_dtable["class"], "class")))))
        return NO;
    return (self.isa.method_msgSend["isEqualToDictionary:"] || _objj_forward)(self, (self.isa.method_dtable["isEqualToDictionary:"], "isEqualToDictionary:"), anObject);
}

,["BOOL","id"]), new objj_method(sel_getUid("objectForKey:"), function $CPDictionary__objectForKey_(self, _cmd, aKey)
{
    var object = self._buckets[aKey];
    return object === undefined ? nil : object;
}

,["id","id"]), new objj_method(sel_getUid("removeAllObjects"), function $CPDictionary__removeAllObjects(self, _cmd)
{
    self.removeAllValues();
}

,["void"]), new objj_method(sel_getUid("removeObjectForKey:"), function $CPDictionary__removeObjectForKey_(self, _cmd, aKey)
{
    self.removeValueForKey(aKey);
}

,["void","id"]), new objj_method(sel_getUid("removeObjectsForKeys:"), function $CPDictionary__removeObjectsForKeys_(self, _cmd, keysForRemoval)
{
    var index = keysForRemoval.length;
    while (index--)
        (self.isa.method_msgSend["removeObjectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["removeObjectForKey:"], "removeObjectForKey:"), keysForRemoval[index]);
}

,["void","CPArray"]), new objj_method(sel_getUid("setObject:forKey:"), function $CPDictionary__setObject_forKey_(self, _cmd, anObject, aKey)
{
    if (aKey === nil)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "key cannot be nil");
    if (anObject === nil)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "object cannot be nil (key: " + aKey + ")");
    self.setValueForKey(aKey, anObject);
}

,["void","id","id"]), new objj_method(sel_getUid("addEntriesFromDictionary:"), function $CPDictionary__addEntriesFromDictionary_(self, _cmd, aDictionary)
{
    if (!aDictionary)
        return;
    var keys = (aDictionary == null ? null : (aDictionary.isa.method_msgSend["allKeys"] || _objj_forward)(aDictionary, (aDictionary.isa.method_dtable["allKeys"], "allKeys"))),
        index = (keys == null ? null : (keys.isa.method_msgSend["count"] || _objj_forward)(keys, (keys.isa.method_dtable["count"], "count")));
    while (index--)
    {
        var key = keys[index];
        (self.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(self, (self.isa.method_dtable["setObject:forKey:"], self.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), (aDictionary == null ? null : (aDictionary.isa.method_msgSend["objectForKey:"] || _objj_forward)(aDictionary, (aDictionary.isa.method_dtable["objectForKey:"], "objectForKey:"), key)), key);
    }
}

,["void","CPDictionary"]), new objj_method(sel_getUid("description"), function $CPDictionary__description(self, _cmd)
{
    var string = "@{",
        keys = (self.isa.method_msgSend["allKeys"] || _objj_forward)(self, (self.isa.method_dtable["allKeys"], "allKeys")),
        index = 0,
        count = self._count;
    keys.sort();
    for (; index < count; ++index)
    {
        if (index === 0)
            string += "\n";
        var key = keys[index],
            value = self.valueForKey(key);
        string += "    @\"" + key + "\": " + ((CPDescriptionOfObject(value, CPDictionaryMaxDescriptionRecursion)).split("\n")).join("\n    ") + (index + 1 < count ? "," : "") + "\n";
    }
    return string + "}";
}

,["CPString"]), new objj_method(sel_getUid("containsKey:"), function $CPDictionary__containsKey_(self, _cmd, aKey)
{
    var value = (self.isa.method_msgSend["objectForKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey);
    return value !== nil && value !== undefined;
}

,["BOOL","id"]), new objj_method(sel_getUid("enumerateKeysAndObjectsUsingBlock:"), function $CPDictionary__enumerateKeysAndObjectsUsingBlock_(self, _cmd, aFunction)
{
    var shouldStop = NO,
        shouldStopRef = function(__input) { if (arguments.length) return shouldStop = __input; return shouldStop; },
        keys = self._keys,
        count = self._count;
    for (var index = 0; index < count; index++)
    {
        var key = keys[index],
            value = self.valueForKey(key);
        aFunction(key, value, shouldStopRef);
        if (shouldStop)
            return;
    }
}

,["void","Function"]), new objj_method(sel_getUid("enumerateKeysAndObjectsWithOptions:usingBlock:"), function $CPDictionary__enumerateKeysAndObjectsWithOptions_usingBlock_(self, _cmd, opts, aFunction)
{
    (self.isa.method_msgSend["enumerateKeysAndObjectsUsingBlock:"] || _objj_forward)(self, (self.isa.method_dtable["enumerateKeysAndObjectsUsingBlock:"], "enumerateKeysAndObjectsUsingBlock:"), aFunction);
}

,["void","CPEnumerationOptions","Function"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPDictionary__alloc(self, _cmd)
{
    var result = new CFMutableDictionary();
    result.isa = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"));
    return result;
}

,["id"]), new objj_method(sel_getUid("dictionary"), function $CPDictionary__dictionary(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("dictionaryWithDictionary:"), function $CPDictionary__dictionaryWithDictionary_(self, _cmd, aDictionary)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithDictionary:"] || _objj_forward)(___r1, "initWithDictionary:", aDictionary));
    var ___r1;
}

,["id","CPDictionary"]), new objj_method(sel_getUid("dictionaryWithObject:forKey:"), function $CPDictionary__dictionaryWithObject_forKey_(self, _cmd, anObject, aKey)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", [anObject], [aKey]));
    var ___r1;
}

,["id","id","id"]), new objj_method(sel_getUid("dictionaryWithObjects:forKeys:"), function $CPDictionary__dictionaryWithObjects_forKeys_(self, _cmd, objects, keys)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", objects, keys));
    var ___r1;
}

,["id","CPArray","CPArray"]), new objj_method(sel_getUid("dictionaryWithJSObject:"), function $CPDictionary__dictionaryWithJSObject_(self, _cmd, object)
{
    return (self.isa.method_msgSend["dictionaryWithJSObject:recursively:"] || _objj_forward)(self, (self.isa.method_dtable["dictionaryWithJSObject:recursively:"], self.isa.method_dtable["dictionaryWithJSObject:recursively:"], "dictionaryWithJSObject:recursively:"), object, NO);
}

,["id","JSObject"]), new objj_method(sel_getUid("dictionaryWithJSObject:recursively:"), function $CPDictionary__dictionaryWithJSObject_recursively_(self, _cmd, object, recursively)
{
    var key = "",
        dictionary = ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    for (key in object)
    {
        if (!object.hasOwnProperty(key))
            continue;
        var value = object[key];
        if (value === null)
        {
            (dictionary == null ? null : (dictionary.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(dictionary, (dictionary.isa.method_dtable["setObject:forKey:"], dictionary.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null")), key));
            continue;
        }
        if (recursively)
        {
            if (value.constructor === Object)
                value = (CPDictionary.isa.method_msgSend["dictionaryWithJSObject:recursively:"] || _objj_forward)(CPDictionary, (CPDictionary.isa.method_dtable["dictionaryWithJSObject:recursively:"], CPDictionary.isa.method_dtable["dictionaryWithJSObject:recursively:"], "dictionaryWithJSObject:recursively:"), value, YES);
            else if ((value == null ? null : (value.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(value, (value.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), CPArray)))
            {
                var newValue = [],
                    i = 0,
                    count = value.length;
                for (; i < count; i++)
                {
                    var thisValue = value[i];
                    if (thisValue === null)
                    {
                        newValue.push((CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null")));
                    }
                    else
                    {
                        if (thisValue.constructor === Object)
                            newValue.push((CPDictionary.isa.method_msgSend["dictionaryWithJSObject:recursively:"] || _objj_forward)(CPDictionary, (CPDictionary.isa.method_dtable["dictionaryWithJSObject:recursively:"], CPDictionary.isa.method_dtable["dictionaryWithJSObject:recursively:"], "dictionaryWithJSObject:recursively:"), thisValue, YES));
                        else
                            newValue.push(thisValue);
                    }
                }
                value = newValue;
            }
        }
        (dictionary == null ? null : (dictionary.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(dictionary, (dictionary.isa.method_dtable["setObject:forKey:"], dictionary.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), value, key));
    }
    return dictionary;
    var ___r1;
}

,["id","JSObject","BOOL"]), new objj_method(sel_getUid("dictionaryWithObjectsAndKeys:"), function $CPDictionary__dictionaryWithObjectsAndKeys_(self, _cmd, firstObject)
{
    arguments[0] = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"));
    arguments[1] = sel_getUid("initWithObjectsAndKeys:");
    return objj_msgSend.apply(this, arguments);
}

,["id","id"])]);
}
{
var the_class = objj_getClass("CPDictionary")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPDictionary\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPDictionary__initWithCoder_(self, _cmd, aCoder)
{
    return (aCoder == null ? null : (aCoder.isa.method_msgSend["_decodeDictionaryOfObjectsForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["_decodeDictionaryOfObjectsForKey:"], "_decodeDictionaryOfObjectsForKey:"), "CP.objects"));
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPDictionary__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["_encodeDictionaryOfObjects:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["_encodeDictionaryOfObjects:forKey:"], aCoder.isa.method_dtable["_encodeDictionaryOfObjects:forKey:"], "_encodeDictionaryOfObjects:forKey:"), self, "CP.objects"));
}

,["void","CPCoder"])]);
}

{var the_class = objj_allocateClassPair(CPEnumerator, "_CPDictionaryValueEnumerator"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_keyEnumerator", "CPEnumerator"), new objj_ivar("_dictionary", "CPDictionary")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithDictionary:"), function $_CPDictionaryValueEnumerator__initWithDictionary_(self, _cmd, aDictionary)
{
    self = (objj_getClass("_CPDictionaryValueEnumerator").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._keyEnumerator = (aDictionary == null ? null : (aDictionary.isa.method_msgSend["keyEnumerator"] || _objj_forward)(aDictionary, (aDictionary.isa.method_dtable["keyEnumerator"], "keyEnumerator")));
        self._dictionary = aDictionary;
    }
    return self;
}

,["id","CPDictionary"]), new objj_method(sel_getUid("nextObject"), function $_CPDictionaryValueEnumerator__nextObject(self, _cmd)
{
    var key = ((___r1 = self._keyEnumerator), ___r1 == null ? null : (___r1.isa.method_msgSend["nextObject"] || _objj_forward)(___r1, (self._keyEnumerator.isa.method_dtable["nextObject"], "nextObject")));
    if (key === nil)
        return nil;
    return ((___r1 = self._dictionary), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._dictionary.isa.method_dtable["objectForKey:"], "objectForKey:"), key));
    var ___r1;
}

,["id"])]);
}

{var the_class = objj_allocateClassPair(CPDictionary, "CPMutableDictionary"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
}
CFDictionary.prototype.isa = CPDictionary;
CFMutableDictionary.prototype.isa = CPMutableDictionary;
p;11;CPRunLoop.jt;49614;@STATIC;1.0;i;9;CPArray.ji;8;CPDate.ji;10;CPObject.ji;10;CPString.jS;30348;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQUnVuTG9vcC5qIl0sIm5hbWVzIjpbInNlbGYiXSwibWFwcGluZ3MiOiI7O0FBc0JBLGtCLGlCQUNBLGtCLGdCQUNBLGtCLGtCQUNBLGtCLGtCQU1BLG9CLEdBQTBCLHNCQUExQjsyQkFFQSxRLENBQWtDLEcsRUFBSyxHO0FBQ3ZDO0lBQ0ksTSxDQUFPLENBQUMsR0FBRCxtQkFBQyxHQUFELCtDQUFDLEdBQUQsR0FBSyw4QkFBTCxZLENBQUEsQyxDQUFjLENBQUMsR0FBRCxtQkFBQyxHQUFELCtDQUFDLEdBQUQsR0FBSyw4QkFBTCxZO0FBRHpCLEM7QUFJQSxJQUFJLHFCLEdBQWtDLEM7SUFDbEMsNkIsR0FBa0MsQ0FEdEM7QUFJQTtBQUFBO0FBQUEsMkIsMkJBQUEsbUMsRUFBQSw4QixFQUFBLGlDLEVBQUEsZ0MsRUFBQSxtQyxFQUFBLHlDLEVBQUEsaUM7NkJBMkRBLDRCLHdJQUE0QixTLEVBQXNCLE8sRUFBcUIsVSxFQUEyQixPLEVBQXVCLEs7QUFDekg7SUFDSUEsSSxHQUFPLEMsOENBQUEsZ0IsSUFBQSxrQ0FBUDtJQUVBLElBQUlBLElBQUo7SUFDQTtRQUNJLGMsR0FBWSxTQUFaO1FBQ0EsWSxHQUFVLE9BQVY7UUFDQSxjLEdBQVksVUFBWjtRQUNBLFcsR0FBUyxPQUFUO1FBQ0Esa0IsR0FBZ0IsS0FBaEI7UUFDQSxhLEdBQVcsR0FBWDtJQU5KLEM7SUFTQSxNLENBQU9BLEk7QUFiWCxDOztnREFnQkEsNEIsb0hBQThCLE0sRUFBb0IsVSxFQUEyQixPLEVBQXVCLEs7QUFDcEc7SUFDSUEsSSxHQUFPLEMsOENBQUEsZ0IsSUFBQSxrQ0FBUDtJQUVBLElBQUlBLElBQUo7SUFDQTtRQUNJLFcsR0FBUyxNQUFUO1FBQ0EsYyxHQUFZLFVBQVo7UUFDQSxXLEdBQVMsT0FBVDtRQUNBLGtCLEdBQWdCLEtBQWhCO1FBQ0EsYSxHQUFXLEdBQVg7SUFMSixDO0lBUUEsTSxDQUFPQSxJO0FBWlgsQzs7K0NBZUEsNEI7QUFDQTtJQUNJLE0sQ0FBTyxjO0FBRFgsQzs7V0FJQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLFk7QUFEWCxDOztVQUlBLDRCO0FBQ0E7SUFDSSxNLENBQU8sYztBQURYLEM7O1VBSUEsNEI7QUFDQTtJQUNJLE0sQ0FBTyxXO0FBRFgsQzs7Z0JBSUEsNEIsb0VBQTZCLFk7QUFDN0I7SUFDSSxJQUFJLENBQUMsYUFBTDtRQUNJLE0sQ0FBTyxHO0lBRVgsSUFBSSxVQUFDLGtCQUFELGlHQUFlLHVEQUFmLHNCQUE4QixZQUE5QixFQUFKO0lBQ0E7UUFDSSxJQUFJLFdBQUo7WUFDSSxXLENBQU8sYyxDQUFQO1FBREo7WUFHSSxVQUFDLFlBQUQsNkdBQVMsNkRBQVQsRUFBbUMsNkRBQW5DLGtDQUF5QixjQUF6QixFQUE4QyxjQUE5QztRQUVKLE0sQ0FBTyxHO0lBTlgsQztJQVNBLE0sQ0FBTyxFOztBQWRYLEM7O3VCQWlCQSw0QjtBQUNBO0lBQ0ksYSxHQUFXLEVBQVg7QUFESixDOzs7OEJBeEhBLDRCLHdFQUF3QyxRO0FBQ3hDO0lBQ0ksSUFBSSxDQUFDLFEsSUFBWSxzQkFBc0IsTSxDQUF0QixFLENBQWdDLDZCQUFqRDtRQUNJLE07SUFFSixzQkFBc0IsSSxDQUFLLFEsQ0FBM0I7QUFKSixDOztnQ0FPQSw0Qiw4SUFBOEMsUyxFQUFxQixPLEVBQXFCLFUsRUFBMkIsTyxFQUF1QixLO0FBQzFJO0lBQ0ksSUFBSSxzQkFBc0IsTUFBMUI7SUFDQTtRQUNJLElBQUksTyxHQUFVLHNCQUFzQixHLEVBQXBDO1FBRUEsUUFBUSxNLEdBQVMsR0FBakI7UUFDQSxRQUFRLE8sR0FBVSxPQUFsQjtRQUNBLFFBQVEsUyxHQUFZLFNBQXBCO1FBQ0EsUUFBUSxTLEdBQVksVUFBcEI7UUFDQSxRQUFRLE0sR0FBUyxPQUFqQjtRQUNBLFFBQVEsYSxHQUFnQixLQUF4QjtRQUNBLFFBQVEsUSxHQUFXLEdBQW5CO1FBRUEsTSxDQUFPLE87SUFYWCxDO0lBY0EsTSxDQUFPLFVBQUMsQ0FBQ0EsSUFBRCwrQ0FBQ0EsSUFBRCxHQUFNLCtCQUFOLFdBQUQsK0tBQStCLFNBQS9CLEVBQWdELE9BQWhELEVBQWlFLFVBQWpFLEVBQWtGLE9BQWxGLEVBQWdHLEtBQWhHLEU7O0FBaEJYLEM7OzhEQW1CQSw0QiwwSEFBZ0QsTSxFQUFvQixVLEVBQTJCLE8sRUFBdUIsSztBQUN0SDtJQUNJLElBQUksc0JBQXNCLE1BQTFCO0lBQ0E7UUFDSSxJQUFJLE8sR0FBVSxzQkFBc0IsRyxFQUFwQztRQUVBLFFBQVEsTyxHQUFVLEdBQWxCO1FBQ0EsUUFBUSxTLEdBQVksR0FBcEI7UUFDQSxRQUFRLE0sR0FBUyxNQUFqQjtRQUNBLFFBQVEsUyxHQUFZLFVBQXBCO1FBQ0EsUUFBUSxNLEdBQVMsT0FBakI7UUFDQSxRQUFRLGEsR0FBZ0IsS0FBeEI7UUFDQSxRQUFRLFEsR0FBVyxHQUFuQjtRQUVBLE0sQ0FBTyxPO0lBWFgsQztJQWNBLE0sQ0FBTyxVQUFDLENBQUNBLElBQUQsK0NBQUNBLElBQUQsR0FBTSwrQkFBTixXQUFELDJKQUE0QixNQUE1QixFQUE0QyxVQUE1QyxFQUE2RCxPQUE3RCxFQUEyRSxLQUEzRSxFOztBQWhCWCxDOzs7O0FBaUdBLElBQUksMEIsR0FBNkIsQ0FBakM7QUFXQTtBQUFBO0FBQUEsMkIsMkJBQUEscUMsRUFBQSwwQyxFQUFBLGdELEVBQUEsc0QsRUFBQSxxQyxFQUFBLHlDLEVBQUEsNEMsRUFBQSw4QyxFQUFBLHNDOzZCQTBCQSw0QjtBQUNBO0lBQ0lBLEksR0FBTyxDLHNDQUFBLGdCLElBQUEsa0NBQVA7SUFFQSxJQUFJQSxJQUFKO0lBQ0E7UUFDSSxxQixHQUFtQixDLENBQW5CO1FBRUEsb0IsR0FBa0IsQyxDQUFsQjtRQUNBLDBCLEdBQXdCLEMsQ0FBeEI7UUFDQSxnQyxHQUE4QixDLENBQTlCO1FBQ0EsZSxHQUFhLEdBQWI7SUFOSixDO0lBU0EsTSxDQUFPQSxJO0FBYlgsQzs7VUF3Q0EsNEIsOEhBQTZCLFMsRUFBcUIsTyxFQUFxQixVLEVBQXNCLE8sRUFBdUIsSztBQUNwSDtJQUNJLElBQUksTyxHQUFVLENBQUMsaUJBQUQsMEZBQUMsaUJBQUQsR0FBbUIsdUZBQW5CLEVBQWlELHVGQUFqRCxFQUFnRSx1RkFBaEUsRUFBb0YsdUZBQXBGLEVBQWtHLHVGQUFsRyx1REFBdUMsU0FBdkMsRUFBd0QsT0FBeEQsRUFBeUUsVUFBekUsRUFBMEYsT0FBMUYsRUFBd0csS0FBeEcsQztRQUNWLEssR0FBUSxzQkFBaUIsTUFEN0I7SUFJQSxPQUFPLEs7UUFDSCxJQUFJLE8sQ0FBQSxDLENBQVUsVUFBQyxzQkFBaUIsSyxDQUFsQiwrRkFBZDtZQUNJO0lBRVIsc0JBQWlCLE0sQ0FBTyxLLENBQUEsQyxDQUFRLEMsRUFBRyxDLEVBQUcsTyxDQUF0Qzs7QUFUSixDOzs0Q0FnQkEsNEIsMEdBQStCLE0sRUFBb0IsVSxFQUFzQixPLEVBQXVCLEs7QUFDaEc7SUFDSSxJQUFJLE8sR0FBVSxDQUFDLGlCQUFELGdGQUFDLGlCQUFELEdBQW1CLDZFQUFuQixFQUEyQyw2RUFBM0MsRUFBK0QsNkVBQS9ELEVBQTZFLDZFQUE3RSw2Q0FBb0MsTUFBcEMsRUFBb0QsVUFBcEQsRUFBcUUsT0FBckUsRUFBbUYsS0FBbkYsQztRQUNWLEssR0FBUSxzQkFBaUIsTUFEN0I7SUFJQSxPQUFPLEs7UUFDSCxJQUFJLE8sQ0FBQSxDLENBQVUsVUFBQyxzQkFBaUIsSyxDQUFsQiwrRkFBZDtZQUNJO0lBRVIsc0JBQWlCLE0sQ0FBTyxLLENBQUEsQyxDQUFRLEMsRUFBRyxDLEVBQUcsTyxDQUF0Qzs7QUFUSixDOzs0Q0FrQkEsNEIsa0hBQW1DLFMsRUFBcUIsTyxFQUFxQixVO0FBQzdFO0lBQ0ksSUFBSSxLLEdBQVEsc0JBQWlCLE1BQTdCO0lBRUEsT0FBTyxLO0lBQ1A7UUFDSSxJQUFJLE8sR0FBVSxzQkFBaUIsSyxDQUEvQjtRQUVBLElBQUksQ0FBQyxPQUFELG1CQUFDLE9BQUQsa0RBQUMsT0FBRCxHQUFTLHFDQUFULGUsQ0FBQSxHLENBQXVCLFMsSUFBYSxDQUFDLE9BQUQsbUJBQUMsT0FBRCxnREFBQyxPQUFELEdBQVMsbUNBQVQsYSxDQUFBLEUsQ0FBb0IsTyxJQUFXLENBQUMsT0FBRCxtQkFBQyxPQUFELGtEQUFDLE9BQUQsR0FBUyxxQ0FBVCxlLENBQUEsRSxDQUFzQixVQUE3RjtZQUNJLFVBQUMsc0JBQWlCLEssQ0FBbEI7SUFKUixDOztBQUpKLEM7OzRCQWVBLDRCO0FBQ0E7SUFDSSxDQUFDQSxJQUFELDJEQUFDQSxJQUFELEdBQU0sMkNBQU4sd0JBQXVCLG9CQUF2QjtBQURKLEM7O1lBT0EsNEIsd0VBQTBCLE0sRUFBeUIsSztBQUNuRDtJQUVJLElBQUkscUJBQWdCLEssQ0FBcEI7UUFDSSxxQkFBZ0IsSyxDQUFoQixDQUF1QixJLENBQUssTSxDQUE1QjtJQURKO1FBR0kscUJBQWdCLEssSUFBUyxDQUFDLE0sQ0FBMUI7SUFFSixpQixHQUFlLEdBQWY7SUFFQSxJQUFJLENBQUMsT0FBTywyQkFBWjtRQUNJLE9BQU8sMkIsR0FBOEIsQyxDQUFyQztJQUVKLE9BQU8sMkJBQVAsQ0FBbUMsSyxJQUFTLDBCQUE1QztJQUdBLElBQUksVUFBQyxTQUFTLFksRUFBVixpSEFBdUMsU0FBdkMsRSxDQUFBLEcsQ0FBd0QsVUFBNUQ7SUFDQTtRQUNJLElBQUksQ0FBQywyQkFBTDtZQUNJLDJCLEdBQXlCLE9BQU8sZ0IsYUFBaUIsUTtZQUNqRDtnQkFDSSxDQUFDQSxJQUFELDJEQUFDQSxJQUFELEdBQU0sMkNBQU4sd0JBQXVCLG9CQUF2QjtZQURKLEMsRUFFRyxDLENBSEg7SUFGUixDOztBQWhCSixDOztpQ0E0QkEsNEIsd0VBQXFDLEs7QUFDckM7SUFFSSxJQUFJLGlCQUFKO1FBQ0ksTTtJQUVKLGlCLEdBQWUsR0FBZjtJQUdBLElBQUksVUFBQyxTQUFTLFksRUFBVixpSEFBdUMsU0FBdkMsRSxDQUFBLEcsQ0FBd0QsVUFBNUQ7SUFDQTtRQUNJLElBQUksMkJBQUo7UUFDQTtZQUNJLE9BQU8sa0IsQ0FBbUIsMkIsQ0FBMUI7WUFDQSwyQixHQUF5QixHQUF6QjtRQUZKLEM7SUFGSixDO0lBUUEsSUFBSSxHLEdBQU0sbUIsR0FBaUIsVUFBQyxtQkFBRCw0RkFBZ0IsbURBQWhCLGlCQUEwQixDQUFDLE1BQUQsOENBQUMsTUFBRCxHQUFRLGdDQUFSLFVBQTFCLEUsR0FBMkMsQ0FBQyxNQUFELDhDQUFDLE1BQUQsR0FBUSxnQ0FBUixVO1FBQ2xFLFksR0FBZSxHO1FBQ2YsaUIsR0FBb0IsaUNBQTRCLEssQ0FGcEQ7SUFNQSxJQUFJLGlCLElBQWdCLGlCLElBQXFCLGlCLENBQUEsRSxDQUFxQixHQUE5RDtJQUNBO1FBQ0ksaUIsR0FBZSxFQUFmO1FBR0EsSUFBSSwyQkFBc0IsSyxFQUF0QixHLENBQWlDLEdBQXJDO1FBQ0E7WUFDSSxPQUFPLGtCLENBQW1CLDJCQUFzQixLLEVBQWhEO1lBRUEsMkJBQXNCLEssSUFBUyxHQUEvQjtRQUhKLEM7UUFPQSxJQUFJLE0sR0FBUyxxQkFBZ0IsSztZQUN6QixLLEdBQVEsT0FBTyxNQURuQjtRQUdBLHFCQUFnQixLLElBQVMsR0FBekI7UUFJQSxJQUFJLGUsR0FBa0IsVUFBQyxTQUFTLFksRUFBVixpSEFBdUMsU0FBdkMsRSxDQUFBLEcsQ0FBd0QsVUFBOUU7UUFHQSxPQUFPLEs7UUFDUDtZQUNJLElBQUksSyxHQUFRLE9BQU8sSyxDQUFuQjtZQUVBLEksQ0FBSyxDQUFDLGUsSUFBbUIsTUFBTSwyQkFBTixDQUFrQyxLLEVBQWxDLEMsQ0FBMkMsMEIsS0FBK0IsTUFBTSxRLElBQVksTUFBTSxTLENBQU4sRSxDQUFtQixHQUF4STtnQkFDSSxDQUFDLEtBQUQsbUJBQUMsS0FBRCw4Q0FBQyxLQUFELEdBQU8sK0JBQVA7WUFHSixJQUFJLE1BQU0sUUFBVjtnQkFDSSxZLEdBQWdCLFksQ0FBRCxHLENBQWtCLEcsR0FBTyxNQUFNLFMsR0FBWSxDQUFDLFlBQUQsbUJBQUMsWUFBRCxzREFBQyxZQUFELEdBQWMsOENBQWQsbUJBQTBCLE1BQU0sU0FBaEMsRUFBMUQ7WUFESjtZQUlBO2dCQUVJLE1BQU0sMkJBQU4sQ0FBa0MsSyxJQUFTLENBQTNDO2dCQUVBLE9BQU8sTSxDQUFPLEssRUFBTyxDLENBQXJCO1lBSkosQztRQVhKLEM7UUFzQkEsSUFBSSxTLEdBQVkscUJBQWdCLEssQ0FBaEM7UUFFQSxJQUFJLFMsSUFBYSxVQUFVLE1BQTNCO1FBQ0E7WUFDSSxLLEdBQVEsVUFBVSxNQUFsQjtZQUVBLE9BQU8sSztZQUNQO2dCQUNJLElBQUksSyxHQUFRLFVBQVUsSyxDQUF0QjtnQkFFQSxJQUFJLENBQUMsS0FBRCxtQkFBQyxLQUFELGlEQUFDLEtBQUQsR0FBTyxrQ0FBUCxjQUFKO29CQUNJLFksR0FBZ0IsWSxDQUFELEcsQ0FBa0IsRyxHQUFPLE1BQU0sUyxHQUFZLENBQUMsWUFBRCxtQkFBQyxZQUFELHNEQUFDLFlBQUQsR0FBYyw4Q0FBZCxtQkFBMEIsTUFBTSxTQUFoQyxFQUExRDtnQkFESjtvQkFHSSxVQUFVLE0sQ0FBTyxLLEVBQU8sQyxDQUF4QjtZQU5SLEM7WUFTQSxxQkFBZ0IsSyxJQUFTLFVBQVUsTSxDQUFPLE0sQ0FBMUM7UUFiSixDO1FBREE7WUFpQkkscUJBQWdCLEssSUFBUyxNQUF6QjtRQUVKLGlDQUE0QixLLElBQVMsWUFBckM7UUFHQSxJQUFJLGlDQUE0QixLLEVBQTVCLEcsQ0FBdUMsR0FBM0M7WUFDSSwyQkFBc0IsSyxJQUFTLE9BQU8sZ0IsYUFBaUIsUTtZQUNuRDtnQkFDSSxtQixHQUFpQixZQUFqQjtnQkFDQSwyQkFBc0IsSyxJQUFTLEdBQS9CO2dCQUNBLEVBQUUsMEJBQUY7Z0JBQ0EsQ0FBQ0EsSUFBRCwyREFBQ0EsSUFBRCxHQUFNLDJDQUFOLHdCQUF1QixLQUF2QjtnQkFDQSxtQixHQUFpQixHQUFqQjtZQUxKLEMsRUFNRyxHLENBQUksQyxFQUFHLENBQUMsWUFBRCxtQkFBQyxZQUFELDhEQUFDLFlBQUQsR0FBYyxzREFBZCwyQixDQUFBLEMsQ0FBc0MsSSxFQVBwRDtJQXRFUixDO0lBaUZBLElBQUksUSxHQUFXLHFCO1FBQ1gsSyxHQUFRLFNBQVMsTUFEckI7SUFHQSxxQixHQUFtQixDLENBQW5CO0lBRUEsT0FBTyxLO0lBQ1A7UUFDSSxJQUFJLE8sR0FBVSxTQUFTLEssQ0FBdkI7UUFFQSxJQUFJLENBQUMsT0FBRCxtQkFBQyxPQUFELHFEQUFDLE9BQUQsR0FBUyx3Q0FBVCxrQkFBb0Isb0JBQXBCLEVBQUo7UUFDQTtZQUNJLENBQUMsaUJBQUQsdURBQUMsaUJBQUQsR0FBbUIsb0RBQW5CLG9CQUFnQyxPQUFoQztZQUVBLFNBQVMsTSxDQUFPLEssRUFBTyxDLENBQXZCO1FBSEosQztJQUpKLEM7SUFXQSxJQUFJLHNCQUFpQixNQUFyQjtJQUNBO1FBQ0kscUIsR0FBbUIsc0JBQWlCLE0sQ0FBTyxRLENBQTNDO1FBQ0Esc0JBQWlCLEksQ0FBSyx3QixDQUF0QjtJQUZKLEM7SUFEQTtRQU1JLHFCLEdBQW1CLFFBQW5CO0lBRUosSUFBSSxlQUFKO0lBQ0E7UUFDSSxJQUFJLEssR0FBUSxnQkFBVyxNQUF2QjtRQUNBLE9BQU0sSztRQUNOO1lBQ0ksSUFBSSxHLEdBQU0sZ0JBQVcsSyxDQUFyQjtZQUNBLElBQUksTyxFQUFKO1lBRUEsSUFBSSxDQUFDLElBQUksT0FBVDtnQkFDSSxnQkFBVyxNLENBQU8sSyxFQUFPLEMsQ0FBekI7UUFMUixDO0lBSEosQztJQVlBLGlCLEdBQWUsRUFBZjtJQUVBLE0sQ0FBTyxZOztBQWpKWCxDOzs7OEJBM0lBLDRCO0FBQ0E7SUFDSSxJQUFJQSxJLENBQUEsRyxDQUFTLENBQUMsU0FBRCwrQ0FBQyxTQUFELEdBQVcsb0NBQVgsV0FBYjtRQUNJLE07SUFFSixhLEdBQWdCLFVBQUMsQ0FBQyxTQUFELCtDQUFDLFNBQUQsR0FBVyxvQ0FBWCxXQUFELDZGQUFoQjs7QUFKSixDOztZQTJCQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLGE7QUFEWCxDOztpQkFPQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLGE7QUFEWCxDOzs7O29CQTRQQSxRLENBQTJCLFUsRUFBWSxPLEVBQVMsSyxFQUFPLE8sRUFBUyxPO0FBQ2hFO0lBQ0ksS0FBSyxVLEdBQWEsVUFBbEI7SUFDQSxLQUFLLE8sR0FBVSxPQUFmO0lBQ0EsS0FBSyxLLEdBQVEsS0FBYjtJQUNBLEtBQUssTyxHQUFVLE9BQWY7SUFDQSxLQUFLLE8sR0FBVSxPQUFmO0lBRUEsS0FBSyxPLEdBQVUsSUFBZjtBQVBKLEM7MEJBVUEsUSxDQUFpQyxVLEVBQVksTyxFQUFTLEssRUFBTyxPLEVBQVMsTztBQUN0RTtJQUNJLE0sQ0FBTyxJQUFJLGlCLENBQWtCLFUsRUFBWSxPLEVBQVMsSyxFQUFPLE8sRUFBUyxPO0FBRHRFLEM7dUJBSUEsUSxDQUE4QixPLEVBQVMsUSxFQUFVLEk7QUFDakQ7SUFDSSxJQUFJLFMsR0FBWSxRQUFRLFVBQXhCO0lBRUEsSUFBSSxDQUFDLFNBQUw7UUFDSSxTLEdBQWEsUUFBUSxVLEdBQWEsQyxDQUFsQztJQUVKLElBQUksVUFBVSxPLENBQVEsUSxFQUFsQixFLENBQStCLENBQUMsQ0FBcEM7UUFDSSxVQUFVLEksQ0FBSyxRLENBQWY7QUFQUixDOzhCQVVBLFEsQ0FBcUMsTyxFQUFTLFEsRUFBVSxJO0FBQ3hEO0lBQ0ksdUIsQ0FBd0IsTyxFQUFTLFEsRUFBVSxJLENBQTNDO0FBREosQzswQkFJQSxRLENBQWlDLE8sRUFBUyxRLEVBQVUsSTtBQUNwRDtJQUNJLElBQUksUyxHQUFZLFFBQVEsVUFBeEI7SUFDQSxJQUFJLFNBQUo7SUFDQTtRQUNJLElBQUksRyxHQUFNLFVBQVUsTyxDQUFRLFEsQ0FBNUI7UUFDQSxJQUFJLEcsQ0FBQSxHLENBQVEsQ0FBQyxDQUFiO1FBQ0E7WUFDSSxVQUFVLE0sQ0FBTyxHLEVBQUssQyxDQUF0QjtZQUVBLElBQUksVUFBVSxNLENBQVYsRSxDQUFvQixDQUF4QjtnQkFDSSxRQUFRLFUsR0FBYSxHQUFyQjtRQUpSLEM7SUFISixDO0FBSEosQyIsImZpbGUiOiJDUFJ1bkxvb3AuanMiLCJzb3VyY2VSb290IjoiZmlsZTovVXNlcnMvZGF2aWQvcHJvZ3JhbXMvY2FwcHVjY2luby9Gb3VuZGF0aW9uLyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDUFJ1bkxvb3AualxuICogRm91bmRhdGlvblxuICpcbiAqIENyZWF0ZWQgYnkgRnJhbmNpc2NvIFRvbG1hc2t5LlxuICogQ29weXJpZ2h0IDIwMDgsIDI4MCBOb3J0aCwgSW5jLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlclxuICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlXG4gKiBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BIDAyMTEwLTEzMDEgVVNBXG4gKi9cblxuQGltcG9ydCBcIkNQQXJyYXkualwiXG5AaW1wb3J0IFwiQ1BEYXRlLmpcIlxuQGltcG9ydCBcIkNQT2JqZWN0LmpcIlxuQGltcG9ydCBcIkNQU3RyaW5nLmpcIlxuXG4vKiFcbiAgICBAZ2xvYmFsXG4gICAgQGdyb3VwIENQUnVuTG9vcE1vZGVcbiovXG5DUERlZmF1bHRSdW5Mb29wTW9kZSAgICA9IEBcIkNQRGVmYXVsdFJ1bkxvb3BNb2RlXCI7XG5cbmZ1bmN0aW9uIF9DUFJ1bkxvb3BQZXJmb3JtQ29tcGFyZShsaHMsIHJocylcbntcbiAgICByZXR1cm4gW3JocyBvcmRlcl0gLSBbbGhzIG9yZGVyXTtcbn1cblxudmFyIF9DUFJ1bkxvb3BQZXJmb3JtUG9vbCAgICAgICAgICAgPSBbXSxcbiAgICBfQ1BSdW5Mb29wUGVyZm9ybVBvb2xDYXBhY2l0eSAgID0gNTtcblxuLyogQGlnbm9yZSAqL1xuQGltcGxlbWVudGF0aW9uIF9DUFJ1bkxvb3BQZXJmb3JtIDogQ1BPYmplY3RcbntcbiAgICBGdW5jdGlvbiAgICBfYmxvY2s7XG4gICAgaWQgICAgICAgICAgX3RhcmdldDtcbiAgICBTRUwgICAgICAgICBfc2VsZWN0b3I7XG4gICAgaWQgICAgICAgICAgX2FyZ3VtZW50O1xuICAgIHVuc2lnbmVkICAgIF9vcmRlcjtcbiAgICBDUEFycmF5ICAgICBfcnVuTG9vcE1vZGVzO1xuICAgIEJPT0wgICAgICAgIF9pc1ZhbGlkO1xufVxuXG4rICh2b2lkKV9wb29sUGVyZm9ybTooX0NQUnVuTG9vcFBlcmZvcm0pYVBlcmZvcm1cbntcbiAgICBpZiAoIWFQZXJmb3JtIHx8IF9DUFJ1bkxvb3BQZXJmb3JtUG9vbC5sZW5ndGggPj0gX0NQUnVuTG9vcFBlcmZvcm1Qb29sQ2FwYWNpdHkpXG4gICAgICAgIHJldHVybjtcblxuICAgIF9DUFJ1bkxvb3BQZXJmb3JtUG9vbC5wdXNoKGFQZXJmb3JtKTtcbn1cblxuKyAoX0NQUnVuTG9vcFBlcmZvcm0pcGVyZm9ybVdpdGhTZWxlY3RvcjooU0VMKWFTZWxlY3RvciB0YXJnZXQ6KGlkKWFUYXJnZXQgYXJndW1lbnQ6KGlkKWFuQXJndW1lbnQgb3JkZXI6KHVuc2lnbmVkKWFuT3JkZXIgbW9kZXM6KENQQXJyYXkpbW9kZXNcbntcbiAgICBpZiAoX0NQUnVuTG9vcFBlcmZvcm1Qb29sLmxlbmd0aClcbiAgICB7XG4gICAgICAgIHZhciBwZXJmb3JtID0gX0NQUnVuTG9vcFBlcmZvcm1Qb29sLnBvcCgpO1xuXG4gICAgICAgIHBlcmZvcm0uX2Jsb2NrID0gbmlsO1xuICAgICAgICBwZXJmb3JtLl90YXJnZXQgPSBhVGFyZ2V0O1xuICAgICAgICBwZXJmb3JtLl9zZWxlY3RvciA9IGFTZWxlY3RvcjtcbiAgICAgICAgcGVyZm9ybS5fYXJndW1lbnQgPSBhbkFyZ3VtZW50O1xuICAgICAgICBwZXJmb3JtLl9vcmRlciA9IGFuT3JkZXI7XG4gICAgICAgIHBlcmZvcm0uX3J1bkxvb3BNb2RlcyA9IG1vZGVzO1xuICAgICAgICBwZXJmb3JtLl9pc1ZhbGlkID0gWUVTO1xuXG4gICAgICAgIHJldHVybiBwZXJmb3JtO1xuICAgIH1cblxuICAgIHJldHVybiBbW3NlbGYgYWxsb2NdIGluaXRXaXRoU2VsZWN0b3I6YVNlbGVjdG9yIHRhcmdldDphVGFyZ2V0IGFyZ3VtZW50OmFuQXJndW1lbnQgb3JkZXI6YW5PcmRlciBtb2Rlczptb2Rlc107XG59XG5cbisgKF9DUFJ1bkxvb3BQZXJmb3JtKXBlcmZvcm1XaXRoQmxvY2s6KEZ1bmN0aW9uKWFCbG9jayBhcmd1bWVudDooaWQpYW5Bcmd1bWVudCBvcmRlcjoodW5zaWduZWQpYW5PcmRlciBtb2RlczooQ1BBcnJheSltb2Rlc1xue1xuICAgIGlmIChfQ1BSdW5Mb29wUGVyZm9ybVBvb2wubGVuZ3RoKVxuICAgIHtcbiAgICAgICAgdmFyIHBlcmZvcm0gPSBfQ1BSdW5Mb29wUGVyZm9ybVBvb2wucG9wKCk7XG5cbiAgICAgICAgcGVyZm9ybS5fdGFyZ2V0ID0gbmlsO1xuICAgICAgICBwZXJmb3JtLl9zZWxlY3RvciA9IG5pbDtcbiAgICAgICAgcGVyZm9ybS5fYmxvY2sgPSBhQmxvY2s7XG4gICAgICAgIHBlcmZvcm0uX2FyZ3VtZW50ID0gYW5Bcmd1bWVudDtcbiAgICAgICAgcGVyZm9ybS5fb3JkZXIgPSBhbk9yZGVyO1xuICAgICAgICBwZXJmb3JtLl9ydW5Mb29wTW9kZXMgPSBtb2RlcztcbiAgICAgICAgcGVyZm9ybS5faXNWYWxpZCA9IFlFUztcblxuICAgICAgICByZXR1cm4gcGVyZm9ybTtcbiAgICB9XG5cbiAgICByZXR1cm4gW1tzZWxmIGFsbG9jXSBpbml0V2l0aEJsb2NrOmFCbG9jayBhcmd1bWVudDphbkFyZ3VtZW50IG9yZGVyOmFuT3JkZXIgbW9kZXM6bW9kZXNdO1xufVxuXG4tIChpZClpbml0V2l0aFNlbGVjdG9yOihTRUwpYVNlbGVjdG9yIHRhcmdldDooU0VMKWFUYXJnZXQgYXJndW1lbnQ6KGlkKWFuQXJndW1lbnQgb3JkZXI6KHVuc2lnbmVkKWFuT3JkZXIgbW9kZXM6KENQQXJyYXkpbW9kZXNcbntcbiAgICBzZWxmID0gW3N1cGVyIGluaXRdO1xuXG4gICAgaWYgKHNlbGYpXG4gICAge1xuICAgICAgICBfc2VsZWN0b3IgPSBhU2VsZWN0b3I7XG4gICAgICAgIF90YXJnZXQgPSBhVGFyZ2V0O1xuICAgICAgICBfYXJndW1lbnQgPSBhbkFyZ3VtZW50O1xuICAgICAgICBfb3JkZXIgPSBhbk9yZGVyO1xuICAgICAgICBfcnVuTG9vcE1vZGVzID0gbW9kZXM7XG4gICAgICAgIF9pc1ZhbGlkID0gWUVTO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xufVxuXG4tIChpZClpbml0V2l0aEJsb2NrOihGdW5jdGlvbilhQmxvY2sgYXJndW1lbnQ6KGlkKWFuQXJndW1lbnQgb3JkZXI6KHVuc2lnbmVkKWFuT3JkZXIgbW9kZXM6KENQQXJyYXkpbW9kZXNcbntcbiAgICBzZWxmID0gW3N1cGVyIGluaXRdO1xuXG4gICAgaWYgKHNlbGYpXG4gICAge1xuICAgICAgICBfYmxvY2sgPSBhQmxvY2s7XG4gICAgICAgIF9hcmd1bWVudCA9IGFuQXJndW1lbnQ7XG4gICAgICAgIF9vcmRlciA9IGFuT3JkZXI7XG4gICAgICAgIF9ydW5Mb29wTW9kZXMgPSBtb2RlcztcbiAgICAgICAgX2lzVmFsaWQgPSBZRVM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG59XG5cbi0gKFNFTClzZWxlY3Rvclxue1xuICAgIHJldHVybiBfc2VsZWN0b3I7XG59XG5cbi0gKGlkKXRhcmdldFxue1xuICAgIHJldHVybiBfdGFyZ2V0O1xufVxuXG4tIChpZClhcmd1bWVudFxue1xuICAgIHJldHVybiBfYXJndW1lbnQ7XG59XG5cbi0gKHVuc2lnbmVkKW9yZGVyXG57XG4gICAgcmV0dXJuIF9vcmRlcjtcbn1cblxuLSAoQk9PTClmaXJlSW5Nb2RlOihDUFN0cmluZylhUnVuTG9vcE1vZGVcbntcbiAgICBpZiAoIV9pc1ZhbGlkKVxuICAgICAgICByZXR1cm4gWUVTO1xuXG4gICAgaWYgKFtfcnVuTG9vcE1vZGVzIGNvbnRhaW5zT2JqZWN0OmFSdW5Mb29wTW9kZV0pXG4gICAge1xuICAgICAgICBpZiAoX2Jsb2NrKVxuICAgICAgICAgICAgX2Jsb2NrKF9hcmd1bWVudCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIFtfdGFyZ2V0IHBlcmZvcm1TZWxlY3Rvcjpfc2VsZWN0b3Igd2l0aE9iamVjdDpfYXJndW1lbnRdO1xuXG4gICAgICAgIHJldHVybiBZRVM7XG4gICAgfVxuXG4gICAgcmV0dXJuIE5PO1xufVxuXG4tICh2b2lkKWludmFsaWRhdGVcbntcbiAgICBfaXNWYWxpZCA9IE5PO1xufVxuXG5AZW5kXG5cbnZhciBDUFJ1bkxvb3BMYXN0TmF0aXZlUnVuTG9vcCA9IDA7XG5cbi8qIVxuICAgIEBjbGFzcyBDUFJ1bkxvb3BcbiAgICBAaW5ncm91cCBmb3VuZGF0aW9uXG4gICAgQGJyaWVmIFRoZSBtYWluIHJ1biBsb29wIGZvciB0aGUgYXBwbGljYXRpb24uXG5cbiAgICBDUFJ1bkxvb3AgaW5zdGFuY2VzIGhhbmRsZSB2YXJpb3VzIHV0aWxpdHkgdGFza3MgdGhhdCBtdXN0IGJlIHBlcmZvcm1lZCByZXBldGl0aXZlbHkgaW4gYW4gYXBwbGljYXRpb24sIHN1Y2ggYXMgcHJvY2Vzc2luZyBpbnB1dCBldmVudHMuXG5cbiAgICBUaGVyZSBpcyBvbmUgcnVuIGxvb3AgcGVyIGFwcGxpY2F0aW9uLCB3aGljaCBtYXkgYWx3YXlzIGJlIG9idGFpbmVkIHRocm91Z2ggdGhlICtjdXJyZW50UnVuTG9vcCBtZXRob2QsXG4qL1xuQGltcGxlbWVudGF0aW9uIENQUnVuTG9vcCA6IENQT2JqZWN0XG57XG4gICAgQk9PTCAgICBfcnVuTG9vcExvY2s7XG5cbiAgICBPYmplY3QgIF90aW1lcnNGb3JNb2RlczsgLy9zaG91bGQgYmUgYSBkaWN0aW9uYXJ5IHRvIGFsbG93IGxvb2t1cHMgYnkgbW9kZVxuICAgIE9iamVjdCAgX25hdGl2ZVRpbWVyc0Zvck1vZGVzO1xuICAgIENQRGF0ZSAgX25leHRUaW1lckZpcmVEYXRlc0Zvck1vZGVzO1xuICAgIEJPT0wgICAgX2RpZEFkZFRpbWVyO1xuICAgIENQRGF0ZSAgX2VmZmVjdGl2ZURhdGU7XG5cbiAgICBDUEFycmF5IF9vcmRlcmVkUGVyZm9ybXM7XG4gICAgaW50ICAgICBfcnVuTG9vcEluc3VyYW5jZVRpbWVyO1xuICAgIENQQXJyYXkgX29ic2VydmVycztcbn1cblxuLypcbiAgICBAaWdub3JlXG4qL1xuKyAodm9pZClpbml0aWFsaXplXG57XG4gICAgaWYgKHNlbGYgIT09IFtDUFJ1bkxvb3AgY2xhc3NdKVxuICAgICAgICByZXR1cm47XG5cbiAgICBDUE1haW5SdW5Mb29wID0gW1tDUFJ1bkxvb3AgYWxsb2NdIGluaXRdO1xufVxuXG4tIChpZClpbml0XG57XG4gICAgc2VsZiA9IFtzdXBlciBpbml0XTtcblxuICAgIGlmIChzZWxmKVxuICAgIHtcbiAgICAgICAgX29yZGVyZWRQZXJmb3JtcyA9IFtdO1xuXG4gICAgICAgIF90aW1lcnNGb3JNb2RlcyA9IHt9O1xuICAgICAgICBfbmF0aXZlVGltZXJzRm9yTW9kZXMgPSB7fTtcbiAgICAgICAgX25leHRUaW1lckZpcmVEYXRlc0Zvck1vZGVzID0ge307XG4gICAgICAgIF9vYnNlcnZlcnMgPSBuaWw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG59XG5cbi8qIVxuICAgIFJldHVybnMgdGhlIGFwcGxpY2F0aW9uJ3Mgc2luZ2xldG9uIENQUnVuTG9vcC5cbiovXG4rIChDUFJ1bkxvb3ApY3VycmVudFJ1bkxvb3BcbntcbiAgICByZXR1cm4gQ1BNYWluUnVuTG9vcDtcbn1cblxuLyohXG4gICAgUmV0dXJucyB0aGUgYXBwbGljYXRpb24ncyBzaW5nbGV0b24gQ1BSdW5Mb29wLlxuKi9cbisgKENQUnVuTG9vcCltYWluUnVuTG9vcFxue1xuICAgIHJldHVybiBDUE1haW5SdW5Mb29wO1xufVxuXG4vKiFcbiAgICBQZXJmb3JtcyB0aGUgc3BlY2lmaWVkIHNlbGVjdG9yIG9uIHRoZSBzcGVjaWZpZWQgdGFyZ2V0LiBUaGUgbWV0aG9kIHdpbGwgYmUgaW52b2tlZCBzeW5jaHJvbm91c2x5LlxuICAgIEBwYXJhbSBhU2VsZWN0b3IgdGhlIHNlbGVjdG9yIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlXG4gICAgQHBhcmFtIGFUYXJnZXQgdGhlIHRhcmdldCBvZiB0aGUgc2VsZWN0b3JcbiAgICBAcGFyYW0gYW5Bcmd1bWVudCB0aGUgbWV0aG9kIGFyZ3VtZW50XG4gICAgQHBhcmFtIGFuT3JkZXIgdGhlIG1lc3NhZ2UgcHJpb3JpdHlcbiAgICBAcGFyYW0gbW9kZXMgdGhlIG1vZGVzIHZhcmlhYmxlIGlzbid0IHJlc3BlY3RlZC5cbiovXG4tICh2b2lkKXBlcmZvcm1TZWxlY3RvcjooU0VMKWFTZWxlY3RvciB0YXJnZXQ6KGlkKWFUYXJnZXQgYXJndW1lbnQ6KGlkKWFuQXJndW1lbnQgb3JkZXI6KGludClhbk9yZGVyIG1vZGVzOihDUEFycmF5KW1vZGVzXG57XG4gICAgdmFyIHBlcmZvcm0gPSBbX0NQUnVuTG9vcFBlcmZvcm0gcGVyZm9ybVdpdGhTZWxlY3RvcjphU2VsZWN0b3IgdGFyZ2V0OmFUYXJnZXQgYXJndW1lbnQ6YW5Bcmd1bWVudCBvcmRlcjphbk9yZGVyIG1vZGVzOm1vZGVzXSxcbiAgICAgICAgY291bnQgPSBfb3JkZXJlZFBlcmZvcm1zLmxlbmd0aDtcblxuICAgIC8vIFdlIHNvcnQgb3Vyc2VsdmVzIGluIHJldmVyc2UgYmVjYXVzZSB3ZSBpdGVyYXRlIHRoaXMgbGlzdCBiYWNrd2FyZHMuXG4gICAgd2hpbGUgKGNvdW50LS0pXG4gICAgICAgIGlmIChhbk9yZGVyIDwgW19vcmRlcmVkUGVyZm9ybXNbY291bnRdIG9yZGVyXSlcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgX29yZGVyZWRQZXJmb3Jtcy5zcGxpY2UoY291bnQgKyAxLCAwLCBwZXJmb3JtKTtcbn1cblxuXG4vKiFcbiAgICBAaWdub3JlXG4qL1xuLSAodm9pZClwZXJmb3JtQmxvY2s6KEZ1bmN0aW9uKWFCbG9jayBhcmd1bWVudDooaWQpYW5Bcmd1bWVudCBvcmRlcjooaW50KWFuT3JkZXIgbW9kZXM6KENQQXJyYXkpbW9kZXNcbntcbiAgICB2YXIgcGVyZm9ybSA9IFtfQ1BSdW5Mb29wUGVyZm9ybSBwZXJmb3JtV2l0aEJsb2NrOmFCbG9jayBhcmd1bWVudDphbkFyZ3VtZW50IG9yZGVyOmFuT3JkZXIgbW9kZXM6bW9kZXNdLFxuICAgICAgICBjb3VudCA9IF9vcmRlcmVkUGVyZm9ybXMubGVuZ3RoO1xuXG4gICAgLy8gV2Ugc29ydCBvdXJzZWx2ZXMgaW4gcmV2ZXJzZSBiZWNhdXNlIHdlIGl0ZXJhdGUgdGhpcyBsaXN0IGJhY2t3YXJkcy5cbiAgICB3aGlsZSAoY291bnQtLSlcbiAgICAgICAgaWYgKGFuT3JkZXIgPCBbX29yZGVyZWRQZXJmb3Jtc1tjb3VudF0gb3JkZXJdKVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICBfb3JkZXJlZFBlcmZvcm1zLnNwbGljZShjb3VudCArIDEsIDAsIHBlcmZvcm0pO1xufVxuXG4vKiFcbiAgICBDYW5jZWxzIHRoZSBzcGVjaWZpZWQgc2VsZWN0b3IgYW5kIHRhcmdldC5cbiAgICBAcGFyYW0gYVNlbGVjdG9yIHRoZSBzZWxlY3RvciBvZiB0aGUgbWV0aG9kIHRvIGludm9rZVxuICAgIEBwYXJhbSBhVGFyZ2V0IHRoZSB0YXJnZXQgdG8gaW52b2tlIHRoZSBtZXRob2Qgb25cbiAgICBAcGFyYW0gdGhlIGFyZ3VtZW50IGZvciB0aGUgbWV0aG9kXG4qL1xuLSAodm9pZCljYW5jZWxQZXJmb3JtU2VsZWN0b3I6KFNFTClhU2VsZWN0b3IgdGFyZ2V0OihpZClhVGFyZ2V0IGFyZ3VtZW50OihpZClhbkFyZ3VtZW50XG57XG4gICAgdmFyIGNvdW50ID0gX29yZGVyZWRQZXJmb3Jtcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoY291bnQtLSlcbiAgICB7XG4gICAgICAgIHZhciBwZXJmb3JtID0gX29yZGVyZWRQZXJmb3Jtc1tjb3VudF07XG5cbiAgICAgICAgaWYgKFtwZXJmb3JtIHNlbGVjdG9yXSA9PT0gYVNlbGVjdG9yICYmIFtwZXJmb3JtIHRhcmdldF0gPT0gYVRhcmdldCAmJiBbcGVyZm9ybSBhcmd1bWVudF0gPT0gYW5Bcmd1bWVudClcbiAgICAgICAgICAgIFtfb3JkZXJlZFBlcmZvcm1zW2NvdW50XSBpbnZhbGlkYXRlXTtcbiAgICB9XG59XG5cbi8qXG4gICAgQGlnbm9yZVxuKi9cbi0gKHZvaWQpcGVyZm9ybVNlbGVjdG9yc1xue1xuICAgIFtzZWxmIGxpbWl0RGF0ZUZvck1vZGU6Q1BEZWZhdWx0UnVuTG9vcE1vZGVdO1xufVxuXG4vKiFcbiAgICBSZWdpc3RlcnMgYSBnaXZlbiB0aW1lciB3aXRoIGEgZ2l2ZW4gaW5wdXQgbW9kZS5cbiovXG4tICh2b2lkKWFkZFRpbWVyOihDUFRpbWVyKWFUaW1lciBmb3JNb2RlOihDUFN0cmluZylhTW9kZVxue1xuICAgIC8vIEZJWE1FOiBUaW1lciBhbHJlYWR5IGFkZGVkLi4uXG4gICAgaWYgKF90aW1lcnNGb3JNb2Rlc1thTW9kZV0pXG4gICAgICAgIF90aW1lcnNGb3JNb2Rlc1thTW9kZV0ucHVzaChhVGltZXIpO1xuICAgIGVsc2VcbiAgICAgICAgX3RpbWVyc0Zvck1vZGVzW2FNb2RlXSA9IFthVGltZXJdO1xuXG4gICAgX2RpZEFkZFRpbWVyID0gWUVTO1xuXG4gICAgaWYgKCFhVGltZXIuX2xhc3ROYXRpdmVSdW5Mb29wc0Zvck1vZGVzKVxuICAgICAgICBhVGltZXIuX2xhc3ROYXRpdmVSdW5Mb29wc0Zvck1vZGVzID0ge307XG5cbiAgICBhVGltZXIuX2xhc3ROYXRpdmVSdW5Mb29wc0Zvck1vZGVzW2FNb2RlXSA9IENQUnVuTG9vcExhc3ROYXRpdmVSdW5Mb29wO1xuXG4gICAgLy8gRklYTUU6IEhhY2sgZm9yIG5vdCBkb2luZyB0aGlzIGluIENvbW1vbkpTXG4gICAgaWYgKFtDRkJ1bmRsZS5lbnZpcm9ubWVudHMoKSBpbmRleE9mT2JqZWN0OihcIkJyb3dzZXJcIildICE9PSBDUE5vdEZvdW5kKVxuICAgIHtcbiAgICAgICAgaWYgKCFfcnVuTG9vcEluc3VyYW5jZVRpbWVyKVxuICAgICAgICAgICAgX3J1bkxvb3BJbnN1cmFuY2VUaW1lciA9IHdpbmRvdy5zZXROYXRpdmVUaW1lb3V0KGZ1bmN0aW9uKClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBbc2VsZiBsaW1pdERhdGVGb3JNb2RlOkNQRGVmYXVsdFJ1bkxvb3BNb2RlXTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgIH1cbn1cblxuLyohXG4gICAgUGVyZm9ybXMgb25lIHBhc3MgdGhyb3VnaCB0aGUgcnVuIGxvb3AgaW4gdGhlIHNwZWNpZmllZCBtb2RlIGFuZCByZXR1cm5zIHRoZSBkYXRlIGF0IHdoaWNoIHRoZSBuZXh0IHRpbWVyIGlzIHNjaGVkdWxlZCB0byBmaXJlLlxuKi9cbi0gKENQRGF0ZSlsaW1pdERhdGVGb3JNb2RlOihDUFN0cmluZylhTW9kZVxue1xuICAgIC8vc2ltcGxlIGxvY2tpbmcgdG8gdHJ5IHRvIHByZXZlbnQgY29uY3VycmVudCBpdGVyYXRpbmcgb3ZlciB0aW1lcnNcbiAgICBpZiAoX3J1bkxvb3BMb2NrKVxuICAgICAgICByZXR1cm47XG5cbiAgICBfcnVuTG9vcExvY2sgPSBZRVM7XG5cbiAgICAvLyBGSVhNRTogSGFjayBmb3Igbm90IGRvaW5nIHRoaXMgaW4gQ29tbW9uSlNcbiAgICBpZiAoW0NGQnVuZGxlLmVudmlyb25tZW50cygpIGluZGV4T2ZPYmplY3Q6KFwiQnJvd3NlclwiKV0gIT09IENQTm90Rm91bmQpXG4gICAge1xuICAgICAgICBpZiAoX3J1bkxvb3BJbnN1cmFuY2VUaW1lcilcbiAgICAgICAge1xuICAgICAgICAgICAgd2luZG93LmNsZWFyTmF0aXZlVGltZW91dChfcnVuTG9vcEluc3VyYW5jZVRpbWVyKTtcbiAgICAgICAgICAgIF9ydW5Mb29wSW5zdXJhbmNlVGltZXIgPSBuaWw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbm93ID0gX2VmZmVjdGl2ZURhdGUgPyBbX2VmZmVjdGl2ZURhdGUgbGF0ZXJEYXRlOltDUERhdGUgZGF0ZV1dIDogW0NQRGF0ZSBkYXRlXSxcbiAgICAgICAgbmV4dEZpcmVEYXRlID0gbmlsLFxuICAgICAgICBuZXh0VGltZXJGaXJlRGF0ZSA9IF9uZXh0VGltZXJGaXJlRGF0ZXNGb3JNb2Rlc1thTW9kZV07XG5cbiAgICAvLyBQZXJmb3JtIFRpbWVycyBpZiBuZWNlc3NhcnlcblxuICAgIGlmIChfZGlkQWRkVGltZXIgfHwgbmV4dFRpbWVyRmlyZURhdGUgJiYgbmV4dFRpbWVyRmlyZURhdGUgPD0gbm93KVxuICAgIHtcbiAgICAgICAgX2RpZEFkZFRpbWVyID0gTk87XG5cbiAgICAgICAgLy8gQ2FuY2VsIGV4aXN0aW5nIHdpbmRvdy5zZXRUaW1lb3V0XG4gICAgICAgIGlmIChfbmF0aXZlVGltZXJzRm9yTW9kZXNbYU1vZGVdICE9PSBuaWwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHdpbmRvdy5jbGVhck5hdGl2ZVRpbWVvdXQoX25hdGl2ZVRpbWVyc0Zvck1vZGVzW2FNb2RlXSk7XG5cbiAgICAgICAgICAgIF9uYXRpdmVUaW1lcnNGb3JNb2Rlc1thTW9kZV0gPSBuaWw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbXB0eSB0aW1lcnMgdG8gYXZvaWQgY2F0YXN0cm9waGUgaWYgYSB0aW1lciBpcyBhZGRlZCBkdXJpbmcgYSB0aW1lciBmaXJlLlxuICAgICAgICB2YXIgdGltZXJzID0gX3RpbWVyc0Zvck1vZGVzW2FNb2RlXSxcbiAgICAgICAgICAgIGluZGV4ID0gdGltZXJzLmxlbmd0aDtcblxuICAgICAgICBfdGltZXJzRm9yTW9kZXNbYU1vZGVdID0gbmlsO1xuXG4gICAgICAgIC8vIElmIHdlJ3JlIHJ1bm5pbmcgaW4gQ29tbW9uSlMgKHVuaXQgdGVzdHMpIHdlIHNob3VsZG4ndCB3YWl0IGZvciBhdCBsZWFzdCAxIG5hdGl2ZSBydW4gbG9vcFxuICAgICAgICAvLyBzaW5jZSB0aG9zZSB3aWxsIG5ldmVyIGhhcHBlbi5cbiAgICAgICAgdmFyIGhhc05hdGl2ZVRpbWVycyA9IFtDRkJ1bmRsZS5lbnZpcm9ubWVudHMoKSBpbmRleE9mT2JqZWN0OihcIkJyb3dzZXJcIildICE9PSBDUE5vdEZvdW5kO1xuXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCB0aW1lcnMgbG9va2luZyBmb3Igb25lcyB0aGF0IGhhZCBmaXJlZFxuICAgICAgICB3aGlsZSAoaW5kZXgtLSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHRpbWVyID0gdGltZXJzW2luZGV4XTtcblxuICAgICAgICAgICAgaWYgKCghaGFzTmF0aXZlVGltZXJzIHx8IHRpbWVyLl9sYXN0TmF0aXZlUnVuTG9vcHNGb3JNb2Rlc1thTW9kZV0gPCBDUFJ1bkxvb3BMYXN0TmF0aXZlUnVuTG9vcCkgJiYgdGltZXIuX2lzVmFsaWQgJiYgdGltZXIuX2ZpcmVEYXRlIDw9IG5vdylcbiAgICAgICAgICAgICAgICBbdGltZXIgZmlyZV07XG5cbiAgICAgICAgICAgIC8vIFRpbWVyIG1heSBvciBtYXkgbm90IHN0aWxsIGJlIHZhbGlkXG4gICAgICAgICAgICBpZiAodGltZXIuX2lzVmFsaWQpXG4gICAgICAgICAgICAgICAgbmV4dEZpcmVEYXRlID0gKG5leHRGaXJlRGF0ZSA9PT0gbmlsKSA/IHRpbWVyLl9maXJlRGF0ZSA6IFtuZXh0RmlyZURhdGUgZWFybGllckRhdGU6dGltZXIuX2ZpcmVEYXRlXTtcblxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIEZJWE1FOiBJcyB0aGVyZSBhbiBpc3N1ZSB3aXRoIHJlc2V0aW5nIHRoZSBmaXJlIGRhdGUgaW4gLWZpcmU/IG9yIGFkZGluZyBpdCBiYWNrIHRvIHRoZSBydW4gbG9vcD8uLi5cbiAgICAgICAgICAgICAgICB0aW1lci5fbGFzdE5hdGl2ZVJ1bkxvb3BzRm9yTW9kZXNbYU1vZGVdID0gMDtcblxuICAgICAgICAgICAgICAgIHRpbWVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGltZXJzIG1heSBoYXZlIGJlZW4gYWRkZWQgZHVyaW5nIHRoZSBmaXJpbmcgb2YgdGltZXJzXG4gICAgICAgIC8vIFRoZXkgZG8gTk9UIGdldCBhIHNob3QgYXQgZmlyaW5nLCBiZWNhdXNlIHRoZXkgY2VydGFpbmx5XG4gICAgICAgIC8vIGhhdmVuJ3QgZ29uZSB0aHJvdWdoIG9uZSBuYXRpdmUgdGltZXIuXG4gICAgICAgIHZhciBuZXdUaW1lcnMgPSBfdGltZXJzRm9yTW9kZXNbYU1vZGVdO1xuXG4gICAgICAgIGlmIChuZXdUaW1lcnMgJiYgbmV3VGltZXJzLmxlbmd0aClcbiAgICAgICAge1xuICAgICAgICAgICAgaW5kZXggPSBuZXdUaW1lcnMubGVuZ3RoO1xuXG4gICAgICAgICAgICB3aGlsZSAoaW5kZXgtLSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgdGltZXIgPSBuZXdUaW1lcnNbaW5kZXhdO1xuXG4gICAgICAgICAgICAgICAgaWYgKFt0aW1lciBpc1ZhbGlkXSlcbiAgICAgICAgICAgICAgICAgICAgbmV4dEZpcmVEYXRlID0gKG5leHRGaXJlRGF0ZSA9PT0gbmlsKSA/IHRpbWVyLl9maXJlRGF0ZSA6IFtuZXh0RmlyZURhdGUgZWFybGllckRhdGU6dGltZXIuX2ZpcmVEYXRlXTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIG5ld1RpbWVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdGltZXJzRm9yTW9kZXNbYU1vZGVdID0gbmV3VGltZXJzLmNvbmNhdCh0aW1lcnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIF90aW1lcnNGb3JNb2Rlc1thTW9kZV0gPSB0aW1lcnM7XG5cbiAgICAgICAgX25leHRUaW1lckZpcmVEYXRlc0Zvck1vZGVzW2FNb2RlXSA9IG5leHRGaXJlRGF0ZTtcblxuICAgICAgICAvL2luaXRpYXRlIGEgbmV3IHdpbmRvdy5zZXRUaW1lb3V0IGlmIHRoZXJlIGFyZSBhbnkgdGltZXJzXG4gICAgICAgIGlmIChfbmV4dFRpbWVyRmlyZURhdGVzRm9yTW9kZXNbYU1vZGVdICE9PSBuaWwpXG4gICAgICAgICAgICBfbmF0aXZlVGltZXJzRm9yTW9kZXNbYU1vZGVdID0gd2luZG93LnNldE5hdGl2ZVRpbWVvdXQoZnVuY3Rpb24oKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgX2VmZmVjdGl2ZURhdGUgPSBuZXh0RmlyZURhdGU7XG4gICAgICAgICAgICAgICAgICAgIF9uYXRpdmVUaW1lcnNGb3JNb2Rlc1thTW9kZV0gPSBuaWw7XG4gICAgICAgICAgICAgICAgICAgICsrQ1BSdW5Mb29wTGFzdE5hdGl2ZVJ1bkxvb3A7XG4gICAgICAgICAgICAgICAgICAgIFtzZWxmIGxpbWl0RGF0ZUZvck1vZGU6YU1vZGVdO1xuICAgICAgICAgICAgICAgICAgICBfZWZmZWN0aXZlRGF0ZSA9IG5pbDtcbiAgICAgICAgICAgICAgICB9LCBNQVgoMCwgW25leHRGaXJlRGF0ZSB0aW1lSW50ZXJ2YWxTaW5jZU5vd10gKiAxMDAwKSk7XG4gICAgfVxuXG4gICAgLy8gUnVuIGxvb3AgcGVyZm9ybWVyc1xuICAgIHZhciBwZXJmb3JtcyA9IF9vcmRlcmVkUGVyZm9ybXMsXG4gICAgICAgIGluZGV4ID0gcGVyZm9ybXMubGVuZ3RoO1xuXG4gICAgX29yZGVyZWRQZXJmb3JtcyA9IFtdO1xuXG4gICAgd2hpbGUgKGluZGV4LS0pXG4gICAge1xuICAgICAgICB2YXIgcGVyZm9ybSA9IHBlcmZvcm1zW2luZGV4XTtcblxuICAgICAgICBpZiAoW3BlcmZvcm0gZmlyZUluTW9kZTpDUERlZmF1bHRSdW5Mb29wTW9kZV0pXG4gICAgICAgIHtcbiAgICAgICAgICAgIFtfQ1BSdW5Mb29wUGVyZm9ybSBfcG9vbFBlcmZvcm06cGVyZm9ybV07XG5cbiAgICAgICAgICAgIHBlcmZvcm1zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoX29yZGVyZWRQZXJmb3Jtcy5sZW5ndGgpXG4gICAge1xuICAgICAgICBfb3JkZXJlZFBlcmZvcm1zID0gX29yZGVyZWRQZXJmb3Jtcy5jb25jYXQocGVyZm9ybXMpO1xuICAgICAgICBfb3JkZXJlZFBlcmZvcm1zLnNvcnQoX0NQUnVuTG9vcFBlcmZvcm1Db21wYXJlKTtcbiAgICB9XG4gICAgZWxzZVxuICAgICAgICBfb3JkZXJlZFBlcmZvcm1zID0gcGVyZm9ybXM7XG5cbiAgICBpZiAoX29ic2VydmVycylcbiAgICB7XG4gICAgICAgIHZhciBjb3VudCA9IF9vYnNlcnZlcnMubGVuZ3RoO1xuICAgICAgICB3aGlsZShjb3VudC0tKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgb2JzID0gX29ic2VydmVyc1tjb3VudF07XG4gICAgICAgICAgICBvYnMuY2FsbG91dCgpO1xuXG4gICAgICAgICAgICBpZiAoIW9icy5yZXBlYXRzKVxuICAgICAgICAgICAgICAgIF9vYnNlcnZlcnMuc3BsaWNlKGNvdW50LCAxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9ydW5Mb29wTG9jayA9IE5PO1xuXG4gICAgcmV0dXJuIG5leHRGaXJlRGF0ZTtcbn1cblxuQGVuZFxuXG5mdW5jdGlvbiBDRlJ1bkxvb3BPYnNlcnZlcihhY3Rpdml0aWVzLCByZXBlYXRzLCBvcmRlciwgY2FsbG91dCwgY29udGV4dClcbntcbiAgICB0aGlzLmFjdGl2aXRpZXMgPSBhY3Rpdml0aWVzO1xuICAgIHRoaXMucmVwZWF0cyA9IHJlcGVhdHM7XG4gICAgdGhpcy5vcmRlciA9IG9yZGVyO1xuICAgIHRoaXMuY2FsbG91dCA9IGNhbGxvdXQ7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcblxuICAgIHRoaXMuaXN2YWxpZCA9IHRydWU7XG59O1xuXG5mdW5jdGlvbiBDRlJ1bkxvb3BPYnNlcnZlckNyZWF0ZShhY3Rpdml0aWVzLCByZXBlYXRzLCBvcmRlciwgY2FsbG91dCwgY29udGV4dClcbntcbiAgICByZXR1cm4gbmV3IENGUnVuTG9vcE9ic2VydmVyKGFjdGl2aXRpZXMsIHJlcGVhdHMsIG9yZGVyLCBjYWxsb3V0LCBjb250ZXh0KTtcbn07XG5cbmZ1bmN0aW9uIENGUnVuTG9vcEFkZE9ic2VydmVyKHJ1bmxvb3AsIG9ic2VydmVyLCBtb2RlKVxue1xuICAgIHZhciBvYnNlcnZlcnMgPSBydW5sb29wLl9vYnNlcnZlcnM7XG5cbiAgICBpZiAoIW9ic2VydmVycylcbiAgICAgICAgb2JzZXJ2ZXJzID0gKHJ1bmxvb3AuX29ic2VydmVycyA9IFtdKTtcblxuICAgIGlmIChvYnNlcnZlcnMuaW5kZXhPZihvYnNlcnZlcikgPT0gLTEpXG4gICAgICAgIG9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbn07XG5cbmZ1bmN0aW9uIENGUnVuTG9vcE9ic2VydmVySW52YWxpZGF0ZShydW5sb29wLCBvYnNlcnZlciwgbW9kZSlcbntcbiAgICBDRlJ1bkxvb3BSZW1vdmVPYnNlcnZlcihydW5sb29wLCBvYnNlcnZlciwgbW9kZSk7XG59O1xuXG5mdW5jdGlvbiBDRlJ1bkxvb3BSZW1vdmVPYnNlcnZlcihydW5sb29wLCBvYnNlcnZlciwgbW9kZSlcbntcbiAgICB2YXIgb2JzZXJ2ZXJzID0gcnVubG9vcC5fb2JzZXJ2ZXJzO1xuICAgIGlmIChvYnNlcnZlcnMpXG4gICAge1xuICAgICAgICB2YXIgaWR4ID0gb2JzZXJ2ZXJzLmluZGV4T2Yob2JzZXJ2ZXIpO1xuICAgICAgICBpZiAoaWR4ICE9PSAtMSlcbiAgICAgICAge1xuICAgICAgICAgICAgb2JzZXJ2ZXJzLnNwbGljZShpZHgsIDEpO1xuXG4gICAgICAgICAgICBpZiAob2JzZXJ2ZXJzLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgICAgIHJ1bmxvb3AuX29ic2VydmVycyA9IG5pbDtcbiAgICAgICAgfVxuICAgIH1cbn07XG4iXX0=t;19183;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPDate.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPString.j", YES);CPDefaultRunLoopMode = "CPDefaultRunLoopMode";
_CPRunLoopPerformCompare = function(lhs, rhs)
{
    return (rhs == null ? null : (rhs.isa.method_msgSend["order"] || _objj_forward)(rhs, (rhs.isa.method_dtable["order"], "order"))) - (lhs == null ? null : (lhs.isa.method_msgSend["order"] || _objj_forward)(lhs, (lhs.isa.method_dtable["order"], "order")));
}
var _CPRunLoopPerformPool = [],
    _CPRunLoopPerformPoolCapacity = 5;

{var the_class = objj_allocateClassPair(CPObject, "_CPRunLoopPerform"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_block", "Function"), new objj_ivar("_target", "id"), new objj_ivar("_selector", "SEL"), new objj_ivar("_argument", "id"), new objj_ivar("_order", "unsigned"), new objj_ivar("_runLoopModes", "CPArray"), new objj_ivar("_isValid", "BOOL")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithSelector:target:argument:order:modes:"), function $_CPRunLoopPerform__initWithSelector_target_argument_order_modes_(self, _cmd, aSelector, aTarget, anArgument, anOrder, modes)
{
    self = (objj_getClass("_CPRunLoopPerform").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._selector = aSelector;
        self._target = aTarget;
        self._argument = anArgument;
        self._order = anOrder;
        self._runLoopModes = modes;
        self._isValid = YES;
    }
    return self;
}

,["id","SEL","SEL","id","unsigned","CPArray"]), new objj_method(sel_getUid("initWithBlock:argument:order:modes:"), function $_CPRunLoopPerform__initWithBlock_argument_order_modes_(self, _cmd, aBlock, anArgument, anOrder, modes)
{
    self = (objj_getClass("_CPRunLoopPerform").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._block = aBlock;
        self._argument = anArgument;
        self._order = anOrder;
        self._runLoopModes = modes;
        self._isValid = YES;
    }
    return self;
}

,["id","Function","id","unsigned","CPArray"]), new objj_method(sel_getUid("selector"), function $_CPRunLoopPerform__selector(self, _cmd)
{
    return self._selector;
}

,["SEL"]), new objj_method(sel_getUid("target"), function $_CPRunLoopPerform__target(self, _cmd)
{
    return self._target;
}

,["id"]), new objj_method(sel_getUid("argument"), function $_CPRunLoopPerform__argument(self, _cmd)
{
    return self._argument;
}

,["id"]), new objj_method(sel_getUid("order"), function $_CPRunLoopPerform__order(self, _cmd)
{
    return self._order;
}

,["unsigned"]), new objj_method(sel_getUid("fireInMode:"), function $_CPRunLoopPerform__fireInMode_(self, _cmd, aRunLoopMode)
{
    if (!self._isValid)
        return YES;
    if (((___r1 = self._runLoopModes), ___r1 == null ? null : (___r1.isa.method_msgSend["containsObject:"] || _objj_forward)(___r1, (self._runLoopModes.isa.method_dtable["containsObject:"], "containsObject:"), aRunLoopMode)))
    {
        if (self._block)
            self._block(self._argument);
        else
            ((___r1 = self._target), ___r1 == null ? null : (___r1.isa.method_msgSend["performSelector:withObject:"] || _objj_forward)(___r1, (self._target.isa.method_dtable["performSelector:withObject:"], self._target.isa.method_dtable["performSelector:withObject:"], "performSelector:withObject:"), self._selector, self._argument));
        return YES;
    }
    return NO;
    var ___r1;
}

,["BOOL","CPString"]), new objj_method(sel_getUid("invalidate"), function $_CPRunLoopPerform__invalidate(self, _cmd)
{
    self._isValid = NO;
}

,["void"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("_poolPerform:"), function $_CPRunLoopPerform___poolPerform_(self, _cmd, aPerform)
{
    if (!aPerform || _CPRunLoopPerformPool.length >= _CPRunLoopPerformPoolCapacity)
        return;
    _CPRunLoopPerformPool.push(aPerform);
}

,["void","_CPRunLoopPerform"]), new objj_method(sel_getUid("performWithSelector:target:argument:order:modes:"), function $_CPRunLoopPerform__performWithSelector_target_argument_order_modes_(self, _cmd, aSelector, aTarget, anArgument, anOrder, modes)
{
    if (_CPRunLoopPerformPool.length)
    {
        var perform = _CPRunLoopPerformPool.pop();
        perform._block = nil;
        perform._target = aTarget;
        perform._selector = aSelector;
        perform._argument = anArgument;
        perform._order = anOrder;
        perform._runLoopModes = modes;
        perform._isValid = YES;
        return perform;
    }
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithSelector:target:argument:order:modes:"] || _objj_forward)(___r1, "initWithSelector:target:argument:order:modes:", aSelector, aTarget, anArgument, anOrder, modes));
    var ___r1;
}

,["_CPRunLoopPerform","SEL","id","id","unsigned","CPArray"]), new objj_method(sel_getUid("performWithBlock:argument:order:modes:"), function $_CPRunLoopPerform__performWithBlock_argument_order_modes_(self, _cmd, aBlock, anArgument, anOrder, modes)
{
    if (_CPRunLoopPerformPool.length)
    {
        var perform = _CPRunLoopPerformPool.pop();
        perform._target = nil;
        perform._selector = nil;
        perform._block = aBlock;
        perform._argument = anArgument;
        perform._order = anOrder;
        perform._runLoopModes = modes;
        perform._isValid = YES;
        return perform;
    }
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithBlock:argument:order:modes:"] || _objj_forward)(___r1, "initWithBlock:argument:order:modes:", aBlock, anArgument, anOrder, modes));
    var ___r1;
}

,["_CPRunLoopPerform","Function","id","unsigned","CPArray"])]);
}
var CPRunLoopLastNativeRunLoop = 0;

{var the_class = objj_allocateClassPair(CPObject, "CPRunLoop"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_runLoopLock", "BOOL"), new objj_ivar("_timersForModes", "Object"), new objj_ivar("_nativeTimersForModes", "Object"), new objj_ivar("_nextTimerFireDatesForModes", "CPDate"), new objj_ivar("_didAddTimer", "BOOL"), new objj_ivar("_effectiveDate", "CPDate"), new objj_ivar("_orderedPerforms", "CPArray"), new objj_ivar("_runLoopInsuranceTimer", "int"), new objj_ivar("_observers", "CPArray")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPRunLoop__init(self, _cmd)
{
    self = (objj_getClass("CPRunLoop").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._orderedPerforms = [];
        self._timersForModes = {};
        self._nativeTimersForModes = {};
        self._nextTimerFireDatesForModes = {};
        self._observers = nil;
    }
    return self;
}

,["id"]), new objj_method(sel_getUid("performSelector:target:argument:order:modes:"), function $CPRunLoop__performSelector_target_argument_order_modes_(self, _cmd, aSelector, aTarget, anArgument, anOrder, modes)
{
    var perform = (_CPRunLoopPerform.isa.method_msgSend["performWithSelector:target:argument:order:modes:"] || _objj_forward)(_CPRunLoopPerform, (_CPRunLoopPerform.isa.method_dtable["performWithSelector:target:argument:order:modes:"], _CPRunLoopPerform.isa.method_dtable["performWithSelector:target:argument:order:modes:"], _CPRunLoopPerform.isa.method_dtable["performWithSelector:target:argument:order:modes:"], _CPRunLoopPerform.isa.method_dtable["performWithSelector:target:argument:order:modes:"], _CPRunLoopPerform.isa.method_dtable["performWithSelector:target:argument:order:modes:"], "performWithSelector:target:argument:order:modes:"), aSelector, aTarget, anArgument, anOrder, modes),
        count = self._orderedPerforms.length;
    while (count--)
        if (anOrder < ((___r1 = self._orderedPerforms[count]), ___r1 == null ? null : (___r1.isa.method_msgSend["order"] || _objj_forward)(___r1, "order")))
            break;
    self._orderedPerforms.splice(count + 1, 0, perform);
    var ___r1;
}

,["void","SEL","id","id","int","CPArray"]), new objj_method(sel_getUid("performBlock:argument:order:modes:"), function $CPRunLoop__performBlock_argument_order_modes_(self, _cmd, aBlock, anArgument, anOrder, modes)
{
    var perform = (_CPRunLoopPerform.isa.method_msgSend["performWithBlock:argument:order:modes:"] || _objj_forward)(_CPRunLoopPerform, (_CPRunLoopPerform.isa.method_dtable["performWithBlock:argument:order:modes:"], _CPRunLoopPerform.isa.method_dtable["performWithBlock:argument:order:modes:"], _CPRunLoopPerform.isa.method_dtable["performWithBlock:argument:order:modes:"], _CPRunLoopPerform.isa.method_dtable["performWithBlock:argument:order:modes:"], "performWithBlock:argument:order:modes:"), aBlock, anArgument, anOrder, modes),
        count = self._orderedPerforms.length;
    while (count--)
        if (anOrder < ((___r1 = self._orderedPerforms[count]), ___r1 == null ? null : (___r1.isa.method_msgSend["order"] || _objj_forward)(___r1, "order")))
            break;
    self._orderedPerforms.splice(count + 1, 0, perform);
    var ___r1;
}

,["void","Function","id","int","CPArray"]), new objj_method(sel_getUid("cancelPerformSelector:target:argument:"), function $CPRunLoop__cancelPerformSelector_target_argument_(self, _cmd, aSelector, aTarget, anArgument)
{
    var count = self._orderedPerforms.length;
    while (count--)
    {
        var perform = self._orderedPerforms[count];
        if ((perform == null ? null : (perform.isa.method_msgSend["selector"] || _objj_forward)(perform, (perform.isa.method_dtable["selector"], "selector"))) === aSelector && (perform == null ? null : (perform.isa.method_msgSend["target"] || _objj_forward)(perform, (perform.isa.method_dtable["target"], "target"))) == aTarget && (perform == null ? null : (perform.isa.method_msgSend["argument"] || _objj_forward)(perform, (perform.isa.method_dtable["argument"], "argument"))) == anArgument)
            ((___r1 = self._orderedPerforms[count]), ___r1 == null ? null : (___r1.isa.method_msgSend["invalidate"] || _objj_forward)(___r1, "invalidate"));
    }
    var ___r1;
}

,["void","SEL","id","id"]), new objj_method(sel_getUid("performSelectors"), function $CPRunLoop__performSelectors(self, _cmd)
{
    (self.isa.method_msgSend["limitDateForMode:"] || _objj_forward)(self, (self.isa.method_dtable["limitDateForMode:"], "limitDateForMode:"), CPDefaultRunLoopMode);
}

,["void"]), new objj_method(sel_getUid("addTimer:forMode:"), function $CPRunLoop__addTimer_forMode_(self, _cmd, aTimer, aMode)
{
    if (self._timersForModes[aMode])
        self._timersForModes[aMode].push(aTimer);
    else
        self._timersForModes[aMode] = [aTimer];
    self._didAddTimer = YES;
    if (!aTimer._lastNativeRunLoopsForModes)
        aTimer._lastNativeRunLoopsForModes = {};
    aTimer._lastNativeRunLoopsForModes[aMode] = CPRunLoopLastNativeRunLoop;
    if (((___r1 = CFBundle.environments()), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", "Browser")) !== CPNotFound)
    {
        if (!self._runLoopInsuranceTimer)
            self._runLoopInsuranceTimer = window.setNativeTimeout(            function()
            {
                (self.isa.method_msgSend["limitDateForMode:"] || _objj_forward)(self, (self.isa.method_dtable["limitDateForMode:"], "limitDateForMode:"), CPDefaultRunLoopMode);
            }, 0);
    }
    var ___r1;
}

,["void","CPTimer","CPString"]), new objj_method(sel_getUid("limitDateForMode:"), function $CPRunLoop__limitDateForMode_(self, _cmd, aMode)
{
    if (self._runLoopLock)
        return;
    self._runLoopLock = YES;
    if (((___r1 = CFBundle.environments()), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", "Browser")) !== CPNotFound)
    {
        if (self._runLoopInsuranceTimer)
        {
            window.clearNativeTimeout(self._runLoopInsuranceTimer);
            self._runLoopInsuranceTimer = nil;
        }
    }
    var now = self._effectiveDate ? ((___r1 = self._effectiveDate), ___r1 == null ? null : (___r1.isa.method_msgSend["laterDate:"] || _objj_forward)(___r1, (self._effectiveDate.isa.method_dtable["laterDate:"], "laterDate:"), (CPDate.isa.method_msgSend["date"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["date"], "date")))) : (CPDate.isa.method_msgSend["date"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["date"], "date")),
        nextFireDate = nil,
        nextTimerFireDate = self._nextTimerFireDatesForModes[aMode];
    if (self._didAddTimer || nextTimerFireDate && nextTimerFireDate <= now)
    {
        self._didAddTimer = NO;
        if (self._nativeTimersForModes[aMode] !== nil)
        {
            window.clearNativeTimeout(self._nativeTimersForModes[aMode]);
            self._nativeTimersForModes[aMode] = nil;
        }
        var timers = self._timersForModes[aMode],
            index = timers.length;
        self._timersForModes[aMode] = nil;
        var hasNativeTimers = ((___r1 = CFBundle.environments()), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:"] || _objj_forward)(___r1, "indexOfObject:", "Browser")) !== CPNotFound;
        while (index--)
        {
            var timer = timers[index];
            if ((!hasNativeTimers || timer._lastNativeRunLoopsForModes[aMode] < CPRunLoopLastNativeRunLoop) && timer._isValid && timer._fireDate <= now)
                (timer == null ? null : (timer.isa.method_msgSend["fire"] || _objj_forward)(timer, (timer.isa.method_dtable["fire"], "fire")));
            if (timer._isValid)
                nextFireDate = nextFireDate === nil ? timer._fireDate : (nextFireDate == null ? null : (nextFireDate.isa.method_msgSend["earlierDate:"] || _objj_forward)(nextFireDate, (nextFireDate.isa.method_dtable["earlierDate:"], "earlierDate:"), timer._fireDate));
            else
            {
                timer._lastNativeRunLoopsForModes[aMode] = 0;
                timers.splice(index, 1);
            }
        }
        var newTimers = self._timersForModes[aMode];
        if (newTimers && newTimers.length)
        {
            index = newTimers.length;
            while (index--)
            {
                var timer = newTimers[index];
                if ((timer == null ? null : (timer.isa.method_msgSend["isValid"] || _objj_forward)(timer, (timer.isa.method_dtable["isValid"], "isValid"))))
                    nextFireDate = nextFireDate === nil ? timer._fireDate : (nextFireDate == null ? null : (nextFireDate.isa.method_msgSend["earlierDate:"] || _objj_forward)(nextFireDate, (nextFireDate.isa.method_dtable["earlierDate:"], "earlierDate:"), timer._fireDate));
                else
                    newTimers.splice(index, 1);
            }
            self._timersForModes[aMode] = newTimers.concat(timers);
        }
        else
            self._timersForModes[aMode] = timers;
        self._nextTimerFireDatesForModes[aMode] = nextFireDate;
        if (self._nextTimerFireDatesForModes[aMode] !== nil)
            self._nativeTimersForModes[aMode] = window.setNativeTimeout(            function()
            {
                self._effectiveDate = nextFireDate;
                self._nativeTimersForModes[aMode] = nil;
                ++CPRunLoopLastNativeRunLoop;
                (self.isa.method_msgSend["limitDateForMode:"] || _objj_forward)(self, (self.isa.method_dtable["limitDateForMode:"], "limitDateForMode:"), aMode);
                self._effectiveDate = nil;
            }, MAX(0, (nextFireDate == null ? null : (nextFireDate.isa.method_msgSend["timeIntervalSinceNow"] || _objj_forward)(nextFireDate, (nextFireDate.isa.method_dtable["timeIntervalSinceNow"], "timeIntervalSinceNow"))) * 1000));
    }
    var performs = self._orderedPerforms,
        index = performs.length;
    self._orderedPerforms = [];
    while (index--)
    {
        var perform = performs[index];
        if ((perform == null ? null : (perform.isa.method_msgSend["fireInMode:"] || _objj_forward)(perform, (perform.isa.method_dtable["fireInMode:"], "fireInMode:"), CPDefaultRunLoopMode)))
        {
            (_CPRunLoopPerform.isa.method_msgSend["_poolPerform:"] || _objj_forward)(_CPRunLoopPerform, (_CPRunLoopPerform.isa.method_dtable["_poolPerform:"], "_poolPerform:"), perform);
            performs.splice(index, 1);
        }
    }
    if (self._orderedPerforms.length)
    {
        self._orderedPerforms = self._orderedPerforms.concat(performs);
        self._orderedPerforms.sort(_CPRunLoopPerformCompare);
    }
    else
        self._orderedPerforms = performs;
    if (self._observers)
    {
        var count = self._observers.length;
        while (count--)
        {
            var obs = self._observers[count];
            obs.callout();
            if (!obs.repeats)
                self._observers.splice(count, 1);
        }
    }
    self._runLoopLock = NO;
    return nextFireDate;
    var ___r1;
}

,["CPDate","CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("initialize"), function $CPRunLoop__initialize(self, _cmd)
{
    if (self !== (CPRunLoop.isa.method_msgSend["class"] || _objj_forward)(CPRunLoop, (CPRunLoop.isa.method_dtable["class"], "class")))
        return;
    CPMainRunLoop = ((___r1 = (CPRunLoop.isa.method_msgSend["alloc"] || _objj_forward)(CPRunLoop, (CPRunLoop.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("currentRunLoop"), function $CPRunLoop__currentRunLoop(self, _cmd)
{
    return CPMainRunLoop;
}

,["CPRunLoop"]), new objj_method(sel_getUid("mainRunLoop"), function $CPRunLoop__mainRunLoop(self, _cmd)
{
    return CPMainRunLoop;
}

,["CPRunLoop"])]);
}
CFRunLoopObserver = function(activities, repeats, order, callout, context)
{
    this.activities = activities;
    this.repeats = repeats;
    this.order = order;
    this.callout = callout;
    this.context = context;
    this.isvalid = true;
}
CFRunLoopObserverCreate = function(activities, repeats, order, callout, context)
{
    return new CFRunLoopObserver(activities, repeats, order, callout, context);
}
CFRunLoopAddObserver = function(runloop, observer, mode)
{
    var observers = runloop._observers;
    if (!observers)
        observers = runloop._observers = [];
    if (observers.indexOf(observer) == -1)
        observers.push(observer);
}
CFRunLoopObserverInvalidate = function(runloop, observer, mode)
{
    CFRunLoopRemoveObserver(runloop, observer, mode);
}
CFRunLoopRemoveObserver = function(runloop, observer, mode)
{
    var observers = runloop._observers;
    if (observers)
    {
        var idx = observers.indexOf(observer);
        if (idx !== -1)
        {
            observers.splice(idx, 1);
            if (observers.length == 0)
                runloop._observers = nil;
        }
    }
}
p;22;CPNotificationCenter.jt;54287;@STATIC;1.0;i;9;CPArray.ji;14;CPDictionary.ji;13;CPException.ji;16;CPNotification.ji;8;CPNull.ji;18;CPOperationQueue.ji;13;CPOperation.ji;7;CPSet.jS;28332;;25792;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPNotification.j", YES);objj_executeFile("CPNull.j", YES);objj_executeFile("CPOperationQueue.j", YES);objj_executeFile("CPOperation.j", YES);objj_executeFile("CPSet.j", YES);var CPNotificationDefaultCenter = nil;

{var the_class = objj_allocateClassPair(CPObject, "CPNotificationCenter"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_namedRegistries", "CPMutableDictionary"), new objj_ivar("_unnamedRegistry", "_CPNotificationRegistry")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPNotificationCenter__init(self, _cmd)
{
    self = (objj_getClass("CPNotificationCenter").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._namedRegistries = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        self._unnamedRegistry = ((___r1 = (_CPNotificationRegistry == null ? null : (_CPNotificationRegistry.isa.method_msgSend["alloc"] || _objj_forward)(_CPNotificationRegistry, (_CPNotificationRegistry.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    }
    return self;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("addObserver:selector:name:object:"), function $CPNotificationCenter__addObserver_selector_name_object_(self, _cmd, anObserver, aSelector, aNotificationName, anObject)
{
    var registry = (self.isa.method_msgSend["_registryForNotificationName:"] || _objj_forward)(self, (self.isa.method_dtable["_registryForNotificationName:"], "_registryForNotificationName:"), aNotificationName),
        observer = ((___r1 = (_CPNotificationObserver == null ? null : (_CPNotificationObserver.isa.method_msgSend["alloc"] || _objj_forward)(_CPNotificationObserver, (_CPNotificationObserver.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObserver:selector:"] || _objj_forward)(___r1, "initWithObserver:selector:", anObserver, aSelector));
    (registry == null ? null : (registry.isa.method_msgSend["addObserver:object:"] || _objj_forward)(registry, (registry.isa.method_dtable["addObserver:object:"], registry.isa.method_dtable["addObserver:object:"], "addObserver:object:"), observer, anObject));
    var ___r1;
}

,["void","id","SEL","CPString","id"]), new objj_method(sel_getUid("addObserverForName:object:queue:usingBlock:"), function $CPNotificationCenter__addObserverForName_object_queue_usingBlock_(self, _cmd, aNotificationName, anObject, queue, block)
{
    var registry = (self.isa.method_msgSend["_registryForNotificationName:"] || _objj_forward)(self, (self.isa.method_dtable["_registryForNotificationName:"], "_registryForNotificationName:"), aNotificationName),
        observer = ((___r1 = (_CPNotificationObserver == null ? null : (_CPNotificationObserver.isa.method_msgSend["alloc"] || _objj_forward)(_CPNotificationObserver, (_CPNotificationObserver.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithBlock:queue:"] || _objj_forward)(___r1, "initWithBlock:queue:", block, queue));
    (registry == null ? null : (registry.isa.method_msgSend["addObserver:object:"] || _objj_forward)(registry, (registry.isa.method_dtable["addObserver:object:"], registry.isa.method_dtable["addObserver:object:"], "addObserver:object:"), observer, anObject));
    return observer;
    var ___r1;
}

,["id","CPString","id","CPOperationQueue","Function"]), new objj_method(sel_getUid("_registryForNotificationName:"), function $CPNotificationCenter___registryForNotificationName_(self, _cmd, aNotificationName)
{
    var registry;
    if (aNotificationName == nil)
        registry = self._unnamedRegistry;
    else if (!(registry = ((___r1 = self._namedRegistries), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._namedRegistries.isa.method_dtable["objectForKey:"], "objectForKey:"), aNotificationName))))
    {
        registry = ((___r1 = (_CPNotificationRegistry == null ? null : (_CPNotificationRegistry.isa.method_msgSend["alloc"] || _objj_forward)(_CPNotificationRegistry, (_CPNotificationRegistry.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        ((___r1 = self._namedRegistries), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._namedRegistries.isa.method_dtable["setObject:forKey:"], self._namedRegistries.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), registry, aNotificationName));
    }
    return registry;
    var ___r1;
}

,["_CPNotificationRegistry","CPString"]), new objj_method(sel_getUid("removeObserver:"), function $CPNotificationCenter__removeObserver_(self, _cmd, anObserver)
{
    var name = nil,
        names = ((___r1 = self._namedRegistries), ___r1 == null ? null : (___r1.isa.method_msgSend["keyEnumerator"] || _objj_forward)(___r1, (self._namedRegistries.isa.method_dtable["keyEnumerator"], "keyEnumerator")));
    while ((name = (names == null ? null : (names.isa.method_msgSend["nextObject"] || _objj_forward)(names, (names.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        ((___r1 = ((___r2 = self._namedRegistries), ___r2 == null ? null : (___r2.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r2, (self._namedRegistries.isa.method_dtable["objectForKey:"], "objectForKey:"), name))), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObserver:object:"] || _objj_forward)(___r1, "removeObserver:object:", anObserver, nil));
    ((___r1 = self._unnamedRegistry), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObserver:object:"] || _objj_forward)(___r1, (self._unnamedRegistry.isa.method_dtable["removeObserver:object:"], self._unnamedRegistry.isa.method_dtable["removeObserver:object:"], "removeObserver:object:"), anObserver, nil));
    var ___r1, ___r2;
}

,["void","id"]), new objj_method(sel_getUid("removeObserver:name:object:"), function $CPNotificationCenter__removeObserver_name_object_(self, _cmd, anObserver, aNotificationName, anObject)
{
    if (aNotificationName == nil)
    {
        var name = nil,
            names = ((___r1 = self._namedRegistries), ___r1 == null ? null : (___r1.isa.method_msgSend["keyEnumerator"] || _objj_forward)(___r1, (self._namedRegistries.isa.method_dtable["keyEnumerator"], "keyEnumerator")));
        while ((name = (names == null ? null : (names.isa.method_msgSend["nextObject"] || _objj_forward)(names, (names.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
            ((___r1 = ((___r2 = self._namedRegistries), ___r2 == null ? null : (___r2.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r2, (self._namedRegistries.isa.method_dtable["objectForKey:"], "objectForKey:"), name))), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObserver:object:"] || _objj_forward)(___r1, "removeObserver:object:", anObserver, anObject));
        ((___r1 = self._unnamedRegistry), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObserver:object:"] || _objj_forward)(___r1, (self._unnamedRegistry.isa.method_dtable["removeObserver:object:"], self._unnamedRegistry.isa.method_dtable["removeObserver:object:"], "removeObserver:object:"), anObserver, anObject));
    }
    else
        ((___r1 = ((___r2 = self._namedRegistries), ___r2 == null ? null : (___r2.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r2, (self._namedRegistries.isa.method_dtable["objectForKey:"], "objectForKey:"), aNotificationName))), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObserver:object:"] || _objj_forward)(___r1, "removeObserver:object:", anObserver, anObject));
    var ___r1, ___r2;
}

,["void","id","CPString","id"]), new objj_method(sel_getUid("postNotification:"), function $CPNotificationCenter__postNotification_(self, _cmd, aNotification)
{
    if (!aNotification)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "postNotification: does not except 'nil' notifications");
    _CPNotificationCenterPostNotification(self, aNotification);
}

,["void","CPNotification"]), new objj_method(sel_getUid("postNotificationName:object:userInfo:"), function $CPNotificationCenter__postNotificationName_object_userInfo_(self, _cmd, aNotificationName, anObject, aUserInfo)
{
    _CPNotificationCenterPostNotification(self, ((___r1 = (CPNotification.isa.method_msgSend["alloc"] || _objj_forward)(CPNotification, (CPNotification.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithName:object:userInfo:"] || _objj_forward)(___r1, "initWithName:object:userInfo:", aNotificationName, anObject, aUserInfo)));
    var ___r1;
}

,["void","CPString","id","CPDictionary"]), new objj_method(sel_getUid("postNotificationName:object:"), function $CPNotificationCenter__postNotificationName_object_(self, _cmd, aNotificationName, anObject)
{
    _CPNotificationCenterPostNotification(self, ((___r1 = (CPNotification.isa.method_msgSend["alloc"] || _objj_forward)(CPNotification, (CPNotification.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithName:object:userInfo:"] || _objj_forward)(___r1, "initWithName:object:userInfo:", aNotificationName, anObject, nil)));
    var ___r1;
}

,["void","CPString","id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("defaultCenter"), function $CPNotificationCenter__defaultCenter(self, _cmd)
{
    if (!CPNotificationDefaultCenter)
        CPNotificationDefaultCenter = ((___r1 = (CPNotificationCenter.isa.method_msgSend["alloc"] || _objj_forward)(CPNotificationCenter, (CPNotificationCenter.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    return CPNotificationDefaultCenter;
    var ___r1;
}

,["CPNotificationCenter"])]);
}
var _CPNotificationCenterPostNotification = function(self, aNotification)
{
    ((___r1 = self._unnamedRegistry), ___r1 == null ? null : (___r1.isa.method_msgSend["postNotification:"] || _objj_forward)(___r1, "postNotification:", aNotification));
    ((___r1 = ((___r2 = self._namedRegistries), ___r2 == null ? null : (___r2.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r2, "objectForKey:", (aNotification == null ? null : (aNotification.isa.method_msgSend["name"] || _objj_forward)(aNotification, (aNotification.isa.method_dtable["name"], "name")))))), ___r1 == null ? null : (___r1.isa.method_msgSend["postNotification:"] || _objj_forward)(___r1, "postNotification:", aNotification));
    var ___r1, ___r2;
};

{var the_class = objj_allocateClassPair(CPObject, "_CPNotificationRegistry"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_objectObservers", "CPDictionary")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $_CPNotificationRegistry__init(self, _cmd)
{
    self = (objj_getClass("_CPNotificationRegistry").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._objectObservers = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    }
    return self;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("addObserver:object:"), function $_CPNotificationRegistry__addObserver_object_(self, _cmd, anObserver, anObject)
{
    if (!anObject)
        anObject = (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null"));
    var observers = ((___r1 = self._objectObservers), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._objectObservers.isa.method_dtable["objectForKey:"], "objectForKey:"), (anObject == null ? null : (anObject.isa.method_msgSend["UID"] || _objj_forward)(anObject, (anObject.isa.method_dtable["UID"], "UID")))));
    if (!observers)
    {
        observers = (CPMutableSet.isa.method_msgSend["set"] || _objj_forward)(CPMutableSet, (CPMutableSet.isa.method_dtable["set"], "set"));
        ((___r1 = self._objectObservers), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._objectObservers.isa.method_dtable["setObject:forKey:"], self._objectObservers.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), observers, (anObject == null ? null : (anObject.isa.method_msgSend["UID"] || _objj_forward)(anObject, (anObject.isa.method_dtable["UID"], "UID")))));
    }
    (observers == null ? null : (observers.isa.method_msgSend["addObject:"] || _objj_forward)(observers, (observers.isa.method_dtable["addObject:"], "addObject:"), anObserver));
    var ___r1;
}

,["void","_CPNotificationObserver","id"]), new objj_method(sel_getUid("removeObserver:object:"), function $_CPNotificationRegistry__removeObserver_object_(self, _cmd, anObserver, anObject)
{
    var removedKeys = [];
    if (anObject == nil)
    {
        var key = nil,
            keys = ((___r1 = self._objectObservers), ___r1 == null ? null : (___r1.isa.method_msgSend["keyEnumerator"] || _objj_forward)(___r1, (self._objectObservers.isa.method_dtable["keyEnumerator"], "keyEnumerator")));
        while ((key = (keys == null ? null : (keys.isa.method_msgSend["nextObject"] || _objj_forward)(keys, (keys.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        {
            var observers = ((___r1 = self._objectObservers), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._objectObservers.isa.method_dtable["objectForKey:"], "objectForKey:"), key)),
                observer = nil,
                observersEnumerator = (observers == null ? null : (observers.isa.method_msgSend["objectEnumerator"] || _objj_forward)(observers, (observers.isa.method_dtable["objectEnumerator"], "objectEnumerator")));
            while ((observer = (observersEnumerator == null ? null : (observersEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(observersEnumerator, (observersEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
                if ((observer == null ? null : (observer.isa.method_msgSend["observer"] || _objj_forward)(observer, (observer.isa.method_dtable["observer"], "observer"))) == anObserver || (observer == null ? null : (observer.isa.method_msgSend["block"] || _objj_forward)(observer, (observer.isa.method_dtable["block"], "block"))) && (anObserver == null ? null : (anObserver.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(anObserver, (anObserver.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("block"))) && (observer == null ? null : (observer.isa.method_msgSend["block"] || _objj_forward)(observer, (observer.isa.method_dtable["block"], "block"))) == (anObserver == null ? null : (anObserver.isa.method_msgSend["block"] || _objj_forward)(anObserver, (anObserver.isa.method_dtable["block"], "block"))))
                    (observers == null ? null : (observers.isa.method_msgSend["removeObject:"] || _objj_forward)(observers, (observers.isa.method_dtable["removeObject:"], "removeObject:"), observer));
            if (!(observers == null ? null : (observers.isa.method_msgSend["count"] || _objj_forward)(observers, (observers.isa.method_dtable["count"], "count"))))
                removedKeys.push(key);
        }
    }
    else
    {
        var key = (anObject == null ? null : (anObject.isa.method_msgSend["UID"] || _objj_forward)(anObject, (anObject.isa.method_dtable["UID"], "UID"))),
            observers = ((___r1 = self._objectObservers), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._objectObservers.isa.method_dtable["objectForKey:"], "objectForKey:"), key)),
            observer = nil,
            observersEnumerator = (observers == null ? null : (observers.isa.method_msgSend["objectEnumerator"] || _objj_forward)(observers, (observers.isa.method_dtable["objectEnumerator"], "objectEnumerator")));
        while ((observer = (observersEnumerator == null ? null : (observersEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(observersEnumerator, (observersEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
            if ((observer == null ? null : (observer.isa.method_msgSend["observer"] || _objj_forward)(observer, (observer.isa.method_dtable["observer"], "observer"))) == anObserver || (observer == null ? null : (observer.isa.method_msgSend["block"] || _objj_forward)(observer, (observer.isa.method_dtable["block"], "block"))) && (anObserver == null ? null : (anObserver.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(anObserver, (anObserver.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("block"))) && (observer == null ? null : (observer.isa.method_msgSend["block"] || _objj_forward)(observer, (observer.isa.method_dtable["block"], "block"))) == (anObserver == null ? null : (anObserver.isa.method_msgSend["block"] || _objj_forward)(anObserver, (anObserver.isa.method_dtable["block"], "block"))))
                (observers == null ? null : (observers.isa.method_msgSend["removeObject:"] || _objj_forward)(observers, (observers.isa.method_dtable["removeObject:"], "removeObject:"), observer));
        if (!(observers == null ? null : (observers.isa.method_msgSend["count"] || _objj_forward)(observers, (observers.isa.method_dtable["count"], "count"))))
            removedKeys.push(key);
    }
    var count = removedKeys.length;
    while (count--)
        ((___r1 = self._objectObservers), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObjectForKey:"] || _objj_forward)(___r1, (self._objectObservers.isa.method_dtable["removeObjectForKey:"], "removeObjectForKey:"), removedKeys[count]));
    var ___r1;
}

,["void","id","id"]), new objj_method(sel_getUid("postNotification:"), function $_CPNotificationRegistry__postNotification_(self, _cmd, aNotification)
{
    var object = (aNotification == null ? null : (aNotification.isa.method_msgSend["object"] || _objj_forward)(aNotification, (aNotification.isa.method_dtable["object"], "object"))),
        currentObservers = nil;
    if (object != nil && (currentObservers = ((___r1 = self._objectObservers), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._objectObservers.isa.method_dtable["objectForKey:"], "objectForKey:"), (object == null ? null : (object.isa.method_msgSend["UID"] || _objj_forward)(object, (object.isa.method_dtable["UID"], "UID")))))))
    {
        var observers = (currentObservers == null ? null : (currentObservers.isa.method_msgSend["copy"] || _objj_forward)(currentObservers, (currentObservers.isa.method_dtable["copy"], "copy"))),
            observer = nil,
            observersEnumerator = (observers == null ? null : (observers.isa.method_msgSend["objectEnumerator"] || _objj_forward)(observers, (observers.isa.method_dtable["objectEnumerator"], "objectEnumerator")));
        while ((observer = (observersEnumerator == null ? null : (observersEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(observersEnumerator, (observersEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        {
            if ((currentObservers == null ? null : (currentObservers.isa.method_msgSend["containsObject:"] || _objj_forward)(currentObservers, (currentObservers.isa.method_dtable["containsObject:"], "containsObject:"), observer)))
                (observer == null ? null : (observer.isa.method_msgSend["postNotification:"] || _objj_forward)(observer, (observer.isa.method_dtable["postNotification:"], "postNotification:"), aNotification));
        }
    }
    currentObservers = ((___r1 = self._objectObservers), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._objectObservers.isa.method_dtable["objectForKey:"], "objectForKey:"), ((___r2 = (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null"))), ___r2 == null ? null : (___r2.isa.method_msgSend["UID"] || _objj_forward)(___r2, "UID"))));
    if (!currentObservers)
        return;
    var observers = (currentObservers == null ? null : (currentObservers.isa.method_msgSend["copy"] || _objj_forward)(currentObservers, (currentObservers.isa.method_dtable["copy"], "copy"))),
        observersEnumerator = (observers == null ? null : (observers.isa.method_msgSend["objectEnumerator"] || _objj_forward)(observers, (observers.isa.method_dtable["objectEnumerator"], "objectEnumerator")));
    while ((observer = (observersEnumerator == null ? null : (observersEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(observersEnumerator, (observersEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
    {
        if ((currentObservers == null ? null : (currentObservers.isa.method_msgSend["containsObject:"] || _objj_forward)(currentObservers, (currentObservers.isa.method_dtable["containsObject:"], "containsObject:"), observer)))
            (observer == null ? null : (observer.isa.method_msgSend["postNotification:"] || _objj_forward)(observer, (observer.isa.method_dtable["postNotification:"], "postNotification:"), aNotification));
    }
    var ___r1, ___r2;
}

,["void","CPNotification"]), new objj_method(sel_getUid("count"), function $_CPNotificationRegistry__count(self, _cmd)
{
    return ((___r1 = self._objectObservers), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._objectObservers.isa.method_dtable["count"], "count")));
    var ___r1;
}

,["unsigned"])]);
}

{var the_class = objj_allocateClassPair(CPObject, "_CPNotificationObserver"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_operationQueue", "CPOperationQueue"), new objj_ivar("_observer", "id"), new objj_ivar("_block", "Function"), new objj_ivar("_selector", "SEL")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithObserver:selector:"), function $_CPNotificationObserver__initWithObserver_selector_(self, _cmd, anObserver, aSelector)
{
    if (self)
    {
        self._observer = anObserver;
        self._selector = aSelector;
    }
    return self;
}

,["id","id","SEL"]), new objj_method(sel_getUid("initWithBlock:queue:"), function $_CPNotificationObserver__initWithBlock_queue_(self, _cmd, aBlock, aQueue)
{
    if (self)
    {
        self._block = aBlock;
        self._operationQueue = aQueue;
    }
    return self;
}

,["id","Function","CPOperationQueue"]), new objj_method(sel_getUid("observer"), function $_CPNotificationObserver__observer(self, _cmd)
{
    return self._observer;
}

,["id"]), new objj_method(sel_getUid("block"), function $_CPNotificationObserver__block(self, _cmd)
{
    return self._block;
}

,["id"]), new objj_method(sel_getUid("postNotification:"), function $_CPNotificationObserver__postNotification_(self, _cmd, aNotification)
{
    if (self._block)
    {
        if (!self._operationQueue)
            self._block(aNotification);
        else
            ((___r1 = self._operationQueue), ___r1 == null ? null : (___r1.isa.method_msgSend["addOperation:"] || _objj_forward)(___r1, (self._operationQueue.isa.method_dtable["addOperation:"], "addOperation:"), ((___r2 = (_CPNotificationObserverOperation == null ? null : (_CPNotificationObserverOperation.isa.method_msgSend["alloc"] || _objj_forward)(_CPNotificationObserverOperation, (_CPNotificationObserverOperation.isa.method_dtable["alloc"], "alloc")))), ___r2 == null ? null : (___r2.isa.method_msgSend["initWithBlock:notification:"] || _objj_forward)(___r2, "initWithBlock:notification:", self._block, aNotification))));
        return;
    }
    ((___r1 = self._observer), ___r1 == null ? null : (___r1.isa.method_msgSend["performSelector:withObject:"] || _objj_forward)(___r1, (self._observer.isa.method_dtable["performSelector:withObject:"], self._observer.isa.method_dtable["performSelector:withObject:"], "performSelector:withObject:"), self._selector, aNotification));
    var ___r1, ___r2;
}

,["void","CPNotification"])]);
}

{var the_class = objj_allocateClassPair(CPOperation, "_CPNotificationObserverOperation"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_notification", "CPNotification"), new objj_ivar("_block", "Function")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithBlock:notification:"), function $_CPNotificationObserverOperation__initWithBlock_notification_(self, _cmd, aBlock, aNotification)
{
    self = (objj_getClass("_CPNotificationObserverOperation").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._block = aBlock;
        self._notification = aNotification;
    }
    return self;
}

,["id","Function","CPNotification"]), new objj_method(sel_getUid("main"), function $_CPNotificationObserverOperation__main(self, _cmd)
{
    self._block(self._notification);
}

,["void"]), new objj_method(sel_getUid("isReady"), function $_CPNotificationObserverOperation__isReady(self, _cmd)
{
    return YES;
}

,["BOOL"])]);
}
p;10;CPLocale.jt;25851;@STATIC;1.0;i;10;CPObject.jS;15700;t;10108;

objj_executeFile("CPObject.j", YES);CPLocaleIdentifier = "CPLocaleIdentifier";
CPLocaleLanguageCode = "CPLocaleLanguageCode";
CPLocaleCountryCode = "CPLocaleCountryCode";
CPLocaleScriptCode = "CPLocaleScriptCode";
CPLocaleVariantCode = "CPLocaleVariantCode";
CPLocaleExemplarCharacterSet = "CPLocaleExemplarCharacterSet";
CPLocaleCalendar = "CPLocaleCalendar";
CPLocaleCollationIdentifier = "CPLocaleCollationIdentifier";
CPLocaleUsesMetricSystem = "CPLocaleUsesMetricSystem";
CPLocaleMeasurementSystem = "CPLocaleMeasurementSystem";
CPLocaleDecimalSeparator = "CPLocaleDecimalSeparator";
CPLocaleGroupingSeparator = "CPLocaleGroupingSeparator";
CPLocaleCurrencySymbol = "CPLocaleCurrencySymbol";
CPLocaleCurrencyCode = "CPLocaleCurrencyCode";
CPLocaleCollatorIdentifier = "CPLocaleCollatorIdentifier";
CPLocaleQuotationBeginDelimiterKey = "CPLocaleQuotationBeginDelimiterKey";
CPLocaleQuotationEndDelimiterKey = "CPLocaleQuotationEndDelimiterKey";
CPLocaleAlternateQuotationBeginDelimiterKey = "CPLocaleAlternateQuotationBeginDelimiterKey";
CPLocaleAlternateQuotationEndDelimiterKey = "CPLocaleAlternateQuotationEndDelimiterKey";
CPGregorianCalendar = "CPGregorianCalendar";
CPBuddhistCalendar = "CPBuddhistCalendar";
CPChineseCalendar = "CPChineseCalendar";
CPHebrewCalendar = "CPHebrewCalendar";
CPIslamicCalendar = "CPIslamicCalendar";
CPIslamicCivilCalendar = "CPIslamicCivilCalendar";
CPJapaneseCalendar = "CPJapaneseCalendar";
CPRepublicOfChinaCalendar = "CPRepublicOfChinaCalendar";
CPPersianCalendar = "CPPersianCalendar";
CPIndianCalendar = "CPIndianCalendar";
CPISO8601Calendar = "CPISO8601Calendar";
CPLocaleLanguageDirectionUnknown = "CPLocaleLanguageDirectionUnknown";
CPLocaleLanguageDirectionLeftToRight = "CPLocaleLanguageDirectionLeftToRight";
CPLocaleLanguageDirectionRightToLeft = "CPLocaleLanguageDirectionRightToLeft";
CPLocaleLanguageDirectionTopToBottom = "CPLocaleLanguageDirectionTopToBottom";
CPLocaleLanguageDirectionBottomToTop = "CPLocaleLanguageDirectionBottomToTop";
var countryCodes = ["DE", "FR", "ES", "GB", "US", "SE"],
    languageCodes = ["en", "de", "es", "fr", "sv"],
    availableLocaleIdentifiers = ["de_DE", "en_GB", "en_US", "es_ES", "fr_FR", "sv_SE"];
var sharedSystemLocale = nil,
    sharedCurrentLocale = nil;

{var the_class = objj_allocateClassPair(CPObject, "CPLocale"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_locale", "CPDictionary")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithLocaleIdentifier:"), function $CPLocale__initWithLocaleIdentifier_(self, _cmd, anIdentifier)
{
    if (self == (objj_getClass("CPLocale").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        var parts = (anIdentifier == null ? null : (anIdentifier.isa.method_msgSend["componentsSeparatedByString:"] || _objj_forward)(anIdentifier, (anIdentifier.isa.method_dtable["componentsSeparatedByString:"], "componentsSeparatedByString:"), "_")),
            language = (parts == null ? null : (parts.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(parts, (parts.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), 0)),
            country = nil;
        if ((parts == null ? null : (parts.isa.method_msgSend["count"] || _objj_forward)(parts, (parts.isa.method_dtable["count"], "count"))) > 1)
            country = (parts == null ? null : (parts.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(parts, (parts.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), 1));
        else
            country = anIdentifier;
        self._locale = ((___r1 = (CPDictionary == null ? null : (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, (CPDictionary.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["setObject:forKey:"], self._locale.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), anIdentifier, CPLocaleIdentifier));
        ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["setObject:forKey:"], self._locale.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), language, CPLocaleLanguageCode));
        ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["setObject:forKey:"], self._locale.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), country, CPLocaleCountryCode));
        if (((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, "respondsToSelector:", sel_getUid("_platformLocaleAdditionalDescriptionForIdentifier:"))))
        {
            var info = ((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["performSelector:withObject:"] || _objj_forward)(___r1, "performSelector:withObject:", sel_getUid("_platformLocaleAdditionalDescriptionForIdentifier:"), anIdentifier));
            ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["addEntriesFromDictionary:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["addEntriesFromDictionary:"], "addEntriesFromDictionary:"), info));
        }
        else
        {
            ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["setObject:forKey:"], self._locale.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), CPGregorianCalendar, CPLocaleCalendar));
        }
    }
    return self;
    var ___r1;
}

,["id","CPString"]), new objj_method(sel_getUid("localeIdentifier"), function $CPLocale__localeIdentifier(self, _cmd)
{
    return ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleIdentifier));
    var ___r1;
}

,["CPString"]), new objj_method(sel_getUid("objectForKey:"), function $CPLocale__objectForKey_(self, _cmd, aKey)
{
    return ((___r1 = self._locale), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._locale.isa.method_dtable["objectForKey:"], "objectForKey:"), aKey));
    var ___r1;
}

,["id","id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("systemLocale"), function $CPLocale__systemLocale(self, _cmd)
{
    if (!sharedSystemLocale)
        sharedSystemLocale = ((___r1 = (CPLocale.isa.method_msgSend["alloc"] || _objj_forward)(CPLocale, (CPLocale.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithLocaleIdentifier:"] || _objj_forward)(___r1, "initWithLocaleIdentifier:", "en_US"));
    return sharedSystemLocale;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("currentLocale"), function $CPLocale__currentLocale(self, _cmd)
{
    if (!sharedCurrentLocale)
    {
        var localeIdentifier = "en_US",
            language;
        if (typeof navigator !== "undefined")
        {
            language = typeof navigator.language !== "undefined" ? navigator.language : navigator.userLanguage;
            if (language)
            {
                language = (language.replace("-", "_")).substring(0, 5);
                language = (language.substring(0, 3)).toLowerCase() + (language.substring(3, 5)).toUpperCase();
                if ((availableLocaleIdentifiers == null ? null : (availableLocaleIdentifiers.isa.method_msgSend["indexOfObject:"] || _objj_forward)(availableLocaleIdentifiers, (availableLocaleIdentifiers.isa.method_dtable["indexOfObject:"], "indexOfObject:"), language)) !== CPNotFound)
                    localeIdentifier = language;
            }
        }
        sharedCurrentLocale = ((___r1 = (CPLocale.isa.method_msgSend["alloc"] || _objj_forward)(CPLocale, (CPLocale.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithLocaleIdentifier:"] || _objj_forward)(___r1, "initWithLocaleIdentifier:", localeIdentifier));
    }
    return sharedCurrentLocale;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("availableLocaleIdentifiers"), function $CPLocale__availableLocaleIdentifiers(self, _cmd)
{
    return availableLocaleIdentifiers;
}

,["CPArray"]), new objj_method(sel_getUid("ISOCountryCodes"), function $CPLocale__ISOCountryCodes(self, _cmd)
{
    return countryCodes;
}

,["CPArray"]), new objj_method(sel_getUid("ISOLanguageCodes"), function $CPLocale__ISOLanguageCodes(self, _cmd)
{
    return languageCodes;
}

,["CPArray"])]);
}
var CPLocaleIdentifierLocaleKey = "CPLocaleIdentifierLocaleKey";
{
var the_class = objj_getClass("CPLocale")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPLocale\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPLocale__initWithCoder_(self, _cmd, aCoder)
{
    if (self)
    {
        self._locale = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPLocaleIdentifierLocaleKey));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPLocale__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._locale, CPLocaleIdentifierLocaleKey));
}

,["void","CPCoder"])]);
}
p;14;CPURLRequest.jt;25618;@STATIC;1.0;i;14;CPDictionary.ji;10;CPObject.ji;10;CPString.ji;7;CPURL.jS;14616;;10914;

objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPString.j", YES);objj_executeFile("CPURL.j", YES);{var the_typedef = objj_allocateTypeDef("CPURLRequestCachePolicy");
objj_registerTypeDef(the_typedef);
}CPURLRequestUseProtocolCachePolicy = 0;
CPURLRequestReloadIgnoringLocalCacheData = 1;
CPURLRequestReturnCacheDataElseLoad = 2;
CPURLRequestReturnCacheDataDontLoad = 3;

{var the_class = objj_allocateClassPair(CPObject, "CPURLRequest"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_URL", "CPURL"), new objj_ivar("_HTTPBody", "CPString"), new objj_ivar("_HTTPMethod", "CPString"), new objj_ivar("_withCredentials", "BOOL"), new objj_ivar("_HTTPHeaderFields", "CPDictionary"), new objj_ivar("_timeoutInterval", "CPTimeInterval"), new objj_ivar("_cachePolicy", "CPURLRequestCachePolicy")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("URL"), function $CPURLRequest__URL(self, _cmd)
{
    return self._URL;
}

,["CPURL"]), new objj_method(sel_getUid("setURL:"), function $CPURLRequest__setURL_(self, _cmd, newValue)
{
    self._URL = newValue;
}

,["void","CPURL"]), new objj_method(sel_getUid("HTTPBody"), function $CPURLRequest__HTTPBody(self, _cmd)
{
    return self._HTTPBody;
}

,["CPString"]), new objj_method(sel_getUid("setHTTPBody:"), function $CPURLRequest__setHTTPBody_(self, _cmd, newValue)
{
    self._HTTPBody = newValue;
}

,["void","CPString"]), new objj_method(sel_getUid("HTTPMethod"), function $CPURLRequest__HTTPMethod(self, _cmd)
{
    return self._HTTPMethod;
}

,["CPString"]), new objj_method(sel_getUid("setHTTPMethod:"), function $CPURLRequest__setHTTPMethod_(self, _cmd, newValue)
{
    self._HTTPMethod = newValue;
}

,["void","CPString"]), new objj_method(sel_getUid("withCredentials"), function $CPURLRequest__withCredentials(self, _cmd)
{
    return self._withCredentials;
}

,["BOOL"]), new objj_method(sel_getUid("setWithCredentials:"), function $CPURLRequest__setWithCredentials_(self, _cmd, newValue)
{
    self._withCredentials = newValue;
}

,["void","BOOL"]), new objj_method(sel_getUid("allHTTPHeaderFields"), function $CPURLRequest__allHTTPHeaderFields(self, _cmd)
{
    return self._HTTPHeaderFields;
}

,["CPDictionary"]), new objj_method(sel_getUid("timeoutInterval"), function $CPURLRequest__timeoutInterval(self, _cmd)
{
    return self._timeoutInterval;
}

,["CPTimeInterval"]), new objj_method(sel_getUid("cachePolicy"), function $CPURLRequest__cachePolicy(self, _cmd)
{
    return self._cachePolicy;
}

,["CPURLRequestCachePolicy"]), new objj_method(sel_getUid("init"), function $CPURLRequest__init(self, _cmd)
{
    return (self.isa.method_msgSend["initWithURL:"] || _objj_forward)(self, (self.isa.method_dtable["initWithURL:"], "initWithURL:"), nil);
}

,["id"]), new objj_method(sel_getUid("initWithURL:cachePolicy:timeoutInterval:"), function $CPURLRequest__initWithURL_cachePolicy_timeoutInterval_(self, _cmd, anURL, aCachePolicy, aTimeoutInterval)
{
    if (self = (self == null ? null : (self.isa.method_msgSend["initWithURL:"] || _objj_forward)(self, (self.isa.method_dtable["initWithURL:"], "initWithURL:"), anURL)))
    {
        self._cachePolicy = aCachePolicy;
        self._timeoutInterval = aTimeoutInterval;
        (self == null ? null : (self.isa.method_msgSend["_updateCacheControlHeader"] || _objj_forward)(self, (self.isa.method_dtable["_updateCacheControlHeader"], "_updateCacheControlHeader")));
    }
    return self;
}

,["id","CPURL","CPURLRequestCachePolicy","CPTimeInterval"]), new objj_method(sel_getUid("initWithURL:"), function $CPURLRequest__initWithURL_(self, _cmd, aURL)
{
    if (self = (objj_getClass("CPURLRequest").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        (self == null ? null : (self.isa.method_msgSend["setURL:"] || _objj_forward)(self, (self.isa.method_dtable["setURL:"], "setURL:"), aURL));
        self._HTTPBody = "";
        self._HTTPMethod = "GET";
        self._HTTPHeaderFields = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        self._withCredentials = NO;
        self._timeoutInterval = 60.0;
        self._cachePolicy = CPURLRequestUseProtocolCachePolicy;
        (self == null ? null : (self.isa.method_msgSend["setValue:forHTTPHeaderField:"] || _objj_forward)(self, (self.isa.method_dtable["setValue:forHTTPHeaderField:"], self.isa.method_dtable["setValue:forHTTPHeaderField:"], "setValue:forHTTPHeaderField:"), "Thu, 01 Jan 1970 00:00:00 GMT", "If-Modified-Since"));
        (self == null ? null : (self.isa.method_msgSend["setValue:forHTTPHeaderField:"] || _objj_forward)(self, (self.isa.method_dtable["setValue:forHTTPHeaderField:"], self.isa.method_dtable["setValue:forHTTPHeaderField:"], "setValue:forHTTPHeaderField:"), "XMLHttpRequest", "X-Requested-With"));
        (self == null ? null : (self.isa.method_msgSend["_updateCacheControlHeader"] || _objj_forward)(self, (self.isa.method_dtable["_updateCacheControlHeader"], "_updateCacheControlHeader")));
    }
    return self;
    var ___r1;
}

,["id","CPURL"]), new objj_method(sel_getUid("setURL:"), function $CPURLRequest__setURL_(self, _cmd, aURL)
{
    self._URL = new CFURL(aURL);
}

,["void","CPURL"]), new objj_method(sel_getUid("valueForHTTPHeaderField:"), function $CPURLRequest__valueForHTTPHeaderField_(self, _cmd, aField)
{
    return ((___r1 = self._HTTPHeaderFields), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._HTTPHeaderFields.isa.method_dtable["objectForKey:"], "objectForKey:"), aField));
    var ___r1;
}

,["CPString","CPString"]), new objj_method(sel_getUid("setValue:forHTTPHeaderField:"), function $CPURLRequest__setValue_forHTTPHeaderField_(self, _cmd, aValue, aField)
{
    ((___r1 = self._HTTPHeaderFields), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._HTTPHeaderFields.isa.method_dtable["setObject:forKey:"], self._HTTPHeaderFields.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), aValue, aField));
    var ___r1;
}

,["void","CPString","CPString"]), new objj_method(sel_getUid("_updateCacheControlHeader"), function $CPURLRequest___updateCacheControlHeader(self, _cmd)
{
    switch(self._cachePolicy) {
        case CPURLRequestUseProtocolCachePolicy:
            (self.isa.method_msgSend["setValue:forHTTPHeaderField:"] || _objj_forward)(self, (self.isa.method_dtable["setValue:forHTTPHeaderField:"], self.isa.method_dtable["setValue:forHTTPHeaderField:"], "setValue:forHTTPHeaderField:"), "no-cache", "Cache-Control");
            break;
        case CPURLRequestReturnCacheDataElseLoad:
            (self.isa.method_msgSend["setValue:forHTTPHeaderField:"] || _objj_forward)(self, (self.isa.method_dtable["setValue:forHTTPHeaderField:"], self.isa.method_dtable["setValue:forHTTPHeaderField:"], "setValue:forHTTPHeaderField:"), "max-stale=31536000", "Cache-Control");
            break;
        case CPURLRequestReturnCacheDataDontLoad:
            (self.isa.method_msgSend["setValue:forHTTPHeaderField:"] || _objj_forward)(self, (self.isa.method_dtable["setValue:forHTTPHeaderField:"], self.isa.method_dtable["setValue:forHTTPHeaderField:"], "setValue:forHTTPHeaderField:"), "only-if-cached", "Cache-Control");
            break;
        case CPURLRequestReloadIgnoringLocalCacheData:
            (self.isa.method_msgSend["setValue:forHTTPHeaderField:"] || _objj_forward)(self, (self.isa.method_dtable["setValue:forHTTPHeaderField:"], self.isa.method_dtable["setValue:forHTTPHeaderField:"], "setValue:forHTTPHeaderField:"), "no-cache", "Cache-Control");
            break;
default:
            (self.isa.method_msgSend["setValue:forHTTPHeaderField:"] || _objj_forward)(self, (self.isa.method_dtable["setValue:forHTTPHeaderField:"], self.isa.method_dtable["setValue:forHTTPHeaderField:"], "setValue:forHTTPHeaderField:"), "no-cache", "Cache-Control");
    }
}

,["void"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("requestWithURL:"), function $CPURLRequest__requestWithURL_(self, _cmd, aURL)
{
    return ((___r1 = (CPURLRequest.isa.method_msgSend["alloc"] || _objj_forward)(CPURLRequest, (CPURLRequest.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithURL:"] || _objj_forward)(___r1, "initWithURL:", aURL));
    var ___r1;
}

,["id","CPURL"]), new objj_method(sel_getUid("requestWithURL:cachePolicy:timeoutInterval:"), function $CPURLRequest__requestWithURL_cachePolicy_timeoutInterval_(self, _cmd, anURL, aCachePolicy, aTimeoutInterval)
{
    return ((___r1 = (CPURLRequest.isa.method_msgSend["alloc"] || _objj_forward)(CPURLRequest, (CPURLRequest.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithURL:cachePolicy:timeoutInterval:"] || _objj_forward)(___r1, "initWithURL:cachePolicy:timeoutInterval:", anURL, aCachePolicy, aTimeoutInterval));
    var ___r1;
}

,["id","CPURL","CPURLRequestCachePolicy","CPTimeInterval"])]);
}
{
var the_class = objj_getClass("CPURLRequest")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPURLRequest\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("copy"), function $CPURLRequest__copy(self, _cmd)
{
    var request = ((___r1 = (CPURLRequest.isa.method_msgSend["alloc"] || _objj_forward)(CPURLRequest, (CPURLRequest.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithURL:"] || _objj_forward)(___r1, "initWithURL:", (self.isa.method_msgSend["URL"] || _objj_forward)(self, (self.isa.method_dtable["URL"], "URL"))));
    (request == null ? null : (request.isa.method_msgSend["setHTTPBody:"] || _objj_forward)(request, (request.isa.method_dtable["setHTTPBody:"], "setHTTPBody:"), (self.isa.method_msgSend["HTTPBody"] || _objj_forward)(self, (self.isa.method_dtable["HTTPBody"], "HTTPBody"))));
    (request == null ? null : (request.isa.method_msgSend["setHTTPMethod:"] || _objj_forward)(request, (request.isa.method_dtable["setHTTPMethod:"], "setHTTPMethod:"), (self.isa.method_msgSend["HTTPMethod"] || _objj_forward)(self, (self.isa.method_dtable["HTTPMethod"], "HTTPMethod"))));
    (request == null ? null : (request.isa.method_msgSend["setWithCredentials:"] || _objj_forward)(request, (request.isa.method_dtable["setWithCredentials:"], "setWithCredentials:"), (self.isa.method_msgSend["withCredentials"] || _objj_forward)(self, (self.isa.method_dtable["withCredentials"], "withCredentials"))));
    request._HTTPHeaderFields = (self.isa.method_msgSend["allHTTPHeaderFields"] || _objj_forward)(self, (self.isa.method_dtable["allHTTPHeaderFields"], "allHTTPHeaderFields"));
    return request;
    var ___r1;
}

,["id"])]);
}
p;20;_CPTypeDefinitions.jt;2536;@STATIC;1.0;S;1768;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9DUFR5cGVEZWZpbml0aW9ucy5qIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBc0JBLGlEOztDQUNBLHFEOztDQUNBLHNEOztDQUNBLHNEOztDQUNBLG9EOztDQUNBLDZEOztDQUNBLGdFOztDQUNBLDBEIiwiZmlsZSI6Il9DUFR5cGVEZWZpbml0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi9Vc2Vycy9kYXZpZC9wcm9ncmFtcy9jYXBwdWNjaW5vL0ZvdW5kYXRpb24vIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIF9DUFR5cGVEZWZpbnRpb25zLmpcbiAqIEZvdW5kYXRpb25cbiAqXG4gKiBDcmVhdGVkIGJ5IEFudG9pbmUgTWVyY2FkYWwuXG4gKiBDb3B5cmlnaHQgMjAxNCwgQW50b2luZSBNZXJjYWRhbC5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXJcbiAqIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgbGlicmFyeTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZVxuICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAwMjExMC0xMzAxIFVTQVxuICovXG5cbkB0eXBlZGVmIENsYXNzXG5AdHlwZWRlZiBDUEludGVnZXJcbkB0eXBlZGVmIENQVUludGVnZXJcbkB0eXBlZGVmIERPTUVsZW1lbnRcbkB0eXBlZGVmIEpTT2JqZWN0XG5AdHlwZWRlZiBDUE1ldGhvZFNpZ25hdHVyZVxuQHR5cGVkZWYgQ1BQcm9wZXJ0eUxpc3RGb3JtYXRcbkB0eXBlZGVmIENQVGltZUludGVydmFsXG4iXX0=t;743;

{var the_typedef = objj_allocateTypeDef("Class");
objj_registerTypeDef(the_typedef);
}{var the_typedef = objj_allocateTypeDef("CPInteger");
objj_registerTypeDef(the_typedef);
}{var the_typedef = objj_allocateTypeDef("CPUInteger");
objj_registerTypeDef(the_typedef);
}{var the_typedef = objj_allocateTypeDef("DOMElement");
objj_registerTypeDef(the_typedef);
}{var the_typedef = objj_allocateTypeDef("JSObject");
objj_registerTypeDef(the_typedef);
}{var the_typedef = objj_allocateTypeDef("CPMethodSignature");
objj_registerTypeDef(the_typedef);
}{var the_typedef = objj_allocateTypeDef("CPPropertyListFormat");
objj_registerTypeDef(the_typedef);
}{var the_typedef = objj_allocateTypeDef("CPTimeInterval");
objj_registerTypeDef(the_typedef);
}p;12;Foundation.jt;8958;@STATIC;1.0;i;13;_CGGeometry.ji;9;CPArray.ji;10;CPBundle.ji;22;CPByteCountFormatter.ji;9;CPCache.ji;16;CPCharacterSet.ji;9;CPCoder.ji;23;CPComparisonPredicate.ji;21;CPCompoundPredicate.ji;8;CPData.ji;8;CPDate.ji;17;CPDateFormatter.ji;11;CPDecimal.ji;17;CPDecimalNumber.ji;18;CPDelayedPerform.ji;14;CPDictionary.ji;14;CPEnumerator.ji;9;CPError.ji;13;CPException.ji;14;CPExpression.ji;13;CPFormatter.ji;13;CPIndexPath.ji;12;CPIndexSet.ji;14;CPInvocation.ji;19;CPJSONPConnection.ji;17;CPKeyedArchiver.ji;19;CPKeyedUnarchiver.ji;18;CPKeyValueCoding.ji;21;CPKeyValueObserving.ji;10;CPLocale.ji;16;CPMutableArray.ji;14;CPMutableSet.ji;16;CPNotification.ji;22;CPNotificationCenter.ji;21;CPNotificationQueue.ji;8;CPNull.ji;10;CPNumber.ji;19;CPNumberFormatter.ji;10;CPObject.ji;15;CPObjJRuntime.ji;13;CPOperation.ji;18;CPOperationQueue.ji;13;CPPredicate.ji;29;CPPropertyListSerialization.ji;9;CPRange.ji;11;CPRunLoop.ji;11;CPScanner.ji;7;CPSet.ji;18;CPSortDescriptor.ji;10;CPString.ji;9;CPTimer.ji;12;CPTimeZone.ji;15;CPUndoManager.ji;7;CPURL.ji;17;CPURLConnection.ji;12;CPURLError.ji;14;CPURLRequest.ji;15;CPURLResponse.ji;16;CPUserDefaults.ji;20;CPUserNotification.ji;26;CPUserNotificationCenter.ji;22;CPUserSessionManager.ji;9;CPValue.ji;20;CPValueTransformer.jS;5088;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZvdW5kYXRpb24uaiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQXNCQSxrQixxQkFDQSxrQixpQkFDQSxrQixrQkFDQSxrQiw4QkFDQSxrQixpQkFDQSxrQix3QkFDQSxrQixpQkFDQSxrQiwrQkFDQSxrQiw2QkFDQSxrQixnQkFDQSxrQixnQkFDQSxrQix5QkFDQSxrQixtQkFDQSxrQix5QkFDQSxrQiwwQkFDQSxrQixzQkFDQSxrQixzQkFDQSxrQixpQkFDQSxrQixxQkFDQSxrQixzQkFDQSxrQixxQkFDQSxrQixxQkFDQSxrQixvQkFDQSxrQixzQkFDQSxrQiwyQkFDQSxrQix5QkFDQSxrQiwyQkFDQSxrQiwwQkFDQSxrQiw2QkFDQSxrQixrQkFDQSxrQix3QkFDQSxrQixzQkFDQSxrQix3QkFDQSxrQiw4QkFDQSxrQiw2QkFDQSxrQixnQkFDQSxrQixrQkFDQSxrQiwyQkFDQSxrQixrQkFDQSxrQix1QkFDQSxrQixxQkFDQSxrQiwwQkFDQSxrQixxQkFDQSxrQixxQ0FDQSxrQixpQkFDQSxrQixtQkFDQSxrQixtQkFDQSxrQixlQUNBLGtCLDBCQUNBLGtCLGtCQUNBLGtCLGlCQUNBLGtCLG9CQUNBLGtCLHVCQUNBLGtCLGVBQ0Esa0IseUJBQ0Esa0Isb0JBQ0Esa0Isc0JBQ0Esa0IsdUJBQ0Esa0Isd0JBQ0Esa0IsNEJBQ0Esa0Isa0NBQ0Esa0IsOEJBQ0Esa0IsaUJBQ0Esa0IiLCJmaWxlIjoiRm91bmRhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi9Vc2Vycy9kYXZpZC9wcm9ncmFtcy9jYXBwdWNjaW5vL0ZvdW5kYXRpb24vIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEZvdW5kYXRpb24ualxuICogRm91bmRhdGlvblxuICpcbiAqIENyZWF0ZWQgYnkgRnJhbmNpc2NvIFRvbG1hc2t5LlxuICogQ29weXJpZ2h0IDIwMDgsIDI4MCBOb3J0aCwgSW5jLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlclxuICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlXG4gKiBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BIDAyMTEwLTEzMDEgVVNBXG4gKi9cblxuQGltcG9ydCBcIl9DR0dlb21ldHJ5LmpcIlxuQGltcG9ydCBcIkNQQXJyYXkualwiXG5AaW1wb3J0IFwiQ1BCdW5kbGUualwiXG5AaW1wb3J0IFwiQ1BCeXRlQ291bnRGb3JtYXR0ZXIualwiXG5AaW1wb3J0IFwiQ1BDYWNoZS5qXCJcbkBpbXBvcnQgXCJDUENoYXJhY3RlclNldC5qXCJcbkBpbXBvcnQgXCJDUENvZGVyLmpcIlxuQGltcG9ydCBcIkNQQ29tcGFyaXNvblByZWRpY2F0ZS5qXCJcbkBpbXBvcnQgXCJDUENvbXBvdW5kUHJlZGljYXRlLmpcIlxuQGltcG9ydCBcIkNQRGF0YS5qXCJcbkBpbXBvcnQgXCJDUERhdGUualwiXG5AaW1wb3J0IFwiQ1BEYXRlRm9ybWF0dGVyLmpcIlxuQGltcG9ydCBcIkNQRGVjaW1hbC5qXCJcbkBpbXBvcnQgXCJDUERlY2ltYWxOdW1iZXIualwiXG5AaW1wb3J0IFwiQ1BEZWxheWVkUGVyZm9ybS5qXCJcbkBpbXBvcnQgXCJDUERpY3Rpb25hcnkualwiXG5AaW1wb3J0IFwiQ1BFbnVtZXJhdG9yLmpcIlxuQGltcG9ydCBcIkNQRXJyb3IualwiXG5AaW1wb3J0IFwiQ1BFeGNlcHRpb24ualwiXG5AaW1wb3J0IFwiQ1BFeHByZXNzaW9uLmpcIlxuQGltcG9ydCBcIkNQRm9ybWF0dGVyLmpcIlxuQGltcG9ydCBcIkNQSW5kZXhQYXRoLmpcIlxuQGltcG9ydCBcIkNQSW5kZXhTZXQualwiXG5AaW1wb3J0IFwiQ1BJbnZvY2F0aW9uLmpcIlxuQGltcG9ydCBcIkNQSlNPTlBDb25uZWN0aW9uLmpcIlxuQGltcG9ydCBcIkNQS2V5ZWRBcmNoaXZlci5qXCJcbkBpbXBvcnQgXCJDUEtleWVkVW5hcmNoaXZlci5qXCJcbkBpbXBvcnQgXCJDUEtleVZhbHVlQ29kaW5nLmpcIlxuQGltcG9ydCBcIkNQS2V5VmFsdWVPYnNlcnZpbmcualwiXG5AaW1wb3J0IFwiQ1BMb2NhbGUualwiXG5AaW1wb3J0IFwiQ1BNdXRhYmxlQXJyYXkualwiXG5AaW1wb3J0IFwiQ1BNdXRhYmxlU2V0LmpcIlxuQGltcG9ydCBcIkNQTm90aWZpY2F0aW9uLmpcIlxuQGltcG9ydCBcIkNQTm90aWZpY2F0aW9uQ2VudGVyLmpcIlxuQGltcG9ydCBcIkNQTm90aWZpY2F0aW9uUXVldWUualwiXG5AaW1wb3J0IFwiQ1BOdWxsLmpcIlxuQGltcG9ydCBcIkNQTnVtYmVyLmpcIlxuQGltcG9ydCBcIkNQTnVtYmVyRm9ybWF0dGVyLmpcIlxuQGltcG9ydCBcIkNQT2JqZWN0LmpcIlxuQGltcG9ydCBcIkNQT2JqSlJ1bnRpbWUualwiXG5AaW1wb3J0IFwiQ1BPcGVyYXRpb24ualwiXG5AaW1wb3J0IFwiQ1BPcGVyYXRpb25RdWV1ZS5qXCJcbkBpbXBvcnQgXCJDUFByZWRpY2F0ZS5qXCJcbkBpbXBvcnQgXCJDUFByb3BlcnR5TGlzdFNlcmlhbGl6YXRpb24ualwiXG5AaW1wb3J0IFwiQ1BSYW5nZS5qXCJcbkBpbXBvcnQgXCJDUFJ1bkxvb3AualwiXG5AaW1wb3J0IFwiQ1BTY2FubmVyLmpcIlxuQGltcG9ydCBcIkNQU2V0LmpcIlxuQGltcG9ydCBcIkNQU29ydERlc2NyaXB0b3IualwiXG5AaW1wb3J0IFwiQ1BTdHJpbmcualwiXG5AaW1wb3J0IFwiQ1BUaW1lci5qXCJcbkBpbXBvcnQgXCJDUFRpbWVab25lLmpcIlxuQGltcG9ydCBcIkNQVW5kb01hbmFnZXIualwiXG5AaW1wb3J0IFwiQ1BVUkwualwiXG5AaW1wb3J0IFwiQ1BVUkxDb25uZWN0aW9uLmpcIlxuQGltcG9ydCBcIkNQVVJMRXJyb3IualwiXG5AaW1wb3J0IFwiQ1BVUkxSZXF1ZXN0LmpcIlxuQGltcG9ydCBcIkNQVVJMUmVzcG9uc2UualwiXG5AaW1wb3J0IFwiQ1BVc2VyRGVmYXVsdHMualwiXG5AaW1wb3J0IFwiQ1BVc2VyTm90aWZpY2F0aW9uLmpcIlxuQGltcG9ydCBcIkNQVXNlck5vdGlmaWNhdGlvbkNlbnRlci5qXCJcbkBpbXBvcnQgXCJDUFVzZXJTZXNzaW9uTWFuYWdlci5qXCJcbkBpbXBvcnQgXCJDUFZhbHVlLmpcIlxuQGltcG9ydCBcIkNQVmFsdWVUcmFuc2Zvcm1lci5qXCJcblxuLyohIEBtYWlucGFnZVxuICAgIENhcHB1Y2Npbm8gaXMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEByZWYgbGljZW5zZSBcIkdOVSBMR1BMXCIuXG5cbiAgICBAaHRtbGluY2x1ZGUgUkVBRE1FLmh0bWxcblxuICAgIEBwYWdlIGxpY2Vuc2UgTGljZW5zZVxuICAgIEBodG1sb25seSA8cHJlPkBlbmRodG1sb25seVxuICAgIEBodG1saW5jbHVkZSBMSUNFTlNFXG4gICAgQGh0bWxvbmx5IDwvcHJlPkBlbmRodG1sb25seVxuXG4gICAgQGRlZmdyb3VwIGFwcGtpdCBBcHBLaXRcbiAgICBAZGVmZ3JvdXAgZm91bmRhdGlvbiBGb3VuZGF0aW9uXG4gICAgQGRlZmdyb3VwIGNvbXBhdGFiaWxpdHkgQ29jb2EgQ29tcGF0YWJpbGl0eVxuKi9cbiJdfQ==t;2601;

objj_executeFile("_CGGeometry.j", YES);objj_executeFile("CPArray.j", YES);objj_executeFile("CPBundle.j", YES);objj_executeFile("CPByteCountFormatter.j", YES);objj_executeFile("CPCache.j", YES);objj_executeFile("CPCharacterSet.j", YES);objj_executeFile("CPCoder.j", YES);objj_executeFile("CPComparisonPredicate.j", YES);objj_executeFile("CPCompoundPredicate.j", YES);objj_executeFile("CPData.j", YES);objj_executeFile("CPDate.j", YES);objj_executeFile("CPDateFormatter.j", YES);objj_executeFile("CPDecimal.j", YES);objj_executeFile("CPDecimalNumber.j", YES);objj_executeFile("CPDelayedPerform.j", YES);objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPEnumerator.j", YES);objj_executeFile("CPError.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPExpression.j", YES);objj_executeFile("CPFormatter.j", YES);objj_executeFile("CPIndexPath.j", YES);objj_executeFile("CPIndexSet.j", YES);objj_executeFile("CPInvocation.j", YES);objj_executeFile("CPJSONPConnection.j", YES);objj_executeFile("CPKeyedArchiver.j", YES);objj_executeFile("CPKeyedUnarchiver.j", YES);objj_executeFile("CPKeyValueCoding.j", YES);objj_executeFile("CPKeyValueObserving.j", YES);objj_executeFile("CPLocale.j", YES);objj_executeFile("CPMutableArray.j", YES);objj_executeFile("CPMutableSet.j", YES);objj_executeFile("CPNotification.j", YES);objj_executeFile("CPNotificationCenter.j", YES);objj_executeFile("CPNotificationQueue.j", YES);objj_executeFile("CPNull.j", YES);objj_executeFile("CPNumber.j", YES);objj_executeFile("CPNumberFormatter.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPObjJRuntime.j", YES);objj_executeFile("CPOperation.j", YES);objj_executeFile("CPOperationQueue.j", YES);objj_executeFile("CPPredicate.j", YES);objj_executeFile("CPPropertyListSerialization.j", YES);objj_executeFile("CPRange.j", YES);objj_executeFile("CPRunLoop.j", YES);objj_executeFile("CPScanner.j", YES);objj_executeFile("CPSet.j", YES);objj_executeFile("CPSortDescriptor.j", YES);objj_executeFile("CPString.j", YES);objj_executeFile("CPTimer.j", YES);objj_executeFile("CPTimeZone.j", YES);objj_executeFile("CPUndoManager.j", YES);objj_executeFile("CPURL.j", YES);objj_executeFile("CPURLConnection.j", YES);objj_executeFile("CPURLError.j", YES);objj_executeFile("CPURLRequest.j", YES);objj_executeFile("CPURLResponse.j", YES);objj_executeFile("CPUserDefaults.j", YES);objj_executeFile("CPUserNotification.j", YES);objj_executeFile("CPUserNotificationCenter.j", YES);objj_executeFile("CPUserSessionManager.j", YES);objj_executeFile("CPValue.j", YES);objj_executeFile("CPValueTransformer.j", YES);p;27;_CPCollectionKVCOperators.jt;31998;@STATIC;1.0;i;10;CPObject.jS;16084;t;15871;

objj_executeFile("CPObject.j", YES);var _CPCollectionKVCOperatorSimpleRE = new RegExp("^@(avg|count|m(ax|in)|sum|unionOfObjects|distinctUnionOfObjects|unionOfArrays|distinctUnionOfArrays|distinctUnionOfSets)(\\.|$)");

{var the_class = objj_allocateClassPair(CPObject, "_CPCollectionKVCOperator"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(meta_class, [new objj_method(sel_getUid("isSimpleCollectionOperator:"), function $_CPCollectionKVCOperator__isSimpleCollectionOperator_(self, _cmd, operator)
{
    return _CPCollectionKVCOperatorSimpleRE.test(operator);
}

,["BOOL","CPString"]), new objj_method(sel_getUid("performOperation:withCollection:propertyPath:"), function $_CPCollectionKVCOperator__performOperation_withCollection_propertyPath_(self, _cmd, operator, aCollection, propertyPath)
{
    var selector = CPSelectorFromString(operator + "ForCollection:propertyPath:");
    if (!(self.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(self, (self.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), selector))
        return (aCollection == null ? null : (aCollection.isa.method_msgSend["valueForUndefinedKey:"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["valueForUndefinedKey:"], "valueForUndefinedKey:"), "@" + operator));
    return (self.isa.method_msgSend["performSelector:withObject:withObject:"] || _objj_forward)(self, (self.isa.method_dtable["performSelector:withObject:withObject:"], self.isa.method_dtable["performSelector:withObject:withObject:"], self.isa.method_dtable["performSelector:withObject:withObject:"], "performSelector:withObject:withObject:"), selector, aCollection, propertyPath);
}

,["id","CPString","id","CPString"]), new objj_method(sel_getUid("avgForCollection:propertyPath:"), function $_CPCollectionKVCOperator__avgForCollection_propertyPath_(self, _cmd, aCollection, propertyPath)
{
    if (!propertyPath)
        return (aCollection == null ? null : (aCollection.isa.method_msgSend["valueForUndefinedKey:"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["valueForUndefinedKey:"], "valueForUndefinedKey:"), "@avg"));
    var objects = (aCollection == null ? null : (aCollection.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), propertyPath)),
        average = 0.0,
        enumerator = (objects == null ? null : (objects.isa.method_msgSend["objectEnumerator"] || _objj_forward)(objects, (objects.isa.method_dtable["objectEnumerator"], "objectEnumerator"))),
        object;
    while ((object = (enumerator == null ? null : (enumerator.isa.method_msgSend["nextObject"] || _objj_forward)(enumerator, (enumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        average += (object == null ? null : (object.isa.method_msgSend["doubleValue"] || _objj_forward)(object, (object.isa.method_dtable["doubleValue"], "doubleValue")));
    return average / (objects == null ? null : (objects.isa.method_msgSend["count"] || _objj_forward)(objects, (objects.isa.method_dtable["count"], "count")));
}

,["double","id","CPString"]), new objj_method(sel_getUid("minForCollection:propertyPath:"), function $_CPCollectionKVCOperator__minForCollection_propertyPath_(self, _cmd, aCollection, propertyPath)
{
    if (!propertyPath)
        return (aCollection == null ? null : (aCollection.isa.method_msgSend["valueForUndefinedKey:"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["valueForUndefinedKey:"], "valueForUndefinedKey:"), "@min"));
    var objects = (aCollection == null ? null : (aCollection.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), propertyPath));
    if ((objects == null ? null : (objects.isa.method_msgSend["count"] || _objj_forward)(objects, (objects.isa.method_dtable["count"], "count"))) === 0)
        return nil;
    var enumerator = (objects == null ? null : (objects.isa.method_msgSend["objectEnumerator"] || _objj_forward)(objects, (objects.isa.method_dtable["objectEnumerator"], "objectEnumerator"))),
        min = (enumerator == null ? null : (enumerator.isa.method_msgSend["nextObject"] || _objj_forward)(enumerator, (enumerator.isa.method_dtable["nextObject"], "nextObject"))),
        object;
    while ((object = (enumerator == null ? null : (enumerator.isa.method_msgSend["nextObject"] || _objj_forward)(enumerator, (enumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
    {
        if ((min == null ? null : (min.isa.method_msgSend["compare:"] || _objj_forward)(min, (min.isa.method_dtable["compare:"], "compare:"), object)) > 0)
            min = object;
    }
    return min;
}

,["double","id","CPString"]), new objj_method(sel_getUid("maxForCollection:propertyPath:"), function $_CPCollectionKVCOperator__maxForCollection_propertyPath_(self, _cmd, aCollection, propertyPath)
{
    if (!propertyPath)
        return (aCollection == null ? null : (aCollection.isa.method_msgSend["valueForUndefinedKey:"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["valueForUndefinedKey:"], "valueForUndefinedKey:"), "@max"));
    var objects = (aCollection == null ? null : (aCollection.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), propertyPath));
    if ((objects == null ? null : (objects.isa.method_msgSend["count"] || _objj_forward)(objects, (objects.isa.method_dtable["count"], "count"))) === 0)
        return nil;
    var enumerator = (objects == null ? null : (objects.isa.method_msgSend["objectEnumerator"] || _objj_forward)(objects, (objects.isa.method_dtable["objectEnumerator"], "objectEnumerator"))),
        max = (enumerator == null ? null : (enumerator.isa.method_msgSend["nextObject"] || _objj_forward)(enumerator, (enumerator.isa.method_dtable["nextObject"], "nextObject"))),
        object;
    while ((object = (enumerator == null ? null : (enumerator.isa.method_msgSend["nextObject"] || _objj_forward)(enumerator, (enumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
    {
        if ((max == null ? null : (max.isa.method_msgSend["compare:"] || _objj_forward)(max, (max.isa.method_dtable["compare:"], "compare:"), object)) < 0)
            max = object;
    }
    return max;
}

,["double","id","CPString"]), new objj_method(sel_getUid("sumForCollection:propertyPath:"), function $_CPCollectionKVCOperator__sumForCollection_propertyPath_(self, _cmd, aCollection, propertyPath)
{
    if (!propertyPath)
        return (aCollection == null ? null : (aCollection.isa.method_msgSend["valueForUndefinedKey:"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["valueForUndefinedKey:"], "valueForUndefinedKey:"), "@sum"));
    var objects = (aCollection == null ? null : (aCollection.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), propertyPath)),
        sum = 0.0,
        enumerator = (objects == null ? null : (objects.isa.method_msgSend["objectEnumerator"] || _objj_forward)(objects, (objects.isa.method_dtable["objectEnumerator"], "objectEnumerator"))),
        object;
    while ((object = (enumerator == null ? null : (enumerator.isa.method_msgSend["nextObject"] || _objj_forward)(enumerator, (enumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        sum += (object == null ? null : (object.isa.method_msgSend["doubleValue"] || _objj_forward)(object, (object.isa.method_dtable["doubleValue"], "doubleValue")));
    return sum;
}

,["double","id","CPString"]), new objj_method(sel_getUid("countForCollection:propertyPath:"), function $_CPCollectionKVCOperator__countForCollection_propertyPath_(self, _cmd, aCollection, propertyPath)
{
    return (aCollection == null ? null : (aCollection.isa.method_msgSend["count"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["count"], "count")));
}

,["int","id","CPString"]), new objj_method(sel_getUid("unionOfObjectsForCollection:propertyPath:"), function $_CPCollectionKVCOperator__unionOfObjectsForCollection_propertyPath_(self, _cmd, aCollection, propertyPath)
{
    if (!propertyPath)
        return (aCollection == null ? null : (aCollection.isa.method_msgSend["valueForUndefinedKey:"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["valueForUndefinedKey:"], "valueForUndefinedKey:"), "@unionOfObjects"));
    var objects = (aCollection == null ? null : (aCollection.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), propertyPath));
    if ((objects == null ? null : (objects.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(objects, (objects.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPSet == null ? null : (CPSet.isa.method_msgSend["class"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["class"], "class"))))))
        return (objects == null ? null : (objects.isa.method_msgSend["allObjects"] || _objj_forward)(objects, (objects.isa.method_dtable["allObjects"], "allObjects")));
    return objects;
}

,["CPArray","id","CPString"]), new objj_method(sel_getUid("distinctUnionOfObjectsForCollection:propertyPath:"), function $_CPCollectionKVCOperator__distinctUnionOfObjectsForCollection_propertyPath_(self, _cmd, aCollection, propertyPath)
{
    if (!propertyPath)
        return (aCollection == null ? null : (aCollection.isa.method_msgSend["valueForUndefinedKey:"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["valueForUndefinedKey:"], "valueForUndefinedKey:"), "@distinctUnionOfObjects"));
    var objects = (aCollection == null ? null : (aCollection.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), propertyPath)),
        distinctObjects = (CPMutableArray.isa.method_msgSend["new"] || _objj_forward)(CPMutableArray, (CPMutableArray.isa.method_dtable["new"], "new")),
        enumerator = (objects == null ? null : (objects.isa.method_msgSend["objectEnumerator"] || _objj_forward)(objects, (objects.isa.method_dtable["objectEnumerator"], "objectEnumerator"))),
        object;
    while ((object = (enumerator == null ? null : (enumerator.isa.method_msgSend["nextObject"] || _objj_forward)(enumerator, (enumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
    {
        if ((distinctObjects == null ? null : (distinctObjects.isa.method_msgSend["indexOfObject:"] || _objj_forward)(distinctObjects, (distinctObjects.isa.method_dtable["indexOfObject:"], "indexOfObject:"), object)) == CPNotFound)
            (distinctObjects == null ? null : (distinctObjects.isa.method_msgSend["addObject:"] || _objj_forward)(distinctObjects, (distinctObjects.isa.method_dtable["addObject:"], "addObject:"), object));
    }
    return distinctObjects;
}

,["CPArray","id","CPString"]), new objj_method(sel_getUid("unionOfArraysForCollection:propertyPath:"), function $_CPCollectionKVCOperator__unionOfArraysForCollection_propertyPath_(self, _cmd, aCollection, propertyPath)
{
    if (!propertyPath)
        return (aCollection == null ? null : (aCollection.isa.method_msgSend["valueForUndefinedKey:"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["valueForUndefinedKey:"], "valueForUndefinedKey:"), "@unionOfArrays"));
    var objects = [],
        number = (aCollection == null ? null : (aCollection.isa.method_msgSend["count"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["count"], "count")));
    for (var i = 0; i < number; i++)
        (objects == null ? null : (objects.isa.method_msgSend["addObjectsFromArray:"] || _objj_forward)(objects, (objects.isa.method_dtable["addObjectsFromArray:"], "addObjectsFromArray:"), ((___r1 = aCollection[i]), ___r1 == null ? null : (___r1.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(___r1, "valueForKeyPath:", propertyPath))));
    return objects;
    var ___r1;
}

,["CPArray","id","CPString"]), new objj_method(sel_getUid("distinctUnionOfArraysForCollection:propertyPath:"), function $_CPCollectionKVCOperator__distinctUnionOfArraysForCollection_propertyPath_(self, _cmd, aCollection, propertyPath)
{
    if (!propertyPath)
        return (aCollection == null ? null : (aCollection.isa.method_msgSend["valueForUndefinedKey:"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["valueForUndefinedKey:"], "valueForUndefinedKey:"), "@distinctUnionOfArrays"));
    var objects = [],
        number = (aCollection == null ? null : (aCollection.isa.method_msgSend["count"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["count"], "count")));
    for (var i = 0; i < number; i++)
        (objects == null ? null : (objects.isa.method_msgSend["addObjectsFromArray:"] || _objj_forward)(objects, (objects.isa.method_dtable["addObjectsFromArray:"], "addObjectsFromArray:"), ((___r1 = aCollection[i]), ___r1 == null ? null : (___r1.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(___r1, "valueForKeyPath:", propertyPath))));
    var distinctObjects = (CPMutableArray.isa.method_msgSend["new"] || _objj_forward)(CPMutableArray, (CPMutableArray.isa.method_dtable["new"], "new")),
        enumerator = (objects == null ? null : (objects.isa.method_msgSend["objectEnumerator"] || _objj_forward)(objects, (objects.isa.method_dtable["objectEnumerator"], "objectEnumerator"))),
        object;
    while ((object = (enumerator == null ? null : (enumerator.isa.method_msgSend["nextObject"] || _objj_forward)(enumerator, (enumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
    {
        if ((distinctObjects == null ? null : (distinctObjects.isa.method_msgSend["indexOfObject:"] || _objj_forward)(distinctObjects, (distinctObjects.isa.method_dtable["indexOfObject:"], "indexOfObject:"), object)) == CPNotFound)
            (distinctObjects == null ? null : (distinctObjects.isa.method_msgSend["addObject:"] || _objj_forward)(distinctObjects, (distinctObjects.isa.method_dtable["addObject:"], "addObject:"), object));
    }
    return distinctObjects;
    var ___r1;
}

,["CPArray","id","CPString"]), new objj_method(sel_getUid("distinctUnionOfSetsForCollection:propertyPath:"), function $_CPCollectionKVCOperator__distinctUnionOfSetsForCollection_propertyPath_(self, _cmd, aCollection, propertyPath)
{
    if (!propertyPath)
        return (aCollection == null ? null : (aCollection.isa.method_msgSend["valueForUndefinedKey:"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["valueForUndefinedKey:"], "valueForUndefinedKey:"), "@distinctUnionOfSets"));
    var objects = (CPMutableSet == null ? null : (CPMutableSet.isa.method_msgSend["new"] || _objj_forward)(CPMutableSet, (CPMutableSet.isa.method_dtable["new"], "new"))),
        number = (aCollection == null ? null : (aCollection.isa.method_msgSend["count"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["count"], "count"))),
        sets = (aCollection == null ? null : (aCollection.isa.method_msgSend["allObjects"] || _objj_forward)(aCollection, (aCollection.isa.method_dtable["allObjects"], "allObjects")));
    for (var i = 0; i < number; i++)
        (objects == null ? null : (objects.isa.method_msgSend["addObjectsFromArray:"] || _objj_forward)(objects, (objects.isa.method_dtable["addObjectsFromArray:"], "addObjectsFromArray:"), ((___r1 = ((___r2 = sets[i]), ___r2 == null ? null : (___r2.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(___r2, "valueForKeyPath:", propertyPath))), ___r1 == null ? null : (___r1.isa.method_msgSend["allObjects"] || _objj_forward)(___r1, "allObjects"))));
    return objects;
    var ___r1, ___r2;
}

,["CPArray","id","CPString"])]);
}
p;10;CPBundle.jt;22956;@STATIC;1.0;i;14;CPDictionary.ji;16;CPNotification.ji;22;CPNotificationCenter.ji;10;CPObject.jS;12880;t;9967;

objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPNotification.j", YES);objj_executeFile("CPNotificationCenter.j", YES);objj_executeFile("CPObject.j", YES);CPBundleDidLoadNotification = "CPBundleDidLoadNotification";
{var the_protocol = objj_allocateProtocol("CPBundleDelegate");
var aProtocol = objj_getProtocol("CPObject");
if (!aProtocol) throw new SyntaxError("*** Could not find definition for protocol \"CPBundleDelegate\"");
protocol_addProtocol(the_protocol, aProtocol);
objj_registerProtocol(the_protocol);
protocol_addMethodDescriptions(the_protocol, [new objj_method(sel_getUid("bundleDidFinishLoading:"), Nil
,["void","CPBundle"])], true, true);
}var CPBundlesForURLStrings = {};

{var the_class = objj_allocateClassPair(CPObject, "CPBundle"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_bundle", "CFBundle"), new objj_ivar("_delegate", "id")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithURL:"), function $CPBundle__initWithURL_(self, _cmd, aURL)
{
    aURL = new CFURL(aURL);
    var URLString = aURL.absoluteString(),
        existingBundle = CPBundlesForURLStrings[URLString];
    if (existingBundle)
        return existingBundle;
    self = (objj_getClass("CPBundle").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._bundle = new CFBundle(aURL);
        CPBundlesForURLStrings[URLString] = self;
    }
    return self;
}

,["id","CPURL"]), new objj_method(sel_getUid("initWithPath:"), function $CPBundle__initWithPath_(self, _cmd, aPath)
{
    return (self.isa.method_msgSend["initWithURL:"] || _objj_forward)(self, (self.isa.method_dtable["initWithURL:"], "initWithURL:"), aPath);
}

,["id","CPString"]), new objj_method(sel_getUid("classNamed:"), function $CPBundle__classNamed_(self, _cmd, aString)
{
}

,["Class","CPString"]), new objj_method(sel_getUid("bundleURL"), function $CPBundle__bundleURL(self, _cmd)
{
    return self._bundle.bundleURL();
}

,["CPURL"]), new objj_method(sel_getUid("bundlePath"), function $CPBundle__bundlePath(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["bundleURL"] || _objj_forward)(self, (self.isa.method_dtable["bundleURL"], "bundleURL"))), ___r1 == null ? null : (___r1.isa.method_msgSend["path"] || _objj_forward)(___r1, "path"));
    var ___r1;
}

,["CPString"]), new objj_method(sel_getUid("resourcePath"), function $CPBundle__resourcePath(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["resourceURL"] || _objj_forward)(self, (self.isa.method_dtable["resourceURL"], "resourceURL"))), ___r1 == null ? null : (___r1.isa.method_msgSend["path"] || _objj_forward)(___r1, "path"));
    var ___r1;
}

,["CPString"]), new objj_method(sel_getUid("resourceURL"), function $CPBundle__resourceURL(self, _cmd)
{
    return self._bundle.resourcesDirectoryURL();
}

,["CPURL"]), new objj_method(sel_getUid("principalClass"), function $CPBundle__principalClass(self, _cmd)
{
    var className = (self.isa.method_msgSend["objectForInfoDictionaryKey:"] || _objj_forward)(self, (self.isa.method_dtable["objectForInfoDictionaryKey:"], "objectForInfoDictionaryKey:"), "CPPrincipalClass");
    return className ? CPClassFromString(className) : nil;
}

,["Class"]), new objj_method(sel_getUid("bundleIdentifier"), function $CPBundle__bundleIdentifier(self, _cmd)
{
    return self._bundle.identifier();
}

,["CPString"]), new objj_method(sel_getUid("isLoaded"), function $CPBundle__isLoaded(self, _cmd)
{
    return self._bundle.isLoaded();
}

,["BOOL"]), new objj_method(sel_getUid("pathForResource:"), function $CPBundle__pathForResource_(self, _cmd, aFilename)
{
    return self._bundle.pathForResource(aFilename);
}

,["CPString","CPString"]), new objj_method(sel_getUid("pathForResource:ofType:"), function $CPBundle__pathForResource_ofType_(self, _cmd, aFilename, extension)
{
    return self._bundle.pathForResource(aFilename, extension);
}

,["CPString","CPString","CPString"]), new objj_method(sel_getUid("pathForResource:ofType:inDirectory:"), function $CPBundle__pathForResource_ofType_inDirectory_(self, _cmd, aFilename, extension, subpath)
{
    return self._bundle.pathForResource(aFilename, extension, subpath);
}

,["CPString","CPString","CPString","CPString"]), new objj_method(sel_getUid("pathForResource:ofType:inDirectory:forLocalization:"), function $CPBundle__pathForResource_ofType_inDirectory_forLocalization_(self, _cmd, aFilename, extension, subpath, localizationName)
{
    return self._bundle.pathForResource(aFilename, extension, subpath, localizationName);
}

,["CPString","CPString","CPString","CPString","CPString"]), new objj_method(sel_getUid("infoDictionary"), function $CPBundle__infoDictionary(self, _cmd)
{
    return self._bundle.infoDictionary();
}

,["CPDictionary"]), new objj_method(sel_getUid("objectForInfoDictionaryKey:"), function $CPBundle__objectForInfoDictionaryKey_(self, _cmd, aKey)
{
    return self._bundle.valueForInfoDictionaryKey(aKey);
}

,["id","CPString"]), new objj_method(sel_getUid("loadWithDelegate:"), function $CPBundle__loadWithDelegate_(self, _cmd, aDelegate)
{
    self._delegate = aDelegate;
    self._bundle.addEventListener("load",     function()
    {
        ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["bundleDidFinishLoading:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["bundleDidFinishLoading:"], "bundleDidFinishLoading:"), self));
        ((___r1 = (CPNotificationCenter.isa.method_msgSend["defaultCenter"] || _objj_forward)(CPNotificationCenter, (CPNotificationCenter.isa.method_dtable["defaultCenter"], "defaultCenter"))), ___r1 == null ? null : (___r1.isa.method_msgSend["postNotificationName:object:userInfo:"] || _objj_forward)(___r1, "postNotificationName:object:userInfo:", CPBundleDidLoadNotification, self, nil));
        var ___r1;
    });
    self._bundle.addEventListener("error",     function()
    {
        CPLog.error("Could not find bundle: " + self);
    });
    self._bundle.load(YES);
}

,["void","id"]), new objj_method(sel_getUid("staticResourceURLs"), function $CPBundle__staticResourceURLs(self, _cmd)
{
    var staticResources = self._bundle.staticResources();
    return (staticResources == null ? null : (staticResources.isa.method_msgSend["arrayByApplyingBlock:"] || _objj_forward)(staticResources, (staticResources.isa.method_dtable["arrayByApplyingBlock:"], "arrayByApplyingBlock:"),     function(resource)
    {
        return resource.URL();
    }));
}

,["CPArray"]), new objj_method(sel_getUid("environments"), function $CPBundle__environments(self, _cmd)
{
    return self._bundle.environments();
}

,["CPArray"]), new objj_method(sel_getUid("mostEligibleEnvironment"), function $CPBundle__mostEligibleEnvironment(self, _cmd)
{
    return self._bundle.mostEligibleEnvironment();
}

,["CPString"]), new objj_method(sel_getUid("description"), function $CPBundle__description(self, _cmd)
{
    return (objj_getClass("CPBundle").super_class.method_dtable["description"] || _objj_forward)(self, "description") + "(" + (self.isa.method_msgSend["bundlePath"] || _objj_forward)(self, (self.isa.method_dtable["bundlePath"], "bundlePath")) + ")";
}

,["CPString"]), new objj_method(sel_getUid("localizations"), function $CPBundle__localizations(self, _cmd)
{
    return CFBundleCopyBundleLocalizations(self._bundle);
}

,["CPArray"]), new objj_method(sel_getUid("localizedStringForKey:value:table:"), function $CPBundle__localizedStringForKey_value_table_(self, _cmd, aKey, aValue, aTable)
{
    return CFBundleCopyLocalizedString(self._bundle, aKey, aValue, aTable);
}

,["CPString","CPString","CPString","CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("bundleWithURL:"), function $CPBundle__bundleWithURL_(self, _cmd, aURL)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithURL:"] || _objj_forward)(___r1, "initWithURL:", aURL));
    var ___r1;
}

,["CPBundle","CPURL"]), new objj_method(sel_getUid("bundleWithPath:"), function $CPBundle__bundleWithPath_(self, _cmd, aPath)
{
    return (self.isa.method_msgSend["bundleWithURL:"] || _objj_forward)(self, (self.isa.method_dtable["bundleWithURL:"], "bundleWithURL:"), aPath);
}

,["CPBundle","CPString"]), new objj_method(sel_getUid("bundleWithIdentifier:"), function $CPBundle__bundleWithIdentifier_(self, _cmd, anIdentifier)
{
    var bundle = CFBundle.bundleWithIdentifier(anIdentifier);
    if (bundle)
    {
        var url = bundle.bundleURL(),
            cpBundle = CPBundlesForURLStrings[url.absoluteString()];
        if (!cpBundle)
            cpBundle = (self.isa.method_msgSend["bundleWithURL:"] || _objj_forward)(self, (self.isa.method_dtable["bundleWithURL:"], "bundleWithURL:"), url);
        return cpBundle;
    }
    return nil;
}

,["CPBundle","CPString"]), new objj_method(sel_getUid("bundleForClass:"), function $CPBundle__bundleForClass_(self, _cmd, aClass)
{
    return (self.isa.method_msgSend["bundleWithURL:"] || _objj_forward)(self, (self.isa.method_dtable["bundleWithURL:"], "bundleWithURL:"), (CFBundle.bundleForClass(aClass)).bundleURL());
}

,["CPBundle","Class"]), new objj_method(sel_getUid("mainBundle"), function $CPBundle__mainBundle(self, _cmd)
{
    return (CPBundle.isa.method_msgSend["bundleWithPath:"] || _objj_forward)(CPBundle, (CPBundle.isa.method_dtable["bundleWithPath:"], "bundleWithPath:"), (CFBundle.mainBundle()).bundleURL());
}

,["CPBundle"])]);
}
CPLocalizedString = function(key, comment)
{
    return CFCopyLocalizedString(key, comment);
}
CPLocalizedStringFromTable = function(key, table, comment)
{
    return CFCopyLocalizedStringFromTable(key, table, comment);
}
CPCopyLocalizedStringFromTableInBundle = function(key, table, bundle, comment)
{
    return CFCopyLocalizedStringFromTableInBundle(key, table, bundle._bundle, comment);
}
p;9;CPCoder.jt;10585;@STATIC;1.0;i;13;CPException.ji;10;CPObject.jS;7100;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQQ29kZXIuaiJdLCJuYW1lcyI6WyJzZWxmIl0sIm1hcHBpbmdzIjoiOztBQXNCQSxrQixxQkFDQSxrQixrQkFZQTtBQUFBO0FBQUEsMkI7NkJBUUEsNEI7QUFDQTtJQUNHLE0sQ0FBTyxFO0FBRFYsQzs7WUFXQSw0QixzRkFBd0MsSyxFQUFhLFE7QUFDckQ7SUFDRyxpQyxDQUFrQ0EsSSxFQUFNLEksQ0FBeEM7QUFESCxDOzs0QkFRQSw0QixzRUFBaUMsSztBQUNqQztJQUNHLGlDLENBQWtDQSxJLEVBQU0sSSxDQUF4QztBQURILEM7O3FCQVFBLDRCLDhEQUF5QixRO0FBQ3pCO0FBQUEsQzs7aUJBUUEsNEIsNERBQTZCLE07QUFDN0I7SUFDSSxDQUFDQSxJQUFELHVEQUFDQSxJQUFELEdBQU0sdUNBQU4sb0JBQW1CLE9BQU8sQ0FBMUI7SUFDQSxDQUFDQSxJQUFELHVEQUFDQSxJQUFELEdBQU0sdUNBQU4sb0JBQW1CLE9BQU8sQ0FBMUI7QUFGSixDOztzQkFTQSw0QiwwREFBMkIsSztBQUMzQjtJQUNJLENBQUNBLElBQUQsc0RBQUNBLElBQUQsR0FBTSxzQ0FBTixtQkFBa0IsTUFBTSxNQUF4QjtJQUNBLENBQUNBLElBQUQscURBQUNBLElBQUQsR0FBTSxxQ0FBTixrQkFBaUIsTUFBTSxJQUF2QjtBQUZKLEM7O3FCQVNBLDRCLDBEQUEyQixLO0FBQzNCO0lBQ0ksQ0FBQ0EsSUFBRCx1REFBQ0EsSUFBRCxHQUFNLHVDQUFOLG9CQUFtQixNQUFNLEtBQXpCO0lBQ0EsQ0FBQ0EsSUFBRCx1REFBQ0EsSUFBRCxHQUFNLHVDQUFOLG9CQUFtQixNQUFNLE1BQXpCO0FBRkosQzs7cUJBU0EsNEIsMEVBQStCLGE7QUFDL0I7QUFBQSxDOztpQkFRQSw0QixzRUFBNkIsUTtBQUM3QjtJQUNHLENBQUNBLElBQUQsdURBQUNBLElBQUQsR0FBTSx1Q0FBTixvQkFBbUIsUUFBbkI7QUFESCxDOztpQkFRQSw0QiwwRUFBK0IsUTtBQUMvQjtJQUNHLENBQUNBLElBQUQsdURBQUNBLElBQUQsR0FBTSx1Q0FBTixvQkFBbUIsUUFBbkI7QUFESCxDOztpQkFRQSw0QixvRkFBb0MsUTtBQUNwQztJQUNHLENBQUNBLElBQUQsdURBQUNBLElBQUQsR0FBTSx1Q0FBTixvQkFBbUIsUUFBbkI7QUFESCxDOzs7O0FBTUE7QUFBQTs7NERBUUEsNEIsK0VBQW9DLFE7QUFDcEM7SUFDSSxNLENBQU9BLEk7QUFEWCxDIiwiZmlsZSI6IkNQQ29kZXIuanMiLCJzb3VyY2VSb290IjoiZmlsZTovVXNlcnMvZGF2aWQvcHJvZ3JhbXMvY2FwcHVjY2luby9Gb3VuZGF0aW9uLyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDUENvZGVyLmpcbiAqIEZvdW5kYXRpb25cbiAqXG4gKiBDcmVhdGVkIGJ5IEZyYW5jaXNjbyBUb2xtYXNreS5cbiAqIENvcHlyaWdodCAyMDA4LCAyODAgTm9ydGgsIEluYy5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXJcbiAqIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgbGlicmFyeTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZVxuICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAwMjExMC0xMzAxIFVTQVxuICovXG5cbkBpbXBvcnQgXCJDUEV4Y2VwdGlvbi5qXCJcbkBpbXBvcnQgXCJDUE9iamVjdC5qXCJcblxuQGdsb2JhbCBfQ1BSYWlzZUludmFsaWRBYnN0cmFjdEludm9jYXRpb247XG5cbi8qIVxuICAgIEBjbGFzcyBDUENvZGVyXG4gICAgQGluZ3JvdXAgZm91bmRhdGlvblxuICAgIEBicmllZiBEZWZpbmVzIG1ldGhvZHMgZm9yIHVzZSB3aGVuIGFyY2hpdmluZyAmIHJlc3RvcmluZyAoZW5jL2RlY29kaW5nKS5cblxuICAgIFRvcC1sZXZlbCBjbGFzcyBkZWZpbmluZyBtZXRob2RzIGZvciB1c2Ugd2hlbiBhcmNoaXZpbmcgKGVuY29kaW5nKSBvYmplY3RzIHRvIGEgYnl0ZSBhcnJheVxuICAgIG9yIGZpbGUsIGFuZCB3aGVuIHJlc3RvcmluZyAoZGVjb2RpbmcpIG9iamVjdHMuXG4qL1xuQGltcGxlbWVudGF0aW9uIENQQ29kZXIgOiBDUE9iamVjdFxue1xufVxuXG4vKiFcbiAgICBSZXR1cm5zIGEgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHJlY2VpdmVyIHN1cHBvcnRzIGtleWVkIGNvZGluZy4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gcmV0dXJuc1xuICAgIFxcYyBOTy4gU3ViY2xhc3NlcyBzdXBwb3J0aW5nIGtleWVkIGNvZGluZyBtdXN0IG92ZXJyaWRlIHRoaXMgdG8gcmV0dXJuIFxcYyBZRVMuXG4qL1xuLSAoQk9PTClhbGxvd3NLZXllZENvZGluZ1xue1xuICAgcmV0dXJuIE5PO1xufVxuXG4vKiFcbiAgICBFbmNvZGVzIGEgc3RydWN0dXJlIG9yIG9iamVjdCBvZiBhIHNwZWNpZmllZCB0eXBlLiBVc3VhbGx5IHRoaXNcbiAgICBpcyB1c2VkIGZvciBwcmltaXRpdmVzIHRob3VnaCBpdCBjYW4gYmUgdXNlZCBmb3Igb2JqZWN0cyBhcyB3ZWxsLlxuICAgIFN1YmNsYXNzZXMgbXVzdCBvdmVycmlkZSB0aGlzIG1ldGhvZC5cbiAgICBAcGFyYW0gYVR5cGUgdGhlIHN0cnVjdHVyZSBvciBvYmplY3QgdHlwZVxuICAgIEBwYXJhbSBhbk9iamVjdCB0aGUgb2JqZWN0IHRvIGJlIGVuY29kZWRcbiovXG4tICh2b2lkKWVuY29kZVZhbHVlT2ZPYmpKVHlwZTooQ1BTdHJpbmcpYVR5cGUgYXQ6KGlkKWFuT2JqZWN0XG57XG4gICBfQ1BSYWlzZUludmFsaWRBYnN0cmFjdEludm9jYXRpb24oc2VsZiwgX2NtZCk7XG59XG5cbi8qIVxuICAgIEVuY29kZXMgYSBkYXRhIG9iamVjdC4gU3ViY2xhc3NlcyBtdXN0IG92ZXJyaWRlIHRoaXMgbWV0aG9kLlxuICAgIEBwYXJhbSBhRGF0YSB0aGUgb2JqZWN0IHRvIGJlIGVuY29kZWQuXG4qL1xuLSAodm9pZCllbmNvZGVEYXRhT2JqZWN0OihDUERhdGEpYURhdGFcbntcbiAgIF9DUFJhaXNlSW52YWxpZEFic3RyYWN0SW52b2NhdGlvbihzZWxmLCBfY21kKTtcbn1cblxuLyohXG4gICAgRW5jb2RlcyBhbiBvYmplY3QuIFN1YmNsYXNzZXMgbXVzdCBvdmVycmlkZSB0aGlzIG1ldGhvZC5cbiAgICBAcGFyYW0gYW5PYmplY3QgdGhlIG9iamVjdCB0byBiZSBlbmNvZGVkXG4qL1xuLSAodm9pZCllbmNvZGVPYmplY3Q6KGlkKWFuT2JqZWN0XG57XG4vLyAgIFtzZWxmIGVuY29kZVZhbHVlT2ZPYmpDVHlwZTpAZW5jb2RlKGlkKSBhdDpvYmplY3RdO1xufVxuXG4vKiFcbiAgICBFbmNvZGVzIGEgcG9pbnRcbiAgICBAcGFyYW0gYVBvaW50IHRoZSBwb2ludCB0byBiZSBlbmNvZGVkLlxuKi9cbi0gKHZvaWQpZW5jb2RlUG9pbnQ6KENHUG9pbnQpYVBvaW50XG57XG4gICAgW3NlbGYgZW5jb2RlTnVtYmVyOmFQb2ludC54XTtcbiAgICBbc2VsZiBlbmNvZGVOdW1iZXI6YVBvaW50LnldO1xufVxuXG4vKiFcbiAgICBFbmNvZGVzIGEgQ0dSZWN0XG4gICAgQHBhcmFtIGFSZWN0IHRoZSByZWN0YW5nbGUgdG8gYmUgZW5jb2RlZC5cbiovXG4tICh2b2lkKWVuY29kZVJlY3Q6KENHUmVjdClhUmVjdFxue1xuICAgIFtzZWxmIGVuY29kZVBvaW50OmFSZWN0Lm9yaWdpbl07XG4gICAgW3NlbGYgZW5jb2RlU2l6ZTphUmVjdC5zaXplXTtcbn1cblxuLyohXG4gICAgRW5jb2RlcyBhIENHU2l6ZVxuICAgIEBwYXJhbSBhU2l6ZSB0aGUgc2l6ZSB0byBiZSBlbmNvZGVkXG4qL1xuLSAodm9pZCllbmNvZGVTaXplOihDR1NpemUpYVNpemVcbntcbiAgICBbc2VsZiBlbmNvZGVOdW1iZXI6YVNpemUud2lkdGhdO1xuICAgIFtzZWxmIGVuY29kZU51bWJlcjphU2l6ZS5oZWlnaHRdO1xufVxuXG4vKiFcbiAgICBFbmNvZGVzIGEgcHJvcGVydHkgbGlzdC4gTm90IHlldCBpbXBsZW1lbnRlZC5cbiAgICBAcGFyYW0gYVByb3BlcnR5TGlzdCB0aGUgcHJvcGVydHkgbGlzdCB0byBiZSBlbmNvZGVkXG4qL1xuLSAodm9pZCllbmNvZGVQcm9wZXJ0eUxpc3Q6KGlkKWFQcm9wZXJ0eUxpc3Rcbntcbi8vICAgW3NlbGYgZW5jb2RlVmFsdWVPZk9iakNUeXBlOkBlbmNvZGUoaWQpIGF0OiZwcm9wZXJ0eUxpc3RdO1xufVxuXG4vKiFcbiAgICBFbmNvZGVzIHRoZSByb290IG9iamVjdCBvZiBhIGdyb3VwIG9mIE9iai1KIG9iamVjdHMuXG4gICAgQHBhcmFtIHJvb3RPYmplY3QgdGhlIHJvb3Qgb2JqZWN0IHRvIGJlIGVuY29kZWQuXG4qL1xuLSAodm9pZCllbmNvZGVSb290T2JqZWN0OihpZClhbk9iamVjdFxue1xuICAgW3NlbGYgZW5jb2RlT2JqZWN0OmFuT2JqZWN0XTtcbn1cblxuLyohXG4gICAgRW5jb2RlcyBhbiBvYmplY3QuXG4gICAgQHBhcmFtIGFuT2JqZWN0IHRoZSBvYmplY3QgdG8gYmUgZW5jb2RlZC5cbiovXG4tICh2b2lkKWVuY29kZUJ5Y29weU9iamVjdDooaWQpYW5PYmplY3RcbntcbiAgIFtzZWxmIGVuY29kZU9iamVjdDphbk9iamVjdF07XG59XG5cbi8qIVxuICAgIEVuY29kZXMgYW4gb2JqZWN0LlxuICAgIEBwYXJhbSBhbk9iamVjdCB0aGUgb2JqZWN0IHRvIGJlIGVuY29kZWQuXG4qL1xuLSAodm9pZCllbmNvZGVDb25kaXRpb25hbE9iamVjdDooaWQpYW5PYmplY3RcbntcbiAgIFtzZWxmIGVuY29kZU9iamVjdDphbk9iamVjdF07XG59XG5cbkBlbmRcblxuQGltcGxlbWVudGF0aW9uIENQT2JqZWN0IChDUENvZGluZylcblxuLyohXG4gICAgQ2FsbGVkIGFmdGVyIGFuIG9iamVjdCBpcyB1bmFyY2hpdmVkIGluIGNhc2UgYSBkaWZmZXJlbnQgb2JqZWN0IHNob3VsZCBiZSB1c2VkIGluIHBsYWNlIG9mIGl0LlxuICAgIFRoZSBkZWZhdWx0IG1ldGhvZCByZXR1cm5zIFxcYyBzZWxmLiBJbnRlcmVzdGVkIHN1YmNsYXNzZXMgc2hvdWxkIG92ZXJyaWRlIHRoaXMuXG4gICAgQHBhcmFtIGFEZWNvZGVyXG4gICAgQHJldHVybiB0aGUgb3JpZ2luYWwgb2JqZWN0IG9yIGl0J3Mgc3Vic3RpdHV0ZS5cbiovXG4tIChpZClhd2FrZUFmdGVyVXNpbmdDb2RlcjooQ1BDb2RlcilhRGVjb2Rlclxue1xuICAgIHJldHVybiBzZWxmO1xufVxuXG5AZW5kXG4iXX0=t;3426;

objj_executeFile("CPException.j", YES);objj_executeFile("CPObject.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPCoder"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("allowsKeyedCoding"), function $CPCoder__allowsKeyedCoding(self, _cmd)
{
    return NO;
}

,["BOOL"]), new objj_method(sel_getUid("encodeValueOfObjJType:at:"), function $CPCoder__encodeValueOfObjJType_at_(self, _cmd, aType, anObject)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
}

,["void","CPString","id"]), new objj_method(sel_getUid("encodeDataObject:"), function $CPCoder__encodeDataObject_(self, _cmd, aData)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
}

,["void","CPData"]), new objj_method(sel_getUid("encodeObject:"), function $CPCoder__encodeObject_(self, _cmd, anObject)
{
}

,["void","id"]), new objj_method(sel_getUid("encodePoint:"), function $CPCoder__encodePoint_(self, _cmd, aPoint)
{
    (self.isa.method_msgSend["encodeNumber:"] || _objj_forward)(self, (self.isa.method_dtable["encodeNumber:"], "encodeNumber:"), aPoint.x);
    (self.isa.method_msgSend["encodeNumber:"] || _objj_forward)(self, (self.isa.method_dtable["encodeNumber:"], "encodeNumber:"), aPoint.y);
}

,["void","CGPoint"]), new objj_method(sel_getUid("encodeRect:"), function $CPCoder__encodeRect_(self, _cmd, aRect)
{
    (self.isa.method_msgSend["encodePoint:"] || _objj_forward)(self, (self.isa.method_dtable["encodePoint:"], "encodePoint:"), aRect.origin);
    (self.isa.method_msgSend["encodeSize:"] || _objj_forward)(self, (self.isa.method_dtable["encodeSize:"], "encodeSize:"), aRect.size);
}

,["void","CGRect"]), new objj_method(sel_getUid("encodeSize:"), function $CPCoder__encodeSize_(self, _cmd, aSize)
{
    (self.isa.method_msgSend["encodeNumber:"] || _objj_forward)(self, (self.isa.method_dtable["encodeNumber:"], "encodeNumber:"), aSize.width);
    (self.isa.method_msgSend["encodeNumber:"] || _objj_forward)(self, (self.isa.method_dtable["encodeNumber:"], "encodeNumber:"), aSize.height);
}

,["void","CGSize"]), new objj_method(sel_getUid("encodePropertyList:"), function $CPCoder__encodePropertyList_(self, _cmd, aPropertyList)
{
}

,["void","id"]), new objj_method(sel_getUid("encodeRootObject:"), function $CPCoder__encodeRootObject_(self, _cmd, anObject)
{
    (self.isa.method_msgSend["encodeObject:"] || _objj_forward)(self, (self.isa.method_dtable["encodeObject:"], "encodeObject:"), anObject);
}

,["void","id"]), new objj_method(sel_getUid("encodeBycopyObject:"), function $CPCoder__encodeBycopyObject_(self, _cmd, anObject)
{
    (self.isa.method_msgSend["encodeObject:"] || _objj_forward)(self, (self.isa.method_dtable["encodeObject:"], "encodeObject:"), anObject);
}

,["void","id"]), new objj_method(sel_getUid("encodeConditionalObject:"), function $CPCoder__encodeConditionalObject_(self, _cmd, anObject)
{
    (self.isa.method_msgSend["encodeObject:"] || _objj_forward)(self, (self.isa.method_dtable["encodeObject:"], "encodeObject:"), anObject);
}

,["void","id"])]);
}
{
var the_class = objj_getClass("CPObject")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPObject\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("awakeAfterUsingCoder:"), function $CPObject__awakeAfterUsingCoder_(self, _cmd, aDecoder)
{
    return self;
}

,["id","CPCoder"])]);
}
p;15;CPUndoManager.jt;95595;@STATIC;1.0;i;9;CPArray.ji;13;CPException.ji;14;CPInvocation.ji;22;CPNotificationCenter.ji;10;CPObject.ji;9;CPProxy.ji;21;CPKeyValueObserving.ji;11;CPRunLoop.jS;51976;t;43444;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPInvocation.j", YES);objj_executeFile("CPNotificationCenter.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPProxy.j", YES);objj_executeFile("CPKeyValueObserving.j", YES);objj_executeFile("CPRunLoop.j", YES);var CPUndoManagerNormal = 0,
    CPUndoManagerUndoing = 1,
    CPUndoManagerRedoing = 2;
CPUndoManagerCheckpointNotification = "CPUndoManagerCheckpointNotification";
CPUndoManagerDidOpenUndoGroupNotification = "CPUndoManagerDidOpenUndoGroupNotification";
CPUndoManagerDidCloseUndoGroupNotification = "CPUndoManagerDidCloseUndoGroupNotification";
CPUndoManagerDidRedoChangeNotification = "CPUndoManagerDidRedoChangeNotification";
CPUndoManagerDidUndoChangeNotification = "CPUndoManagerDidUndoChangeNotification";
CPUndoManagerWillCloseUndoGroupNotification = "CPUndoManagerWillCloseUndoGroupNotification";
CPUndoManagerWillRedoChangeNotification = "CPUndoManagerWillRedoChangeNotification";
CPUndoManagerWillUndoChangeNotification = "CPUndoManagerWillUndoChangeNotification";
CPUndoCloseGroupingRunLoopOrdering = 350000;
var _CPUndoGroupingPool = [],
    _CPUndoGroupingPoolCapacity = 5;

{var the_class = objj_allocateClassPair(CPObject, "_CPUndoGrouping"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_parent", "id"), new objj_ivar("_invocations", "CPMutableArray"), new objj_ivar("_actionName", "CPString")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithParent:"), function $_CPUndoGrouping__initWithParent_(self, _cmd, anUndoGrouping)
{
    self = (objj_getClass("_CPUndoGrouping").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._parent = anUndoGrouping;
        self._invocations = [];
        self._actionName = "";
    }
    return self;
}

,["id","_CPUndoGrouping"]), new objj_method(sel_getUid("parent"), function $_CPUndoGrouping__parent(self, _cmd)
{
    return self._parent;
}

,["_CPUndoGrouping"]), new objj_method(sel_getUid("addInvocation:"), function $_CPUndoGrouping__addInvocation_(self, _cmd, anInvocation)
{
    self._invocations.push(anInvocation);
}

,["void","CPInvocation"]), new objj_method(sel_getUid("addInvocationsFromArray:"), function $_CPUndoGrouping__addInvocationsFromArray_(self, _cmd, invocations)
{
    ((___r1 = self._invocations), ___r1 == null ? null : (___r1.isa.method_msgSend["addObjectsFromArray:"] || _objj_forward)(___r1, (self._invocations.isa.method_dtable["addObjectsFromArray:"], "addObjectsFromArray:"), invocations));
    var ___r1;
}

,["void","CPArray"]), new objj_method(sel_getUid("removeInvocationsWithTarget:"), function $_CPUndoGrouping__removeInvocationsWithTarget_(self, _cmd, aTarget)
{
    var index = self._invocations.length;
    while (index--)
        if (((___r1 = self._invocations[index]), ___r1 == null ? null : (___r1.isa.method_msgSend["target"] || _objj_forward)(___r1, "target")) == aTarget)
            self._invocations.splice(index, 1);
    var ___r1;
}

,["BOOL","id"]), new objj_method(sel_getUid("invocations"), function $_CPUndoGrouping__invocations(self, _cmd)
{
    return self._invocations;
}

,["CPArray"]), new objj_method(sel_getUid("invoke"), function $_CPUndoGrouping__invoke(self, _cmd)
{
    var index = self._invocations.length;
    while (index--)
        ((___r1 = self._invocations[index]), ___r1 == null ? null : (___r1.isa.method_msgSend["invoke"] || _objj_forward)(___r1, "invoke"));
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("setActionName:"), function $_CPUndoGrouping__setActionName_(self, _cmd, aName)
{
    self._actionName = aName;
}

,["void","CPString"]), new objj_method(sel_getUid("actionName"), function $_CPUndoGrouping__actionName(self, _cmd)
{
    return self._actionName;
}

,["CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("_poolUndoGrouping:"), function $_CPUndoGrouping___poolUndoGrouping_(self, _cmd, anUndoGrouping)
{
    if (!anUndoGrouping || _CPUndoGroupingPool.length >= _CPUndoGroupingPoolCapacity)
        return;
    _CPUndoGroupingPool.push(anUndoGrouping);
}

,["void","_CPUndoGrouping"]), new objj_method(sel_getUid("undoGroupingWithParent:"), function $_CPUndoGrouping__undoGroupingWithParent_(self, _cmd, anUndoGrouping)
{
    if (_CPUndoGroupingPool.length)
    {
        var grouping = _CPUndoGroupingPool.pop();
        grouping._parent = anUndoGrouping;
        if (grouping._invocations.length)
            grouping._invocations = [];
        return grouping;
    }
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithParent:"] || _objj_forward)(___r1, "initWithParent:", anUndoGrouping));
    var ___r1;
}

,["id","_CPUndoGrouping"])]);
}
var _CPUndoGroupingParentKey = "_CPUndoGroupingParentKey",
    _CPUndoGroupingInvocationsKey = "_CPUndoGroupingInvocationsKey",
    _CPUndoGroupingActionNameKey = "_CPUndoGroupingActionNameKey";
{
var the_class = objj_getClass("_CPUndoGrouping")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"_CPUndoGrouping\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $_CPUndoGrouping__initWithCoder_(self, _cmd, aCoder)
{
    self = (objj_getClass("_CPUndoGrouping").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._parent = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), _CPUndoGroupingParentKey));
        self._invocations = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), _CPUndoGroupingInvocationsKey));
        self._actionName = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), _CPUndoGroupingActionNameKey));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $_CPUndoGrouping__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._parent, _CPUndoGroupingParentKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._invocations, _CPUndoGroupingInvocationsKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._actionName, _CPUndoGroupingActionNameKey));
}

,["void","CPCoder"])]);
}

{var the_class = objj_allocateClassPair(CPObject, "CPUndoManager"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_redoStack", "CPMutableArray"), new objj_ivar("_undoStack", "CPMutableArray"), new objj_ivar("_groupsByEvent", "BOOL"), new objj_ivar("_disableCount", "int"), new objj_ivar("_levelsOfUndo", "int"), new objj_ivar("_currentGrouping", "id"), new objj_ivar("_state", "int"), new objj_ivar("_preparedTarget", "id"), new objj_ivar("_undoManagerProxy", "id"), new objj_ivar("_runLoopModes", "CPArray"), new objj_ivar("_registeredWithRunLoop", "BOOL")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPUndoManager__init(self, _cmd)
{
    self = (objj_getClass("CPUndoManager").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._redoStack = [];
        self._undoStack = [];
        self._disableCount = 0;
        self._state = CPUndoManagerNormal;
        (self == null ? null : (self.isa.method_msgSend["setRunLoopModes:"] || _objj_forward)(self, (self.isa.method_dtable["setRunLoopModes:"], "setRunLoopModes:"), [CPDefaultRunLoopMode]));
        (self == null ? null : (self.isa.method_msgSend["setGroupsByEvent:"] || _objj_forward)(self, (self.isa.method_dtable["setGroupsByEvent:"], "setGroupsByEvent:"), YES));
        self._undoManagerProxy = (_CPUndoManagerProxy == null ? null : (_CPUndoManagerProxy.isa.method_msgSend["alloc"] || _objj_forward)(_CPUndoManagerProxy, (_CPUndoManagerProxy.isa.method_dtable["alloc"], "alloc")));
        self._undoManagerProxy._undoManager = self;
    }
    return self;
}

,["id"]), new objj_method(sel_getUid("_addUndoInvocation:"), function $CPUndoManager___addUndoInvocation_(self, _cmd, anInvocation)
{
    if (!self._currentGrouping)
        if ((self.isa.method_msgSend["groupsByEvent"] || _objj_forward)(self, (self.isa.method_dtable["groupsByEvent"], "groupsByEvent")))
            (self.isa.method_msgSend["_beginUndoGroupingForEvent"] || _objj_forward)(self, (self.isa.method_dtable["_beginUndoGroupingForEvent"], "_beginUndoGroupingForEvent"));
        else
            (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInternalInconsistencyException, "No undo group is currently open");
    ((___r1 = self._currentGrouping), ___r1 == null ? null : (___r1.isa.method_msgSend["addInvocation:"] || _objj_forward)(___r1, (self._currentGrouping.isa.method_dtable["addInvocation:"], "addInvocation:"), anInvocation));
    if (self._state === CPUndoManagerNormal)
        ((___r1 = self._redoStack), ___r1 == null ? null : (___r1.isa.method_msgSend["removeAllObjects"] || _objj_forward)(___r1, (self._redoStack.isa.method_dtable["removeAllObjects"], "removeAllObjects")));
    var ___r1;
}

,["void","CPInvocation"]), new objj_method(sel_getUid("registerUndoWithTarget:selector:object:"), function $CPUndoManager__registerUndoWithTarget_selector_object_(self, _cmd, aTarget, aSelector, anObject)
{
    if (self._disableCount > 0)
        return;
    var invocation = (CPInvocation.isa.method_msgSend["invocationWithMethodSignature:"] || _objj_forward)(CPInvocation, (CPInvocation.isa.method_dtable["invocationWithMethodSignature:"], "invocationWithMethodSignature:"), nil);
    (invocation == null ? null : (invocation.isa.method_msgSend["setTarget:"] || _objj_forward)(invocation, (invocation.isa.method_dtable["setTarget:"], "setTarget:"), aTarget));
    (invocation == null ? null : (invocation.isa.method_msgSend["setSelector:"] || _objj_forward)(invocation, (invocation.isa.method_dtable["setSelector:"], "setSelector:"), aSelector));
    (invocation == null ? null : (invocation.isa.method_msgSend["setArgument:atIndex:"] || _objj_forward)(invocation, (invocation.isa.method_dtable["setArgument:atIndex:"], invocation.isa.method_dtable["setArgument:atIndex:"], "setArgument:atIndex:"), anObject, 2));
    (self.isa.method_msgSend["_addUndoInvocation:"] || _objj_forward)(self, (self.isa.method_dtable["_addUndoInvocation:"], "_addUndoInvocation:"), invocation);
}

,["void","id","SEL","id"]), new objj_method(sel_getUid("prepareWithInvocationTarget:"), function $CPUndoManager__prepareWithInvocationTarget_(self, _cmd, aTarget)
{
    self._preparedTarget = aTarget;
    return self._undoManagerProxy;
}

,["id","id"]), new objj_method(sel_getUid("_methodSignatureOfPreparedTargetForSelector:"), function $CPUndoManager___methodSignatureOfPreparedTargetForSelector_(self, _cmd, aSelector)
{
    if (((___r1 = self._preparedTarget), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._preparedTarget.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), aSelector)))
        return 1;
    return nil;
    var ___r1;
}

,["CPMethodSignature","SEL"]), new objj_method(sel_getUid("_forwardInvocationToPreparedTarget:"), function $CPUndoManager___forwardInvocationToPreparedTarget_(self, _cmd, anInvocation)
{
    if (self._disableCount > 0)
        return;
    (anInvocation == null ? null : (anInvocation.isa.method_msgSend["setTarget:"] || _objj_forward)(anInvocation, (anInvocation.isa.method_dtable["setTarget:"], "setTarget:"), self._preparedTarget));
    (self.isa.method_msgSend["_addUndoInvocation:"] || _objj_forward)(self, (self.isa.method_dtable["_addUndoInvocation:"], "_addUndoInvocation:"), anInvocation);
    self._preparedTarget = nil;
}

,["void","CPInvocation"]), new objj_method(sel_getUid("canRedo"), function $CPUndoManager__canRedo(self, _cmd)
{
    ((___r1 = (CPNotificationCenter.isa.method_msgSend["defaultCenter"] || _objj_forward)(CPNotificationCenter, (CPNotificationCenter.isa.method_dtable["defaultCenter"], "defaultCenter"))), ___r1 == null ? null : (___r1.isa.method_msgSend["postNotificationName:object:"] || _objj_forward)(___r1, "postNotificationName:object:", CPUndoManagerCheckpointNotification, self));
    return ((___r1 = self._redoStack), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._redoStack.isa.method_dtable["count"], "count"))) > 0;
    var ___r1;
}

,["BOOL"]), new objj_method(sel_getUid("canUndo"), function $CPUndoManager__canUndo(self, _cmd)
{
    if (self._undoStack.length > 0)
        return YES;
    return ((___r1 = ((___r2 = self._currentGrouping), ___r2 == null ? null : (___r2.isa.method_msgSend["invocations"] || _objj_forward)(___r2, (self._currentGrouping.isa.method_dtable["invocations"], "invocations")))), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, "count")) > 0;
    var ___r1, ___r2;
}

,["BOOL"]), new objj_method(sel_getUid("undo"), function $CPUndoManager__undo(self, _cmd)
{
    if ((self.isa.method_msgSend["groupingLevel"] || _objj_forward)(self, (self.isa.method_dtable["groupingLevel"], "groupingLevel")) === 1)
        (self.isa.method_msgSend["endUndoGrouping"] || _objj_forward)(self, (self.isa.method_dtable["endUndoGrouping"], "endUndoGrouping"));
    (self.isa.method_msgSend["undoNestedGroup"] || _objj_forward)(self, (self.isa.method_dtable["undoNestedGroup"], "undoNestedGroup"));
}

,["void"]), new objj_method(sel_getUid("undoNestedGroup"), function $CPUndoManager__undoNestedGroup(self, _cmd)
{
    if (((___r1 = self._undoStack), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._undoStack.isa.method_dtable["count"], "count"))) <= 0)
        return;
    var defaultCenter = (CPNotificationCenter.isa.method_msgSend["defaultCenter"] || _objj_forward)(CPNotificationCenter, (CPNotificationCenter.isa.method_dtable["defaultCenter"], "defaultCenter"));
    (defaultCenter == null ? null : (defaultCenter.isa.method_msgSend["postNotificationName:object:"] || _objj_forward)(defaultCenter, (defaultCenter.isa.method_dtable["postNotificationName:object:"], defaultCenter.isa.method_dtable["postNotificationName:object:"], "postNotificationName:object:"), CPUndoManagerCheckpointNotification, self));
    (defaultCenter == null ? null : (defaultCenter.isa.method_msgSend["postNotificationName:object:"] || _objj_forward)(defaultCenter, (defaultCenter.isa.method_dtable["postNotificationName:object:"], defaultCenter.isa.method_dtable["postNotificationName:object:"], "postNotificationName:object:"), CPUndoManagerWillUndoChangeNotification, self));
    var undoGrouping = self._undoStack.pop(),
        actionName = (undoGrouping == null ? null : (undoGrouping.isa.method_msgSend["actionName"] || _objj_forward)(undoGrouping, (undoGrouping.isa.method_dtable["actionName"], "actionName")));
    self._state = CPUndoManagerUndoing;
    (self.isa.method_msgSend["_beginUndoGrouping"] || _objj_forward)(self, (self.isa.method_dtable["_beginUndoGrouping"], "_beginUndoGrouping"));
    (undoGrouping == null ? null : (undoGrouping.isa.method_msgSend["invoke"] || _objj_forward)(undoGrouping, (undoGrouping.isa.method_dtable["invoke"], "invoke")));
    (self.isa.method_msgSend["endUndoGrouping"] || _objj_forward)(self, (self.isa.method_dtable["endUndoGrouping"], "endUndoGrouping"));
    (_CPUndoGrouping.isa.method_msgSend["_poolUndoGrouping:"] || _objj_forward)(_CPUndoGrouping, (_CPUndoGrouping.isa.method_dtable["_poolUndoGrouping:"], "_poolUndoGrouping:"), undoGrouping);
    self._state = CPUndoManagerNormal;
    ((___r1 = ((___r2 = self._redoStack), ___r2 == null ? null : (___r2.isa.method_msgSend["lastObject"] || _objj_forward)(___r2, (self._redoStack.isa.method_dtable["lastObject"], "lastObject")))), ___r1 == null ? null : (___r1.isa.method_msgSend["setActionName:"] || _objj_forward)(___r1, "setActionName:", actionName));
    (defaultCenter == null ? null : (defaultCenter.isa.method_msgSend["postNotificationName:object:"] || _objj_forward)(defaultCenter, (defaultCenter.isa.method_dtable["postNotificationName:object:"], defaultCenter.isa.method_dtable["postNotificationName:object:"], "postNotificationName:object:"), CPUndoManagerDidUndoChangeNotification, self));
    var ___r1, ___r2;
}

,["void"]), new objj_method(sel_getUid("redo"), function $CPUndoManager__redo(self, _cmd)
{
    if (((___r1 = self._redoStack), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._redoStack.isa.method_dtable["count"], "count"))) <= 0)
        return;
    var defaultCenter = (CPNotificationCenter.isa.method_msgSend["defaultCenter"] || _objj_forward)(CPNotificationCenter, (CPNotificationCenter.isa.method_dtable["defaultCenter"], "defaultCenter"));
    (defaultCenter == null ? null : (defaultCenter.isa.method_msgSend["postNotificationName:object:"] || _objj_forward)(defaultCenter, (defaultCenter.isa.method_dtable["postNotificationName:object:"], defaultCenter.isa.method_dtable["postNotificationName:object:"], "postNotificationName:object:"), CPUndoManagerCheckpointNotification, self));
    (defaultCenter == null ? null : (defaultCenter.isa.method_msgSend["postNotificationName:object:"] || _objj_forward)(defaultCenter, (defaultCenter.isa.method_dtable["postNotificationName:object:"], defaultCenter.isa.method_dtable["postNotificationName:object:"], "postNotificationName:object:"), CPUndoManagerWillRedoChangeNotification, self));
    var oldUndoGrouping = self._currentGrouping,
        undoGrouping = self._redoStack.pop(),
        actionName = (undoGrouping == null ? null : (undoGrouping.isa.method_msgSend["actionName"] || _objj_forward)(undoGrouping, (undoGrouping.isa.method_dtable["actionName"], "actionName")));
    self._currentGrouping = nil;
    self._state = CPUndoManagerRedoing;
    (self.isa.method_msgSend["_beginUndoGrouping"] || _objj_forward)(self, (self.isa.method_dtable["_beginUndoGrouping"], "_beginUndoGrouping"));
    (undoGrouping == null ? null : (undoGrouping.isa.method_msgSend["invoke"] || _objj_forward)(undoGrouping, (undoGrouping.isa.method_dtable["invoke"], "invoke")));
    (self.isa.method_msgSend["endUndoGrouping"] || _objj_forward)(self, (self.isa.method_dtable["endUndoGrouping"], "endUndoGrouping"));
    (_CPUndoGrouping.isa.method_msgSend["_poolUndoGrouping:"] || _objj_forward)(_CPUndoGrouping, (_CPUndoGrouping.isa.method_dtable["_poolUndoGrouping:"], "_poolUndoGrouping:"), undoGrouping);
    self._currentGrouping = oldUndoGrouping;
    self._state = CPUndoManagerNormal;
    ((___r1 = ((___r2 = self._undoStack), ___r2 == null ? null : (___r2.isa.method_msgSend["lastObject"] || _objj_forward)(___r2, (self._undoStack.isa.method_dtable["lastObject"], "lastObject")))), ___r1 == null ? null : (___r1.isa.method_msgSend["setActionName:"] || _objj_forward)(___r1, "setActionName:", actionName));
    (defaultCenter == null ? null : (defaultCenter.isa.method_msgSend["postNotificationName:object:"] || _objj_forward)(defaultCenter, (defaultCenter.isa.method_dtable["postNotificationName:object:"], defaultCenter.isa.method_dtable["postNotificationName:object:"], "postNotificationName:object:"), CPUndoManagerDidRedoChangeNotification, self));
    var ___r1, ___r2;
}

,["void"]), new objj_method(sel_getUid("beginUndoGrouping"), function $CPUndoManager__beginUndoGrouping(self, _cmd)
{
    if (!self._currentGrouping && (self.isa.method_msgSend["groupsByEvent"] || _objj_forward)(self, (self.isa.method_dtable["groupsByEvent"], "groupsByEvent")))
        (self.isa.method_msgSend["_beginUndoGroupingForEvent"] || _objj_forward)(self, (self.isa.method_dtable["_beginUndoGroupingForEvent"], "_beginUndoGroupingForEvent"));
    ((___r1 = (CPNotificationCenter.isa.method_msgSend["defaultCenter"] || _objj_forward)(CPNotificationCenter, (CPNotificationCenter.isa.method_dtable["defaultCenter"], "defaultCenter"))), ___r1 == null ? null : (___r1.isa.method_msgSend["postNotificationName:object:"] || _objj_forward)(___r1, "postNotificationName:object:", CPUndoManagerCheckpointNotification, self));
    (self.isa.method_msgSend["_beginUndoGrouping"] || _objj_forward)(self, (self.isa.method_dtable["_beginUndoGrouping"], "_beginUndoGrouping"));
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("_beginUndoGroupingForEvent"), function $CPUndoManager___beginUndoGroupingForEvent(self, _cmd)
{
    (self.isa.method_msgSend["_beginUndoGrouping"] || _objj_forward)(self, (self.isa.method_dtable["_beginUndoGrouping"], "_beginUndoGrouping"));
    (self.isa.method_msgSend["_registerWithRunLoop"] || _objj_forward)(self, (self.isa.method_dtable["_registerWithRunLoop"], "_registerWithRunLoop"));
}

,["void"]), new objj_method(sel_getUid("_beginUndoGrouping"), function $CPUndoManager___beginUndoGrouping(self, _cmd)
{
    self._currentGrouping = (_CPUndoGrouping.isa.method_msgSend["undoGroupingWithParent:"] || _objj_forward)(_CPUndoGrouping, (_CPUndoGrouping.isa.method_dtable["undoGroupingWithParent:"], "undoGroupingWithParent:"), self._currentGrouping);
}

,["void"]), new objj_method(sel_getUid("endUndoGrouping"), function $CPUndoManager__endUndoGrouping(self, _cmd)
{
    if (!self._currentGrouping)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInternalInconsistencyException, "endUndoGrouping. No undo group is currently open.");
    var defaultCenter = (CPNotificationCenter.isa.method_msgSend["defaultCenter"] || _objj_forward)(CPNotificationCenter, (CPNotificationCenter.isa.method_dtable["defaultCenter"], "defaultCenter"));
    (defaultCenter == null ? null : (defaultCenter.isa.method_msgSend["postNotificationName:object:"] || _objj_forward)(defaultCenter, (defaultCenter.isa.method_dtable["postNotificationName:object:"], defaultCenter.isa.method_dtable["postNotificationName:object:"], "postNotificationName:object:"), CPUndoManagerCheckpointNotification, self));
    var parent = ((___r1 = self._currentGrouping), ___r1 == null ? null : (___r1.isa.method_msgSend["parent"] || _objj_forward)(___r1, (self._currentGrouping.isa.method_dtable["parent"], "parent")));
    if (!parent && ((___r1 = self._currentGrouping), ___r1 == null ? null : (___r1.isa.method_msgSend["invocations"] || _objj_forward)(___r1, (self._currentGrouping.isa.method_dtable["invocations"], "invocations"))).length > 0)
    {
        (defaultCenter == null ? null : (defaultCenter.isa.method_msgSend["postNotificationName:object:"] || _objj_forward)(defaultCenter, (defaultCenter.isa.method_dtable["postNotificationName:object:"], defaultCenter.isa.method_dtable["postNotificationName:object:"], "postNotificationName:object:"), CPUndoManagerWillCloseUndoGroupNotification, self));
        var stack = self._state === CPUndoManagerUndoing ? self._redoStack : self._undoStack;
        stack.push(self._currentGrouping);
        if (self._levelsOfUndo > 0 && stack.length > self._levelsOfUndo)
            stack.splice(0, 1);
        (defaultCenter == null ? null : (defaultCenter.isa.method_msgSend["postNotificationName:object:"] || _objj_forward)(defaultCenter, (defaultCenter.isa.method_dtable["postNotificationName:object:"], defaultCenter.isa.method_dtable["postNotificationName:object:"], "postNotificationName:object:"), CPUndoManagerDidCloseUndoGroupNotification, self));
    }
    else
    {
        (parent == null ? null : (parent.isa.method_msgSend["addInvocationsFromArray:"] || _objj_forward)(parent, (parent.isa.method_dtable["addInvocationsFromArray:"], "addInvocationsFromArray:"), ((___r1 = self._currentGrouping), ___r1 == null ? null : (___r1.isa.method_msgSend["invocations"] || _objj_forward)(___r1, (self._currentGrouping.isa.method_dtable["invocations"], "invocations")))));
        (_CPUndoGrouping.isa.method_msgSend["_poolUndoGrouping:"] || _objj_forward)(_CPUndoGrouping, (_CPUndoGrouping.isa.method_dtable["_poolUndoGrouping:"], "_poolUndoGrouping:"), self._currentGrouping);
    }
    self._currentGrouping = parent;
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("enableUndoRegistration"), function $CPUndoManager__enableUndoRegistration(self, _cmd)
{
    if (self._disableCount <= 0)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInternalInconsistencyException, "enableUndoRegistration. There are no disable messages in effect right now.");
    self._disableCount--;
}

,["void"]), new objj_method(sel_getUid("groupsByEvent"), function $CPUndoManager__groupsByEvent(self, _cmd)
{
    return self._groupsByEvent;
}

,["BOOL"]), new objj_method(sel_getUid("setGroupsByEvent:"), function $CPUndoManager__setGroupsByEvent_(self, _cmd, aFlag)
{
    aFlag = !!aFlag;
    if (self._groupsByEvent === aFlag)
        return;
    self._groupsByEvent = aFlag;
    if (!(self.isa.method_msgSend["groupsByEvent"] || _objj_forward)(self, (self.isa.method_dtable["groupsByEvent"], "groupsByEvent")))
        (self.isa.method_msgSend["_unregisterWithRunLoop"] || _objj_forward)(self, (self.isa.method_dtable["_unregisterWithRunLoop"], "_unregisterWithRunLoop"));
}

,["void","BOOL"]), new objj_method(sel_getUid("groupingLevel"), function $CPUndoManager__groupingLevel(self, _cmd)
{
    var grouping = self._currentGrouping,
        level = self._currentGrouping ? 1 : 0;
    while (grouping = (grouping == null ? null : (grouping.isa.method_msgSend["parent"] || _objj_forward)(grouping, (grouping.isa.method_dtable["parent"], "parent"))))
        ++level;
    return level;
}

,["unsigned"]), new objj_method(sel_getUid("disableUndoRegistration"), function $CPUndoManager__disableUndoRegistration(self, _cmd)
{
    ++self._disableCount;
}

,["void"]), new objj_method(sel_getUid("isUndoRegistrationEnabled"), function $CPUndoManager__isUndoRegistrationEnabled(self, _cmd)
{
    return self._disableCount == 0;
}

,["BOOL"]), new objj_method(sel_getUid("isUndoing"), function $CPUndoManager__isUndoing(self, _cmd)
{
    return self._state === CPUndoManagerUndoing;
}

,["BOOL"]), new objj_method(sel_getUid("isRedoing"), function $CPUndoManager__isRedoing(self, _cmd)
{
    return self._state === CPUndoManagerRedoing;
}

,["BOOL"]), new objj_method(sel_getUid("removeAllActions"), function $CPUndoManager__removeAllActions(self, _cmd)
{
    while (self._currentGrouping)
        (self.isa.method_msgSend["endUndoGrouping"] || _objj_forward)(self, (self.isa.method_dtable["endUndoGrouping"], "endUndoGrouping"));
    (self.isa.method_msgSend["_unregisterWithRunLoop"] || _objj_forward)(self, (self.isa.method_dtable["_unregisterWithRunLoop"], "_unregisterWithRunLoop"));
    self._state = CPUndoManagerNormal;
    self._redoStack = [];
    self._undoStack = [];
    self._disableCount = 0;
}

,["void"]), new objj_method(sel_getUid("removeAllActionsWithTarget:"), function $CPUndoManager__removeAllActionsWithTarget_(self, _cmd, aTarget)
{
    ((___r1 = self._currentGrouping), ___r1 == null ? null : (___r1.isa.method_msgSend["removeInvocationsWithTarget:"] || _objj_forward)(___r1, (self._currentGrouping.isa.method_dtable["removeInvocationsWithTarget:"], "removeInvocationsWithTarget:"), aTarget));
    var index = self._redoStack.length;
    while (index--)
    {
        var grouping = self._redoStack[index];
        (grouping == null ? null : (grouping.isa.method_msgSend["removeInvocationsWithTarget:"] || _objj_forward)(grouping, (grouping.isa.method_dtable["removeInvocationsWithTarget:"], "removeInvocationsWithTarget:"), aTarget));
        if (!(grouping == null ? null : (grouping.isa.method_msgSend["invocations"] || _objj_forward)(grouping, (grouping.isa.method_dtable["invocations"], "invocations"))).length)
            self._redoStack.splice(index, 1);
    }
    index = self._undoStack.length;
    while (index--)
    {
        var grouping = self._undoStack[index];
        (grouping == null ? null : (grouping.isa.method_msgSend["removeInvocationsWithTarget:"] || _objj_forward)(grouping, (grouping.isa.method_dtable["removeInvocationsWithTarget:"], "removeInvocationsWithTarget:"), aTarget));
        if (!(grouping == null ? null : (grouping.isa.method_msgSend["invocations"] || _objj_forward)(grouping, (grouping.isa.method_dtable["invocations"], "invocations"))).length)
            self._undoStack.splice(index, 1);
    }
    var ___r1;
}

,["void","id"]), new objj_method(sel_getUid("setActionName:"), function $CPUndoManager__setActionName_(self, _cmd, anActionName)
{
    if (anActionName !== nil && self._currentGrouping)
        ((___r1 = self._currentGrouping), ___r1 == null ? null : (___r1.isa.method_msgSend["setActionName:"] || _objj_forward)(___r1, (self._currentGrouping.isa.method_dtable["setActionName:"], "setActionName:"), anActionName));
    var ___r1;
}

,["void","CPString"]), new objj_method(sel_getUid("redoActionName"), function $CPUndoManager__redoActionName(self, _cmd)
{
    if (!(self.isa.method_msgSend["canRedo"] || _objj_forward)(self, (self.isa.method_dtable["canRedo"], "canRedo")))
        return nil;
    return ((___r1 = ((___r2 = self._redoStack), ___r2 == null ? null : (___r2.isa.method_msgSend["lastObject"] || _objj_forward)(___r2, (self._redoStack.isa.method_dtable["lastObject"], "lastObject")))), ___r1 == null ? null : (___r1.isa.method_msgSend["actionName"] || _objj_forward)(___r1, "actionName"));
    var ___r1, ___r2;
}

,["CPString"]), new objj_method(sel_getUid("redoMenuItemTitle"), function $CPUndoManager__redoMenuItemTitle(self, _cmd)
{
    return (self.isa.method_msgSend["redoMenuTitleForUndoActionName:"] || _objj_forward)(self, (self.isa.method_dtable["redoMenuTitleForUndoActionName:"], "redoMenuTitleForUndoActionName:"), (self.isa.method_msgSend["redoActionName"] || _objj_forward)(self, (self.isa.method_dtable["redoActionName"], "redoActionName")));
}

,["CPString"]), new objj_method(sel_getUid("redoMenuTitleForUndoActionName:"), function $CPUndoManager__redoMenuTitleForUndoActionName_(self, _cmd, anActionName)
{
    if (anActionName || anActionName === 0)
        return "Redo " + anActionName;
    return "Redo";
}

,["CPString","CPString"]), new objj_method(sel_getUid("undoActionName"), function $CPUndoManager__undoActionName(self, _cmd)
{
    if (!(self.isa.method_msgSend["canUndo"] || _objj_forward)(self, (self.isa.method_dtable["canUndo"], "canUndo")))
        return nil;
    return ((___r1 = ((___r2 = self._undoStack), ___r2 == null ? null : (___r2.isa.method_msgSend["lastObject"] || _objj_forward)(___r2, (self._undoStack.isa.method_dtable["lastObject"], "lastObject")))), ___r1 == null ? null : (___r1.isa.method_msgSend["actionName"] || _objj_forward)(___r1, "actionName"));
    var ___r1, ___r2;
}

,["CPString"]), new objj_method(sel_getUid("undoMenuItemTitle"), function $CPUndoManager__undoMenuItemTitle(self, _cmd)
{
    return (self.isa.method_msgSend["undoMenuTitleForUndoActionName:"] || _objj_forward)(self, (self.isa.method_dtable["undoMenuTitleForUndoActionName:"], "undoMenuTitleForUndoActionName:"), (self.isa.method_msgSend["undoActionName"] || _objj_forward)(self, (self.isa.method_dtable["undoActionName"], "undoActionName")));
}

,["CPString"]), new objj_method(sel_getUid("undoMenuTitleForUndoActionName:"), function $CPUndoManager__undoMenuTitleForUndoActionName_(self, _cmd, anActionName)
{
    if (anActionName || anActionName === 0)
        return "Undo " + anActionName;
    return "Undo";
}

,["CPString","CPString"]), new objj_method(sel_getUid("runLoopModes"), function $CPUndoManager__runLoopModes(self, _cmd)
{
    return self._runLoopModes;
}

,["CPArray"]), new objj_method(sel_getUid("setRunLoopModes:"), function $CPUndoManager__setRunLoopModes_(self, _cmd, modes)
{
    self._runLoopModes = (modes == null ? null : (modes.isa.method_msgSend["copy"] || _objj_forward)(modes, (modes.isa.method_dtable["copy"], "copy")));
    if (self._registeredWithRunLoop)
    {
        (self.isa.method_msgSend["_unregisterWithRunLoop"] || _objj_forward)(self, (self.isa.method_dtable["_unregisterWithRunLoop"], "_unregisterWithRunLoop"));
        (self.isa.method_msgSend["_registerWithRunLoop"] || _objj_forward)(self, (self.isa.method_dtable["_registerWithRunLoop"], "_registerWithRunLoop"));
    }
}

,["void","CPArray"]), new objj_method(sel_getUid("_runLoopEndUndoGrouping"), function $CPUndoManager___runLoopEndUndoGrouping(self, _cmd)
{
    (self.isa.method_msgSend["endUndoGrouping"] || _objj_forward)(self, (self.isa.method_dtable["endUndoGrouping"], "endUndoGrouping"));
    self._registeredWithRunLoop = NO;
}

,["void"]), new objj_method(sel_getUid("_registerWithRunLoop"), function $CPUndoManager___registerWithRunLoop(self, _cmd)
{
    if (self._registeredWithRunLoop)
        return;
    self._registeredWithRunLoop = YES;
    ((___r1 = (CPRunLoop.isa.method_msgSend["currentRunLoop"] || _objj_forward)(CPRunLoop, (CPRunLoop.isa.method_dtable["currentRunLoop"], "currentRunLoop"))), ___r1 == null ? null : (___r1.isa.method_msgSend["performSelector:target:argument:order:modes:"] || _objj_forward)(___r1, "performSelector:target:argument:order:modes:", sel_getUid("_runLoopEndUndoGrouping"), self, nil, CPUndoCloseGroupingRunLoopOrdering, self._runLoopModes));
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("_unregisterWithRunLoop"), function $CPUndoManager___unregisterWithRunLoop(self, _cmd)
{
    if (!self._registeredWithRunLoop)
        return;
    self._registeredWithRunLoop = NO;
    ((___r1 = (CPRunLoop.isa.method_msgSend["currentRunLoop"] || _objj_forward)(CPRunLoop, (CPRunLoop.isa.method_dtable["currentRunLoop"], "currentRunLoop"))), ___r1 == null ? null : (___r1.isa.method_msgSend["cancelPerformSelector:target:argument:"] || _objj_forward)(___r1, "cancelPerformSelector:target:argument:", sel_getUid("_runLoopEndUndoGrouping"), self, nil));
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("observeChangesForKeyPath:ofObject:"), function $CPUndoManager__observeChangesForKeyPath_ofObject_(self, _cmd, aKeyPath, anObject)
{
    (anObject == null ? null : (anObject.isa.method_msgSend["addObserver:forKeyPath:options:context:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["addObserver:forKeyPath:options:context:"], anObject.isa.method_dtable["addObserver:forKeyPath:options:context:"], anObject.isa.method_dtable["addObserver:forKeyPath:options:context:"], anObject.isa.method_dtable["addObserver:forKeyPath:options:context:"], "addObserver:forKeyPath:options:context:"), self, aKeyPath, CPKeyValueObservingOptionOld | CPKeyValueObservingOptionNew, NULL));
}

,["void","CPString","id"]), new objj_method(sel_getUid("stopObservingChangesForKeyPath:ofObject:"), function $CPUndoManager__stopObservingChangesForKeyPath_ofObject_(self, _cmd, aKeyPath, anObject)
{
    (anObject == null ? null : (anObject.isa.method_msgSend["removeObserver:forKeyPath:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["removeObserver:forKeyPath:"], anObject.isa.method_dtable["removeObserver:forKeyPath:"], "removeObserver:forKeyPath:"), self, aKeyPath));
}

,["void","CPString","id"]), new objj_method(sel_getUid("observeValueForKeyPath:ofObject:change:context:"), function $CPUndoManager__observeValueForKeyPath_ofObject_change_context_(self, _cmd, aKeyPath, anObject, aChange, aContext)
{
    var before = (aChange == null ? null : (aChange.isa.method_msgSend["valueForKey:"] || _objj_forward)(aChange, (aChange.isa.method_dtable["valueForKey:"], "valueForKey:"), CPKeyValueChangeOldKey)),
        after = (aChange == null ? null : (aChange.isa.method_msgSend["valueForKey:"] || _objj_forward)(aChange, (aChange.isa.method_dtable["valueForKey:"], "valueForKey:"), CPKeyValueChangeNewKey));
    if (before === after || before !== nil && before.isa && (after === nil || after.isa) && (before == null ? null : (before.isa.method_msgSend["isEqual:"] || _objj_forward)(before, (before.isa.method_dtable["isEqual:"], "isEqual:"), after)))
        return;
    ((___r1 = (self.isa.method_msgSend["prepareWithInvocationTarget:"] || _objj_forward)(self, (self.isa.method_dtable["prepareWithInvocationTarget:"], "prepareWithInvocationTarget:"), anObject)), ___r1 == null ? null : (___r1.isa.method_msgSend["applyChange:toKeyPath:"] || _objj_forward)(___r1, "applyChange:toKeyPath:", (aChange == null ? null : (aChange.isa.method_msgSend["inverseChangeDictionary"] || _objj_forward)(aChange, (aChange.isa.method_dtable["inverseChangeDictionary"], "inverseChangeDictionary"))), aKeyPath));
    var ___r1;
}

,["void","CPString","id","CPDictionary","id"])]);
}
var CPUndoManagerRedoStackKey = "CPUndoManagerRedoStackKey",
    CPUndoManagerUndoStackKey = "CPUndoManagerUndoStackKey",
    CPUndoManagerLevelsOfUndoKey = "CPUndoManagerLevelsOfUndoKey",
    CPUndoManagerActionNameKey = "CPUndoManagerActionNameKey",
    CPUndoManagerCurrentGroupingKey = "CPUndoManagerCurrentGroupingKey",
    CPUndoManagerRunLoopModesKey = "CPUndoManagerRunLoopModesKey",
    CPUndoManagerGroupsByEventKey = "CPUndoManagerGroupsByEventKey";
{
var the_class = objj_getClass("CPUndoManager")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPUndoManager\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPUndoManager__initWithCoder_(self, _cmd, aCoder)
{
    self = (objj_getClass("CPUndoManager").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._redoStack = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPUndoManagerRedoStackKey));
        self._undoStack = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPUndoManagerUndoStackKey));
        self._levelsOfUndo = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPUndoManagerLevelsOfUndoKey));
        self._currentGrouping = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPUndoManagerCurrentGroupingKey));
        self._state = CPUndoManagerNormal;
        (self == null ? null : (self.isa.method_msgSend["setRunLoopModes:"] || _objj_forward)(self, (self.isa.method_dtable["setRunLoopModes:"], "setRunLoopModes:"), (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPUndoManagerRunLoopModesKey))));
        (self == null ? null : (self.isa.method_msgSend["setGroupsByEvent:"] || _objj_forward)(self, (self.isa.method_dtable["setGroupsByEvent:"], "setGroupsByEvent:"), (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeBoolForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeBoolForKey:"], "decodeBoolForKey:"), CPUndoManagerGroupsByEventKey))));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPUndoManager__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._redoStack, CPUndoManagerRedoStackKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._undoStack, CPUndoManagerUndoStackKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeInt:forKey:"], aCoder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._levelsOfUndo, CPUndoManagerLevelsOfUndoKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._currentGrouping, CPUndoManagerCurrentGroupingKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._runLoopModes, CPUndoManagerRunLoopModesKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeBool:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeBool:forKey:"], aCoder.isa.method_dtable["encodeBool:forKey:"], "encodeBool:forKey:"), self._groupsByEvent, CPUndoManagerGroupsByEventKey));
}

,["void","CPCoder"])]);
}

{var the_class = objj_allocateClassPair(CPProxy, "_CPUndoManagerProxy"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_undoManager", "CPUndoManager")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("methodSignatureForSelector:"), function $_CPUndoManagerProxy__methodSignatureForSelector_(self, _cmd, aSelector)
{
    return ((___r1 = self._undoManager), ___r1 == null ? null : (___r1.isa.method_msgSend["_methodSignatureOfPreparedTargetForSelector:"] || _objj_forward)(___r1, (self._undoManager.isa.method_dtable["_methodSignatureOfPreparedTargetForSelector:"], "_methodSignatureOfPreparedTargetForSelector:"), aSelector));
    var ___r1;
}

,["CPMethodSignature","SEL"]), new objj_method(sel_getUid("forwardInvocation:"), function $_CPUndoManagerProxy__forwardInvocation_(self, _cmd, anInvocation)
{
    ((___r1 = self._undoManager), ___r1 == null ? null : (___r1.isa.method_msgSend["_forwardInvocationToPreparedTarget:"] || _objj_forward)(___r1, (self._undoManager.isa.method_dtable["_forwardInvocationToPreparedTarget:"], "_forwardInvocationToPreparedTarget:"), anInvocation));
    var ___r1;
}

,["void","CPInvocation"])]);
}
p;7;CPURL.jt;26058;@STATIC;1.0;i;10;CPObject.ji;10;CPString.jS;14500;t;11500;

objj_executeFile("CPObject.j", YES);objj_executeFile("CPString.j", YES);CPURLNameKey = "CPURLNameKey";
CPURLLocalizedNameKey = "CPURLLocalizedNameKey";
CPURLIsRegularFileKey = "CPURLIsRegularFileKey";
CPURLIsDirectoryKey = "CPURLIsDirectoryKey";
CPURLIsSymbolicLinkKey = "CPURLIsSymbolicLinkKey";
CPURLIsVolumeKey = "CPURLIsVolumeKey";
CPURLIsPackageKey = "CPURLIsPackageKey";
CPURLIsSystemImmutableKey = "CPURLIsSystemImmutableKey";
CPURLIsUserImmutableKey = "CPURLIsUserImmutableKey";
CPURLIsHiddenKey = "CPURLIsHiddenKey";
CPURLHasHiddenExtensionKey = "CPURLHasHiddenExtensionKey";
CPURLCreationDateKey = "CPURLCreationDateKey";
CPURLContentAccessDateKey = "CPURLContentAccessDateKey";
CPURLContentModificationDateKey = "CPURLContentModificationDateKey";
CPURLAttributeModificationDateKey = "CPURLAttributeModificationDateKey";
CPURLLinkCountKey = "CPURLLinkCountKey";
CPURLParentDirectoryURLKey = "CPURLParentDirectoryURLKey";
CPURLVolumeURLKey = "CPURLTypeIdentifierKey";
CPURLTypeIdentifierKey = "CPURLTypeIdentifierKey";
CPURLLocalizedTypeDescriptionKey = "CPURLLocalizedTypeDescriptionKey";
CPURLLabelNumberKey = "CPURLLabelNumberKey";
CPURLLabelColorKey = "CPURLLabelColorKey";
CPURLLocalizedLabelKey = "CPURLLocalizedLabelKey";
CPURLEffectiveIconKey = "CPURLEffectiveIconKey";
CPURLCustomIconKey = "CPURLCustomIconKey";

{var the_class = objj_allocateClassPair(CPObject, "CPURL"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPURL__init(self, _cmd)
{
    return nil;
}

,["id"]), new objj_method(sel_getUid("initWithScheme:host:path:"), function $CPURL__initWithScheme_host_path_(self, _cmd, aScheme, aHost, aPath)
{
    var URLString = (aScheme ? aScheme + ":" : "") + (aHost ? aHost + "//" : "") + (aPath || "");
    return (self.isa.method_msgSend["initWithString:"] || _objj_forward)(self, (self.isa.method_dtable["initWithString:"], "initWithString:"), URLString);
}

,["id","CPString","CPString","CPString"]), new objj_method(sel_getUid("initWithString:"), function $CPURL__initWithString_(self, _cmd, URLString)
{
    return (self.isa.method_msgSend["initWithString:relativeToURL:"] || _objj_forward)(self, (self.isa.method_dtable["initWithString:relativeToURL:"], self.isa.method_dtable["initWithString:relativeToURL:"], "initWithString:relativeToURL:"), URLString, nil);
}

,["id","CPString"]), new objj_method(sel_getUid("initWithString:relativeToURL:"), function $CPURL__initWithString_relativeToURL_(self, _cmd, URLString, aBaseURL)
{
    var result = new CFURL(URLString, aBaseURL);
    result.isa = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"));
    return result;
}

,["id","CPString","CPURL"]), new objj_method(sel_getUid("absoluteURL"), function $CPURL__absoluteURL(self, _cmd)
{
    return self.absoluteURL();
}

,["CPURL"]), new objj_method(sel_getUid("baseURL"), function $CPURL__baseURL(self, _cmd)
{
    return self.baseURL();
}

,["CPURL"]), new objj_method(sel_getUid("absoluteString"), function $CPURL__absoluteString(self, _cmd)
{
    return self.absoluteString();
}

,["CPString"]), new objj_method(sel_getUid("relativeString"), function $CPURL__relativeString(self, _cmd)
{
    return self.string();
}

,["CPString"]), new objj_method(sel_getUid("path"), function $CPURL__path(self, _cmd)
{
    return (self.isa.method_msgSend["absoluteURL"] || _objj_forward)(self, (self.isa.method_dtable["absoluteURL"], "absoluteURL")).path();
}

,["CPString"]), new objj_method(sel_getUid("pathComponents"), function $CPURL__pathComponents(self, _cmd)
{
    var components = self.pathComponents();
    return (components == null ? null : (components.isa.method_msgSend["copy"] || _objj_forward)(components, (components.isa.method_dtable["copy"], "copy")));
}

,["CPArray"]), new objj_method(sel_getUid("relativePath"), function $CPURL__relativePath(self, _cmd)
{
    return self.path();
}

,["CPString"]), new objj_method(sel_getUid("scheme"), function $CPURL__scheme(self, _cmd)
{
    return self.scheme();
}

,["CPString"]), new objj_method(sel_getUid("user"), function $CPURL__user(self, _cmd)
{
    return (self.isa.method_msgSend["absoluteURL"] || _objj_forward)(self, (self.isa.method_dtable["absoluteURL"], "absoluteURL")).user();
}

,["CPString"]), new objj_method(sel_getUid("password"), function $CPURL__password(self, _cmd)
{
    return (self.isa.method_msgSend["absoluteURL"] || _objj_forward)(self, (self.isa.method_dtable["absoluteURL"], "absoluteURL")).password();
}

,["CPString"]), new objj_method(sel_getUid("host"), function $CPURL__host(self, _cmd)
{
    return (self.isa.method_msgSend["absoluteURL"] || _objj_forward)(self, (self.isa.method_dtable["absoluteURL"], "absoluteURL")).domain();
}

,["CPString"]), new objj_method(sel_getUid("port"), function $CPURL__port(self, _cmd)
{
    var portNumber = (self.isa.method_msgSend["absoluteURL"] || _objj_forward)(self, (self.isa.method_dtable["absoluteURL"], "absoluteURL")).portNumber();
    if (portNumber === -1)
        return nil;
    return portNumber;
}

,["Number"]), new objj_method(sel_getUid("parameterString"), function $CPURL__parameterString(self, _cmd)
{
    return self.queryString();
}

,["CPString"]), new objj_method(sel_getUid("fragment"), function $CPURL__fragment(self, _cmd)
{
    return self.fragment();
}

,["CPString"]), new objj_method(sel_getUid("isEqual:"), function $CPURL__isEqual_(self, _cmd, anObject)
{
    if (self === anObject)
        return YES;
    if (!anObject || !(anObject == null ? null : (anObject.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPURL.isa.method_msgSend["class"] || _objj_forward)(CPURL, (CPURL.isa.method_dtable["class"], "class")))))
        return NO;
    return (self.isa.method_msgSend["isEqualToURL:"] || _objj_forward)(self, (self.isa.method_dtable["isEqualToURL:"], "isEqualToURL:"), anObject);
}

,["BOOL","id"]), new objj_method(sel_getUid("isEqualToURL:"), function $CPURL__isEqualToURL_(self, _cmd, aURL)
{
    if (self === aURL)
        return YES;
    return ((___r1 = (self.isa.method_msgSend["absoluteString"] || _objj_forward)(self, (self.isa.method_dtable["absoluteString"], "absoluteString"))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, "isEqual:", (aURL == null ? null : (aURL.isa.method_msgSend["absoluteString"] || _objj_forward)(aURL, (aURL.isa.method_dtable["absoluteString"], "absoluteString")))));
    var ___r1;
}

,["BOOL","id"]), new objj_method(sel_getUid("lastPathComponent"), function $CPURL__lastPathComponent(self, _cmd)
{
    return (self.isa.method_msgSend["absoluteURL"] || _objj_forward)(self, (self.isa.method_dtable["absoluteURL"], "absoluteURL")).lastPathComponent();
}

,["CPString"]), new objj_method(sel_getUid("pathExtension"), function $CPURL__pathExtension(self, _cmd)
{
    return self.pathExtension();
}

,["CPString"]), new objj_method(sel_getUid("URLByDeletingLastPathComponent"), function $CPURL__URLByDeletingLastPathComponent(self, _cmd)
{
    var result = self.createCopyDeletingLastPathComponent();
    result.isa = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"));
    return result;
}

,["CPURL"]), new objj_method(sel_getUid("standardizedURL"), function $CPURL__standardizedURL(self, _cmd)
{
    return self.standardizedURL();
}

,["CPURL"]), new objj_method(sel_getUid("isFileURL"), function $CPURL__isFileURL(self, _cmd)
{
    return (self.isa.method_msgSend["scheme"] || _objj_forward)(self, (self.isa.method_dtable["scheme"], "scheme")) === "file";
}

,["BOOL"]), new objj_method(sel_getUid("description"), function $CPURL__description(self, _cmd)
{
    return (self.isa.method_msgSend["absoluteString"] || _objj_forward)(self, (self.isa.method_dtable["absoluteString"], "absoluteString"));
}

,["CPString"]), new objj_method(sel_getUid("resourceValueForKey:"), function $CPURL__resourceValueForKey_(self, _cmd, aKey)
{
    return self.resourcePropertyForKey(aKey);
}

,["id","CPString"]), new objj_method(sel_getUid("setResourceValue:forKey:"), function $CPURL__setResourceValue_forKey_(self, _cmd, anObject, aKey)
{
    return self.setResourcePropertyForKey(aKey, anObject);
}

,["id","id","CPString"]), new objj_method(sel_getUid("staticResourceData"), function $CPURL__staticResourceData(self, _cmd)
{
    return self.staticResourceData();
}

,["CPData"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPURL__alloc(self, _cmd)
{
    var result = new CFURL();
    result.isa = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"));
    return result;
}

,["id"]), new objj_method(sel_getUid("URLWithString:"), function $CPURL__URLWithString_(self, _cmd, URLString)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithString:"] || _objj_forward)(___r1, "initWithString:", URLString));
    var ___r1;
}

,["id","CPString"]), new objj_method(sel_getUid("URLWithString:relativeToURL:"), function $CPURL__URLWithString_relativeToURL_(self, _cmd, URLString, aBaseURL)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithString:relativeToURL:"] || _objj_forward)(___r1, "initWithString:relativeToURL:", URLString, aBaseURL));
    var ___r1;
}

,["id","CPString","CPURL"])]);
}
var CPURLURLStringKey = "CPURLURLStringKey",
    CPURLBaseURLKey = "CPURLBaseURLKey";
{
var the_class = objj_getClass("CPURL")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPURL\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPURL__initWithCoder_(self, _cmd, aCoder)
{
    return (self.isa.method_msgSend["initWithString:relativeToURL:"] || _objj_forward)(self, (self.isa.method_dtable["initWithString:relativeToURL:"], self.isa.method_dtable["initWithString:relativeToURL:"], "initWithString:relativeToURL:"), (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPURLURLStringKey)), (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPURLBaseURLKey)));
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPURL__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._baseURL, CPURLBaseURLKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._string, CPURLURLStringKey));
}

,["void","CPCoder"])]);
}
CFURL.prototype.isa = (CPURL.isa.method_msgSend["class"] || _objj_forward)(CPURL, (CPURL.isa.method_dtable["class"], "class"));
p;13;_CGGeometry.jt;40000;@STATIC;1.0;S;30380;;9593;

{var the_typedef = objj_allocateTypeDef("CGPoint");
objj_registerTypeDef(the_typedef);
}{var the_typedef = objj_allocateTypeDef("CGSize");
objj_registerTypeDef(the_typedef);
}{var the_typedef = objj_allocateTypeDef("CGRect");
objj_registerTypeDef(the_typedef);
}{var the_typedef = objj_allocateTypeDef("CGInset");
objj_registerTypeDef(the_typedef);
}CGPointMake = function(x, y)
{
    return {x: x, y: y};
}
CGPointMakeZero = function()
{
    return {x: 0, y: 0};
}
CGPointMakeCopy = function(aPoint)
{
    return {x: aPoint.x, y: aPoint.y};
}
CGPointCreateCopy = CGPointMakeCopy;
CGPointEqualToPoint = function(lhsPoint, rhsPoint)
{
    return lhsPoint.x == rhsPoint.x && lhsPoint.y == rhsPoint.y;
}
CGStringFromPoint = function(aPoint)
{
    return "{" + aPoint.x + ", " + aPoint.y + "}";
}
CGSizeMake = function(width, height)
{
    return {width: width, height: height};
}
CGSizeMakeZero = function()
{
    return {width: 0, height: 0};
}
CGSizeMakeCopy = function(aSize)
{
    return {width: aSize.width, height: aSize.height};
}
CGSizeCreateCopy = CGSizeMakeCopy;
CGSizeEqualToSize = function(lhsSize, rhsSize)
{
    return lhsSize.width == rhsSize.width && lhsSize.height == rhsSize.height;
}
CGStringFromSize = function(aSize)
{
    return "{" + aSize.width + ", " + aSize.height + "}";
}
CGRectMake = function(x, y, width, height)
{
    return {origin: {x: x, y: y}, size: {width: width, height: height}};
}
CGRectMakeZero = function()
{
    return {origin: {x: 0, y: 0}, size: {width: 0, height: 0}};
}
CGRectMakeCopy = function(aRect)
{
    return {origin: {x: aRect.origin.x, y: aRect.origin.y}, size: {width: aRect.size.width, height: aRect.size.height}};
}
CGRectCreateCopy = CGRectMakeCopy;
CGRectEqualToRect = function(lhsRect, rhsRect)
{
    return lhsRect.origin.x == rhsRect.origin.x && lhsRect.origin.y == rhsRect.origin.y && lhsRect.size.width == rhsRect.size.width && lhsRect.size.height == rhsRect.size.height;
}
CGStringFromRect = function(aRect)
{
    return "{" + CGStringFromPoint(aRect.origin) + ", " + CGStringFromSize(aRect.size) + "}";
}
CGRectOffset = function(aRect, dX, dY)
{
    return {origin: {x: aRect.origin.x + dX, y: aRect.origin.y + dY}, size: {width: aRect.size.width, height: aRect.size.height}};
}
CGRectInset = function(aRect, dX, dY)
{
    return {origin: {x: aRect.origin.x + dX, y: aRect.origin.y + dY}, size: {width: aRect.size.width - 2 * dX, height: aRect.size.height - 2 * dY}};
}
CGRectGetHeight = function(aRect)
{
    return aRect.size.height;
}
CGRectGetMaxX = function(aRect)
{
    return aRect.origin.x + aRect.size.width;
}
CGRectGetMaxY = function(aRect)
{
    return aRect.origin.y + aRect.size.height;
}
CGRectGetMidX = function(aRect)
{
    return aRect.origin.x + aRect.size.width / 2.0;
}
CGRectGetMidY = function(aRect)
{
    return aRect.origin.y + aRect.size.height / 2.0;
}
CGRectGetMinX = function(aRect)
{
    return aRect.origin.x;
}
CGRectGetMinY = function(aRect)
{
    return aRect.origin.y;
}
CGRectGetWidth = function(aRect)
{
    return aRect.size.width;
}
CGRectIsEmpty = function(aRect)
{
    return aRect.size.width <= 0.0 || aRect.size.height <= 0.0 || aRect.origin.x === Infinity || aRect.origin.y === Infinity;
}
CGRectIsNull = function(aRect)
{
    return aRect.origin.x === Infinity || aRect.origin.y === Infinity;
}
CGRectContainsPoint = function(aRect, aPoint)
{
    return aPoint.x >= aRect.origin.x && aPoint.y >= aRect.origin.y && aPoint.x < CGRectGetMaxX(aRect) && aPoint.y < CGRectGetMaxY(aRect);
}
CGInsetMake = function(top, right, bottom, left)
{
    return {top: top, right: right, bottom: bottom, left: left};
}
CGInsetMakeZero = function()
{
    return {top: 0, right: 0, bottom: 0, left: 0};
}
CGInsetMakeCopy = function(anInset)
{
    return {top: anInset.top, right: anInset.right, bottom: anInset.bottom, left: anInset.left};
}
CGInsetMakeInvertedCopy = function(anInset)
{
    return {top: -anInset.top, right: -anInset.right, bottom: -anInset.bottom, left: -anInset.left};
}
CGInsetIsEmpty = function(anInset)
{
    return anInset.top === 0 && anInset.right === 0 && anInset.bottom === 0 && anInset.left === 0;
}
CGInsetEqualToInset = function(lhsInset, rhsInset)
{
    return lhsInset.top === rhsInset.top && lhsInset.right === rhsInset.right && lhsInset.bottom === rhsInset.bottom && lhsInset.left === rhsInset.left;
}
CGMinXEdge = 0;
CGMinYEdge = 1;
CGMaxXEdge = 2;
CGMaxYEdge = 3;
CGRectNull = CGRectMake(Infinity, Infinity, 0.0, 0.0);
CGRectDivide = function(inRect, slice, rem, amount, edge)
{
    slice.origin = CGPointMakeCopy(inRect.origin);
    slice.size = CGSizeMakeCopy(inRect.size);
    rem.origin = CGPointMakeCopy(inRect.origin);
    rem.size = CGSizeMakeCopy(inRect.size);
    switch(edge) {
        case CGMinXEdge:
            slice.size.width = amount;
            rem.origin.x += amount;
            rem.size.width -= amount;
            break;
        case CGMaxXEdge:
            slice.origin.x = CGRectGetMaxX(slice) - amount;
            slice.size.width = amount;
            rem.size.width -= amount;
            break;
        case CGMinYEdge:
            slice.size.height = amount;
            rem.origin.y += amount;
            rem.size.height -= amount;
            break;
        case CGMaxYEdge:
            slice.origin.y = CGRectGetMaxY(slice) - amount;
            slice.size.height = amount;
            rem.size.height -= amount;
    }
}
CGRectContainsRect = function(lhsRect, rhsRect)
{
    var union = CGRectUnion(lhsRect, rhsRect);
    return CGRectEqualToRect(union, lhsRect);
}
CGRectIntersectsRect = function(lhsRect, rhsRect)
{
    var intersection = CGRectIntersection(lhsRect, rhsRect);
    return !CGRectIsEmpty(intersection);
}
CGRectIntegral = function(aRect)
{
    aRect = CGRectStandardize(aRect);
    var x = FLOOR(CGRectGetMinX(aRect)),
        y = FLOOR(CGRectGetMinY(aRect));
    aRect.size.width = CEIL(CGRectGetMaxX(aRect)) - x;
    aRect.size.height = CEIL(CGRectGetMaxY(aRect)) - y;
    aRect.origin.x = x;
    aRect.origin.y = y;
    return aRect;
}
CGRectIntersection = function(lhsRect, rhsRect)
{
    var intersection = CGRectMake(MAX(CGRectGetMinX(lhsRect), CGRectGetMinX(rhsRect)), MAX(CGRectGetMinY(lhsRect), CGRectGetMinY(rhsRect)), 0, 0);
    intersection.size.width = MIN(CGRectGetMaxX(lhsRect), CGRectGetMaxX(rhsRect)) - CGRectGetMinX(intersection);
    intersection.size.height = MIN(CGRectGetMaxY(lhsRect), CGRectGetMaxY(rhsRect)) - CGRectGetMinY(intersection);
    return CGRectIsEmpty(intersection) ? CGRectMakeZero() : intersection;
}
CGRectStandardize = function(aRect)
{
    var width = CGRectGetWidth(aRect),
        height = CGRectGetHeight(aRect),
        standardized = CGRectMakeCopy(aRect);
    if (width < 0.0)
    {
        standardized.origin.x += width;
        standardized.size.width = -width;
    }
    if (height < 0.0)
    {
        standardized.origin.y += height;
        standardized.size.height = -height;
    }
    return standardized;
}
CGRectUnion = function(lhsRect, rhsRect)
{
    var lhsRectIsNull = !lhsRect || lhsRect === CGRectNull,
        rhsRectIsNull = !rhsRect || rhsRect === CGRectNull;
    if (lhsRectIsNull)
        return rhsRectIsNull ? CGRectNull : rhsRect;
    if (rhsRectIsNull)
        return lhsRectIsNull ? CGRectNull : lhsRect;
    var minX = MIN(CGRectGetMinX(lhsRect), CGRectGetMinX(rhsRect)),
        minY = MIN(CGRectGetMinY(lhsRect), CGRectGetMinY(rhsRect)),
        maxX = MAX(CGRectGetMaxX(lhsRect), CGRectGetMaxX(rhsRect)),
        maxY = MAX(CGRectGetMaxY(lhsRect), CGRectGetMaxY(rhsRect));
    return CGRectMake(minX, minY, maxX - minX, maxY - minY);
}
CGRectInsetByInset = function(aRect, anInset)
{
    return CGRectMake(aRect.origin.x + anInset.left, aRect.origin.y + anInset.top, aRect.size.width - anInset.left - anInset.right, aRect.size.height - anInset.top - anInset.bottom);
}
CGPointFromString = function(aString)
{
    var comma = aString.indexOf(',');
    return {x: parseFloat(aString.substr(1, comma - 1)), y: parseFloat(aString.substring(comma + 1, aString.length))};
}
CGSizeFromString = function(aString)
{
    var comma = aString.indexOf(',');
    return {width: parseFloat(aString.substr(1, comma - 1)), height: parseFloat(aString.substring(comma + 1, aString.length))};
}
CGRectFromString = function(aString)
{
    var comma = aString.indexOf(',', aString.indexOf(',') + 1);
    return {origin: CGPointFromString(aString.substr(1, comma - 1)), size: CGSizeFromString(aString.substring(comma + 2, aString.length - 1))};
}
CGPointFromEvent = function(anEvent)
{
    return CGPointMake(anEvent.clientX, anEvent.clientY);
}
CGInsetUnion = function(lhsInset, rhsInset)
{
    return CGInsetMake(lhsInset.top + rhsInset.top, lhsInset.right + rhsInset.right, lhsInset.bottom + rhsInset.bottom, lhsInset.left + rhsInset.left);
}
CGInsetDifference = function(lhsInset, rhsInset)
{
    return CGInsetMake(lhsInset.top - rhsInset.top, lhsInset.right - rhsInset.right, lhsInset.bottom - rhsInset.bottom, lhsInset.left - rhsInset.left);
}
CGInsetFromString = function(aString)
{
    var numbers = (aString.substr(1, aString.length - 2)).split(',');
    return CGInsetMake(parseFloat(numbers[0]), parseFloat(numbers[1]), parseFloat(numbers[2]), parseFloat(numbers[3]));
}
CGInsetFromCPString = CGInsetFromString;
CPStringFromCGInset = function(anInset)
{
    return "{" + anInset.top + ", " + anInset.left + ", " + anInset.bottom + ", " + anInset.right + "}";
}
CGAlignStroke = function(coord, strokeWidth)
{
    return FLOOR(coord) === coord ? coord + strokeWidth / 2 : coord;
}
CGAlignCoordinate = function(coord)
{
    return FLOOR(coord);
}
p;7;CPLog.jt;515;@STATIC;1.0;S;488;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQTG9nLmoiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSIsImZpbGUiOiJDUExvZy5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi9Vc2Vycy9kYXZpZC9wcm9ncmFtcy9jYXBwdWNjaW5vL0ZvdW5kYXRpb24vIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcGxhY2Vob2xkZXIuIG1vdmVkIHRvIE9iamVjdGl2ZS1KL0NQTG9nLmpzXG4xOyAgLy8gRHVtbXkgcm93ISBUbyBmb29sIHdoZW4gcmVhZGluZyBmcm9tIGdjYyB3aG8gcmVtb3ZlcyBhbGwgY29tbWVudHMgYW5kIHdoaXRlc3BhY2VzIGFuZCBtYWtlcyB0aGlzIGZpbGUgZW1wdHkuIEVtcHR5IGZpbGUgPT0gbm8gZmlsZSAtPiBFcnJvclxuIl19t;5;

1;
p;12;CPTimeZone.jt;75052;@STATIC;1.0;i;10;CPObject.ji;10;CPString.ji;8;CPDate.ji;10;CPLocale.jS;47308;;27659;

objj_executeFile("CPObject.j", YES);objj_executeFile("CPString.j", YES);objj_executeFile("CPDate.j", YES);objj_executeFile("CPLocale.j", YES);CPTimeZoneNameStyleStandard = 0;
CPTimeZoneNameStyleShortStandard = 1;
CPTimeZoneNameStyleDaylightSaving = 2;
CPTimeZoneNameStyleShortDaylightSaving = 3;
CPTimeZoneNameStyleGeneric = 4;
CPTimeZoneNameStyleShortGeneric = 5;
CPSystemTimeZoneDidChangeNotification = "CPSystemTimeZoneDidChangeNotification";
var abbreviationDictionary,
    timeDifferenceFromUTC,
    knownTimeZoneNames,
    defaultTimeZone,
    localTimeZone,
    systemTimeZone,
    timeZoneDataVersion,
    localizedName;

{var the_class = objj_allocateClassPair(CPObject, "CPTimeZone"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_data", "CPData"), new objj_ivar("_secondsFromGMT", "CPInteger"), new objj_ivar("_abbreviation", "CPString"), new objj_ivar("_name", "CPString")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("data"), function $CPTimeZone__data(self, _cmd)
{
    return self._data;
}

,["CPData"]), new objj_method(sel_getUid("secondFromGMT"), function $CPTimeZone__secondFromGMT(self, _cmd)
{
    return self._secondsFromGMT;
}

,["CPInteger"]), new objj_method(sel_getUid("abbreviation"), function $CPTimeZone__abbreviation(self, _cmd)
{
    return self._abbreviation;
}

,["CPString"]), new objj_method(sel_getUid("name"), function $CPTimeZone__name(self, _cmd)
{
    return self._name;
}

,["CPString"]), new objj_method(sel_getUid("_initWithName:abbreviation:"), function $CPTimeZone___initWithName_abbreviation_(self, _cmd, tzName, abbreviation)
{
    if (!tzName)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "Invalid value provided for tzName");
    if (!(knownTimeZoneNames == null ? null : (knownTimeZoneNames.isa.method_msgSend["containsObject:"] || _objj_forward)(knownTimeZoneNames, (knownTimeZoneNames.isa.method_dtable["containsObject:"], "containsObject:"), tzName)) || !abbreviation)
        return nil;
    if (self = (objj_getClass("CPTimeZone").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        self._name = tzName;
        self._abbreviation = abbreviation;
    }
    return self;
}

,["id","CPString","CPString"]), new objj_method(sel_getUid("initWithName:"), function $CPTimeZone__initWithName_(self, _cmd, tzName)
{
    if (!tzName)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "Invalid value provided for tzName");
    if (!(knownTimeZoneNames == null ? null : (knownTimeZoneNames.isa.method_msgSend["containsObject:"] || _objj_forward)(knownTimeZoneNames, (knownTimeZoneNames.isa.method_dtable["containsObject:"], "containsObject:"), tzName)))
        return nil;
    if (self = (objj_getClass("CPTimeZone").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        self._name = tzName;
        var keys = (abbreviationDictionary == null ? null : (abbreviationDictionary.isa.method_msgSend["keyEnumerator"] || _objj_forward)(abbreviationDictionary, (abbreviationDictionary.isa.method_dtable["keyEnumerator"], "keyEnumerator"))),
            key;
        while (key = (keys == null ? null : (keys.isa.method_msgSend["nextObject"] || _objj_forward)(keys, (keys.isa.method_dtable["nextObject"], "nextObject"))))
        {
            var value = (abbreviationDictionary == null ? null : (abbreviationDictionary.isa.method_msgSend["valueForKey:"] || _objj_forward)(abbreviationDictionary, (abbreviationDictionary.isa.method_dtable["valueForKey:"], "valueForKey:"), key));
            if ((value == null ? null : (value.isa.method_msgSend["isEqualToString:"] || _objj_forward)(value, (value.isa.method_dtable["isEqualToString:"], "isEqualToString:"), self._name)))
            {
                self._abbreviation = key;
                break;
            }
        }
    }
    return self;
}

,["id","CPString"]), new objj_method(sel_getUid("initWithName:data:"), function $CPTimeZone__initWithName_data_(self, _cmd, tzName, data)
{
    if (self = (self == null ? null : (self.isa.method_msgSend["initWithName:"] || _objj_forward)(self, (self.isa.method_dtable["initWithName:"], "initWithName:"), tzName)))
    {
        self._data = data;
    }
    return self;
}

,["id","CPString","CPData"]), new objj_method(sel_getUid("abbreviationForDate:"), function $CPTimeZone__abbreviationForDate_(self, _cmd, date)
{
    if (!date)
        return nil;
    return ((String(((String(date)).split("("))[1])).split(")"))[0];
}

,["CPString","CPDate"]), new objj_method(sel_getUid("secondsFromGMTForDate:"), function $CPTimeZone__secondsFromGMTForDate_(self, _cmd, date)
{
    if (!date)
        return nil;
    var abbreviation = ((String(((String(date)).split("("))[1])).split(")"))[0];
    return (timeDifferenceFromUTC == null ? null : (timeDifferenceFromUTC.isa.method_msgSend["valueForKey:"] || _objj_forward)(timeDifferenceFromUTC, (timeDifferenceFromUTC.isa.method_dtable["valueForKey:"], "valueForKey:"), abbreviation)) * 60;
}

,["CPInteger","CPDate"]), new objj_method(sel_getUid("secondsFromGMT"), function $CPTimeZone__secondsFromGMT(self, _cmd)
{
    return (timeDifferenceFromUTC == null ? null : (timeDifferenceFromUTC.isa.method_msgSend["valueForKey:"] || _objj_forward)(timeDifferenceFromUTC, (timeDifferenceFromUTC.isa.method_dtable["valueForKey:"], "valueForKey:"), self._abbreviation)) * 60;
}

,["CPInteger"]), new objj_method(sel_getUid("isEqualToTimeZone:"), function $CPTimeZone__isEqualToTimeZone_(self, _cmd, aTimeZone)
{
    return ((___r1 = (aTimeZone == null ? null : (aTimeZone.isa.method_msgSend["name"] || _objj_forward)(aTimeZone, (aTimeZone.isa.method_dtable["name"], "name")))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqualToString:"] || _objj_forward)(___r1, "isEqualToString:", self._name)) && (aTimeZone == null ? null : (aTimeZone.isa.method_msgSend["data"] || _objj_forward)(aTimeZone, (aTimeZone.isa.method_dtable["data"], "data"))) == self._data;
    var ___r1;
}

,["BOOL","CPTimeZone"]), new objj_method(sel_getUid("description"), function $CPTimeZone__description(self, _cmd)
{
    return (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%s (%s) offset %i", self._name, self._abbreviation, (self.isa.method_msgSend["secondsFromGMT"] || _objj_forward)(self, (self.isa.method_dtable["secondsFromGMT"], "secondsFromGMT")));
}

,["CPString"]), new objj_method(sel_getUid("localizedName:locale:"), function $CPTimeZone__localizedName_locale_(self, _cmd, style, locale)
{
    if (style > 5)
        return nil;
    return ((___r1 = ((___r2 = (localizedName == null ? null : (localizedName.isa.method_msgSend["valueForKey:"] || _objj_forward)(localizedName, (localizedName.isa.method_dtable["valueForKey:"], "valueForKey:"), (locale == null ? null : (locale.isa.method_msgSend["objectForKey:"] || _objj_forward)(locale, (locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode))))), ___r2 == null ? null : (___r2.isa.method_msgSend["valueForKey:"] || _objj_forward)(___r2, "valueForKey:", self._abbreviation))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", style));
    var ___r1, ___r2;
}

,["CPString","NSTimeZoneNameStyle","CPLocale"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("initialize"), function $CPTimeZone__initialize(self, _cmd)
{
    if (self !== (CPTimeZone.isa.method_msgSend["class"] || _objj_forward)(CPTimeZone, (CPTimeZone.isa.method_dtable["class"], "class")))
        return;
    knownTimeZoneNames = ["America/Halifax", "America/Juneau", "America/Juneau", "America/Argentina/Buenos_Aires", "America/Halifax", "Asia/Dhaka", "America/Sao_Paulo", "America/Sao_Paulo", "Europe/London", "Africa/Harare", "America/Chicago", "Europe/Paris", "Europe/Paris", "America/Santiago", "America/Santiago", "America/Bogota", "America/Chicago", "Africa/Addis_Ababa", "America/New_York", "Europe/Istanbul", "Europe/Istanbul", "America/New_York", "GMT", "Asia/Dubai", "Asia/Hong_Kong", "Pacific/Honolulu", "Asia/Bangkok", "Asia/Tehran", "Asia/Calcutta", "Asia/Tokyo", "Asia/Seoul", "America/Denver", "Europe/Moscow", "Europe/Moscow", "America/Denver", "Pacific/Auckland", "Pacific/Auckland", "America/Los_Angeles", "America/Lima", "Asia/Manila", "Asia/Karachi", "America/Los_Angeles", "Asia/Singapore", "UTC", "Africa/Lagos", "Europe/Lisbon", "Europe/Lisbon", "Asia/Jakarta"];
    abbreviationDictionary = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", ["America/Halifax", "America/Juneau", "America/Juneau", "America/Argentina/Buenos_Aires", "America/Halifax", "Asia/Dhaka", "America/Sao_Paulo", "America/Sao_Paulo", "Europe/London", "Africa/Harare", "America/Chicago", "Europe/Paris", "Europe/Paris", "America/Santiago", "America/Santiago", "America/Bogota", "America/Chicago", "Africa/Addis_Ababa", "America/New_York", "Europe/Istanbul", "Europe/Istanbul", "America/New_York", "GMT", "Asia/Dubai", "Asia/Hong_Kong", "Pacific/Honolulu", "Asia/Bangkok", "Asia/Tehran", "Asia/Calcutta", "Asia/Tokyo", "Asia/Seoul", "America/Denver", "Europe/Moscow", "Europe/Moscow", "America/Denver", "Pacific/Auckland", "Pacific/Auckland", "America/Los_Angeles", "America/Lima", "Asia/Manila", "Asia/Karachi", "America/Los_Angeles", "Asia/Singapore", "UTC", "Africa/Lagos", "Europe/Lisbon", "Europe/Lisbon", "Asia/Jakarta"], ["ADT", "AKDT", "AKST", "ART", "AST", "BDT", "BRST", "BRT", "BST", "CAT", "CDT", "CEST", "CET", "CLST", "CLT", "COT", "CST", "EAT", "EDT", "EEST", "EET", "EST", "GMT", "GST", "HKT", "HST", "ICT", "IRST", "IST", "JST", "KST", "MDT", "MSD", "MSK", "MST", "NZDT", "NZST", "PDT", "PET", "PHT", "PKT", "PST", "SGT", "UTC", "WAT", "WEST", "WET", "WIT"]));
    timeDifferenceFromUTC = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", [-180, -480, -540, -180, -240, 360, -120, -180, 60, 120, -300, 120, 60, -180, -240, -300, -360, 180, -240, 180, 120, -300, 0, 240, 480, -600, 420, 210, 330, 540, 540, -300, 240, 240, -420, 900, 900, -420, -300, 480, 300, -480, 480, 0, -540, 60, 0, 540], ["ADT", "AKDT", "AKST", "ART", "AST", "BDT", "BRST", "BRT", "BST", "CAT", "CDT", "CEST", "CET", "CLST", "CLT", "COT", "CST", "EAT", "EDT", "EEST", "EET", "EST", "GMT", "GST", "HKT", "HST", "ICT", "IRST", "IST", "JST", "KST", "MDT", "MSD", "MSK", "MST", "NZDT", "NZST", "PDT", "PET", "PHT", "PKT", "PST", "SGT", "UTC", "WAT", "WEST", "WET", "WIT"]));
    var englishLocalizedName = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", [["Eastern Standard Time", "EST", "Eastern Daylight Time", "EDT", "Eastern Time", "ET"], ["GMT", "GMT", "GMT", "GMT", "GMT", "GMT"], ["Atlantic Standard Time", "AST", "Atlantic Daylight Time", "ADT", "Atlantic Time", "AT"], ["Iran Standard Time", "GMT+03:30", "Iran Daylight Time", "GMT+03:30", "Iran Time", "Iran Time"], ["Indochina Time", "GMT+07:00", "GMT+07:00", "GMT+07:00", "Indochina Time", "Thailand Time"], ["Peru Standard Time", "GMT-05:00", "Peru Summer Time", "GMT-05:00", "Peru Standard Time", "Peru Time"], ["Korean Standard Time", "GMT+09:00", "Korean Daylight Time", "GMT+09:00", "Korean Standard Time", "South Korea Time"], ["Pacific Standard Time", "PST", "Pacific Daylight Time", "PDT", "Pacific Time", "PT"], ["Central Standard Time", "CST", "Central Daylight Time", "CDT", "Central Time", "CT"], ["Eastern European Standard Time", "GMT+02:00", "Eastern European Summer Time", "GMT+03:00", "Eastern European Time", "Turkey Time"], ["New Zealand Standard Time", "GMT+12:00", "New Zealand Daylight Time", "GMT+13:00", "New Zealand Time", "New Zealand Time (Auckland)"], ["Western European Standard Time", "GMT", "Western European Summer Time", "GMT+01:00", "Western European Time", "Portugal Time (Lisbon)"], ["East Africa Time", "GMT+03:00", "GMT+03:00", "GMT+03:00", "East Africa Time", "Ethiopia Time"], ["Hong Kong Standard Time", "GMT+08:00", "Hong Kong Summer Time", "GMT+08:00", "Hong Kong Standard Time", "Hong Kong SAR China Time"], ["India Standard Time", "GMT+05:30", "GMT+05:30", "GMT+05:30", "India Standard Time", "India Time"], ["Mountain Standard Time", "MST", "Mountain Daylight Time", "MDT", "Mountain Time", "MT"], ["New Zealand Standard Time", "GMT+12:00", "New Zealand Daylight Time", "GMT+13:00", "New Zealand Time", "New Zealand Time (Auckland)"], ["Western Indonesia Time", "GMT+07:00", "GMT+07:00", "GMT+07:00", "Western Indonesia Time", "Indonesia Time (Jakarta)"], ["Atlantic Standard Time", "AST", "Atlantic Daylight Time", "ADT", "Atlantic Time", "AT"], ["Greenwich Mean Time", "GMT", "British Summer Time", "GMT+01:00", "United Kingdom Time", "United Kingdom Time"], ["Argentina Standard Time", "GMT-03:00", "Argentina Summer Time", "GMT-03:00", "Argentina Standard Time", "Argentina Time (Buenos Aires)"], ["Central Africa Time", "GMT+02:00", "GMT+02:00", "GMT+02:00", "Central Africa Time", "Zimbabwe Time"], ["Gulf Standard Time", "GMT+04:00", "GMT+04:00", "GMT+04:00", "Gulf Standard Time", "United Arab Emirates Time"], ["Pacific Standard Time", "PST", "Pacific Daylight Time", "PDT", "Pacific Time", "PT"], ["Singapore Standard Time", "GMT+08:00", "GMT+08:00", "GMT+08:00", "Singapore Standard Time", "Singapore Time"], ["Colombia Standard Time", "GMT-05:00", "Colombia Summer Time", "GMT-05:00", "Colombia Standard Time", "Colombia Time"], ["Pakistan Standard Time", "GMT+05:00", "Pakistan Summer Time", "GMT+05:00", "Pakistan Standard Time", "Pakistan Time"], ["Eastern European Standard Time", "GMT+02:00", "Eastern European Summer Time", "GMT+03:00", "Eastern European Time", "Turkey Time"], ["GMT", "GMT", "GMT", "GMT", "GMT", "GMT"], ["West Africa Standard Time", "GMT+01:00", "West Africa Summer Time", "GMT+01:00", "West Africa Standard Time", "Nigeria Time"], ["Eastern Standard Time", "EST", "Eastern Daylight Time", "EDT", "Eastern Time", "ET"], ["Japan Standard Time", "GMT+09:00", "Japan Daylight Time", "GMT+09:00", "Japan Standard Time", "Japan Time"], ["Chile Standard Time", "GMT-04:00", "Chile Summer Time", "GMT-04:00", "Chile Time", "Chile Time (Santiago)"], ["Central European Standard Time", "GMT+01:00", "Central European Summer Time", "GMT+02:00", "Central European Time", "France Time"], ["Bangladesh Standard Time", "GMT+06:00", "Bangladesh Summer Time", "GMT+06:00", "Bangladesh Standard Time", "Bangladesh Time"], ["Moscow Standard Time", "GMT+04:00", "Moscow Summer Time", "GMT+04:00", "Moscow Standard Time", "Russia Time (Moscow)"], ["Alaska Standard Time", "AKST", "Alaska Daylight Time", "AKDT", "Alaska Time", "AKT"], ["Chile Standard Time", "GMT-04:00", "Chile Summer Time", "GMT-04:00", "Chile Time", "Chile Time (Santiago)"], ["Alaska Standard Time", "AKST", "Alaska Daylight Time", "AKDT", "Alaska Time", "AKT"], ["Brasilia Standard Time", "GMT-03:00", "Brasilia Summer Time", "GMT-03:00", "Brasilia Time", "Brazil Time (Sao Paulo)"], ["Brasilia Standard Time", "GMT-03:00", "Brasilia Summer Time", "GMT-03:00", "Brasilia Time", "Brazil Time (Sao Paulo)"], ["Central European Standard Time", "GMT+01:00", "Central European Summer Time", "GMT+02:00", "Central European Time", "France Time"], ["Central Standard Time", "CST", "Central Daylight Time", "CDT", "Central Time", "CT"], ["Hawaii-Aleutian Standard Time", "HST", "Hawaii-Aleutian Daylight Time", "HDT", "Hawaii-Aleutian Standard Time", "HST"], ["Moscow Standard Time", "GMT+04:00", "Moscow Summer Time", "GMT+04:00", "Moscow Standard Time", "Russia Time (Moscow)"], ["Mountain Standard Time", "MST", "Mountain Daylight Time", "MDT", "Mountain Time", "MT"], ["Philippine Standard Time", "GMT+08:00", "Philippine Summer Time", "GMT+08:00", "Philippine Standard Time", "Philippines Time"], ["Western European Standard Time", "GMT", "Western European Summer Time", "GMT+01:00", "Western European Time", "Portugal Time (Lisbon)"]], ["EDT", "GMT", "AST", "IRST", "ICT", "PET", "KST", "PST", "CDT", "EEST", "NZDT", "WEST", "EAT", "HKT", "IST", "MDT", "NZST", "WIT", "ADT", "BST", "ART", "CAT", "GST", "PDT", "SGT", "COT", "PKT", "EET", "UTC", "WAT", "EST", "JST", "CLST", "CET", "BDT", "MSK", "AKDT", "CLT", "AKST", "BRST", "BRT", "CEST", "CST", "HST", "MSD", "MST", "PHT", "WET"]));
    var date = (CPDate.isa.method_msgSend["date"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["date"], "date")),
        abbreviation = ((String(((String(date)).split("("))[1])).split(")"))[0];
    localTimeZone = (self.isa.method_msgSend["timeZoneWithAbbreviation:"] || _objj_forward)(self, (self.isa.method_dtable["timeZoneWithAbbreviation:"], "timeZoneWithAbbreviation:"), abbreviation);
    systemTimeZone = (self.isa.method_msgSend["timeZoneWithAbbreviation:"] || _objj_forward)(self, (self.isa.method_dtable["timeZoneWithAbbreviation:"], "timeZoneWithAbbreviation:"), abbreviation);
    defaultTimeZone = (self.isa.method_msgSend["timeZoneWithAbbreviation:"] || _objj_forward)(self, (self.isa.method_dtable["timeZoneWithAbbreviation:"], "timeZoneWithAbbreviation:"), abbreviation);
    localizedName = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", [englishLocalizedName, (___r2 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r2 == null ? null : (___r2.isa.method_msgSend["init"] || _objj_forward)(___r2, "init")), (___r2 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r2 == null ? null : (___r2.isa.method_msgSend["init"] || _objj_forward)(___r2, "init")), (___r2 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r2 == null ? null : (___r2.isa.method_msgSend["init"] || _objj_forward)(___r2, "init"))], ["en", "fr", "de", "es"]));
    timeZoneDataVersion = nil;
    var ___r1, ___r2;
}

,["void"]), new objj_method(sel_getUid("timeZoneWithAbbreviation:"), function $CPTimeZone__timeZoneWithAbbreviation_(self, _cmd, abbreviation)
{
    if (!(abbreviationDictionary == null ? null : (abbreviationDictionary.isa.method_msgSend["containsKey:"] || _objj_forward)(abbreviationDictionary, (abbreviationDictionary.isa.method_dtable["containsKey:"], "containsKey:"), abbreviation)))
        return nil;
    return ((___r1 = (CPTimeZone.isa.method_msgSend["alloc"] || _objj_forward)(CPTimeZone, (CPTimeZone.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["_initWithName:abbreviation:"] || _objj_forward)(___r1, "_initWithName:abbreviation:", (abbreviationDictionary == null ? null : (abbreviationDictionary.isa.method_msgSend["valueForKey:"] || _objj_forward)(abbreviationDictionary, (abbreviationDictionary.isa.method_dtable["valueForKey:"], "valueForKey:"), abbreviation)), abbreviation));
    var ___r1;
}

,["id","CPString"]), new objj_method(sel_getUid("timeZoneWithName:"), function $CPTimeZone__timeZoneWithName_(self, _cmd, tzName)
{
    return ((___r1 = (CPTimeZone.isa.method_msgSend["alloc"] || _objj_forward)(CPTimeZone, (CPTimeZone.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithName:"] || _objj_forward)(___r1, "initWithName:", tzName));
    var ___r1;
}

,["id","CPString"]), new objj_method(sel_getUid("timeZoneWithName:data:"), function $CPTimeZone__timeZoneWithName_data_(self, _cmd, tzName, data)
{
    return ((___r1 = (CPTimeZone.isa.method_msgSend["alloc"] || _objj_forward)(CPTimeZone, (CPTimeZone.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithName:data:"] || _objj_forward)(___r1, "initWithName:data:", tzName, data));
    var ___r1;
}

,["id","CPString","CPData"]), new objj_method(sel_getUid("timeZoneForSecondsFromGMT:"), function $CPTimeZone__timeZoneForSecondsFromGMT_(self, _cmd, seconds)
{
    var minutes = seconds / 60,
        keys = (timeDifferenceFromUTC == null ? null : (timeDifferenceFromUTC.isa.method_msgSend["keyEnumerator"] || _objj_forward)(timeDifferenceFromUTC, (timeDifferenceFromUTC.isa.method_dtable["keyEnumerator"], "keyEnumerator"))),
        key,
        abbreviation = nil;
    while (key = (keys == null ? null : (keys.isa.method_msgSend["nextObject"] || _objj_forward)(keys, (keys.isa.method_dtable["nextObject"], "nextObject"))))
    {
        var value = (timeDifferenceFromUTC == null ? null : (timeDifferenceFromUTC.isa.method_msgSend["valueForKey:"] || _objj_forward)(timeDifferenceFromUTC, (timeDifferenceFromUTC.isa.method_dtable["valueForKey:"], "valueForKey:"), key));
        if (value == minutes)
        {
            abbreviation = key;
            break;
        }
    }
    if (!abbreviation)
        return nil;
    return (self.isa.method_msgSend["timeZoneWithAbbreviation:"] || _objj_forward)(self, (self.isa.method_dtable["timeZoneWithAbbreviation:"], "timeZoneWithAbbreviation:"), abbreviation);
}

,["id","CPInteger"]), new objj_method(sel_getUid("_timeZoneFromString:style:locale:"), function $CPTimeZone___timeZoneFromString_style_locale_(self, _cmd, aTimeZoneString, style, _locale)
{
    if ((abbreviationDictionary == null ? null : (abbreviationDictionary.isa.method_msgSend["containsKey:"] || _objj_forward)(abbreviationDictionary, (abbreviationDictionary.isa.method_dtable["containsKey:"], "containsKey:"), aTimeZoneString)))
        return (self.isa.method_msgSend["timeZoneWithAbbreviation:"] || _objj_forward)(self, (self.isa.method_dtable["timeZoneWithAbbreviation:"], "timeZoneWithAbbreviation:"), aTimeZoneString);
    var dict = (localizedName == null ? null : (localizedName.isa.method_msgSend["valueForKey:"] || _objj_forward)(localizedName, (localizedName.isa.method_dtable["valueForKey:"], "valueForKey:"), (_locale == null ? null : (_locale.isa.method_msgSend["objectForKey:"] || _objj_forward)(_locale, (_locale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)))),
        keys = (dict == null ? null : (dict.isa.method_msgSend["keyEnumerator"] || _objj_forward)(dict, (dict.isa.method_dtable["keyEnumerator"], "keyEnumerator"))),
        key;
    while (key = (keys == null ? null : (keys.isa.method_msgSend["nextObject"] || _objj_forward)(keys, (keys.isa.method_dtable["nextObject"], "nextObject"))))
    {
        var value = ((___r1 = (dict == null ? null : (dict.isa.method_msgSend["valueForKey:"] || _objj_forward)(dict, (dict.isa.method_dtable["valueForKey:"], "valueForKey:"), key))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", style));
        if ((value == null ? null : (value.isa.method_msgSend["isEqualToString:"] || _objj_forward)(value, (value.isa.method_dtable["isEqualToString:"], "isEqualToString:"), aTimeZoneString)))
            return (self.isa.method_msgSend["timeZoneWithAbbreviation:"] || _objj_forward)(self, (self.isa.method_dtable["timeZoneWithAbbreviation:"], "timeZoneWithAbbreviation:"), key);
    }
    return nil;
    var ___r1;
}

,["id","CPString","NSTimeZoneNameStyle","CPLocale"]), new objj_method(sel_getUid("_namesForStyle:locale:"), function $CPTimeZone___namesForStyle_locale_(self, _cmd, style, aLocale)
{
    var array = (CPArray.isa.method_msgSend["array"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["array"], "array")),
        dict = (localizedName == null ? null : (localizedName.isa.method_msgSend["valueForKey:"] || _objj_forward)(localizedName, (localizedName.isa.method_dtable["valueForKey:"], "valueForKey:"), (aLocale == null ? null : (aLocale.isa.method_msgSend["objectForKey:"] || _objj_forward)(aLocale, (aLocale.isa.method_dtable["objectForKey:"], "objectForKey:"), CPLocaleLanguageCode)))),
        keys = (dict == null ? null : (dict.isa.method_msgSend["keyEnumerator"] || _objj_forward)(dict, (dict.isa.method_dtable["keyEnumerator"], "keyEnumerator"))),
        key;
    while (key = (keys == null ? null : (keys.isa.method_msgSend["nextObject"] || _objj_forward)(keys, (keys.isa.method_dtable["nextObject"], "nextObject"))))
        (array == null ? null : (array.isa.method_msgSend["addObject:"] || _objj_forward)(array, (array.isa.method_dtable["addObject:"], "addObject:"), ((___r1 = (dict == null ? null : (dict.isa.method_msgSend["valueForKey:"] || _objj_forward)(dict, (dict.isa.method_dtable["valueForKey:"], "valueForKey:"), key))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", style))));
    return array;
    var ___r1;
}

,["CPArray","NSTimeZoneNameStyle","CPLocale"]), new objj_method(sel_getUid("timeZoneDataVersion"), function $CPTimeZone__timeZoneDataVersion(self, _cmd)
{
    return timeZoneDataVersion;
}

,["CPString"]), new objj_method(sel_getUid("localTimeZone"), function $CPTimeZone__localTimeZone(self, _cmd)
{
    return localTimeZone;
}

,["CPTimeZone"]), new objj_method(sel_getUid("defaultTimeZone"), function $CPTimeZone__defaultTimeZone(self, _cmd)
{
    return defaultTimeZone;
}

,["CPTimeZone"]), new objj_method(sel_getUid("setDefaultTimeZone:"), function $CPTimeZone__setDefaultTimeZone_(self, _cmd, aTimeZone)
{
    defaultTimeZone = aTimeZone;
}

,["void","CPTimeZone"]), new objj_method(sel_getUid("resetSystemTimeZone"), function $CPTimeZone__resetSystemTimeZone(self, _cmd)
{
    var date = (CPDate.isa.method_msgSend["date"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["date"], "date")),
        abbreviation = ((String(((String(date)).split("("))[1])).split(")"))[0];
    systemTimeZone = (self.isa.method_msgSend["timeZoneWithAbbreviation:"] || _objj_forward)(self, (self.isa.method_dtable["timeZoneWithAbbreviation:"], "timeZoneWithAbbreviation:"), abbreviation);
    ((___r1 = (CPNotification == null ? null : (CPNotification.isa.method_msgSend["defaultCenter"] || _objj_forward)(CPNotification, (CPNotification.isa.method_dtable["defaultCenter"], "defaultCenter")))), ___r1 == null ? null : (___r1.isa.method_msgSend["postNotificationName:object:"] || _objj_forward)(___r1, "postNotificationName:object:", CPSystemTimeZoneDidChangeNotification, systemTimeZone));
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("systemTimeZone"), function $CPTimeZone__systemTimeZone(self, _cmd)
{
    return systemTimeZone;
}

,["CPTimeZone"]), new objj_method(sel_getUid("abbreviationDictionary"), function $CPTimeZone__abbreviationDictionary(self, _cmd)
{
    return abbreviationDictionary;
}

,["CPDictionary"]), new objj_method(sel_getUid("setAbbreviationDictionary:"), function $CPTimeZone__setAbbreviationDictionary_(self, _cmd, dict)
{
    abbreviationDictionary = dict;
}

,["void","CPDictionary"]), new objj_method(sel_getUid("knownTimeZoneNames"), function $CPTimeZone__knownTimeZoneNames(self, _cmd)
{
    return knownTimeZoneNames;
}

,["CPArray"])]);
}
p;16;CPNotification.jt;9014;@STATIC;1.0;i;13;CPException.ji;10;CPObject.ji;14;CPDictionary.jS;6164;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQTm90aWZpY2F0aW9uLmoiXSwibmFtZXMiOlsic2VsZiJdLCJtYXBwaW5ncyI6Ijs7QUFzQkEsa0IscUJBQ0Esa0Isa0JBQ0Esa0Isc0JBZUE7QUFBQTtBQUFBLDJCLDJCQUFBLGtDLEVBQUEsOEIsRUFBQSwwQzs2QkFpQ0EsNEI7QUFDQTtJQUNJLENBQUMsV0FBRCx1REFBQyxXQUFELEdBQWEsOENBQWIsRUFDWSw4Q0FEWixvQkFBbUIsNEJBQW5CLEVBQ21CLGlEQURuQjtBQURKLEM7O1VBYUEsNEIscUdBQTZCLGlCLEVBQTZCLFEsRUFBZ0MsUztBQUMxRjtJQUNJQSxJLEdBQU8sQywyQ0FBQSxnQixJQUFBLGtDQUFQO0lBRUEsSUFBSUEsSUFBSjtJQUNBO1FBQ0ksVSxHQUFRLGlCQUFSO1FBQ0EsWSxHQUFVLFFBQVY7UUFDQSxjLEdBQVksU0FBWjtJQUhKLEM7SUFNQSxNLENBQU9BLEk7QUFWWCxDOzt5Q0FnQkEsNEI7QUFDQTtJQUNJLE0sQ0FBTyxVO0FBRFgsQzs7Z0JBT0EsNEI7QUFDQTtJQUNJLE0sQ0FBTyxZO0FBRFgsQzs7VUFPQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLGM7QUFEWCxDOzs7OEJBbkVBLDRCLHFIQUFpRCxpQixFQUE2QixRLEVBQWdDLFM7QUFDOUc7SUFDSSxNLENBQU8sVUFBQyxDQUFDQSxJQUFELCtDQUFDQSxJQUFELEdBQU0sK0JBQU4sV0FBRCwrSUFBMkIsaUJBQTNCLEVBQW9ELFFBQXBELEVBQXNFLFNBQXRFLEU7O0FBRFgsQzs7cURBVUEsNEIsbUdBQWlELGlCLEVBQTZCLFE7QUFDOUU7SUFDSSxNLENBQU8sVUFBQyxDQUFDQSxJQUFELCtDQUFDQSxJQUFELEdBQU0sK0JBQU4sV0FBRCwrSUFBMkIsaUJBQTNCLEVBQW9ELFFBQXBELEVBQXNFLEdBQXRFLEU7O0FBRFgsQyIsImZpbGUiOiJDUE5vdGlmaWNhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi9Vc2Vycy9kYXZpZC9wcm9ncmFtcy9jYXBwdWNjaW5vL0ZvdW5kYXRpb24vIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENQTm90aWZpY2F0aW9uLmpcbiAqIEZvdW5kYXRpb25cbiAqXG4gKiBDcmVhdGVkIGJ5IEZyYW5jaXNjbyBUb2xtYXNreS5cbiAqIENvcHlyaWdodCAyMDA4LCAyODAgTm9ydGgsIEluYy5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXJcbiAqIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgbGlicmFyeTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZVxuICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAwMjExMC0xMzAxIFVTQVxuICovXG5cbkBpbXBvcnQgXCJDUEV4Y2VwdGlvbi5qXCJcbkBpbXBvcnQgXCJDUE9iamVjdC5qXCJcbkBpbXBvcnQgXCJDUERpY3Rpb25hcnkualwiXG5cbi8qIVxuICAgIEBjbGFzcyBDUE5vdGlmaWNhdGlvblxuICAgIEBpbmdyb3VwIGZvdW5kYXRpb25cbiAgICBAYnJpZWYgQSBub3RpZmljYXRpb24gdGhhdCBjYW4gYmUgcG9zdGVkIHRvIGEgQ1BOb3RpZmljYXRpb25DZW50ZXIuXG5cbiAgICBSZXByZXNlbnRzIGEgbm90aWZpY2F0aW9uIGZvciBwb3N0aW5nIHRvIGFuIENQTm90aWZpY2F0aW9uQ2VudGVyLiBDb25zaXN0c1xuICAgIG9mIGEgbmFtZSwgYW4gb2JqZWN0LCBhbmQgYW4gb3B0aW9uYWwgZGljdGlvbmFyeS4gVGhlIG5vdGlmaWNhdGlvbiBjZW50ZXJcbiAgICB3aWxsIGNoZWNrIGZvciBvYnNlcnZlcnMgcmVnaXN0ZXJlZCB0byByZWNlaXZlIGVpdGhlciBub3RpZmljYXRpb25zIHdpdGhcbiAgICB0aGUgbmFtZSwgdGhlIG9iamVjdCwgb3IgYm90aCBhbmQgcGFzcyB0aGUgbm90aWZpY2F0aW9uIGluc3RhbmNlIG9uIHRvIHRoZW0uXG5cbiAgICBUbyBjcmVhdGUgYSBub3RpZmljYXRpb24gdXNlIG9uZSBvZiB0aGUgY2xhc3MgbWV0aG9kcy4gVGhlIGRlZmF1bHQgaW5pdFxuICAgIG1ldGhvZCB3aWxsIHRocm93IGEgQ1BVbnN1cHBvcnRlZE1ldGhvZEV4Y2VwdGlvbi5cbiovXG5AaW1wbGVtZW50YXRpb24gQ1BOb3RpZmljYXRpb24gOiBDUE9iamVjdFxue1xuICAgIENQU3RyaW5nICAgICAgICBfbmFtZTtcbiAgICBpZCAgICAgICAgICAgICAgX29iamVjdDtcbiAgICBDUERpY3Rpb25hcnkgICAgX3VzZXJJbmZvO1xufVxuXG4vKiFcbiAgICBDcmVhdGVzIGEgbmV3IG5vdGlmaWNhdGlvbiB3aXRoIHRoZSBzcGVjaWZpZWQgbmFtZSwgb2JqZWN0IGFuZCBkaWN0aW9uYXJ5LlxuICAgIEBwYXJhbSBhTm90aWZpY2F0aW9uTmFtZSB0aGUgbmFtZSBvZiB0aGUgbm90aWZpY2F0aW9uXG4gICAgQHBhcmFtIGFuT2JqZWN0IHRoZSBhc3NvY2lhdGVkIG9iamVjdFxuICAgIEBwYXJhbSBhVXNlckluZm8gdGhlIGFzc29jaWF0ZWQgZGljdGlvbmFyeVxuICAgIEByZXR1cm4gdGhlIG5ldyBub3RpZmljYXRpb25cbiovXG4rIChDUE5vdGlmaWNhdGlvbilub3RpZmljYXRpb25XaXRoTmFtZTooQ1BTdHJpbmcpYU5vdGlmaWNhdGlvbk5hbWUgb2JqZWN0OihpZClhbk9iamVjdCB1c2VySW5mbzooQ1BEaWN0aW9uYXJ5KWFVc2VySW5mb1xue1xuICAgIHJldHVybiBbW3NlbGYgYWxsb2NdIGluaXRXaXRoTmFtZTphTm90aWZpY2F0aW9uTmFtZSBvYmplY3Q6YW5PYmplY3QgdXNlckluZm86YVVzZXJJbmZvXTtcbn1cblxuLyohXG4gICAgQ3JlYXRlcyBhIG5ldyBub3RpZmljYXRpb24gd2l0aCB0aGUgc3BlY2lmaWVkIG5hbWUgYW5kIG9iamVjdC5cbiAgICBAcGFyYW0gYU5vdGlmaWNhdGlvbk5hbWUgdGhlIG5hbWUgb2YgdGhlIG5vdGlmaWNhdGlvblxuICAgIEBwYXJhbSBhbk9iamVjdCB0aGUgYXNzb2NpYXRlZCBvYmplY3RcbiAgICBAcmV0dXJuIHRoZSBuZXcgbm90aWZpY2F0aW9uXG4qL1xuKyAoQ1BOb3RpZmljYXRpb24pbm90aWZpY2F0aW9uV2l0aE5hbWU6KENQU3RyaW5nKWFOb3RpZmljYXRpb25OYW1lIG9iamVjdDooaWQpYW5PYmplY3RcbntcbiAgICByZXR1cm4gW1tzZWxmIGFsbG9jXSBpbml0V2l0aE5hbWU6YU5vdGlmaWNhdGlvbk5hbWUgb2JqZWN0OmFuT2JqZWN0IHVzZXJJbmZvOm5pbF07XG59XG5cbi8qIVxuICAgIEB0aHJvd3MgQ1BVbnN1cHBvcnRlZE1ldGhvZEV4Y2VwdGlvbiBhbHdheXMsIGJlY2F1c2UgdGhlIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWRcbiovXG4tIChpZClpbml0XG57XG4gICAgW0NQRXhjZXB0aW9uIHJhaXNlOkNQVW5zdXBwb3J0ZWRNZXRob2RFeGNlcHRpb25cbiAgICAgICAgICAgICAgICByZWFzb246XCJDUE5vdGlmaWNhdGlvbidzIGluaXQgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZFwiXTtcbn1cblxuLyohXG4gICAgSW5pdGlhbGl6ZXMgdGhlIG5vdGlmaWNhdGlvbiB3aXRoIGEgbmFtZSwgb2JqZWN0IGFuZCBkaWN0aW9uYXJ5XG4gICAgQHBhcmFtIGFOb3RpZmljYXRpb25OYW1lIHRoZSBuYW1lIG9mIHRoZSBub3RpZmljYXRpb25cbiAgICBAcGFyYW0gYW5PYmplY3QgdGhlIGFzc29jaWF0ZWQgb2JqZWN0XG4gICAgQHBhcmFtIGFVc2VySW5mbyB0aGUgYXNzb2NpYXRlZCBkaWN0aW9uYXJ5XG4gICAgQHJldHVybiB0aGUgaW5pdGlhbGl6ZWQgbm90aWZpY2F0aW9uXG4gICAgQGlnbm9yZVxuKi9cbi0gKGlkKWluaXRXaXRoTmFtZTooQ1BTdHJpbmcpYU5vdGlmaWNhdGlvbk5hbWUgb2JqZWN0OihpZClhbk9iamVjdCB1c2VySW5mbzooQ1BEaWN0aW9uYXJ5KWFVc2VySW5mb1xue1xuICAgIHNlbGYgPSBbc3VwZXIgaW5pdF07XG5cbiAgICBpZiAoc2VsZilcbiAgICB7XG4gICAgICAgIF9uYW1lID0gYU5vdGlmaWNhdGlvbk5hbWU7XG4gICAgICAgIF9vYmplY3QgPSBhbk9iamVjdDtcbiAgICAgICAgX3VzZXJJbmZvID0gYVVzZXJJbmZvO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xufVxuXG4vKiFcbiAgICBSZXR1cm5zIHRoZSBub3RpZmljYXRpb24gbmFtZS5cbiovXG4tIChDUFN0cmluZyluYW1lXG57XG4gICAgcmV0dXJuIF9uYW1lO1xufVxuXG4vKiFcbiAgICBSZXR1cm5zIHRoZSBub3RpZmljYXRpb24ncyBvYmplY3QuXG4qL1xuLSAoaWQpb2JqZWN0XG57XG4gICAgcmV0dXJuIF9vYmplY3Q7XG59XG5cbi8qIVxuICAgIFJldHVybnMgdGhlIG5vdGlmaWNhdGlvbidzIGRpY3Rpb25hcnkuXG4qL1xuLSAoQ1BEaWN0aW9uYXJ5KXVzZXJJbmZvXG57XG4gICAgcmV0dXJuIF91c2VySW5mbztcbn1cblxuQGVuZFxuIl19t;2772;

objj_executeFile("CPException.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPDictionary.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPNotification"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_name", "CPString"), new objj_ivar("_object", "id"), new objj_ivar("_userInfo", "CPDictionary")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPNotification__init(self, _cmd)
{
    (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPUnsupportedMethodException, "CPNotification's init method should not be used");
}

,["id"]), new objj_method(sel_getUid("initWithName:object:userInfo:"), function $CPNotification__initWithName_object_userInfo_(self, _cmd, aNotificationName, anObject, aUserInfo)
{
    self = (objj_getClass("CPNotification").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._name = aNotificationName;
        self._object = anObject;
        self._userInfo = aUserInfo;
    }
    return self;
}

,["id","CPString","id","CPDictionary"]), new objj_method(sel_getUid("name"), function $CPNotification__name(self, _cmd)
{
    return self._name;
}

,["CPString"]), new objj_method(sel_getUid("object"), function $CPNotification__object(self, _cmd)
{
    return self._object;
}

,["id"]), new objj_method(sel_getUid("userInfo"), function $CPNotification__userInfo(self, _cmd)
{
    return self._userInfo;
}

,["CPDictionary"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("notificationWithName:object:userInfo:"), function $CPNotification__notificationWithName_object_userInfo_(self, _cmd, aNotificationName, anObject, aUserInfo)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithName:object:userInfo:"] || _objj_forward)(___r1, "initWithName:object:userInfo:", aNotificationName, anObject, aUserInfo));
    var ___r1;
}

,["CPNotification","CPString","id","CPDictionary"]), new objj_method(sel_getUid("notificationWithName:object:"), function $CPNotification__notificationWithName_object_(self, _cmd, aNotificationName, anObject)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithName:object:userInfo:"] || _objj_forward)(___r1, "initWithName:object:userInfo:", aNotificationName, anObject, nil));
    var ___r1;
}

,["CPNotification","CPString","id"])]);
}
p;18;CPDelayedPerform.jt;21205;@STATIC;1.0;i;10;CPObject.ji;11;CPRunLoop.ji;10;CPString.jS;10600;t;10531;

objj_executeFile("CPObject.j", YES);objj_executeFile("CPRunLoop.j", YES);objj_executeFile("CPString.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPDelayedPerform"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_object", "id"), new objj_ivar("_selector", "SEL"), new objj_ivar("_argument", "id")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithObject:selector:argument:"), function $CPDelayedPerform__initWithObject_selector_argument_(self, _cmd, anObject, aSelector, anArgument)
{
    if (self = (objj_getClass("CPDelayedPerform").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        self._object = anObject;
        self._selector = aSelector;
        self._argument = anArgument;
    }
    return self;
}

,["id","id","SEL","id"]), new objj_method(sel_getUid("isEqualToPerform:"), function $CPDelayedPerform__isEqualToPerform_(self, _cmd, anOther)
{
    if (!anOther || !anOther.isa)
        return NO;
    if (self._object !== anOther._object)
        return NO;
    if (!self._selector || !anOther._selector)
        return YES;
    if (self._selector !== anOther._selector)
        return NO;
    if (self._argument !== anOther._argument)
        return NO;
    return YES;
}

,["BOOL","CPDelayedPerform"]), new objj_method(sel_getUid("perform"), function $CPDelayedPerform__perform(self, _cmd)
{
    try {
        ((___r1 = self._object), ___r1 == null ? null : (___r1.isa.method_msgSend["performSelector:withObject:"] || _objj_forward)(___r1, (self._object.isa.method_dtable["performSelector:withObject:"], self._object.isa.method_dtable["performSelector:withObject:"], "performSelector:withObject:"), self._selector, self._argument));
    }
    catch(ex) {
        CPLog("exception %@ raised during delayed perform", ex);
    }
    var ___r1;
}

,["void"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("delayedPerformWithObject:selector:argument:"), function $CPDelayedPerform__delayedPerformWithObject_selector_argument_(self, _cmd, anObject, aSelector, anArgument)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObject:selector:argument:"] || _objj_forward)(___r1, "initWithObject:selector:argument:", anObject, aSelector, anArgument));
    var ___r1;
}

,["CPDelayedPerform","id","SEL","id"])]);
}
{
var the_class = objj_getClass("CPRunLoop")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPRunLoop\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("invalidateTimerWithDelayedPerform:"), function $CPRunLoop__invalidateTimerWithDelayedPerform_(self, _cmd, aDelayedPerform)
{
    for (var aKey in self._timersForModes)
    {
        if (!self._timersForModes.hasOwnProperty(aKey))
            continue;
        var timersForMode = self._timersForModes[aKey];
        for (var i = 0, count = (timersForMode == null ? null : (timersForMode.isa.method_msgSend["count"] || _objj_forward)(timersForMode, (timersForMode.isa.method_dtable["count"], "count"))); i < count; i++)
        {
            var aTimer = (timersForMode == null ? null : (timersForMode.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(timersForMode, (timersForMode.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i)),
                userInfo = (aTimer == null ? null : (aTimer.isa.method_msgSend["userInfo"] || _objj_forward)(aTimer, (aTimer.isa.method_dtable["userInfo"], "userInfo")));
            if ((userInfo == null ? null : (userInfo.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(userInfo, (userInfo.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), CPDelayedPerform)) && (userInfo == null ? null : (userInfo.isa.method_msgSend["isEqualToPerform:"] || _objj_forward)(userInfo, (userInfo.isa.method_dtable["isEqualToPerform:"], "isEqualToPerform:"), aDelayedPerform)))
                (aTimer == null ? null : (aTimer.isa.method_msgSend["invalidate"] || _objj_forward)(aTimer, (aTimer.isa.method_dtable["invalidate"], "invalidate")));
        }
    }
}

,["void","CPDelayedPerform"])]);
}
{
var the_class = objj_getClass("CPObject")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPObject\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("performSelector:withObject:afterDelay:"), function $CPObject__performSelector_withObject_afterDelay_(self, _cmd, selector, object, delay)
{
    ((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["object:performSelector:withObject:afterDelay:inModes:"] || _objj_forward)(___r1, "object:performSelector:withObject:afterDelay:inModes:", self, selector, object, delay, (CPArray.isa.method_msgSend["arrayWithObject:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObject:"], "arrayWithObject:"), CPDefaultRunLoopMode)));
    var ___r1;
}

,["void","SEL","id","CPTimeInterval"]), new objj_method(sel_getUid("performSelector:withObject:afterDelay:inModes:"), function $CPObject__performSelector_withObject_afterDelay_inModes_(self, _cmd, selector, object, delay, modes)
{
    ((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["object:performSelector:withObject:afterDelay:inModes:"] || _objj_forward)(___r1, "object:performSelector:withObject:afterDelay:inModes:", self, selector, object, delay, modes));
    var ___r1;
}

,["void","SEL","id","CPTimeInterval","CPArray"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("cancelPreviousPerformRequestsWithTarget:selector:object:"), function $CPObject__cancelPreviousPerformRequestsWithTarget_selector_object_(self, _cmd, target, selector, argument)
{
    var aDelayedPerform = (CPDelayedPerform.isa.method_msgSend["delayedPerformWithObject:selector:argument:"] || _objj_forward)(CPDelayedPerform, (CPDelayedPerform.isa.method_dtable["delayedPerformWithObject:selector:argument:"], CPDelayedPerform.isa.method_dtable["delayedPerformWithObject:selector:argument:"], CPDelayedPerform.isa.method_dtable["delayedPerformWithObject:selector:argument:"], "delayedPerformWithObject:selector:argument:"), target, selector, argument);
    ((___r1 = (CPRunLoop.isa.method_msgSend["currentRunLoop"] || _objj_forward)(CPRunLoop, (CPRunLoop.isa.method_dtable["currentRunLoop"], "currentRunLoop"))), ___r1 == null ? null : (___r1.isa.method_msgSend["invalidateTimerWithDelayedPerform:"] || _objj_forward)(___r1, "invalidateTimerWithDelayedPerform:", aDelayedPerform));
    var ___r1;
}

,["void","id","SEL","id"]), new objj_method(sel_getUid("cancelPreviousPerformRequestsWithTarget:"), function $CPObject__cancelPreviousPerformRequestsWithTarget_(self, _cmd, target)
{
    var aDelayedPerform = (CPDelayedPerform.isa.method_msgSend["delayedPerformWithObject:selector:argument:"] || _objj_forward)(CPDelayedPerform, (CPDelayedPerform.isa.method_dtable["delayedPerformWithObject:selector:argument:"], CPDelayedPerform.isa.method_dtable["delayedPerformWithObject:selector:argument:"], CPDelayedPerform.isa.method_dtable["delayedPerformWithObject:selector:argument:"], "delayedPerformWithObject:selector:argument:"), target, NULL, nil);
    ((___r1 = (CPRunLoop.isa.method_msgSend["currentRunLoop"] || _objj_forward)(CPRunLoop, (CPRunLoop.isa.method_dtable["currentRunLoop"], "currentRunLoop"))), ___r1 == null ? null : (___r1.isa.method_msgSend["invalidateTimerWithDelayedPerform:"] || _objj_forward)(___r1, "invalidateTimerWithDelayedPerform:", aDelayedPerform));
    var ___r1;
}

,["void","id"]), new objj_method(sel_getUid("_delayedPerform:"), function $CPObject___delayedPerform_(self, _cmd, aTimer)
{
    var aDelayedPerform = (aTimer == null ? null : (aTimer.isa.method_msgSend["userInfo"] || _objj_forward)(aTimer, (aTimer.isa.method_dtable["userInfo"], "userInfo")));
    (aDelayedPerform == null ? null : (aDelayedPerform.isa.method_msgSend["perform"] || _objj_forward)(aDelayedPerform, (aDelayedPerform.isa.method_dtable["perform"], "perform")));
}

,["void","CPTimer"]), new objj_method(sel_getUid("object:performSelector:withObject:afterDelay:inModes:"), function $CPObject__object_performSelector_withObject_afterDelay_inModes_(self, _cmd, object, selector, argument, delay, modes)
{
    var aDelayedPerform = (CPDelayedPerform.isa.method_msgSend["delayedPerformWithObject:selector:argument:"] || _objj_forward)(CPDelayedPerform, (CPDelayedPerform.isa.method_dtable["delayedPerformWithObject:selector:argument:"], CPDelayedPerform.isa.method_dtable["delayedPerformWithObject:selector:argument:"], CPDelayedPerform.isa.method_dtable["delayedPerformWithObject:selector:argument:"], "delayedPerformWithObject:selector:argument:"), object, selector, argument),
        aTimer = (CPTimer.isa.method_msgSend["timerWithTimeInterval:target:selector:userInfo:repeats:"] || _objj_forward)(CPTimer, (CPTimer.isa.method_dtable["timerWithTimeInterval:target:selector:userInfo:repeats:"], CPTimer.isa.method_dtable["timerWithTimeInterval:target:selector:userInfo:repeats:"], CPTimer.isa.method_dtable["timerWithTimeInterval:target:selector:userInfo:repeats:"], CPTimer.isa.method_dtable["timerWithTimeInterval:target:selector:userInfo:repeats:"], CPTimer.isa.method_dtable["timerWithTimeInterval:target:selector:userInfo:repeats:"], "timerWithTimeInterval:target:selector:userInfo:repeats:"), delay, (CPObject.isa.method_msgSend["class"] || _objj_forward)(CPObject, (CPObject.isa.method_dtable["class"], "class")), sel_getUid("_delayedPerform:"), aDelayedPerform, NO);
    for (var i = 0, count = (modes == null ? null : (modes.isa.method_msgSend["count"] || _objj_forward)(modes, (modes.isa.method_dtable["count"], "count"))); i < count; i++)
        ((___r1 = (CPRunLoop.isa.method_msgSend["currentRunLoop"] || _objj_forward)(CPRunLoop, (CPRunLoop.isa.method_dtable["currentRunLoop"], "currentRunLoop"))), ___r1 == null ? null : (___r1.isa.method_msgSend["addTimer:forMode:"] || _objj_forward)(___r1, "addTimer:forMode:", aTimer, (modes == null ? null : (modes.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(modes, (modes.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i))));
    var ___r1;
}

,["void","id","SEL","id","CPTimeInterval","CPArray"])]);
}
p;17;CPKeyedArchiver.jt;69524;@STATIC;1.0;i;9;CPArray.ji;9;CPCoder.ji;8;CPData.ji;14;CPDictionary.ji;10;CPNumber.ji;10;CPString.ji;9;CPValue.ji;13;_CGGeometry.jS;38656;t;30722;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPCoder.j", YES);objj_executeFile("CPData.j", YES);objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPNumber.j", YES);objj_executeFile("CPString.j", YES);objj_executeFile("CPValue.j", YES);objj_executeFile("_CGGeometry.j", YES);var CPArchiverReplacementClassNames = nil;
var _CPKeyedArchiverDidEncodeObjectSelector = 1,
    _CPKeyedArchiverWillEncodeObjectSelector = 2,
    _CPKeyedArchiverWillReplaceObjectWithObjectSelector = 4,
    _CPKeyedArchiverDidFinishEncodingSelector = 8,
    _CPKeyedArchiverWillFinishEncodingSelector = 16;
var _CPKeyedArchiverNullString = "$null",
    _CPKeyedArchiverNullReference = nil,
    _CPKeyedArchiverUIDKey = "CP$UID",
    _CPKeyedArchiverTopKey = "$top",
    _CPKeyedArchiverObjectsKey = "$objects",
    _CPKeyedArchiverArchiverKey = "$archiver",
    _CPKeyedArchiverVersionKey = "$version",
    _CPKeyedArchiverClassNameKey = "$classname",
    _CPKeyedArchiverClassesKey = "$classes",
    _CPKeyedArchiverClassKey = "$class";
var _CPKeyedArchiverStringClass = Nil,
    _CPKeyedArchiverNumberClass = Nil;

{var the_class = objj_allocateClassPair(CPValue, "_CPKeyedArchiverValue"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
}

{var the_class = objj_allocateClassPair(CPCoder, "CPKeyedArchiver"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_delegate", "id"), new objj_ivar("_delegateSelectors", "unsigned"), new objj_ivar("_data", "CPData"), new objj_ivar("_objects", "CPArray"), new objj_ivar("_UIDs", "CPDictionary"), new objj_ivar("_conditionalUIDs", "CPDictionary"), new objj_ivar("_replacementObjects", "CPDictionary"), new objj_ivar("_replacementClassNames", "CPDictionary"), new objj_ivar("_plistObject", "id"), new objj_ivar("_plistObjects", "CPMutableArray"), new objj_ivar("_outputFormat", "CPPropertyListFormat")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initForWritingWithMutableData:"), function $CPKeyedArchiver__initForWritingWithMutableData_(self, _cmd, data)
{
    self = (objj_getClass("CPKeyedArchiver").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._data = data;
        self._objects = [];
        self._UIDs = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        self._conditionalUIDs = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        self._replacementObjects = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        self._plistObject = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        self._plistObjects = (CPArray.isa.method_msgSend["arrayWithObject:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObject:"], "arrayWithObject:"), _CPKeyedArchiverNullString);
    }
    return self;
    var ___r1;
}

,["id","CPMutableData"]), new objj_method(sel_getUid("finishEncoding"), function $CPKeyedArchiver__finishEncoding(self, _cmd)
{
    if (self._delegate && self._delegateSelectors & _CPKeyedArchiverDidFinishEncodingSelector)
        ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["archiverWillFinish:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["archiverWillFinish:"], "archiverWillFinish:"), self));
    var i = 0,
        topObject = self._plistObject,
        classes = [];
    for (; i < self._objects.length; ++i)
    {
        var object = self._objects[i];
        self._plistObject = self._plistObjects[((___r1 = self._UIDs), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._UIDs.isa.method_dtable["objectForKey:"], "objectForKey:"), (object == null ? null : (object.isa.method_msgSend["UID"] || _objj_forward)(object, (object.isa.method_dtable["UID"], "UID")))))];
        (object == null ? null : (object.isa.method_msgSend["encodeWithCoder:"] || _objj_forward)(object, (object.isa.method_dtable["encodeWithCoder:"], "encodeWithCoder:"), self));
        if (self._delegate && self._delegateSelectors & _CPKeyedArchiverDidEncodeObjectSelector)
            ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["archiver:didEncodeObject:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["archiver:didEncodeObject:"], self._delegate.isa.method_dtable["archiver:didEncodeObject:"], "archiver:didEncodeObject:"), self, object));
    }
    self._plistObject = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    ((___r1 = self._plistObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._plistObject.isa.method_dtable["setObject:forKey:"], self._plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), topObject, _CPKeyedArchiverTopKey));
    ((___r1 = self._plistObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._plistObject.isa.method_dtable["setObject:forKey:"], self._plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), self._plistObjects, _CPKeyedArchiverObjectsKey));
    ((___r1 = self._plistObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._plistObject.isa.method_dtable["setObject:forKey:"], self._plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), (self.isa.method_msgSend["className"] || _objj_forward)(self, (self.isa.method_dtable["className"], "className")), _CPKeyedArchiverArchiverKey));
    ((___r1 = self._plistObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._plistObject.isa.method_dtable["setObject:forKey:"], self._plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), "100000", _CPKeyedArchiverVersionKey));
    ((___r1 = self._data), ___r1 == null ? null : (___r1.isa.method_msgSend["setPlistObject:"] || _objj_forward)(___r1, (self._data.isa.method_dtable["setPlistObject:"], "setPlistObject:"), self._plistObject));
    if (self._delegate && self._delegateSelectors & _CPKeyedArchiverDidFinishEncodingSelector)
        ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["archiverDidFinish:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["archiverDidFinish:"], "archiverDidFinish:"), self));
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("outputFormat"), function $CPKeyedArchiver__outputFormat(self, _cmd)
{
    return self._outputFormat;
}

,["CPPropertyListFormat"]), new objj_method(sel_getUid("setOutputFormat:"), function $CPKeyedArchiver__setOutputFormat_(self, _cmd, aPropertyListFormat)
{
    self._outputFormat = aPropertyListFormat;
}

,["void","CPPropertyListFormat"]), new objj_method(sel_getUid("encodeBool:forKey:"), function $CPKeyedArchiver__encodeBool_forKey_(self, _cmd, aBOOL, aKey)
{
    ((___r1 = self._plistObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._plistObject.isa.method_dtable["setObject:forKey:"], self._plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), _CPKeyedArchiverEncodeObject(self, aBOOL, NO), aKey));
    var ___r1;
}

,["void","BOOL","CPString"]), new objj_method(sel_getUid("encodeDouble:forKey:"), function $CPKeyedArchiver__encodeDouble_forKey_(self, _cmd, aDouble, aKey)
{
    ((___r1 = self._plistObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._plistObject.isa.method_dtable["setObject:forKey:"], self._plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), _CPKeyedArchiverEncodeObject(self, aDouble, NO), aKey));
    var ___r1;
}

,["void","double","CPString"]), new objj_method(sel_getUid("encodeFloat:forKey:"), function $CPKeyedArchiver__encodeFloat_forKey_(self, _cmd, aFloat, aKey)
{
    ((___r1 = self._plistObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._plistObject.isa.method_dtable["setObject:forKey:"], self._plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), _CPKeyedArchiverEncodeObject(self, aFloat, NO), aKey));
    var ___r1;
}

,["void","float","CPString"]), new objj_method(sel_getUid("encodeInt:forKey:"), function $CPKeyedArchiver__encodeInt_forKey_(self, _cmd, anInt, aKey)
{
    ((___r1 = self._plistObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._plistObject.isa.method_dtable["setObject:forKey:"], self._plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), _CPKeyedArchiverEncodeObject(self, anInt, NO), aKey));
    var ___r1;
}

,["void","float","CPString"]), new objj_method(sel_getUid("setDelegate:"), function $CPKeyedArchiver__setDelegate_(self, _cmd, aDelegate)
{
    self._delegate = aDelegate;
    if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("archiver:didEncodeObject:"))))
        self._delegateSelectors |= _CPKeyedArchiverDidEncodeObjectSelector;
    if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("archiver:willEncodeObject:"))))
        self._delegateSelectors |= _CPKeyedArchiverWillEncodeObjectSelector;
    if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("archiver:willReplaceObject:withObject:"))))
        self._delegateSelectors |= _CPKeyedArchiverWillReplaceObjectWithObjectSelector;
    if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("archiver:didFinishEncoding:"))))
        self._delegateSelectors |= _CPKeyedArchiverDidFinishEncodingSelector;
    if (((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(___r1, (self._delegate.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("archiver:willFinishEncoding:"))))
        self._delegateSelectors |= _CPKeyedArchiverWillFinishEncodingSelector;
    var ___r1;
}

,["void","id"]), new objj_method(sel_getUid("delegate"), function $CPKeyedArchiver__delegate(self, _cmd)
{
    return self._delegate;
}

,["id"]), new objj_method(sel_getUid("encodePoint:forKey:"), function $CPKeyedArchiver__encodePoint_forKey_(self, _cmd, aPoint, aKey)
{
    ((___r1 = self._plistObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._plistObject.isa.method_dtable["setObject:forKey:"], self._plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), _CPKeyedArchiverEncodeObject(self, CGStringFromPoint(aPoint), NO), aKey));
    var ___r1;
}

,["void","CGPoint","CPString"]), new objj_method(sel_getUid("encodeRect:forKey:"), function $CPKeyedArchiver__encodeRect_forKey_(self, _cmd, aRect, aKey)
{
    ((___r1 = self._plistObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._plistObject.isa.method_dtable["setObject:forKey:"], self._plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), _CPKeyedArchiverEncodeObject(self, CGStringFromRect(aRect), NO), aKey));
    var ___r1;
}

,["void","CGRect","CPString"]), new objj_method(sel_getUid("encodeSize:forKey:"), function $CPKeyedArchiver__encodeSize_forKey_(self, _cmd, aSize, aKey)
{
    ((___r1 = self._plistObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._plistObject.isa.method_dtable["setObject:forKey:"], self._plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), _CPKeyedArchiverEncodeObject(self, CGStringFromSize(aSize), NO), aKey));
    var ___r1;
}

,["void","CGSize","CPString"]), new objj_method(sel_getUid("encodeConditionalObject:forKey:"), function $CPKeyedArchiver__encodeConditionalObject_forKey_(self, _cmd, anObject, aKey)
{
    ((___r1 = self._plistObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._plistObject.isa.method_dtable["setObject:forKey:"], self._plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), _CPKeyedArchiverEncodeObject(self, anObject, YES), aKey));
    var ___r1;
}

,["void","id","CPString"]), new objj_method(sel_getUid("encodeNumber:forKey:"), function $CPKeyedArchiver__encodeNumber_forKey_(self, _cmd, aNumber, aKey)
{
    ((___r1 = self._plistObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._plistObject.isa.method_dtable["setObject:forKey:"], self._plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), _CPKeyedArchiverEncodeObject(self, aNumber, NO), aKey));
    var ___r1;
}

,["void","CPNumber","CPString"]), new objj_method(sel_getUid("encodeObject:forKey:"), function $CPKeyedArchiver__encodeObject_forKey_(self, _cmd, anObject, aKey)
{
    ((___r1 = self._plistObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._plistObject.isa.method_dtable["setObject:forKey:"], self._plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), _CPKeyedArchiverEncodeObject(self, anObject, NO), aKey));
    var ___r1;
}

,["void","id","CPString"]), new objj_method(sel_getUid("_encodeArrayOfObjects:forKey:"), function $CPKeyedArchiver___encodeArrayOfObjects_forKey_(self, _cmd, objects, aKey)
{
    var references = (objects == null ? null : (objects.isa.method_msgSend["arrayByApplyingBlock:"] || _objj_forward)(objects, (objects.isa.method_dtable["arrayByApplyingBlock:"], "arrayByApplyingBlock:"),     function(object)
    {
        return _CPKeyedArchiverEncodeObject(self, object, NO);
    }));
    ((___r1 = self._plistObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._plistObject.isa.method_dtable["setObject:forKey:"], self._plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), references, aKey));
    var ___r1;
}

,["void","CPArray","CPString"]), new objj_method(sel_getUid("_encodeDictionaryOfObjects:forKey:"), function $CPKeyedArchiver___encodeDictionaryOfObjects_forKey_(self, _cmd, aDictionary, aKey)
{
    var key,
        keys = (aDictionary == null ? null : (aDictionary.isa.method_msgSend["keyEnumerator"] || _objj_forward)(aDictionary, (aDictionary.isa.method_dtable["keyEnumerator"], "keyEnumerator"))),
        references = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    while ((key = (keys == null ? null : (keys.isa.method_msgSend["nextObject"] || _objj_forward)(keys, (keys.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        (references == null ? null : (references.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(references, (references.isa.method_dtable["setObject:forKey:"], references.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), _CPKeyedArchiverEncodeObject(self, (aDictionary == null ? null : (aDictionary.isa.method_msgSend["objectForKey:"] || _objj_forward)(aDictionary, (aDictionary.isa.method_dtable["objectForKey:"], "objectForKey:"), key)), NO), key));
    ((___r1 = self._plistObject), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._plistObject.isa.method_dtable["setObject:forKey:"], self._plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), references, aKey));
    var ___r1;
}

,["void","CPDictionary","CPString"]), new objj_method(sel_getUid("setClassName:forClass:"), function $CPKeyedArchiver__setClassName_forClass_(self, _cmd, aClassName, aClass)
{
    if (!self._replacementClassNames)
        self._replacementClassNames = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    ((___r1 = self._replacementClassNames), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, (self._replacementClassNames.isa.method_dtable["setObject:forKey:"], self._replacementClassNames.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), aClassName, CPStringFromClass(aClass)));
    var ___r1;
}

,["void","CPString","Class"]), new objj_method(sel_getUid("classNameForClass:"), function $CPKeyedArchiver__classNameForClass_(self, _cmd, aClass)
{
    if (!self._replacementClassNames)
        return aClass.name;
    var className = ((___r1 = self._replacementClassNames), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, (self._replacementClassNames.isa.method_dtable["objectForKey:"], "objectForKey:"), CPStringFromClass(aClass)));
    return className ? className : aClass.name;
    var ___r1;
}

,["CPString","Class"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("initialize"), function $CPKeyedArchiver__initialize(self, _cmd)
{
    if (self !== (CPKeyedArchiver.isa.method_msgSend["class"] || _objj_forward)(CPKeyedArchiver, (CPKeyedArchiver.isa.method_dtable["class"], "class")))
        return;
    _CPKeyedArchiverStringClass = (CPString.isa.method_msgSend["class"] || _objj_forward)(CPString, (CPString.isa.method_dtable["class"], "class"));
    _CPKeyedArchiverNumberClass = (CPNumber.isa.method_msgSend["class"] || _objj_forward)(CPNumber, (CPNumber.isa.method_dtable["class"], "class"));
    _CPKeyedArchiverNullReference = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", [0], [_CPKeyedArchiverUIDKey]));
    var ___r1;
}

,["void"]), new objj_method(sel_getUid("allowsKeyedCoding"), function $CPKeyedArchiver__allowsKeyedCoding(self, _cmd)
{
    return YES;
}

,["BOOL"]), new objj_method(sel_getUid("archivedDataWithRootObject:"), function $CPKeyedArchiver__archivedDataWithRootObject_(self, _cmd, anObject)
{
    var data = (CPData.isa.method_msgSend["dataWithPlistObject:"] || _objj_forward)(CPData, (CPData.isa.method_dtable["dataWithPlistObject:"], "dataWithPlistObject:"), nil),
        archiver = ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initForWritingWithMutableData:"] || _objj_forward)(___r1, "initForWritingWithMutableData:", data));
    (archiver == null ? null : (archiver.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(archiver, (archiver.isa.method_dtable["encodeObject:forKey:"], archiver.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), anObject, "root"));
    (archiver == null ? null : (archiver.isa.method_msgSend["finishEncoding"] || _objj_forward)(archiver, (archiver.isa.method_dtable["finishEncoding"], "finishEncoding")));
    return data;
    var ___r1;
}

,["CPData","id"]), new objj_method(sel_getUid("setClassName:forClass:"), function $CPKeyedArchiver__setClassName_forClass_(self, _cmd, aClassName, aClass)
{
    if (!CPArchiverReplacementClassNames)
        CPArchiverReplacementClassNames = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    (CPArchiverReplacementClassNames == null ? null : (CPArchiverReplacementClassNames.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(CPArchiverReplacementClassNames, (CPArchiverReplacementClassNames.isa.method_dtable["setObject:forKey:"], CPArchiverReplacementClassNames.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), aClassName, CPStringFromClass(aClass)));
    var ___r1;
}

,["void","CPString","Class"]), new objj_method(sel_getUid("classNameForClass:"), function $CPKeyedArchiver__classNameForClass_(self, _cmd, aClass)
{
    if (!CPArchiverReplacementClassNames)
        return aClass.name;
    var className = (CPArchiverReplacementClassNames == null ? null : (CPArchiverReplacementClassNames.isa.method_msgSend["objectForKey:"] || _objj_forward)(CPArchiverReplacementClassNames, (CPArchiverReplacementClassNames.isa.method_dtable["objectForKey:"], "objectForKey:"), CPStringFromClass(aClass)));
    return className ? className : aClass.name;
}

,["CPString","Class"])]);
}
var _CPKeyedArchiverEncodeObject = function(self, anObject, isConditional)
{
    if (anObject !== nil && anObject !== undefined && !anObject.isa)
        anObject = (_CPKeyedArchiverValue.isa.method_msgSend["valueWithJSObject:"] || _objj_forward)(_CPKeyedArchiverValue, (_CPKeyedArchiverValue.isa.method_dtable["valueWithJSObject:"], "valueWithJSObject:"), anObject);
    var GUID = (anObject == null ? null : (anObject.isa.method_msgSend["UID"] || _objj_forward)(anObject, (anObject.isa.method_dtable["UID"], "UID"))),
        object = ((___r1 = self._replacementObjects), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, "objectForKey:", GUID));
    if (object === nil)
    {
        object = (anObject == null ? null : (anObject.isa.method_msgSend["replacementObjectForKeyedArchiver:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["replacementObjectForKeyedArchiver:"], "replacementObjectForKeyedArchiver:"), self));
        if (self._delegate)
        {
            if (object !== anObject && self._delegateSelectors & _CPKeyedArchiverWillReplaceObjectWithObjectSelector)
                ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["archiver:willReplaceObject:withObject:"] || _objj_forward)(___r1, "archiver:willReplaceObject:withObject:", self, anObject, object));
            if (self._delegateSelectors & _CPKeyedArchiverWillEncodeObjectSelector)
            {
                anObject = ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["archiver:willEncodeObject:"] || _objj_forward)(___r1, "archiver:willEncodeObject:", self, object));
                if (anObject !== object && self._delegateSelectors & _CPKeyedArchiverWillReplaceObjectWithObjectSelector)
                    ((___r1 = self._delegate), ___r1 == null ? null : (___r1.isa.method_msgSend["archiver:willReplaceObject:withObject:"] || _objj_forward)(___r1, "archiver:willReplaceObject:withObject:", self, object, anObject));
                object = anObject;
            }        }        if (object != nil && GUID != nil)
            ((___r1 = self._replacementObjects), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, "setObject:forKey:", object, GUID));
    }    if (object === nil)
        return _CPKeyedArchiverNullReference;
    var UID = ((___r1 = self._UIDs), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, "objectForKey:", GUID = (object == null ? null : (object.isa.method_msgSend["UID"] || _objj_forward)(object, (object.isa.method_dtable["UID"], "UID")))));
    if (UID === nil)
    {
        if (isConditional)
        {
            if ((UID = ((___r1 = self._conditionalUIDs), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, "objectForKey:", GUID))) === nil)
            {
                ((___r1 = self._conditionalUIDs), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, "setObject:forKey:", UID = ((___r2 = self._plistObjects), ___r2 == null ? null : (___r2.isa.method_msgSend["count"] || _objj_forward)(___r2, "count")), GUID));
                ((___r1 = self._plistObjects), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, "addObject:", _CPKeyedArchiverNullString));
            }        }        else
        {
            var theClass = (object == null ? null : (object.isa.method_msgSend["classForKeyedArchiver"] || _objj_forward)(object, (object.isa.method_dtable["classForKeyedArchiver"], "classForKeyedArchiver"))),
                plistObject = nil;
            if (theClass === _CPKeyedArchiverStringClass || theClass === _CPKeyedArchiverNumberClass)
                plistObject = object;
            else
            {
                plistObject = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
                ((___r1 = self._objects), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, "addObject:", object));
                var className = (self == null ? null : (self.isa.method_msgSend["classNameForClass:"] || _objj_forward)(self, (self.isa.method_dtable["classNameForClass:"], "classNameForClass:"), theClass));
                if (!className)
                    className = ((___r1 = (self == null ? null : (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")))), ___r1 == null ? null : (___r1.isa.method_msgSend["classNameForClass:"] || _objj_forward)(___r1, "classNameForClass:", theClass));
                if (!className)
                    className = theClass.name;
                else
                    theClass = CPClassFromString(className);
                var classUID = ((___r1 = self._UIDs), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, "objectForKey:", className));
                if (!classUID)
                {
                    var plistClass = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init")),
                        hierarchy = [];
                    (plistClass == null ? null : (plistClass.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(plistClass, (plistClass.isa.method_dtable["setObject:forKey:"], plistClass.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), className, _CPKeyedArchiverClassNameKey));
                    do
                    {
                        (hierarchy == null ? null : (hierarchy.isa.method_msgSend["addObject:"] || _objj_forward)(hierarchy, (hierarchy.isa.method_dtable["addObject:"], "addObject:"), CPStringFromClass(theClass)));
                    }                    while (theClass = (theClass == null ? null : (theClass.isa.method_msgSend["superclass"] || _objj_forward)(theClass, (theClass.isa.method_dtable["superclass"], "superclass"))));
                                        (plistClass == null ? null : (plistClass.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(plistClass, (plistClass.isa.method_dtable["setObject:forKey:"], plistClass.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), hierarchy, _CPKeyedArchiverClassesKey));
                    classUID = ((___r1 = self._plistObjects), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, "count"));
                    ((___r1 = self._plistObjects), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, "addObject:", plistClass));
                    ((___r1 = self._UIDs), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, "setObject:forKey:", classUID, className));
                }                (plistObject == null ? null : (plistObject.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(plistObject, (plistObject.isa.method_dtable["setObject:forKey:"], plistObject.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", [classUID], [_CPKeyedArchiverUIDKey])), _CPKeyedArchiverClassKey));
            }            UID = ((___r1 = self._conditionalUIDs), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, "objectForKey:", GUID));
            if (UID !== nil)
            {
                ((___r1 = self._UIDs), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, "setObject:forKey:", UID, GUID));
                ((___r1 = self._plistObjects), ___r1 == null ? null : (___r1.isa.method_msgSend["replaceObjectAtIndex:withObject:"] || _objj_forward)(___r1, "replaceObjectAtIndex:withObject:", UID, plistObject));
            }            else
            {
                ((___r1 = self._UIDs), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, "setObject:forKey:", UID = ((___r2 = self._plistObjects), ___r2 == null ? null : (___r2.isa.method_msgSend["count"] || _objj_forward)(___r2, "count")), GUID));
                ((___r1 = self._plistObjects), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, "addObject:", plistObject));
            }        }    }    return (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", [UID], [_CPKeyedArchiverUIDKey]));
    var ___r1, ___r2;
};
p;11;CPDecimal.jt;120140;@STATIC;1.0;i;9;CPArray.ji;10;CPNumber.jS;91368;t;28716;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPNumber.j", YES);{var the_typedef = objj_allocateTypeDef("CPDecimal");
objj_registerTypeDef(the_typedef);
}CPDecimalMaxDigits = 38;
CPDecimalMaxExponent = 127;
CPDecimalMinExponent = -128;
CPDecimalNoScale = 128;
CPCalculationNoError = 0;
CPCalculationLossOfPrecision = 1;
CPCalculationOverflow = 2;
CPCalculationUnderflow = 3;
CPCalculationDivideByZero = 4;
{var the_typedef = objj_allocateTypeDef("CPRoundingMode");
objj_registerTypeDef(the_typedef);
}CPRoundPlain = 1;
CPRoundDown = 2;
CPRoundUp = 3;
CPRoundBankers = 4;
_CPRoundHalfDown = 5;
CPDecimalNumberOverflowException = "CPDecimalNumberOverflowException";
CPDecimalNumberUnderflowException = "CPDecimalNumberUnderflowException";
CPDecimalNumberExactnessException = "CPDecimalNumberExactnessException";
CPDecimalNumberDivideByZeroException = "CPDecimalNumberDivideByZeroException";
CPDecimalMakeWithString = function(string, locale)
{
    if (!string)
        return CPDecimalMakeNaN();
    var matches = string.match(new RegExp("^([+\\-]?)((?:0|[0-9]\\d*)?)(?:\\.(\\d*))?(?:[eE]([+\\-]?)(\\d+))?$"));
    if (!matches)
        return CPDecimalMakeNaN();
    var ds = matches[1],
        intpart = matches[2],
        decpart = matches[3],
        es = matches[4],
        exp = matches[5];
    var isNegative = NO;
    if (ds && ds === "-")
        isNegative = YES;
    var exponent = 0;
    if (exp)
        exponent = parseInt(exp) * (es && es === "-" ? -1 : 1);
    if (decpart)
        exponent -= decpart.length;
    var inputlength = (intpart ? intpart.length : 0) + (decpart ? decpart.length : 0);
    if (inputlength > CPDecimalMaxDigits)
    {
        exponent += inputlength - CPDecimalMaxDigits;
    }
    else if (inputlength === 0)
    {
        return CPDecimalMakeNaN();
    }
    if (exponent > CPDecimalMaxExponent || exponent < CPDecimalMinExponent)
        return CPDecimalMakeNaN();
    var m = [],
        i = 0;
    for (; i < (intpart ? intpart.length : 0); i++)
    {
        if (i >= CPDecimalMaxDigits)
            break;
        Array.prototype.push.call(m, parseInt(intpart.charAt(i)));
    }
    var j = 0;
    for (; j < (decpart ? decpart.length : 0); j++)
    {
        if (i + j >= CPDecimalMaxDigits)
            break;
        Array.prototype.push.call(m, parseInt(decpart.charAt(j)));
    }
    var dcm = {_exponent: exponent, _isNegative: isNegative, _isCompact: NO, _isNaN: NO, _mantissa: m};
    CPDecimalCompact(dcm);
    return dcm;
}
CPDecimalMakeWithParts = function(mantissa, exponent)
{
    var m = [],
        isNegative = NO;
    if (mantissa < 0)
    {
        isNegative = YES;
        mantissa = ABS(mantissa);
    }
    if (mantissa == 0)
        Array.prototype.push.call(m, 0);
    if (exponent > CPDecimalMaxExponent || exponent < CPDecimalMinExponent)
        return CPDecimalMakeNaN();
    while (mantissa > 0 && m.length < CPDecimalMaxDigits)
    {
        Array.prototype.unshift.call(m, parseInt(mantissa % 10));
        mantissa = FLOOR(mantissa / 10);
    }
    var dcm = {_exponent: exponent, _isNegative: isNegative, _isCompact: YES, _isNaN: NO, _mantissa: m};
    CPDecimalCompact(dcm);
    return dcm;
}
CPDecimalMakeZero = function()
{
    return CPDecimalMakeWithParts(0, 0);
}
CPDecimalMakeOne = function()
{
    return CPDecimalMakeWithParts(1, 0);
}
CPDecimalMakeNaN = function()
{
    var d = CPDecimalMakeWithParts(0, 0);
    d._isNaN = YES;
    return d;
}
_CPDecimalMakeMaximum = function()
{
    var s = "",
        i = 0;
    for (; i < CPDecimalMaxDigits; i++)
        s += "9";
    s += "e" + CPDecimalMaxExponent;
    return CPDecimalMakeWithString(s);
}
_CPDecimalMakeMinimum = function()
{
    var s = "-",
        i = 0;
    for (; i < CPDecimalMaxDigits; i++)
        s += "9";
    s += "e" + CPDecimalMaxExponent;
    return CPDecimalMakeWithString(s);
}
CPDecimalIsZero = function(dcm)
{
    if (!dcm._isNaN)
    {
        for (var i = 0; i < dcm._mantissa.length; i++)
            if (dcm._mantissa[i] !== 0)
                return NO;
        return YES;
    }
    return NO;
}
CPDecimalIsOne = function(dcm)
{
    CPDecimalCompact(dcm);
    if (!dcm._isNaN)
    {
        if (dcm._mantissa && dcm._mantissa.length == 1 && dcm._mantissa[0] == 1)
            return YES;
    }
    return NO;
}
_CPDecimalSet = function(t, s)
{
    t._exponent = s._exponent;
    t._isNegative = s._isNegative;
    t._isCompact = s._isCompact;
    t._isNaN = s._isNaN;
    t._mantissa = Array.prototype.slice.call(s._mantissa, 0);
}
_CPDecimalSetZero = function(result)
{
    result._mantissa = [0];
    result._exponent = 0;
    result._isNegative = NO;
    result._isCompact = YES;
    result._isNaN = NO;
}
_CPDecimalSetOne = function(result)
{
    result._mantissa = [1];
    result._exponent = 0;
    result._isNegative = NO;
    result._isCompact = YES;
    result._isNaN = NO;
}
CPDecimalIsNotANumber = function(dcm)
{
    return dcm._isNaN ? YES : NO;
}
CPDecimalCopy = function(dcm)
{
    return {_exponent: dcm._exponent, _isNegative: dcm._isNegative, _isCompact: dcm._isCompact, _isNaN: dcm._isNaN, _mantissa: Array.prototype.slice.call(dcm._mantissa, 0)};
}
CPDecimalCompare = function(leftOperand, rightOperand)
{
    if (leftOperand._isNaN && rightOperand._isNaN)
        return CPOrderedSame;
    if (leftOperand._isNegative != rightOperand._isNegative)
    {
        if (rightOperand._isNegative)
            return CPOrderedDescending;
        else
            return CPOrderedAscending;
    }
    var leftIsZero = leftOperand._mantissa.length == 1 && leftOperand._mantissa[0] == 0,
        rightIsZero = rightOperand._mantissa.length == 1 && rightOperand._mantissa[0] == 0,
        s1 = leftOperand._exponent + leftOperand._mantissa.length,
        s2 = rightOperand._exponent + rightOperand._mantissa.length;
    if (leftIsZero && rightIsZero)
        return CPOrderedSame;
    if (leftIsZero || s1 < s2 && !rightIsZero)
    {
        if (rightOperand._isNegative)
            return CPOrderedDescending;
        else
            return CPOrderedAscending;
    }
    if (rightIsZero || s1 > s2 && !leftIsZero)
    {
        if (leftOperand._isNegative)
            return CPOrderedAscending;
        else
            return CPOrderedDescending;
    }
    var l = MIN(leftOperand._mantissa.length, rightOperand._mantissa.length),
        i = 0;
    for (; i < l; i++)
    {
        var d = rightOperand._mantissa[i] - leftOperand._mantissa[i];
        if (d > 0)
        {
            if (rightOperand._isNegative)
                return CPOrderedDescending;
            else
                return CPOrderedAscending;
        }
        if (d < 0)
        {
            if (rightOperand._isNegative)
                return CPOrderedAscending;
            else
                return CPOrderedDescending;
        }
    }
    if (leftOperand._mantissa.length > rightOperand._mantissa.length)
    {
        if (rightOperand._isNegative)
            return CPOrderedAscending;
        else
            return CPOrderedDescending;
    }
    if (leftOperand._mantissa.length < rightOperand._mantissa.length)
    {
        if (rightOperand._isNegative)
            return CPOrderedDescending;
        else
            return CPOrderedAscending;
    }
    return CPOrderedSame;
}
_SimpleAdd = function(result, leftOperand, rightOperand, roundingMode, longMode)
{
    var factor = longMode ? 2 : 1;
    _CPDecimalSet(result, leftOperand);
    var j = leftOperand._mantissa.length - rightOperand._mantissa.length,
        l = rightOperand._mantissa.length,
        i = l - 1,
        carry = 0,
        error = CPCalculationNoError;
    for (; i >= 0; i--)
    {
        var d = rightOperand._mantissa[i] + result._mantissa[i + j] + carry;
        if (d >= 10)
        {
            d = d % 10;
            carry = 1;
        }
        else
            carry = 0;
        result._mantissa[i + j] = d;
    }
    if (carry)
    {
        for (i = j - 1; i >= 0; i--)
        {
            if (result._mantissa[i] != 9)
            {
                result._mantissa[i]++;
                carry = 0;
                break;
            }
            result._mantissa[i] = 0;
        }
        if (carry)
        {
            Array.prototype.splice.call(result._mantissa, 0, 0, 1);
            if (CPDecimalMaxDigits * factor == leftOperand._mantissa.length)
            {
                var scale = -result._exponent - 1;
                CPDecimalRound(result, result, scale, roundingMode);
            }
            if (CPDecimalMaxExponent < result._exponent)
            {
                result._isNaN = YES;
                error = CPCalculationOverflow;
                result._exponent = CPDecimalMaxExponent;
            }
        }
    }
    return error;
}
CPDecimalAdd = function(result, leftOperand, rightOperand, roundingMode, longMode)
{
    if (leftOperand._isNaN || rightOperand._isNaN)
    {
        result._isNaN = YES;
        return CPCalculationNoError;
    }
    if (CPDecimalIsZero(leftOperand))
    {
        _CPDecimalSet(result, rightOperand);
        return CPCalculationNoError;
    }
    if (CPDecimalIsZero(rightOperand))
    {
        _CPDecimalSet(result, leftOperand);
        return CPCalculationNoError;
    }
    var n1 = CPDecimalCopy(leftOperand),
        n2 = CPDecimalCopy(rightOperand);
    if (leftOperand._isNegative != rightOperand._isNegative)
    {
        if (leftOperand._isNegative)
        {
            n1._isNegative = NO;
            return CPDecimalSubtract(result, rightOperand, n1, roundingMode);
        }
        else
        {
            n2._isNegative = NO;
            return CPDecimalSubtract(result, leftOperand, n2, roundingMode);
        }
    }
    var normerror = CPDecimalNormalize(n1, n2, roundingMode, longMode);
    var comp = 0,
        ll = n1._mantissa.length,
        lr = n2._mantissa.length;
    if (ll == lr)
        comp = CPOrderedSame;
    else if (ll > lr)
        comp = CPOrderedDescending;
    else
        comp = CPOrderedAscending;
    if (leftOperand._isNegative)
    {
        n1._isNegative = NO;
        n2._isNegative = NO;
        if (comp == CPOrderedDescending)
        {
            adderror = _SimpleAdd(result, n1, n2, roundingMode, longMode);
        }
        else
        {
            adderror = _SimpleAdd(result, n2, n1, roundingMode, longMode);
        }
        result._isNegative = YES;
        if (CPCalculationUnderflow == adderror)
            adderror = CPCalculationOverflow;
        else if (CPCalculationUnderflow == adderror)
            adderror = CPCalculationUnderflow;
    }
    else
    {
        if (comp == CPOrderedAscending)
        {
            adderror = _SimpleAdd(result, n2, n1, roundingMode, longMode);
        }
        else
        {
            adderror = _SimpleAdd(result, n1, n2, roundingMode, longMode);
        }
    }
    CPDecimalCompact(result);
    if (adderror == CPCalculationNoError)
        return normerror;
    else
        return adderror;
}
_SimpleSubtract = function(result, leftOperand, rightOperand, roundingMode)
{
    var error = CPCalculationNoError,
        borrow = 0,
        l = rightOperand._mantissa.length,
        j = leftOperand._mantissa.length - l,
        i = l - 1;
    _CPDecimalSet(result, leftOperand);
    for (; i >= 0; i--)
    {
        var d = result._mantissa[i + j] - rightOperand._mantissa[i] - borrow;
        if (d < 0)
        {
            d = d + 10;
            borrow = 1;
        }
        else
            borrow = 0;
        result._mantissa[i + j] = d;
    }
    if (borrow)
    {
        for (i = j - 1; i >= 0; i--)
        {
            if (result._mantissa[i] != 0)
            {
                result._mantissa[i]--;
                break;
            }
            result._mantissa[i] = 9;
        }
        if (-1 == i)
        {
            error = nil;
        }
    }
    return error;
}
CPDecimalSubtract = function(result, leftOperand, rightOperand, roundingMode)
{
    if (leftOperand._isNaN || rightOperand._isNaN)
    {
        result._isNaN = YES;
        return CPCalculationNoError;
    }
    if (CPDecimalIsZero(leftOperand))
    {
        _CPDecimalSet(result, rightOperand);
        result._isNegative = !result._isNegative;
        return CPCalculationNoError;
    }
    if (CPDecimalIsZero(rightOperand))
    {
        _CPDecimalSet(result, leftOperand);
        return CPCalculationNoError;
    }
    var n1 = CPDecimalCopy(leftOperand),
        n2 = CPDecimalCopy(rightOperand),
        error1 = CPCalculationNoError;
    if (leftOperand._isNegative != rightOperand._isNegative)
    {
        if (leftOperand._isNegative)
        {
            n1._isNegative = NO;
            error1 = CPDecimalAdd(result, n1, rightOperand, roundingMode);
            result._isNegative = YES;
            if (error1 == CPCalculationUnderflow)
                error1 = CPCalculationOverflow;
            else if (error1 == CPCalculationOverflow)
                error1 = CPCalculationUnderflow;
            return error1;
        }
        else
        {
            n2._isNegative = NO;
            return CPDecimalAdd(result, leftOperand, n2, roundingMode);
        }
    }
    var error = CPDecimalNormalize(n1, n2, roundingMode),
        comp = CPDecimalCompare(leftOperand, rightOperand);
    if (comp == CPOrderedSame)
    {
        _CPDecimalSetZero(result);
        return CPCalculationNoError;
    }
    if (leftOperand._isNegative)
    {
        n1._isNegative = NO;
        n2._isNegative = NO;
        if (comp == CPOrderedAscending)
        {
            error1 = _SimpleSubtract(result, n1, n2, roundingMode);
            result._isNegative = YES;
        }
        else
        {
            error1 = _SimpleSubtract(result, n2, n1, roundingMode);
        }
    }
    else
    {
        if (comp == CPOrderedAscending)
        {
            error1 = _SimpleSubtract(result, n2, n1, roundingMode);
            result._isNegative = YES;
        }
        else
        {
            error1 = _SimpleSubtract(result, n1, n2, roundingMode);
        }
    }
    CPDecimalCompact(result);
    if (error1 == CPCalculationNoError)
        return error;
    else
        return error1;
}
_SimpleDivide = function(result, leftOperand, rightOperand, roundingMode)
{
    var error = CPCalculationNoError,
        n1 = CPDecimalMakeZero(),
        k = 0,
        firsttime = YES,
        stopk = CPDecimalMaxDigits + 1,
        used = 0;
    _CPDecimalSetZero(result);
    n1._mantissa = [];
    while (used < leftOperand._mantissa.length || n1._mantissa.length && !(n1._mantissa.length == 1 && n1._mantissa[0] == 0))
    {
        while (CPOrderedAscending == CPDecimalCompare(n1, rightOperand))
        {
            if (stopk == k)
                break;
            if (n1._exponent)
            {
                Array.prototype.push.call(n1._mantissa, 0);
                n1._exponent--;
                n1._isCompact = NO;
            }
            else
            {
                if (used < leftOperand._mantissa.length)
                {
                    if (n1._mantissa.length || leftOperand._mantissa[used])
                    {
                        Array.prototype.push.call(n1._mantissa, leftOperand._mantissa[used]);
                        n1._isCompact = NO;
                    }
                    used++;
                }
                else
                {
                    if (result._exponent == CPDecimalMinExponent)
                    {
                        k = stopk;
                        break;
                    }
                    Array.prototype.push.call(n1._mantissa, 0);
                    result._exponent--;
                }
                if (!firsttime)
                {
                    k++;
                    result._mantissa[k - 1] = 0;
                }
            }
        }
        if (stopk == k)
        {
            error = CPCalculationLossOfPrecision;
            break;
        }
        if (firsttime)
        {
            firsttime = NO;
            k++;
        }
        error1 = CPDecimalSubtract(n1, n1, rightOperand, roundingMode);
        if (error1 != CPCalculationNoError)
            error = error1;
        result._mantissa[k - 1]++;
    }
    return error;
}
CPDecimalDivide = function(result, leftOperand, rightOperand, roundingMode)
{
    var error = CPCalculationNoError,
        exp = leftOperand._exponent - rightOperand._exponent,
        neg = leftOperand._isNegative != rightOperand._isNegative;
    if (leftOperand._isNaN || rightOperand._isNaN)
    {
        result._isNaN = YES;
        return CPCalculationNoError;
    }
    if (CPDecimalIsZero(rightOperand))
    {
        result._isNaN = YES;
        return CPCalculationDivideByZero;
    }
    if (CPDecimalIsZero(leftOperand))
    {
        _CPDecimalSetZero(result);
        return CPCalculationNoError;
    }
    var n1 = CPDecimalCopy(leftOperand),
        n2 = CPDecimalCopy(rightOperand);
    n1._exponent = 0;
    n1._isNegative = NO;
    n2._exponent = 0;
    n2._isNegative = NO;
    error = _SimpleDivide(result, n1, n2, roundingMode);
    CPDecimalCompact(result);
    if (result._exponent + exp > CPDecimalMaxExponent)
    {
        result._isNaN = YES;
        if (neg)
            return CPCalculationUnderflow;
        else
            return CPCalculationOverflow;
    }
    else if (result._exponent + exp < CPDecimalMinExponent)
    {
        CPDecimalRound(result, result, exp + CPDecimalMaxExponent + 1, roundingMode);
        error = CPCalculationLossOfPrecision;
        if (result._exponent + exp < CPDecimalMinExponent)
        {
            CPDecimalSetZero(result);
            return error;
        }
    }
    result._exponent += exp;
    result._isNegative = neg;
    return error;
}
_SimpleMultiply = function(result, leftOperand, rightOperand, roundingMode, powerMode)
{
    var error = CPCalculationNoError,
        carry = 0,
        exp = 0,
        n = CPDecimalMakeZero();
    _CPDecimalSetZero(result);
    for (var i = 0; i < rightOperand._mantissa.length; i++)
    {
        _CPDecimalSetZero(n);
        n._exponent = rightOperand._mantissa.length - i - 1;
        carry = 0;
        d = rightOperand._mantissa[i];
        if (d == 0)
            continue;
        for (var j = leftOperand._mantissa.length - 1; j >= 0; j--)
        {
            e = leftOperand._mantissa[j] * d + carry;
            if (e >= 10)
            {
                carry = FLOOR(e / 10);
                e = e % 10;
            }
            else
                carry = 0;
            n._mantissa[j + 1] = e;
        }
        n._mantissa[0] = carry;
        CPDecimalCompact(n);
        error1 = CPDecimalAdd(result, result, n, roundingMode, YES);
        if (error1 != CPCalculationNoError)
            error = error1;
    }
    if (result._exponent + exp > CPDecimalMaxExponent)
    {
        result._isNaN = YES;
        return CPCalculationOverflow;
    }
    result._exponent += exp;
    if (result._mantissa.length > CPDecimalMaxDigits && !powerMode)
    {
        result._isCompact = NO;
        var scale = CPDecimalMaxDigits - (result._mantissa.length + result._exponent);
        CPDecimalRound(result, result, scale, roundingMode);
        error = CPCalculationLossOfPrecision;
    }
    return error;
}
CPDecimalMultiply = function(result, leftOperand, rightOperand, roundingMode, powerMode)
{
    var error = CPCalculationNoError,
        exp = leftOperand._exponent + rightOperand._exponent,
        neg = leftOperand._isNegative != rightOperand._isNegative;
    if (leftOperand._isNaN || rightOperand._isNaN)
    {
        result._isNaN = YES;
        return CPCalculationNoError;
    }
    if (CPDecimalIsZero(rightOperand) || CPDecimalIsZero(leftOperand))
    {
        _CPDecimalSetZero(result);
        return CPCalculationNoError;
    }
    if (exp > CPDecimalMaxExponent)
    {
        result._isNaN = YES;
        if (neg)
            return CPCalculationUnderflow;
        else
            return CPCalculationOverflow;
    }
    var n1 = CPDecimalCopy(leftOperand),
        n2 = CPDecimalCopy(rightOperand);
    n1._exponent = 0;
    n2._exponent = 0;
    n1._isNegative = NO;
    n2._isNegative = NO;
    var comp = 0,
        ll = n1._mantissa.length,
        lr = n2._mantissa.length;
    if (ll == lr)
        comp = CPOrderedSame;
    else if (ll > lr)
        comp = CPOrderedDescending;
    else
        comp = CPOrderedAscending;
    if (comp == CPOrderedDescending)
    {
        error = _SimpleMultiply(result, n1, n2, roundingMode, powerMode);
    }
    else
    {
        error = _SimpleMultiply(result, n2, n1, roundingMode, powerMode);
    }
    CPDecimalCompact(result);
    if (result._exponent + exp > CPDecimalMaxExponent)
    {
        result._isNaN = YES;
        if (neg)
            return CPCalculationUnderflow;
        else
            return CPCalculationOverflow;
    }
    else if (result._exponent + exp < CPDecimalMinExponent)
    {
        CPDecimalRound(result, result, exp + CPDecimalMaxExponent + 1, roundingMode);
        error = CPCalculationLossOfPrecision;
        if (result._exponent + exp < CPDecimalMinExponent)
        {
            _CPDecimalSetZero(result);
            return error;
        }
    }
    result._exponent += exp;
    result._isNegative = neg;
    return error;
}
CPDecimalMultiplyByPowerOf10 = function(result, dcm, power, roundingMode)
{
    _CPDecimalSet(result, dcm);
    var p = result._exponent + power;
    if (p > CPDecimalMaxExponent)
    {
        result._isNaN = YES;
        return CPCalculationOverflow;
    }
    if (p < CPDecimalMinExponent)
    {
        result._isNaN = YES;
        return CPCalculationUnderflow;
    }
    result._exponent += power;
    return CPCalculationNoError;
}
CPDecimalPower = function(result, dcm, power, roundingMode)
{
    var error = CPCalculationNoError,
        neg = dcm._isNegative && power % 2,
        n1 = CPDecimalCopy(dcm);
    n1._isNegative = NO;
    _CPDecimalSetOne(result);
    var e = power;
    while (e)
    {
        if (e & 1)
        {
            error = CPDecimalMultiply(result, result, n1, roundingMode);
        }
        error = CPDecimalMultiply(n1, n1, n1, roundingMode);
        e >>= 1;
        if (error > CPCalculationLossOfPrecision)
            break;
    }
    result._isNegative = neg;
    CPDecimalCompact(result);
    return error;
}
CPDecimalNormalize = function(dcm1, dcm2, roundingMode, longMode)
{
    var factor = longMode ? 2 : 1;
    if (dcm1._isNaN || dcm2._isNaN)
        return CPCalculationNoError;
    if (!dcm1._isCompact)
        CPDecimalCompact(dcm1);
    if (!dcm2._isCompact)
        CPDecimalCompact(dcm2);
    if (dcm1._exponent == dcm2._exponent)
        return CPCalculationNoError;
    var e1 = dcm1._exponent,
        e2 = dcm2._exponent;
    var l2 = dcm2._mantissa.length,
        l1 = dcm1._mantissa.length,
        l = 0;
    var e = 0;
    if (e2 > e1 && e1 >= 0 && e2 >= 0)
        e = e2 - e1;
    else if (e2 > e1 && e1 < 0 && e2 >= 0)
        e = e2 - e1;
    else if (e2 > e1 && e1 < 0 && e2 < 0)
        e = e2 - e1;
    else if (e2 < e1 && e1 >= 0 && e2 >= 0)
        e = e1 - e2;
    else if (e2 < e1 && e1 >= 0 && e2 < 0)
        e = e1 - e2;
    else if (e2 < e1 && e1 < 0 && e2 < 0)
        e = e1 - e2;
    if (e2 > e1)
        l = MIN(CPDecimalMaxDigits * factor - l2, e);
    else
        l = MIN(CPDecimalMaxDigits * factor - l1, e);
    for (var i = 0; i < l; i++)
    {
        if (e2 > e1)
            Array.prototype.push.call(dcm2._mantissa, 0);
        else
            Array.prototype.push.call(dcm1._mantissa, 0);
    }
    if (e2 > e1)
    {
        dcm2._exponent -= l;
        dcm2._isCompact = NO;
    }
    else
    {
        dcm1._exponent -= l;
        dcm1._isCompact = NO;
    }
    if (l != ABS(e2 - e1))
    {
        if (e2 > e1)
        {
            CPDecimalRound(dcm1, dcm1, -dcm2._exponent, roundingMode);
            l1 = CPDecimalIsZero(dcm1);
        }
        else
        {
            CPDecimalRound(dcm2, dcm2, -dcm1._exponent, roundingMode);
            l2 = CPDecimalIsZero(dcm2);
        }
        if (dcm1._exponent != dcm2._exponent && (!l1 || !l2))
        {
            if (e2 > e1)
            {
                l1 = dcm1._mantissa.length;
                l = MIN(CPDecimalMaxDigits * factor - l1, ABS(dcm1._exponent - dcm2._exponent));
                for (var i = 0; i < l; i++)
                {
                    dcm1._mantissa[i + l1] = 0;
                }
                dcm1._isCompact = NO;
                dcm1._exponent = dcm2._exponent;
            }
            else
            {
                l2 = dcm2._mantissa.length;
                l = MIN(CPDecimalMaxDigits * factor - l2, ABS(dcm2._exponent - dcm1._exponent));
                for (var i = 0; i < l; i++)
                {
                    dcm2._mantissa[i + l2] = 0;
                }
                dcm2._exponent = dcm1._exponent;
                dcm2._isCompact = NO;
            }
        }
        return CPCalculationLossOfPrecision;
    }
    return CPCalculationNoError;
}
CPDecimalRound = function(result, dcm, scale, roundingMode)
{
    _CPDecimalSet(result, dcm);
    if (dcm._isNaN)
        return;
    if (!dcm._isCompact)
        CPDecimalCompact(dcm);
    if (scale == CPDecimalNoScale)
        return;
    var mc = result._mantissa.length,
        l = mc + scale + result._exponent;
    if (mc <= l)
        return;
    else if (l <= 0)
    {
        _CPDecimalSetZero(result);
        return;
    }
    else
    {
        var c = 0,
            n = 0,
            up = 0;
        result._exponent += mc - l;
        switch(roundingMode) {
            case CPRoundDown:
                up = result._isNegative;
                break;
            case CPRoundUp:
                up = !result._isNegative;
                break;
            case CPRoundPlain:
                n = result._mantissa[l];
                up = n >= 5;
                break;
            case _CPRoundHalfDown:
                n = result._mantissa[l];
                up = n > 5;
                break;
            case CPRoundBankers:
                n = result._mantissa[l];
                if (n > 5)
                    up = YES;
                else if (n < 5)
                    up = NO;
                else
                {
                    if (l == 0)
                        c = 0;
                    else
                        c = result._mantissa[l - 1];
                    up = c % 2 != 0;
                }
                break;
default:
                up = NO;
                break;
        }
        result._mantissa = Array.prototype.slice.call(result._mantissa, 0, l);
        if (up)
        {
            for (var i = l - 1; i >= 0; i--)
            {
                if (result._mantissa[i] != 9)
                {
                    result._mantissa[i]++;
                    break;
                }
                result._mantissa[i] = 0;
            }
            if (i == -1)
            {
                result._mantissa[0] = 1;
                if (result._exponent >= CPDecimalMaxExponent)
                {
                    Array.prototype.push.call(result._mantissa, 0);
                }
                else
                    result._exponent++;
            }
        }
    }
    CPDecimalCompact(result);
}
CPDecimalCompact = function(dcm)
{
    if (!dcm || dcm._mantissa.length == 0 || CPDecimalIsNotANumber(dcm))
        return;
    if (CPDecimalIsZero(dcm))
    {
        _CPDecimalSetZero(dcm);
        return;
    }
    while (dcm._mantissa[0] === 0)
        Array.prototype.shift.call(dcm._mantissa);
    while (dcm._mantissa[dcm._mantissa.length - 1] === 0)
    {
        Array.prototype.pop.call(dcm._mantissa);
        dcm._exponent++;
        if (dcm._exponent + 1 > CPDecimalMaxExponent)
        {
            break;
        }
    }
    dcm._isCompact = YES;
}
CPDecimalString = function(dcm, locale)
{
    if (dcm._isNaN)
        return "NaN";
    var string = "",
        i = 0;
    if (dcm._isNegative)
        string += "-";
    var k = dcm._mantissa.length,
        l = (dcm._exponent < 0 ? dcm._exponent : 0) + k;
    if (l < 0)
    {
        string += "0.";
        for (i = 0; i < ABS(l); i++)
        {
            string += "0";
        }
        l = k;
    }
    else if (l == 0)
    {
        string += "0";
    }
    for (i = 0; i < l; i++)
    {
        string += dcm._mantissa[i];
    }
    if (l < k)
    {
        string += ".";
        for (i = l; i < k; i++)
        {
            string += dcm._mantissa[i];
        }
    }
    for (i = 0; i < dcm._exponent; i++)
    {
        string += "0";
    }
    return string;
}
p;13;CPOperation.jt;23363;@STATIC;1.0;i;9;CPArray.ji;10;CPObject.jS;13780;;9528;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPObject.j", YES);CPOperationQueuePriorityVeryLow = -8;
CPOperationQueuePriorityLow = -4;
CPOperationQueuePriorityNormal = 0;
CPOperationQueuePriorityHigh = 4;
CPOperationQueuePriorityVeryHigh = 8;

{var the_class = objj_allocateClassPair(CPObject, "CPOperation"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("operations", "CPArray"), new objj_ivar("_cancelled", "BOOL"), new objj_ivar("_executing", "BOOL"), new objj_ivar("_finished", "BOOL"), new objj_ivar("_ready", "BOOL"), new objj_ivar("_queuePriority", "int"), new objj_ivar("_completionFunction", "JSObject"), new objj_ivar("_dependencies", "CPArray")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("main"), function $CPOperation__main(self, _cmd)
{
}

,["void"]), new objj_method(sel_getUid("init"), function $CPOperation__init(self, _cmd)
{
    self = (objj_getClass("CPOperation").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._cancelled = NO;
        self._executing = NO;
        self._finished = NO;
        self._ready = YES;
        self._dependencies = ((___r1 = (CPArray.isa.method_msgSend["alloc"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        self._queuePriority = CPOperationQueuePriorityNormal;
    }
    return self;
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("start"), function $CPOperation__start(self, _cmd)
{
    if (!self._cancelled)
    {
        (self.isa.method_msgSend["willChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:"], "willChangeValueForKey:"), "isExecuting");
        self._executing = YES;
        (self.isa.method_msgSend["didChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:"], "didChangeValueForKey:"), "isExecuting");
        (self.isa.method_msgSend["main"] || _objj_forward)(self, (self.isa.method_dtable["main"], "main"));
        if (self._completionFunction)
        {
            self._completionFunction();
        }
        (self.isa.method_msgSend["willChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:"], "willChangeValueForKey:"), "isExecuting");
        self._executing = NO;
        (self.isa.method_msgSend["didChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:"], "didChangeValueForKey:"), "isExecuting");
    }
    (self.isa.method_msgSend["willChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:"], "willChangeValueForKey:"), "isFinished");
    self._finished = YES;
    (self.isa.method_msgSend["didChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:"], "didChangeValueForKey:"), "isFinished");
}

,["void"]), new objj_method(sel_getUid("isCancelled"), function $CPOperation__isCancelled(self, _cmd)
{
    return self._cancelled;
}

,["BOOL"]), new objj_method(sel_getUid("isExecuting"), function $CPOperation__isExecuting(self, _cmd)
{
    return self._executing;
}

,["BOOL"]), new objj_method(sel_getUid("isFinished"), function $CPOperation__isFinished(self, _cmd)
{
    return self._finished;
}

,["BOOL"]), new objj_method(sel_getUid("isConcurrent"), function $CPOperation__isConcurrent(self, _cmd)
{
    return NO;
}

,["BOOL"]), new objj_method(sel_getUid("isReady"), function $CPOperation__isReady(self, _cmd)
{
    return self._ready;
}

,["BOOL"]), new objj_method(sel_getUid("completionFunction"), function $CPOperation__completionFunction(self, _cmd)
{
    return self._completionFunction;
}

,["JSObject"]), new objj_method(sel_getUid("setCompletionFunction:"), function $CPOperation__setCompletionFunction_(self, _cmd, aJavaScriptFunction)
{
    self._completionFunction = aJavaScriptFunction;
}

,["void","JSObject"]), new objj_method(sel_getUid("addDependency:"), function $CPOperation__addDependency_(self, _cmd, anOperation)
{
    (self.isa.method_msgSend["willChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:"], "willChangeValueForKey:"), "dependencies");
    (anOperation == null ? null : (anOperation.isa.method_msgSend["addObserver:forKeyPath:options:context:"] || _objj_forward)(anOperation, (anOperation.isa.method_dtable["addObserver:forKeyPath:options:context:"], anOperation.isa.method_dtable["addObserver:forKeyPath:options:context:"], anOperation.isa.method_dtable["addObserver:forKeyPath:options:context:"], anOperation.isa.method_dtable["addObserver:forKeyPath:options:context:"], "addObserver:forKeyPath:options:context:"), self, "isFinished", CPKeyValueObservingOptionNew, NULL));
    ((___r1 = self._dependencies), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, (self._dependencies.isa.method_dtable["addObject:"], "addObject:"), anOperation));
    (self.isa.method_msgSend["didChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:"], "didChangeValueForKey:"), "dependencies");
    (self.isa.method_msgSend["_updateIsReadyState"] || _objj_forward)(self, (self.isa.method_dtable["_updateIsReadyState"], "_updateIsReadyState"));
    var ___r1;
}

,["void","CPOperation"]), new objj_method(sel_getUid("removeDependency:"), function $CPOperation__removeDependency_(self, _cmd, anOperation)
{
    (self.isa.method_msgSend["willChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:"], "willChangeValueForKey:"), "dependencies");
    ((___r1 = self._dependencies), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObject:"] || _objj_forward)(___r1, (self._dependencies.isa.method_dtable["removeObject:"], "removeObject:"), anOperation));
    (anOperation == null ? null : (anOperation.isa.method_msgSend["removeObserver:forKeyPath:"] || _objj_forward)(anOperation, (anOperation.isa.method_dtable["removeObserver:forKeyPath:"], anOperation.isa.method_dtable["removeObserver:forKeyPath:"], "removeObserver:forKeyPath:"), self, "isFinished"));
    (self.isa.method_msgSend["didChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:"], "didChangeValueForKey:"), "dependencies");
    (self.isa.method_msgSend["_updateIsReadyState"] || _objj_forward)(self, (self.isa.method_dtable["_updateIsReadyState"], "_updateIsReadyState"));
    var ___r1;
}

,["void","CPOperation"]), new objj_method(sel_getUid("dependencies"), function $CPOperation__dependencies(self, _cmd)
{
    return self._dependencies;
}

,["CPArray"]), new objj_method(sel_getUid("waitUntilFinished"), function $CPOperation__waitUntilFinished(self, _cmd)
{
}

,["void"]), new objj_method(sel_getUid("cancel"), function $CPOperation__cancel(self, _cmd)
{
    (self.isa.method_msgSend["willChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:"], "willChangeValueForKey:"), "isCancelled");
    self._cancelled = YES;
    (self.isa.method_msgSend["didChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:"], "didChangeValueForKey:"), "isCancelled");
}

,["void"]), new objj_method(sel_getUid("setQueuePriority:"), function $CPOperation__setQueuePriority_(self, _cmd, priority)
{
    self._queuePriority = priority;
}

,["void","int"]), new objj_method(sel_getUid("queuePriority"), function $CPOperation__queuePriority(self, _cmd)
{
    return self._queuePriority;
}

,["int"]), new objj_method(sel_getUid("observeValueForKeyPath:ofObject:change:context:"), function $CPOperation__observeValueForKeyPath_ofObject_change_context_(self, _cmd, keyPath, object, change, context)
{
    if (keyPath == "isFinished")
    {
        (self.isa.method_msgSend["_updateIsReadyState"] || _objj_forward)(self, (self.isa.method_dtable["_updateIsReadyState"], "_updateIsReadyState"));
    }
}

,["void","CPString","id","CPDictionary","void"]), new objj_method(sel_getUid("_updateIsReadyState"), function $CPOperation___updateIsReadyState(self, _cmd)
{
    var newReady = YES;
    if (self._dependencies && ((___r1 = self._dependencies), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._dependencies.isa.method_dtable["count"], "count"))) > 0)
    {
        var i = 0;
        for (i = 0; i < ((___r1 = self._dependencies), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._dependencies.isa.method_dtable["count"], "count"))); i++)
        {
            if (!((___r1 = ((___r2 = self._dependencies), ___r2 == null ? null : (___r2.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r2, (self._dependencies.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i))), ___r1 == null ? null : (___r1.isa.method_msgSend["isFinished"] || _objj_forward)(___r1, "isFinished")))
            {
                newReady = NO;
            }
        }
    }
    if (newReady != self._ready)
    {
        (self.isa.method_msgSend["willChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["willChangeValueForKey:"], "willChangeValueForKey:"), "isReady");
        self._ready = newReady;
        (self.isa.method_msgSend["didChangeValueForKey:"] || _objj_forward)(self, (self.isa.method_dtable["didChangeValueForKey:"], "didChangeValueForKey:"), "isReady");
    }
    var ___r1, ___r2;
}

,["void"])]);
}
p;20;CPAttributedString.jt;99480;@STATIC;1.0;i;9;CPArray.ji;14;CPDictionary.ji;13;CPException.ji;10;CPObject.ji;9;CPRange.ji;10;CPString.jS;63368;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQQXR0cmlidXRlZFN0cmluZy5qIl0sIm5hbWVzIjpbInNlbGYiXSwibWFwcGluZ3MiOiI7O0FBc0JBLGtCLGlCQUNBLGtCLHNCQUNBLGtCLHFCQUNBLGtCLGtCQUNBLGtCLGlCQUNBLGtCLGtCQWtCQTtBQUFBO0FBQUEsMkIsMkJBQUEsb0MsRUFBQSx5Qzs2QkFXQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLENBQUNBLElBQUQsb0VBQUNBLElBQUQsR0FBTSxvREFBTixFQUF5QixvREFBekIsaUNBQXFCLEVBQXJCLEVBQW9DLEdBQXBDLEM7QUFEWCxDOztVQVNBLDRCLDZFQUErQixPO0FBQy9CO0lBQ0ksTSxDQUFPLENBQUNBLElBQUQsb0VBQUNBLElBQUQsR0FBTSxvREFBTixFQUE2QixvREFBN0IsaUNBQXFCLE9BQXJCLEVBQXdDLEdBQXhDLEM7QUFEWCxDOztxQkFTQSw0QixpR0FBbUQsTztBQUNuRDtJQUNJLElBQUksTSxHQUFTLENBQUNBLElBQUQsb0VBQUNBLElBQUQsR0FBTSxvREFBTixFQUF5QixvREFBekIsaUNBQXFCLEVBQXJCLEVBQW9DLEdBQXBDLENBQWI7SUFFQSxDQUFDLE1BQUQsbUJBQUMsTUFBRCw4REFBQyxNQUFELEdBQVEsZ0RBQVIsMkJBQTRCLE9BQTVCO0lBRUEsTSxDQUFPLE07QUFMWCxDOzsrQkFnQkEsNEIsbUdBQStCLE8sRUFBaUMsVTtBQUNoRTtJQUNJQSxJLEdBQU8sQywrQ0FBQSxnQixJQUFBLGtDQUFQO0lBRUEsSUFBSUEsSUFBSjtJQUNBO1FBQ0ksSUFBSSxDQUFDLFVBQUw7WUFDSSxVLEdBQWEsSyxrTEFBYjtRQUVKLFksR0FBVSxFLENBQUEsQyxDQUFLLE9BQWY7UUFDQSxrQixHQUFnQixDQUFDLGMsQ0FBZSxXLENBQVksQyxFQUFHLGFBQVEsTSxHQUFTLFUsRUFBaEU7SUFMSixDO0lBUUEsTSxDQUFPQSxJOztBQVpYLEM7O29DQXFCQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLFk7QUFEWCxDOztnQkFTQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLENBQUNBLElBQUQsZ0RBQUNBLElBQUQsR0FBTSxnQ0FBTixZO0FBRFgsQzs7Z0JBU0EsNEI7QUFDQTtJQUNJLE0sQ0FBTyxhQUFRLE07QUFEbkIsQzs7Z0JBS0EsNEIsNkZBQTZDLE87QUFDN0M7SUFDSSxJQUFJLE8sQ0FBQSxDLENBQVUsQyxJQUFLLE8sQ0FBQSxDLENBQVUsYUFBUSxNLElBQVUsTyxDQUFBLEcsQ0FBWSxTQUEzRDtRQUNJLE0sQ0FBTyxVO0lBR1gsSUFBSSxZLE9BQWUsUSxDQUFTLEssRUFBTyxLO0lBQ25DO1FBR0ksSUFBSSxpQixDQUFrQixLLEVBQU8sTUFBTSxLLEtBQVcsQ0FBQyxLLElBQVMsQ0FBQyxVLENBQVcsTUFBTSxLLENBQTFFO1lBQ0ksTSxDQUFPLGE7UUFEWCxLQUVLLElBQUksVSxDQUFXLE1BQU0sSyxFQUFqQixFLENBQTJCLEtBQS9CO1lBQ0QsTSxDQUFPLG1CO1FBRE47WUFHRCxNLENBQU8sa0I7SUFSZixDQURBO0lBWUEsTSxDQUFPLFVBQUMsa0JBQUQsc0lBQWUsNEZBQWYsRUFBcUMsNEZBQXJDLEVBQXVELDRGQUF2RCxFQUFpRSw0RkFBakUsMkRBQTZCLE9BQTdCLEVBQW1ELEdBQW5ELEVBQStELENBQS9ELEVBQWlGLFlBQWpGLEU7O0FBakJYLEM7OzJCQXVDQSw0QixpSEFBOEMsTyxFQUF1QyxNO0FBQ3JGO0lBRUksSUFBSSxVLEdBQWEsQ0FBQ0EsSUFBRCxpRUFBQ0EsSUFBRCxHQUFNLGlEQUFOLDhCQUE2QixPQUE3QixDQUFqQjtJQUVBLElBQUksVSxDQUFBLEcsQ0FBZSxVQUFuQjtRQUNJLE0sQ0FBTyxLO0lBRVgsSUFBSSxhLEdBQWdCLG1CQUFjLFUsQ0FBbEM7SUFFQSxJQUFJLE1BQUo7SUFDQTtRQUNJLE9BQU8sUSxHQUFXLGNBQWMsS0FBZCxDQUFvQixRQUF0QztRQUNBLE9BQU8sTSxHQUFTLGNBQWMsS0FBZCxDQUFvQixNQUFwQztJQUZKLEM7SUFLQSxNLENBQU8sY0FBYyxVOztBQWZ6QixDOztrREF1Q0EsNEIsK0lBQThDLE8sRUFBOEMsTSxFQUF3QixVO0FBQ3BIO0lBQ0ksSUFBSSxrQixHQUFxQixDQUFDQSxJQUFELGlFQUFDQSxJQUFELEdBQU0saURBQU4sOEJBQTZCLE9BQTdCLENBQXpCO0lBRUEsSUFBSSxrQixDQUFBLEcsQ0FBdUIsVUFBM0I7UUFDSSxNLENBQU8sSztJQUVYLElBQUksQ0FBQyxNQUFMO1FBQ0ksTSxDQUFPLG1CQUFjLGtCLENBQWQsQ0FBa0MsVTtJQUU3QyxJQUFJLGMsQ0FBZSxtQkFBYyxrQixDQUFkLENBQWtDLEssRUFBTyxVLENBQTVEO0lBQ0E7UUFDSSxPQUFPLFEsR0FBVyxXQUFXLFFBQTdCO1FBQ0EsT0FBTyxNLEdBQVMsV0FBVyxNQUEzQjtRQUVBLE0sQ0FBTyxtQkFBYyxrQixDQUFkLENBQWtDLFU7SUFKN0MsQztJQVFBLElBQUksYyxHQUFpQixrQixDQUFBLEMsQ0FBcUIsQztRQUN0QyxZLEdBQWUsbUJBQWMsa0I7UUFDN0IsYyxHQUFpQixhQUFhLFVBRmxDO0lBSUEsT0FBTyxjLENBQUEsRSxDQUFrQixDO0lBQ3pCO1FBQ0ksSUFBSSxTLEdBQVksbUJBQWMsYyxDQUE5QjtRQUVBLElBQUksVSxDQUFXLFVBQVUsSyxFQUFyQixDLENBQThCLFdBQVcsUSxJQUFZLFVBQUMsVUFBVSxVQUFYLDZIQUEwQyxjQUExQyxFQUF6RDtRQUNBO1lBQ0ksWSxHQUFlLFNBQWY7WUFDQSxjLEVBQUE7UUFGSixDO1FBREE7WUFNSTtJQVRSLEM7SUFZQSxPQUFPLFEsR0FBVyxHLENBQUksYUFBYSxLQUFiLENBQW1CLFEsRUFBVSxXQUFXLFEsQ0FBOUQ7SUFHQSxZLEdBQWUsbUJBQWMsa0IsQ0FBN0I7SUFDQSxjLEdBQWlCLGtCLENBQUEsQyxDQUFxQixDQUF0QztJQUVBLE9BQU8sYyxDQUFBLEMsQ0FBaUIsbUJBQWMsTTtJQUN0QztRQUNJLElBQUksUyxHQUFZLG1CQUFjLGMsQ0FBOUI7UUFFQSxJQUFJLFVBQVUsS0FBVixDQUFnQixRLENBQWhCLEMsQ0FBMkIsVSxDQUFXLFUsS0FBZSxVQUFDLFVBQVUsVUFBWCw2SEFBMEMsY0FBMUMsRUFBekQ7UUFDQTtZQUNJLFksR0FBZSxTQUFmO1lBQ0EsYyxFQUFBO1FBRkosQztRQURBO1lBTUk7SUFUUixDO0lBWUEsT0FBTyxNLEdBQVMsRyxDQUFJLFUsQ0FBVyxhQUFhLEssR0FBUSxVLENBQVcsVSxHQUEvQyxDLENBQThELE9BQU8sUUFBckY7SUFFQSxNLENBQU8sYzs7QUF4RFgsQzs7NERBMkVBLDRCLGlIQUEwQixTLEVBQThCLEssRUFBcUMsTTtBQUM3RjtJQUNJLElBQUksQ0FBQyxTQUFMO0lBQ0E7UUFDSSxJQUFJLE1BQUo7UUFDQTtZQUNJLE9BQU8sUSxHQUFXLENBQWxCO1lBQ0EsT0FBTyxNLEdBQVMsYUFBUSxNQUF4QjtRQUZKLEM7UUFLQSxNLENBQU8sRztJQVBYLEM7SUFVQSxNLENBQU8sVUFBQyxDQUFDQSxJQUFELDJFQUFDQSxJQUFELEdBQU0sMkRBQU4sRUFBOEIsMkRBQTlCLHdDQUF3QixLQUF4QixFQUE2QyxNQUE3QyxDQUFELDZHQUFrRSxTQUFsRSxFOztBQVpYLEM7O21EQW9DQSw0QiwrSUFBMEIsUyxFQUE4QixPLEVBQThDLE0sRUFBd0IsVTtBQUM5SDtJQUNJLElBQUksa0IsR0FBcUIsQ0FBQ0EsSUFBRCxpRUFBQ0EsSUFBRCxHQUFNLGlEQUFOLDhCQUE2QixPQUE3QixDQUF6QjtJQUVBLElBQUksa0IsQ0FBQSxHLENBQXVCLFUsSUFBYyxDQUFDLFNBQTFDO1FBQ0ksTSxDQUFPLEc7SUFFWCxJQUFJLENBQUMsTUFBTDtRQUNJLE0sQ0FBTyxVQUFDLG1CQUFjLGtCLENBQWQsQ0FBa0MsVUFBbkMsK0dBQTJELFNBQTNELEU7SUFFWCxJQUFJLGMsQ0FBZSxtQkFBYyxrQixDQUFkLENBQWtDLEssRUFBTyxVLENBQTVEO0lBQ0E7UUFDSSxPQUFPLFEsR0FBVyxXQUFXLFFBQTdCO1FBQ0EsT0FBTyxNLEdBQVMsV0FBVyxNQUEzQjtRQUVBLE0sQ0FBTyxVQUFDLG1CQUFjLGtCLENBQWQsQ0FBa0MsVUFBbkMsK0dBQTJELFNBQTNELEU7SUFKWCxDO0lBUUEsSUFBSSxjLEdBQWlCLGtCLENBQUEsQyxDQUFxQixDO1FBQ3RDLFksR0FBZSxtQkFBYyxrQjtRQUM3QixtQixHQUFzQixVQUFDLGFBQWEsVUFBZCwrR0FBc0MsU0FBdEMsRUFGMUI7SUFJQSxPQUFPLGMsQ0FBQSxFLENBQWtCLEM7SUFDekI7UUFDSSxJQUFJLFMsR0FBWSxtQkFBYyxjLENBQTlCO1FBRUEsSUFBSSxVLENBQVcsVUFBVSxLLEVBQXJCLEMsQ0FBOEIsV0FBVyxRLElBQVksTyxDQUFRLG1CLEVBQXFCLFVBQUMsVUFBVSxVQUFYLCtHQUFtQyxTQUFuQyxFLENBQXRGO1FBQ0E7WUFDSSxZLEdBQWUsU0FBZjtZQUNBLGMsRUFBQTtRQUZKLEM7UUFEQTtZQU1JO0lBVFIsQztJQVlBLE9BQU8sUSxHQUFXLEcsQ0FBSSxhQUFhLEtBQWIsQ0FBbUIsUSxFQUFVLFdBQVcsUSxDQUE5RDtJQUdBLFksR0FBZSxtQkFBYyxrQixDQUE3QjtJQUNBLGMsR0FBaUIsa0IsQ0FBQSxDLENBQXFCLENBQXRDO0lBRUEsT0FBTyxjLENBQUEsQyxDQUFpQixtQkFBYyxNO0lBQ3RDO1FBQ0ksSUFBSSxTLEdBQVksbUJBQWMsYyxDQUE5QjtRQUVBLElBQUksVUFBVSxLQUFWLENBQWdCLFEsQ0FBaEIsQyxDQUEyQixVLENBQVcsVSxLQUFlLE8sQ0FBUSxtQixFQUFxQixVQUFDLFVBQVUsVUFBWCwrR0FBbUMsU0FBbkMsRSxDQUF0RjtRQUNBO1lBQ0ksWSxHQUFlLFNBQWY7WUFDQSxjLEVBQUE7UUFGSixDO1FBREE7WUFNSTtJQVRSLEM7SUFZQSxPQUFPLE0sR0FBUyxHLENBQUksVSxDQUFXLGFBQWEsSyxHQUFRLFUsQ0FBVyxVLEdBQS9DLEMsQ0FBOEQsT0FBTyxRQUFyRjtJQUVBLE0sQ0FBTyxtQjs7QUF4RFgsQzs7NkRBa0VBLDRCLG1HQUFzRCxPO0FBQ3REO0lBQ0ksSUFBSSxDQUFDLE9BQUw7UUFDSSxNLENBQU8sRTtJQUVYLElBQUksWSxDQUFBLEcsQ0FBWSxDQUFDLE9BQUQsbUJBQUMsT0FBRCxnREFBQyxPQUFELEdBQVMsbUNBQVQsYUFBaEI7UUFDSSxNLENBQU8sRTtJQUVYLElBQUksTyxHQUFVLFc7UUFDVixlLEdBQWtCLFc7UUFDbEIsWSxHQUFlLENBQUNBLElBQUQsMkVBQUNBLElBQUQsR0FBTSwyREFBTixFQUEwQiwyREFBMUIsd0NBQXdCLENBQXhCLEVBQXlDLE9BQXpDLEM7UUFDZixvQixHQUF1QixDQUFDLE9BQUQsbUJBQUMsT0FBRCwyRUFBQyxPQUFELEdBQVMsOERBQVQsRUFBNkIsOERBQTdCLHdDQUEyQixDQUEzQixFQUE0QyxlQUE1QyxFO1FBQ3ZCLE0sR0FBUyxhQUFRLE1BSnJCO0lBTUE7SUFDQTtRQUNJLEksQ0FBSSxtQixDQUFvQixPLEVBQVMsZSxFQUE3QixDQUE4QyxNLENBQTlDLEMsQ0FBdUQsQyxJQUN2RCxDQUFDLENBQUMsWUFBRCxtQkFBQyxZQUFELDhEQUFDLFlBQUQsR0FBYyxzREFBZCwyQkFBa0Msb0JBQWxDLEVBREw7UUFFQTtZQUNJLE0sQ0FBTyxFO1FBRFgsQztRQUZBLEtBS0ssSUFBSSxVLENBQVcsTyxFQUFYLEMsQ0FBc0IsVSxDQUFXLGUsQ0FBckM7WUFDRCxZLEdBQWUsQ0FBQ0EsSUFBRCwyRUFBQ0EsSUFBRCxHQUFNLDJEQUFOLEVBQTRDLDJEQUE1Qyx3Q0FBd0IsVSxDQUFXLE8sQ0FBbkMsRUFBMkQsT0FBM0QsQ0FBZjtRQURDO1lBR0Qsb0IsR0FBdUIsQ0FBQyxPQUFELG1CQUFDLE9BQUQsMkVBQUMsT0FBRCxHQUFTLDhEQUFULEVBQXVELDhEQUF2RCx3Q0FBMkIsVSxDQUFXLGUsQ0FBdEMsRUFBc0UsZUFBdEUsRUFBdkI7SUFUUixDO1dBVVMsVSxDQUFXLFksQ0FBYSxPLEVBQVMsZSxHQUFqQyxDLENBQXFELE07UUFFOUQsTSxDQUFPLEc7QUExQlgsQzs7aUNBb0NBLDRCLCtEQUFvQixRO0FBQ3BCO0lBQ0ksSUFBSSxRLENBQUEsRyxDQUFhQSxJQUFqQjtRQUNJLE0sQ0FBTyxHO0lBRVgsSUFBSSxDQUFDLFFBQUQsbUJBQUMsUUFBRCx3REFBQyxRQUFELEdBQVUsNENBQVYscUJBQXdCLENBQUNBLElBQUQsK0NBQUNBLElBQUQsR0FBTSwrQkFBTixXQUF4QixFQUFKO1FBQ0ksTSxDQUFPLENBQUNBLElBQUQsb0VBQUNBLElBQUQsR0FBTSxvREFBTixpQ0FBZ0MsUUFBaEMsQztJQUVYLE0sQ0FBTyxFO0FBUFgsQzs7aUJBa0JBLDRCLHlHQUE0RCxNO0FBQzVEO0lBQ0ksSUFBSSxDQUFDLE0sSUFBVSxVLENBQVcsTSxFQUFYLEMsQ0FBcUIsYUFBUSxNLElBQVUsT0FBTyxRLENBQVAsQyxDQUFrQixDQUF4RTtRQUNJLENBQUMsV0FBRCx1REFBQyxXQUFELEdBQWEsOENBQWIsRUFDWSw4Q0FEWixvQkFBbUIsZ0JBQW5CLEVBQ21CLHlELENBQUEsQyxFQUEyRCxNLEdBQU8saUIsQ0FBa0IsTSxJQUFRLEssQ0FEL0c7SUFHSixJQUFJLFMsR0FBWSxVQUFDLENBQUMsa0JBQUQsK0NBQUMsa0JBQUQsR0FBb0IsNkNBQXBCLFdBQUQsbUhBQTJDLGFBQVEsUyxDQUFVLE9BQU8sUSxFQUFVLFUsQ0FBVyxNLEVBQXpGLEU7UUFDWixVLEdBQWEsQ0FBQ0EsSUFBRCxpRUFBQ0EsSUFBRCxHQUFNLGlEQUFOLDhCQUE2QixPQUFPLFFBQXBDLENBRGpCO0lBR0EsSUFBSSxVLENBQUEsRyxDQUFlLFVBQW5CO1FBQ0ksc0IsQ0FBdUJBLEksRUFBTSxJLEVBQU0sT0FBTyxRLEVBQVUsYUFBUSxNLENBQTVEO0lBRUosSUFBSSxpQixHQUFvQixtQkFBYyxVO1FBQ2xDLFMsR0FBWSxVLENBQVcsTSxDQUQzQjtJQUdBLFVBQVUsYSxHQUFnQixDLENBQTFCO0lBRUEsT0FBTyxpQixJQUFxQixVLENBQVcsa0JBQWtCLEssRUFBN0IsQyxDQUFzQyxTO0lBQ2xFO1FBQ0ksSUFBSSxRLEdBQVcsYyxDQUFlLGlCLENBQTlCO1FBQ0EsU0FBUyxLQUFULENBQWUsUSxJQUFZLE9BQU8sUUFBbEM7UUFFQSxJQUFJLFNBQVMsS0FBVCxDQUFlLFEsQ0FBZixDLENBQTBCLENBQTlCO1FBQ0E7WUFDSSxTQUFTLEtBQVQsQ0FBZSxNLElBQVUsU0FBUyxLQUFULENBQWUsUUFBeEM7WUFDQSxTQUFTLEtBQVQsQ0FBZSxRLEdBQVcsQ0FBMUI7UUFGSixDO1FBS0EsVUFBVSxhQUFWLENBQXdCLEksQ0FBSyxRLENBQTdCO1FBQ0EsaUIsR0FBb0IsbUJBQWMsRUFBRSxVLENBQXBDO0lBWEosQztJQWNBLElBQUksaUJBQUo7SUFDQTtRQUNJLElBQUksYSxHQUFnQixjLENBQWUsaUIsQ0FBbkM7UUFFQSxjQUFjLEtBQWQsQ0FBb0IsTSxHQUFTLFUsQ0FBVyxNLEVBQVgsQyxDQUFxQixjQUFjLEtBQWQsQ0FBb0IsUUFBdEU7UUFDQSxjQUFjLEtBQWQsQ0FBb0IsUSxJQUFZLE9BQU8sUUFBdkM7UUFFQSxJQUFJLGNBQWMsS0FBZCxDQUFvQixRLENBQXBCLEMsQ0FBK0IsQ0FBbkM7UUFDQTtZQUNJLGNBQWMsS0FBZCxDQUFvQixNLElBQVUsY0FBYyxLQUFkLENBQW9CLFFBQWxEO1lBQ0EsY0FBYyxLQUFkLENBQW9CLFEsR0FBVyxDQUEvQjtRQUZKLEM7UUFLQSxVQUFVLGFBQVYsQ0FBd0IsSSxDQUFLLGEsQ0FBN0I7SUFaSixDO0lBZUEsTSxDQUFPLFM7O0FBL0NYLEM7O29DQWlFQSw0Qix1SEFBMEMsTSxFQUE0QixPO0FBQ3RFO0lBQ0ksSUFBSSxDQUFDLE9BQUw7UUFDSSxPLEdBQVUsRUFBVjtJQUVKLElBQUksYyxHQUFpQixHLENBQUksbUJBQWMsTSxDQUFkLEMsQ0FBdUIsQyxFQUFHLEM7UUFDL0MsYSxHQUFnQixDQUFDQSxJQUFELGlFQUFDQSxJQUFELEdBQU0saURBQU4sOEJBQTZCLE9BQU8sUUFBcEMsQ0FEcEI7SUFHQSxJQUFJLGEsQ0FBQSxDLENBQWdCLENBQXBCO1FBQ0ksYSxHQUFnQixjQUFoQjtJQUVKLElBQUksVyxHQUFjLENBQUNBLElBQUQsaUVBQUNBLElBQUQsR0FBTSxpREFBTiw4QkFBNkIsVSxDQUFXLE0sQ0FBeEMsQ0FBbEI7SUFFQSxJQUFJLFcsQ0FBQSxDLENBQWMsQ0FBbEI7UUFDSSxXLEdBQWMsY0FBZDtJQUVKLElBQUksZ0IsR0FBbUIsUUFBUSxNLENBQVIsQyxDQUFpQixPQUFPLE07UUFDM0MsYSxHQUFnQixhQURwQjtJQUdBLFksR0FBVSxhQUFRLFMsQ0FBVSxDLEVBQUcsT0FBTyxRLEVBQTVCLEMsQ0FBd0MsTyxDQUF4QyxDLENBQWtELGFBQVEsUyxDQUFVLFUsQ0FBVyxNLEVBQXpGO0lBQ0EsSUFBSSxjLEdBQWlCLG1CQUFjLGEsQ0FBZCxDQUE2QixLQUE3QixDQUFtQyxNQUF4RDtJQUVBLElBQUksYSxDQUFBLEcsQ0FBa0IsV0FBdEI7UUFDSSxtQkFBYyxhLENBQWQsQ0FBNkIsS0FBN0IsQ0FBbUMsTSxJQUFVLGdCQUE3QztJQURKO0lBR0E7UUFDSSxJLENBQUksbUIsQ0FBb0IsbUJBQWMsYSxDQUFkLENBQTZCLEssRUFBTyxNLEVBQXhELENBQWdFLE0sQ0FBaEUsQyxDQUF5RSxjQUE3RTtRQUNBO1lBQ0ksYSxFQUFBO1FBREosQztRQUlBLElBQUksVyxDQUFBLEMsQ0FBYyxhQUFsQjtRQUNBO1lBQ0ksSUFBSSxjLEdBQWdCLG1CQUFjLGEsQ0FBZCxDQUE2QixLQUE3QixDQUFtQyxRO2dCQUNuRCxrQixHQUFxQixVLENBQVcsbUJBQWMsVyxDQUFkLENBQTJCLEssRUFBdEMsQyxDQUErQyxjQUR4RTtZQUVBLG1CQUFjLE0sQ0FBTyxhLEVBQWUsVyxDQUFBLEMsQ0FBYyxhLENBQWxEO1lBQ0EsbUJBQWMsYSxDQUFkLENBQTZCLEssR0FBUSxXLENBQVksYyxFQUFnQixrQixDQUFqRTtRQUpKLEM7UUFPQSxJQUFJLGEsQ0FBQSxHLENBQWtCLGFBQXRCO1FBQ0E7WUFDSSxJQUFJLFMsR0FBWSxRQUFRLE0sQ0FBUixDLEVBQWlCLG1CLENBQW9CLG1CQUFjLGEsQ0FBZCxDQUE2QixLLEVBQU8sTSxFQUF4RCxDQUFnRSxNQUFqRztZQUNBLG1CQUFjLGEsQ0FBZCxDQUE2QixLQUE3QixDQUFtQyxNLEdBQVMsYyxDQUFBLEMsQ0FBaUIsU0FBN0Q7WUFDQSxJQUFJLFMsR0FBWSxRQUFRLE0sQ0FBUixDLEVBQWlCLG1CLENBQW9CLG1CQUFjLGEsQ0FBZCxDQUE2QixLLEVBQU8sTSxFQUF4RCxDQUFnRSxNQUFqRztZQUNBLG1CQUFjLGEsQ0FBZCxDQUE2QixLQUE3QixDQUFtQyxRLElBQVksU0FBL0M7WUFDQSxtQkFBYyxhLENBQWQsQ0FBNkIsS0FBN0IsQ0FBbUMsTSxJQUFVLFNBQTdDO1lBQ0EsYSxHQUFnQixhQUFoQjtRQU5KLEM7UUFEQTtZQVNJLG1CQUFjLGEsQ0FBZCxDQUE2QixLQUE3QixDQUFtQyxNLElBQVUsZ0JBQTdDO0lBdkJSLEM7SUEwQkEsS0FBSyxJQUFJLFUsR0FBYSxhLENBQUEsQyxDQUFnQixDLEVBQUcsQyxHQUFJLG1CQUFjLE0sRUFBUSxVLENBQUEsQyxDQUFhLEMsRUFBRyxVO1FBQy9FLG1CQUFjLFUsQ0FBZCxDQUEwQixLQUExQixDQUFnQyxRLElBQVksZ0JBQTVDO0FBbkRSLEM7O2lDQTBEQSw0QiwrRkFBeUMsTTtBQUN6QztJQUNJLENBQUNBLElBQUQsOEVBQUNBLElBQUQsR0FBTSw4REFBTixFQUFzQyw4REFBdEMsMkNBQStCLE1BQS9CLEVBQWlELEdBQWpEO0FBREosQzs7c0JBZ0JBLDRCLHVGQUFvQyxXLEVBQTJCLE07QUFDL0Q7SUFDSSxJQUFJLGtCLEdBQXFCLENBQUNBLElBQUQscUZBQUNBLElBQUQsR0FBTSxxRUFBTixFQUFpRCxxRUFBakQsa0RBQWlDLE9BQU8sUUFBeEMsRUFBaUUsR0FBakUsQztRQUNyQixnQixHQUFtQixDQUFDQSxJQUFELHFGQUFDQSxJQUFELEdBQU0scUVBQU4sRUFBb0QscUVBQXBELGtEQUFpQyxVLENBQVcsTSxDQUE1QyxFQUFvRSxHQUFwRSxDO1FBQ25CLE8sR0FBVSxrQkFGZDtJQUlBLElBQUksTyxDQUFBLEMsQ0FBVSxDQUFkO1FBQ0ksTyxHQUFVLEcsQ0FBSSxtQkFBYyxNLENBQWQsQyxDQUF1QixDLEVBQUcsQyxDQUF4QztJQUVKLElBQUksZ0IsQ0FBQSxHLENBQXFCLFVBQXpCO1FBQ0ksZ0IsR0FBbUIsbUJBQWMsTUFBakM7SUFFSixPQUFPLE8sQ0FBQSxDLENBQVUsZ0I7UUFDYixtQkFBYyxPLEdBQWQsQ0FBeUIsVSxHQUFhLENBQUMsV0FBRCxtQkFBQyxXQUFELDhDQUFDLFdBQUQsR0FBYSxxQ0FBYixXQUF0QztJQUdKLENBQUNBLElBQUQsaUZBQUNBLElBQUQsR0FBTSxpRUFBTixFQUF3RCxpRUFBeEQsOENBQXFDLGtCQUFyQyxFQUFnRSxnQkFBaEU7QUFmSixDOztxQ0E0QkEsNEIsdUZBQW9DLFcsRUFBMkIsTTtBQUMvRDtJQUNJLElBQUksa0IsR0FBcUIsQ0FBQ0EsSUFBRCxxRkFBQ0EsSUFBRCxHQUFNLHFFQUFOLEVBQWlELHFFQUFqRCxrREFBaUMsT0FBTyxRQUF4QyxFQUFpRSxHQUFqRSxDO1FBQ3JCLGdCLEdBQW1CLENBQUNBLElBQUQscUZBQUNBLElBQUQsR0FBTSxxRUFBTixFQUFvRCxxRUFBcEQsa0RBQWlDLFUsQ0FBVyxNLENBQTVDLEVBQW9FLEdBQXBFLEM7UUFDbkIsTyxHQUFVLGtCQUZkO0lBSUEsSUFBSSxnQixDQUFBLEcsQ0FBcUIsVUFBekI7UUFDSSxnQixHQUFtQixtQkFBYyxNQUFqQztJQUVKLE9BQU8sTyxDQUFBLEMsQ0FBVSxnQjtJQUNqQjtRQUNJLElBQUksSSxHQUFPLENBQUMsV0FBRCxtQkFBQyxXQUFELGlEQUFDLFdBQUQsR0FBYSx3Q0FBYixjO1lBQ1AsSyxHQUFRLENBQUMsSUFBRCxtQkFBQyxJQUFELCtDQUFDLElBQUQsR0FBTSwrQkFBTixZQURaO1FBR0EsT0FBTyxLO1lBQ0gsVUFBQyxtQkFBYyxPLENBQWQsQ0FBdUIsVUFBeEIsdUhBQTZDLENBQUMsV0FBRCxtQkFBQyxXQUFELHVEQUFDLFdBQUQsR0FBYSw4Q0FBYixvQkFBMEIsS0FBSyxLLENBQS9CLEVBQTdDLEVBQTJGLEtBQUssSyxDQUFoRztRQUVKLE8sRUFBQTtJQVBKLEM7SUFXQSxDQUFDQSxJQUFELGlGQUFDQSxJQUFELEdBQU0saUVBQU4sRUFBd0QsaUVBQXhELDhDQUFxQyxrQkFBckMsRUFBZ0UsZ0JBQWhFOztBQXBCSixDOztxQ0FtQ0EsNEIsaUdBQStCLFcsRUFBc0IsTSxFQUFzQixNO0FBQzNFO0lBQ0ksQ0FBQ0EsSUFBRCw4REFBQ0EsSUFBRCxHQUFNLDhDQUFOLEVBQTZDLDhDQUE3QywyQkFBb0IsSywyTkFBZ0IsTSxJQUFiLFcsR0FBdkIsRUFBbUQsTUFBbkQ7O0FBREosQzs7c0NBVUEsNEIsMkZBQWtDLFcsRUFBMkIsTTtBQUM3RDtJQUNJLElBQUksa0IsR0FBcUIsQ0FBQ0EsSUFBRCxxRkFBQ0EsSUFBRCxHQUFNLHFFQUFOLEVBQWlELHFFQUFqRCxrREFBaUMsT0FBTyxRQUF4QyxFQUFpRSxHQUFqRSxDO1FBQ3JCLGdCLEdBQW1CLENBQUNBLElBQUQscUZBQUNBLElBQUQsR0FBTSxxRUFBTixFQUFvRCxxRUFBcEQsa0RBQWlDLFUsQ0FBVyxNLENBQTVDLEVBQW9FLEdBQXBFLEM7UUFDbkIsTyxHQUFVLGtCQUZkO0lBSUEsSUFBSSxnQixDQUFBLEcsQ0FBcUIsVUFBekI7UUFDSSxnQixHQUFtQixtQkFBYyxNQUFqQztJQUVKLE9BQU8sTyxDQUFBLEMsQ0FBVSxnQjtRQUNiLFVBQUMsbUJBQWMsTyxHQUFkLENBQXlCLFVBQTFCLDJIQUF3RCxXQUF4RDtJQUdKLENBQUNBLElBQUQsaUZBQUNBLElBQUQsR0FBTSxpRUFBTixFQUF3RCxpRUFBeEQsOENBQXFDLGtCQUFyQyxFQUFnRSxnQkFBaEU7O0FBWkosQzs7aUNBcUJBLDRCLDZGQUFtRCxPO0FBQ25EO0lBQ0ksQ0FBQ0EsSUFBRCx5RUFBQ0EsSUFBRCxHQUFNLHlEQUFOLEVBQXFDLHlEQUFyQyxzQ0FBNkIsT0FBN0IsRUFBNkMsYUFBUSxNQUFyRDtBQURKLEM7O2lDQWFBLDRCLDZHQUFtRCxPLEVBQTRCLE87QUFDL0U7SUFDSSxJQUFJLE8sQ0FBQSxDLENBQVUsQyxJQUFLLE8sQ0FBQSxDLENBQVUsQ0FBQ0EsSUFBRCxnREFBQ0EsSUFBRCxHQUFNLGdDQUFOLFlBQTdCO1FBQ0ksQ0FBQyxXQUFELHVEQUFDLFdBQUQsR0FBYSw4Q0FBYixFQUFvQyw4Q0FBcEMsb0JBQW1CLGdCQUFuQixFQUEyQyx5RCxDQUFBLEMsQ0FBNEQsT0FBdkc7SUFFSixJQUFJLHFCLEdBQXdCLENBQUNBLElBQUQscUZBQUNBLElBQUQsR0FBTSxxRUFBTixFQUF5QyxxRUFBekMsa0RBQWlDLE9BQWpDLEVBQXlELEdBQXpELEM7UUFDeEIsaUIsR0FBb0IsUUFBUSxhO1FBQzVCLE0sR0FBUyxDQUFDLE9BQUQsbUJBQUMsT0FBRCxnREFBQyxPQUFELEdBQVMsbUNBQVQsYUFGYjtJQUlBLElBQUkscUIsQ0FBQSxHLENBQTBCLFVBQTlCO1FBQ0kscUIsR0FBd0IsbUJBQWMsTUFBdEM7SUFFSixZLEdBQVUsYUFBUSxTLENBQVUsQyxFQUFHLE8sRUFBckIsQyxDQUFnQyxRQUFRLE8sQ0FBeEMsQyxDQUFrRCxhQUFRLFMsQ0FBVSxPLENBQTlFO0lBRUEsSUFBSSxPLEdBQVUscUJBQWQ7SUFDQSxPQUFPLE8sQ0FBQSxDLENBQVUsbUJBQWMsTTtRQUMzQixtQkFBYyxPLEdBQWQsQ0FBeUIsS0FBekIsQ0FBK0IsUSxJQUFZLE1BQTNDO0lBRUosSUFBSSxrQixHQUFxQixrQkFBa0IsTTtRQUN2QyxLLEdBQVEsQ0FEWjtJQUdBLE9BQU8sSyxDQUFBLEMsQ0FBUSxrQjtJQUNmO1FBQ0ksSUFBSSxTLEdBQVksYyxDQUFlLGtCQUFrQixLLElBQWpEO1FBQ0EsVUFBVSxLQUFWLENBQWdCLFEsSUFBWSxPQUE1QjtRQUVBLG1CQUFjLE0sQ0FBTyxxQixDQUFBLEMsQ0FBd0IsQyxDQUF4QixDLENBQTRCLEssRUFBTyxDLEVBQUcsUyxDQUEzRDtJQUpKLEM7SUFPQSxDQUFDQSxJQUFELGlGQUFDQSxJQUFELEdBQU0saUVBQU4sRUFBdUUsaUVBQXZFLDhDQUFxQyxHLENBQUksQyxFQUFHLHFCLENBQUEsQyxDQUF3QixDLENBQXBFLEVBQStFLEcsQ0FBSSxxQixDQUFBLEMsQ0FBd0IsQyxFQUFHLG1CQUFjLE0sQ0FBZCxDLENBQXVCLEMsQ0FBckk7QUE1QkosQzs7OENBdUNBLDRCLDJJQUEwQyxNLEVBQWdELE87QUFDMUY7SUFDSSxDQUFDQSxJQUFELGtFQUFDQSxJQUFELEdBQU0sa0RBQU4sK0JBQThCLE1BQTlCO0lBQ0EsQ0FBQ0EsSUFBRCx5RUFBQ0EsSUFBRCxHQUFNLHlEQUFOLEVBQXFDLHlEQUFyQyxzQ0FBNkIsT0FBN0IsRUFBNkMsT0FBTyxRQUFwRDtBQUZKLEM7OzJDQVVBLDRCLHVGQUFnRCxPO0FBQ2hEO0lBQ0ksWSxHQUFVLFFBQVEsT0FBbEI7SUFDQSxrQixHQUFnQixVQUFDLFFBQVEsYUFBVCwrSCxJQUE0QyxRLENBQVMsSztJQUNyRTtRQUNJLE0sQ0FBTyxjLENBQWUsSztJQUQxQixDQURnQixFQUFoQjs7QUFGSixDOztpQ0FTQSw0QixxSUFBK0MsYyxFQUFxQyxLO0FBQ3BGO0lBQ0ksSUFBSSxLLEdBQVEsQ0FBQ0EsSUFBRCxpRUFBQ0EsSUFBRCxHQUFNLGlEQUFOLDhCQUE2QixjQUE3QixDQUFaO0lBRUEsSUFBSSxLLENBQUEsRyxDQUFVLFVBQWQ7UUFDSSxNLENBQU8sSztJQUVYLElBQUksVSxHQUFhLG1CQUFjLEssQ0FBL0I7SUFFQSxJQUFJLFdBQVcsS0FBWCxDQUFpQixRLENBQWpCLEcsQ0FBOEIsYyxJQUFtQixVLENBQVcsV0FBVyxLLEVBQXRCLEMsQ0FBK0IsQyxDQUEvQixHLENBQXFDLGMsSUFBa0IsQ0FBQyxLQUE3RztRQUNJLE0sQ0FBTyxLO0lBRVgsSUFBSSxVLEdBQWEsc0IsQ0FBdUIsVSxFQUFZLGMsQ0FBcEQ7SUFDQSxtQkFBYyxNLENBQU8sSyxFQUFPLEMsRUFBRyxXQUFXLEMsR0FBSSxXQUFXLEMsRUFBekQ7SUFDQSxLLEVBQUE7SUFFQSxNLENBQU8sSztBQWZYLEM7O2dDQWtCQSw0Qiw2SEFBaUQsSyxFQUF3QixHO0FBQ3pFO0lBQ0ksSUFBSSxPLEdBQVUsS0FBZDtJQUVBLElBQUksRyxDQUFBLEUsQ0FBTyxtQkFBYyxNQUF6QjtRQUNJLEcsR0FBTSxtQkFBYyxNLENBQWQsQyxDQUF1QixDQUE3QjtJQUVKLE9BQU8sTyxDQUFBLEMsQ0FBVSxHO0lBQ2pCO1FBQ0ksSUFBSSxDLEdBQUksbUJBQWMsTztZQUNsQixDLEdBQUksbUJBQWMsTyxDQUFBLEMsQ0FBVSxDLENBRGhDO1FBR0EsSUFBSSxDLElBQUssQyxJQUFLLFVBQUMsRUFBRSxVQUFILDZIQUFrQyxFQUFFLFVBQXBDLEVBQWQ7UUFDQTtZQUNJLEVBQUUsS0FBRixDQUFRLE0sR0FBUyxVLENBQVcsRUFBRSxLLEVBQWIsQyxDQUFzQixFQUFFLEtBQUYsQ0FBUSxRQUEvQztZQUNBLG1CQUFjLE0sQ0FBTyxPLENBQUEsQyxDQUFVLEMsRUFBRyxDLENBQWxDO1lBQ0EsRyxFQUFBO1FBSEosQztRQURBO1lBT0ksTyxFQUFBO0lBWFIsQzs7QUFQSixDOztrQ0EyQkEsNEI7QUFDQTtBQUFBLEM7O1lBUUEsNEI7QUFDQTtBQUFBLEM7Ozs7QUFNQSxJQUFJLDJCLEdBQWtDLDBCO0lBQ2xDLDJCLEdBQWtDLDBCO0lBQ2xDLCtCLEdBQWtDLDhCQUZ0QztBQUlBO0FBQUE7OzREQUVBLDRCLDJFQUE2QixNO0FBQzdCO0lBQ0lBLEksR0FBTyxDQUFDQSxJQUFELG1CQUFDQSxJQUFELDhDQUFDQSxJQUFELEdBQU0sOEJBQU4sV0FBUDtJQUVBLElBQUlBLElBQUo7SUFDQTtRQUNJLFksR0FBVSxDQUFDLE1BQUQsbUJBQUMsTUFBRCw2REFBQyxNQUFELEdBQVEsK0NBQVIsMEJBQTJCLDJCQUEzQixFQUFWO1FBQ0EsSUFBSSxhLEdBQWdCLENBQUMsTUFBRCxtQkFBQyxNQUFELDZEQUFDLE1BQUQsR0FBUSwrQ0FBUiwwQkFBMkIsMkJBQTNCLEU7WUFDaEIsaUIsR0FBb0IsQ0FBQyxNQUFELG1CQUFDLE1BQUQsNkRBQUMsTUFBRCxHQUFRLCtDQUFSLDBCQUEyQiwrQkFBM0IsRUFEeEI7UUFHQSxrQixHQUFnQixDLENBQWhCO1FBRUEsS0FBSyxJQUFJLEMsR0FBSSxDLEVBQUcsQyxHQUFJLGNBQWMsTSxFQUFRLEMsQ0FBQSxDLENBQUksQyxFQUFHLEM7WUFDN0MsbUJBQWMsSSxDQUFLLGMsQ0FBZSxjQUFjLEMsR0FBSSxrQkFBa0IsQyxHQUF0RTtJQVJSLEM7SUFXQSxNLENBQU9BLEk7QUFmWCxDOztvQkFrQkEsNEIsK0VBQWlDLE07QUFDakM7SUFDSSxDQUFDLE1BQUQsbUJBQUMsTUFBRCw4REFBQyxNQUFELEdBQVEsZ0RBQVIsRUFBNkIsZ0RBQTdCLDJCQUFxQixZQUFyQixFQUFvQywyQkFBcEM7SUFFQSxJQUFJLGlCLEdBQW9CLEM7UUFDcEIsZ0IsR0FBbUIsQyxDQUR2QjtJQUdBLEtBQUssSUFBSSxDLEdBQUksQyxFQUFHLEMsR0FBSSxtQkFBYyxNLEVBQVEsQyxDQUFBLEMsQ0FBSSxDLEVBQUcsQztJQUNqRDtRQUNJLGtCQUFrQixJLENBQUssbUJBQWMsQyxDQUFkLENBQWlCLEssQ0FBeEM7UUFDQSxpQkFBaUIsSSxDQUFLLG1CQUFjLEMsQ0FBZCxDQUFpQixVLENBQXZDO0lBRkosQztJQUtBLENBQUMsTUFBRCxtQkFBQyxNQUFELDhEQUFDLE1BQUQsR0FBUSxnREFBUixFQUF1QyxnREFBdkMsMkJBQXFCLGlCQUFyQixFQUE4QywyQkFBOUM7SUFDQSxDQUFDLE1BQUQsbUJBQUMsTUFBRCw4REFBQyxNQUFELEdBQVEsZ0RBQVIsRUFBc0MsZ0RBQXRDLDJCQUFxQixnQkFBckIsRUFBNkMsK0JBQTdDO0FBYkosQzs7OztBQTBCQTtBQUFBO0FBQUEsMkI7O0FBSUEsSUFBSSxPLEdBQVUsUSxDQUFTLEMsRUFBRyxDO0FBQzFCO0lBQ0ksSUFBSSxDLENBQUEsRyxDQUFNLENBQVY7UUFDSSxNLENBQU8sRztJQUVYLElBQUksQ0FBQyxDQUFELG1CQUFDLENBQUQsNkRBQUMsQ0FBRCxHQUFHLDBDQUFILDBCQUFzQixZLFVBQXRCLEUsSUFBOEMsQ0FBQyxDQUFELG1CQUFDLENBQUQsa0RBQUMsQ0FBRCxHQUFHLCtCQUFILGVBQVcsQ0FBWCxFQUFsRDtRQUNJLE0sQ0FBTyxHO0lBRVgsTSxDQUFPLEU7QUFQWCxDQURBO0FBV0EsSUFBSSxjLEdBQWlCLFEsQ0FBb0IsTSxFQUF3QixVO0FBQ2pFO0lBQ0ksTSxDQUFPLENBQUMsSyxFQUFNLE0sRUFBUSxVLEVBQVcsQ0FBQyxVQUFELG1CQUFDLFVBQUQsOENBQUMsVUFBRCxHQUFZLG9DQUFaLFc7QUFEckMsQ0FEQTtBQUtBLElBQUksYyxHQUFpQixRLENBQXVCLFc7QUFDNUM7SUFDSSxNLENBQU8sYyxDQUFlLGUsQ0FBZ0IsWUFBWSxLLEdBQVEsVUFBQyxZQUFZLFVBQWIsNkY7O0FBRDlELENBREE7QUFLQSxJQUFJLHNCLEdBQXlCLFEsQ0FBdUIsVyxFQUF5QixPO0FBQzdFO0lBQ0ksSUFBSSxhLEdBQWdCLGMsQ0FBZSxXO1FBQy9CLFcsR0FBYyxVLENBQVcsWUFBWSxLLENBRHpDO0lBR0EsWUFBWSxLQUFaLENBQWtCLE0sR0FBUyxPLENBQUEsQyxDQUFVLFlBQVksS0FBWixDQUFrQixRQUF2RDtJQUNBLGNBQWMsS0FBZCxDQUFvQixRLEdBQVcsT0FBL0I7SUFDQSxjQUFjLEtBQWQsQ0FBb0IsTSxHQUFTLFcsQ0FBQSxDLENBQWMsT0FBM0M7SUFDQSxjQUFjLFUsR0FBYSxVQUFDLGNBQWMsVUFBZiw2RkFBM0I7SUFFQSxNLENBQU8sQ0FBQyxXLEVBQWEsYTs7QUFUekIsQ0FEQSIsImZpbGUiOiJDUEF0dHJpYnV0ZWRTdHJpbmcuanMiLCJzb3VyY2VSb290IjoiZmlsZTovVXNlcnMvZGF2aWQvcHJvZ3JhbXMvY2FwcHVjY2luby9Gb3VuZGF0aW9uLyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDUEF0dHJpYnV0ZWRTdHJpbmcualxuICogRm91bmRhdGlvblxuICpcbiAqIENyZWF0ZWQgYnkgUm9zcyBCb3VjaGVyLlxuICogQ29weXJpZ2h0IDIwMDgsIDI4MCBOb3J0aCwgSW5jLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlclxuICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlXG4gKiBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BIDAyMTEwLTEzMDEgVVNBXG4gKi9cblxuQGltcG9ydCBcIkNQQXJyYXkualwiXG5AaW1wb3J0IFwiQ1BEaWN0aW9uYXJ5LmpcIlxuQGltcG9ydCBcIkNQRXhjZXB0aW9uLmpcIlxuQGltcG9ydCBcIkNQT2JqZWN0LmpcIlxuQGltcG9ydCBcIkNQUmFuZ2UualwiXG5AaW1wb3J0IFwiQ1BTdHJpbmcualwiXG5cbi8qIVxuICAgIEBjbGFzcyBDUEF0dHJpYnV0ZWRTdHJpbmdcbiAgICBAaW5ncm91cCBmb3VuZGF0aW9uXG4gICAgQGJyaWVmIEEgbXV0YWJsZSBjaGFyYWN0ZXIgc3RyaW5nIHdpdGggYXR0cmlidXRlcy5cblxuICAgIEEgY2hhcmFjdGVyIHN0cmluZyB3aXRoIHNldHMgb2YgYXR0cmlidXRlcyB0aGF0IGFwcGx5IHRvIHNpbmdsZSBvciByYW5nZXMgb2ZcbiAgICBjaGFyYWN0ZXJzLiBUaGUgYXR0cmlidXRlcyBhcmUgY29udGFpbmVkIHdpdGhpbiBhIENQRGljdGlvbmFyeSBjbGFzcy5cbiAgICBBdHRyaWJ1dGVzIGNhbiBiZSBhbnkgbmFtZS92YWx1ZSBwYWlyLiBUaGUgZGF0YSB0eXBlIG9mIHRoZSB2YWx1ZSBpcyBub3RcbiAgICByZXN0cmljdGVkLlxuICAgIFRoaXMgY2xhc3MgaXMgbXV0YWJsZS5cblxuICAgIEBub3RlIENvY29hIGRldmVsb3BlcnM6IGluIENhcHB1Y2Npbm8gQ1BBdHRyaWJ1dGVkU3RyaW5nIGlzIG11dGFibGUuIEl0XG4gICAgaW1wbGVtZW50cyBmdW5jdGlvbmFsaXR5IGZyb20gYm90aCBOU0F0dHJpYnV0ZWRTdHJpbmcgYW5kXG4gICAgTlNNdXRhYmxlQXR0cmlidXRlZFN0cmluZy4gSG93ZXZlciwgdG8gZWFzZSBjb252ZXJ0aW5nIG9mIGV4aXN0aW5nXG4gICAgT2JqZWN0aXZlLUMgY29kZSBhIENQTXV0YWJsZUF0dHJpYnV0ZWRTdHJpbmcgYWxpYXMgdG8gdGhpcyBjbGFzcyBleGlzdHMuXG4qL1xuQGltcGxlbWVudGF0aW9uIENQQXR0cmlidXRlZFN0cmluZyA6IENQT2JqZWN0XG57XG4gICAgQ1BTdHJpbmcgICAgX3N0cmluZztcbiAgICBDUEFycmF5ICAgICBfcmFuZ2VFbnRyaWVzO1xufVxuXG4vLyBDcmVhdGluZyBhIENQQXR0cmlidXRlZFN0cmluZyBPYmplY3Rcbi8qIVxuICAgIENyZWF0ZXMgYW4gZW1wdHkgYXR0cmlidXRlZCBzdHJpbmcuXG4gICAgQHJldHVybiBhIG5ldyBlbXB0eSBDUEF0dHJpYnV0ZWRTdHJpbmcuXG4qL1xuLSAoaWQpaW5pdFxue1xuICAgIHJldHVybiBbc2VsZiBpbml0V2l0aFN0cmluZzpAXCJcIiBhdHRyaWJ1dGVzOm5pbF07XG59XG5cbi8qIVxuICAgIENyZWF0ZXMgYSBuZXcgYXR0cmlidXRlZCBzdHJpbmcgZnJvbSBhIGNoYXJhY3RlciBzdHJpbmcuXG4gICAgQHBhcmFtIGFTdHJpbmcgaXMgdGhlIHN0cmluZyB0byBpbml0aWFsaXNlIGZyb20uXG4gICAgQHJldHVybiBhIG5ldyBDUEF0dHJpYnV0ZWRTdHJpbmcgY29udGFpbmluZyB0aGUgc3RyaW5nIFxcYyBhU3RyaW5nLlxuKi9cbi0gKGlkKWluaXRXaXRoU3RyaW5nOihDUFN0cmluZylhU3RyaW5nXG57XG4gICAgcmV0dXJuIFtzZWxmIGluaXRXaXRoU3RyaW5nOmFTdHJpbmcgYXR0cmlidXRlczpuaWxdO1xufVxuXG4vKiFcbiAgICBDcmVhdGVzIGEgbmV3IGF0dHJpYnV0ZWQgc3RyaW5nIGZyb20gYW4gZXhpc3RpbmcgYXR0cmlidXRlZCBzdHJpbmcuXG4gICAgQHBhcmFtIGFTdHJpbmcgaXMgdGhlIGF0dHJpYnV0ZWQgc3RyaW5nIHRvIGluaXRpYWxpc2UgZnJvbS5cbiAgICBAcmV0dXJuIGEgbmV3IENQQXR0cmlidXRlZFN0cmluZyBjb250YWluaW5nIHRoZSBzdHJpbmcgXFxjIGFTdHJpbmcuXG4qL1xuLSAoaWQpaW5pdFdpdGhBdHRyaWJ1dGVkU3RyaW5nOihDUEF0dHJpYnV0ZWRTdHJpbmcpYVN0cmluZ1xue1xuICAgIHZhciBzdHJpbmcgPSBbc2VsZiBpbml0V2l0aFN0cmluZzpAXCJcIiBhdHRyaWJ1dGVzOm5pbF07XG5cbiAgICBbc3RyaW5nIHNldEF0dHJpYnV0ZWRTdHJpbmc6YVN0cmluZ107XG5cbiAgICByZXR1cm4gc3RyaW5nO1xufVxuXG4vKiFcbiAgICBDcmVhdGVzIGEgbmV3IGF0dHJpYnV0ZWQgc3RyaW5nIGZyb20gYSBjaGFyYWN0ZXIgc3RyaW5nIGFuZCB0aGUgc3BlY2lmaWVkXG4gICAgZGljdGlvbmFyeSBvZiBhdHRyaWJ1dGVzLlxuICAgIEBwYXJhbSBhU3RyaW5nIGlzIHRoZSBhdHRyaWJ1dGVkIHN0cmluZyB0byBpbml0aWFsaXNlIGZyb20uXG4gICAgQHBhcmFtIGF0dHJpYnV0ZXMgaXMgYSBkaWN0aW9uYXJ5IG9mIHN0cmluZyBhdHRyaWJ1dGVzLlxuICAgIEByZXR1cm4gYSBuZXcgQ1BBdHRyaWJ1dGVkU3RyaW5nIGNvbnRhaW5pbmcgdGhlIHN0cmluZyBcXGMgYVN0cmluZ1xuICAgIHdpdGggYXNzb2NpYXRlZCBhdHRyaWJ1dGVzLCBcXGMgYXR0cmlidXRlcy5cbiovXG4tIChpZClpbml0V2l0aFN0cmluZzooQ1BTdHJpbmcpYVN0cmluZyBhdHRyaWJ1dGVzOihDUERpY3Rpb25hcnkpYXR0cmlidXRlc1xue1xuICAgIHNlbGYgPSBbc3VwZXIgaW5pdF07XG5cbiAgICBpZiAoc2VsZilcbiAgICB7XG4gICAgICAgIGlmICghYXR0cmlidXRlcylcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMgPSBAe307XG5cbiAgICAgICAgX3N0cmluZyA9IFwiXCIgKyBhU3RyaW5nO1xuICAgICAgICBfcmFuZ2VFbnRyaWVzID0gW21ha2VSYW5nZUVudHJ5KENQTWFrZVJhbmdlKDAsIF9zdHJpbmcubGVuZ3RoKSwgYXR0cmlidXRlcyldO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xufVxuXG4vL1JldHJpZXZpbmcgQ2hhcmFjdGVyIEluZm9ybWF0aW9uXG4vKiFcbiAgICBSZXR1cm5zIGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIHJlY2VpdmVyJ3MgY2hhcmFjdGVyIGRhdGEgd2l0aG91dFxuICAgIGF0dHJpYnV0ZXMuXG4gICAgQHJldHVybiBhIHN0cmluZyBvZiB0eXBlIENQU3RyaW5nLlxuKi9cbi0gKENQU3RyaW5nKXN0cmluZ1xue1xuICAgIHJldHVybiBfc3RyaW5nO1xufVxuXG4vKiFcbiAgICBSZXR1cm5zIGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIHJlY2VpdmVyJ3MgY2hhcmFjdGVyIGRhdGEgd2l0aG91dFxuICAgIGF0dHJpYnV0ZXMuXG4gICAgQHJldHVybiBhIHN0cmluZyBvZiB0eXBlIENQU3RyaW5nLlxuKi9cbi0gKENQU3RyaW5nKW11dGFibGVTdHJpbmdcbntcbiAgICByZXR1cm4gW3NlbGYgc3RyaW5nXTtcbn1cblxuLyohXG4gICAgR2V0IHRoZSBsZW5ndGggb2YgdGhlIHN0cmluZy5cbiAgICBAcmV0dXJuIGFuIHVuc2lnbmVkIGludGVnZXIgZXF1aXZhbGVudCB0byB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgaW4gdGhlXG4gICAgc3RyaW5nLlxuKi9cbi0gKHVuc2lnbmVkKWxlbmd0aFxue1xuICAgIHJldHVybiBfc3RyaW5nLmxlbmd0aDtcbn1cblxuLy8gcHJpdmF0ZSBtZXRob2Rcbi0gKHVuc2lnbmVkKV9pbmRleE9mRW50cnlXaXRoSW5kZXg6KHVuc2lnbmVkKWFuSW5kZXhcbntcbiAgICBpZiAoYW5JbmRleCA8IDAgfHwgYW5JbmRleCA+IF9zdHJpbmcubGVuZ3RoIHx8IGFuSW5kZXggPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIENQTm90Rm91bmQ7XG5cbiAgICAvLyBmaW5kIHRoZSByYW5nZSBlbnRyeSB0aGF0IGNvbnRhaW5zIGFuSW5kZXguXG4gICAgdmFyIHNvcnRGdW5jdGlvbiA9IGZ1bmN0aW9uKGluZGV4LCBlbnRyeSlcbiAgICB7XG4gICAgICAgIC8vIGluZGV4IGlzIHRoZSBjaGFyYWN0ZXIgaW5kZXggd2UncmUgc2VhcmNoaW5nIGZvcixcbiAgICAgICAgLy8gd2hpbGUgcmFuZ2UgaXMgdGhlIGFjdHVhbCByYW5nZSBlbnRyeSB3ZSdyZSBjb21wYXJpbmcgYWdhaW5zdFxuICAgICAgICBpZiAoQ1BMb2NhdGlvbkluUmFuZ2UoaW5kZXgsIGVudHJ5LnJhbmdlKSB8fCAoIWluZGV4ICYmICFDUE1heFJhbmdlKGVudHJ5LnJhbmdlKSkpXG4gICAgICAgICAgICByZXR1cm4gQ1BPcmRlcmVkU2FtZTtcbiAgICAgICAgZWxzZSBpZiAoQ1BNYXhSYW5nZShlbnRyeS5yYW5nZSkgPD0gaW5kZXgpXG4gICAgICAgICAgICByZXR1cm4gQ1BPcmRlcmVkRGVzY2VuZGluZztcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIENQT3JkZXJlZEFzY2VuZGluZztcbiAgICB9O1xuXG4gICAgcmV0dXJuIFtfcmFuZ2VFbnRyaWVzIGluZGV4T2ZPYmplY3Q6YW5JbmRleCBpblNvcnRlZFJhbmdlOm5pbCBvcHRpb25zOjAgdXNpbmdDb21wYXJhdG9yOnNvcnRGdW5jdGlvbl07XG59XG5cbi8vUmV0cmlldmluZyBBdHRyaWJ1dGUgSW5mb3JtYXRpb25cbi8qIVxuICAgIFJldHVybnMgYSBkaWN0aW9uYXJ5IG9mIGF0dHJpYnV0ZXMgZm9yIHRoZSBjaGFyYWN0ZXIgYXQgYSBnaXZlbiBpbmRleC4gVGhlXG4gICAgcmFuZ2UgaW4gd2hpY2ggdGhpcyBjaGFyYWN0ZXIgcmVzaWRlcyBpbiB3aGljaCB0aGUgYXR0cmlidXRlcyBhcmUgdGhlXG4gICAgc2FtZSwgY2FuIGJlIHJldHVybmVkIGlmIGRlc2lyZWQuXG4gICAgQG5vdGUgdGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgdGhlIHJhbmdlIHJldHVybmVkIGlzIGluIGZhY3QgdGhlIGNvbXBsZXRlXG4gICAgcmFuZ2Ugb2YgdGhlIHBhcnRpY3VsYXIgYXR0cmlidXRlcy4gVG8gZW5zdXJlIHRoaXMgdXNlXG4gICAgXFxjIGF0dHJpYnV0ZXNBdEluZGV4Omxvbmdlc3RFZmZlY3RpdmVSYW5nZTppblJhbmdlOiBpbnN0ZWFkLiBOb3RlXG4gICAgaG93ZXZlciB0aGF0IGl0IG1heSB0YWtlIHNpZ25pZmljYW50bHkgbG9uZ2VyIHRvIGV4ZWN1dGUuXG4gICAgQHBhcmFtIGFuSW5kZXggaXMgYW4gdW5zaWduZWQgaW50ZWdlciBpbmRleC4gSXQgbXVzdCBsaWUgd2l0aGluIHRoZSBib3VuZHNcbiAgICBvZiB0aGUgc3RyaW5nLlxuICAgIEBwYXJhbSBhUmFuZ2UgaXMgYSByZWZlcmVuY2UgdG8gYSBDUFJhbmdlIG9iamVjdFxuICAgIHRoYXQgaXMgc2V0ICh1cG9uIHJldHVybikgdG8gdGhlIHJhbmdlIG92ZXIgd2hpY2ggdGhlIGF0dHJpYnV0ZXMgYXJlIHRoZVxuICAgIHNhbWUgYXMgdGhvc2UgYXQgaW5kZXgsIFxcYyBhbkluZGV4LiBJZiBub3QgcmVxdWlyZWQgcGFzc1xuICAgIFxcYyBuaWwuXG4gICAgQHJldHVybiBhIENQRGljdGlvbmFyeSBjb250YWluaW5nIHRoZSBhdHRyaWJ1dGVzIGFzc29jaWF0ZWQgd2l0aCB0aGVcbiAgICBjaGFyYWN0ZXIgYXQgaW5kZXggXFxjIGFuSW5kZXguIFJldHVybnMgYW4gZW1wdHkgZGljdGlvbmFyeSBpZiBpbmRleFxuICAgIGlzIG91dCBvZiBib3VuZHMuXG4qL1xuLSAoQ1BEaWN0aW9uYXJ5KWF0dHJpYnV0ZXNBdEluZGV4OihDUFVJbnRlZ2VyKWFuSW5kZXggZWZmZWN0aXZlUmFuZ2U6KENQUmFuZ2VQb2ludGVyKWFSYW5nZVxue1xuICAgIC8vIGZpbmQgdGhlIHJhbmdlIGVudHJ5IHRoYXQgY29udGFpbnMgYW5JbmRleC5cbiAgICB2YXIgZW50cnlJbmRleCA9IFtzZWxmIF9pbmRleE9mRW50cnlXaXRoSW5kZXg6YW5JbmRleF07XG5cbiAgICBpZiAoZW50cnlJbmRleCA9PT0gQ1BOb3RGb3VuZClcbiAgICAgICAgcmV0dXJuIEB7fTtcblxuICAgIHZhciBtYXRjaGluZ1JhbmdlID0gX3JhbmdlRW50cmllc1tlbnRyeUluZGV4XTtcblxuICAgIGlmIChhUmFuZ2UpXG4gICAge1xuICAgICAgICBhUmFuZ2UubG9jYXRpb24gPSBtYXRjaGluZ1JhbmdlLnJhbmdlLmxvY2F0aW9uO1xuICAgICAgICBhUmFuZ2UubGVuZ3RoID0gbWF0Y2hpbmdSYW5nZS5yYW5nZS5sZW5ndGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoaW5nUmFuZ2UuYXR0cmlidXRlcztcbn1cblxuLyohXG4gICAgUmV0dXJucyBhIGRpY3Rpb25hcnkgb2YgYWxsIGF0dHJpYnV0ZXMgZm9yIHRoZSBjaGFyYWN0ZXIgYXQgYSBnaXZlbiBpbmRleFxuICAgIGFuZCwgYnkgcmVmZXJlbmNlLCB0aGUgcmFuZ2Ugb3ZlciB3aGljaCB0aGUgYXR0cmlidXRlcyBhcHBseS4gVGhpcyBpcyB0aGVcbiAgICBtYXhpbXVtIHJhbmdlIGJvdGggZm9yd2FyZHMgYW5kIGJhY2t3YXJkcyBpbiB0aGUgc3RyaW5nIG92ZXIgd2hpY2ggdGhlXG4gICAgYXR0cmlidXRlcyBhcHBseSwgYm91bmRlZCBpbiBib3RoIGRpcmVjdGlvbnMgYnkgdGhlIHJhbmdlIGxpbWl0IHBhcmFtZXRlcixcbiAgICBcXGMgcmFuZ2VMaW1pdC5cbiAgICBAbm90ZSB0aGlzIG1ldGhvZCBwZXJmb3JtcyBhIHNlYXJjaCB0byBmaW5kIHRoaXMgcmFuZ2Ugd2hpY2ggbWF5IGJlXG4gICAgY29tcHV0YXRpb25hbGx5IGludGVuc2l2ZS4gVXNlIHRoZSBcXGMgcmFuZ2VMaW1pdCB0byBsaW1pdCB0aGVcbiAgICBzZWFyY2ggc3BhY2Ugb3IgdXNlIFxcYyAtYXR0cmlidXRlc0F0SW5kZXg6ZWZmZWN0aXZlUmFuZ2U6IGJ1dFxuICAgIG5vdGUgdGhhdCBpdCBpcyBub3QgZ3VhcmFudGVlZCB0byByZXR1cm4gdGhlIGZ1bGwgcmFuZ2Ugb2YgdGhlIGN1cnJlbnRcbiAgICBjaGFyYWN0ZXIncyBhdHRyaWJ1dGVzLlxuICAgIEBwYXJhbSBhbkluZGV4IGlzIHRoZSB1bnNpZ25lZCBpbnRlZ2VyIGluZGV4LiBJdCBtdXN0IGxpZSB3aXRoaW4gdGhlIGJvdW5kc1xuICAgIG9mIHRoZSBzdHJpbmcuXG4gICAgQHBhcmFtIGFSYW5nZSBpcyBhIHJlZmVyZW5jZSB0byBhIENQUmFuZ2Ugb2JqZWN0IHRoYXQgaXMgc2V0ICh1cG9uIHJldHVybilcbiAgICB0byB0aGUgcmFuZ2Ugb3ZlciB3aGljaCB0aGUgYXR0cmlidXRlcyBhcHBseS5cbiAgICBAcGFyYW0gcmFuZ2VMaW1pdCBhIHJhbmdlIGxpbWl0aW5nIHRoZSBzZWFyY2ggZm9yIHRoZSBhdHRyaWJ1dGVzJyBhcHBsaWNhYmxlXG4gICAgcmFuZ2UuXG4gICAgQHJldHVybiBhIENQRGljdGlvbmFyeSBjb250YWluaW5nIHRoZSBhdHRyaWJ1dGVzIGFzc29jaWF0ZWQgd2l0aCB0aGVcbiAgICBjaGFyYWN0ZXIgYXQgaW5kZXggXFxjIGFuSW5kZXguIFJldHVybnMgYW4gZW1wdHkgZGljdGlvbmFyeSBpZiBpbmRleFxuICAgIGlzIG91dCBvZiBib3VuZHMuXG4qL1xuLSAoQ1BEaWN0aW9uYXJ5KWF0dHJpYnV0ZXNBdEluZGV4OihDUFVJbnRlZ2VyKWFuSW5kZXggbG9uZ2VzdEVmZmVjdGl2ZVJhbmdlOihDUFJhbmdlUG9pbnRlcilhUmFuZ2UgaW5SYW5nZTooQ1BSYW5nZSlyYW5nZUxpbWl0XG57XG4gICAgdmFyIHN0YXJ0aW5nRW50cnlJbmRleCA9IFtzZWxmIF9pbmRleE9mRW50cnlXaXRoSW5kZXg6YW5JbmRleF07XG5cbiAgICBpZiAoc3RhcnRpbmdFbnRyeUluZGV4ID09PSBDUE5vdEZvdW5kKVxuICAgICAgICByZXR1cm4gQHt9O1xuXG4gICAgaWYgKCFhUmFuZ2UpXG4gICAgICAgIHJldHVybiBfcmFuZ2VFbnRyaWVzW3N0YXJ0aW5nRW50cnlJbmRleF0uYXR0cmlidXRlcztcblxuICAgIGlmIChDUFJhbmdlSW5SYW5nZShfcmFuZ2VFbnRyaWVzW3N0YXJ0aW5nRW50cnlJbmRleF0ucmFuZ2UsIHJhbmdlTGltaXQpKVxuICAgIHtcbiAgICAgICAgYVJhbmdlLmxvY2F0aW9uID0gcmFuZ2VMaW1pdC5sb2NhdGlvbjtcbiAgICAgICAgYVJhbmdlLmxlbmd0aCA9IHJhbmdlTGltaXQubGVuZ3RoO1xuXG4gICAgICAgIHJldHVybiBfcmFuZ2VFbnRyaWVzW3N0YXJ0aW5nRW50cnlJbmRleF0uYXR0cmlidXRlcztcbiAgICB9XG5cbiAgICAvLyBzY2FuIGJhY2t3YXJkc1xuICAgIHZhciBuZXh0UmFuZ2VJbmRleCA9IHN0YXJ0aW5nRW50cnlJbmRleCAtIDEsXG4gICAgICAgIGN1cnJlbnRFbnRyeSA9IF9yYW5nZUVudHJpZXNbc3RhcnRpbmdFbnRyeUluZGV4XSxcbiAgICAgICAgY29tcGFyaXNvbkRpY3QgPSBjdXJyZW50RW50cnkuYXR0cmlidXRlcztcblxuICAgIHdoaWxlIChuZXh0UmFuZ2VJbmRleCA+PSAwKVxuICAgIHtcbiAgICAgICAgdmFyIG5leHRFbnRyeSA9IF9yYW5nZUVudHJpZXNbbmV4dFJhbmdlSW5kZXhdO1xuXG4gICAgICAgIGlmIChDUE1heFJhbmdlKG5leHRFbnRyeS5yYW5nZSkgPiByYW5nZUxpbWl0LmxvY2F0aW9uICYmIFtuZXh0RW50cnkuYXR0cmlidXRlcyBpc0VxdWFsVG9EaWN0aW9uYXJ5OmNvbXBhcmlzb25EaWN0XSlcbiAgICAgICAge1xuICAgICAgICAgICAgY3VycmVudEVudHJ5ID0gbmV4dEVudHJ5O1xuICAgICAgICAgICAgbmV4dFJhbmdlSW5kZXgtLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBhUmFuZ2UubG9jYXRpb24gPSBNQVgoY3VycmVudEVudHJ5LnJhbmdlLmxvY2F0aW9uLCByYW5nZUxpbWl0LmxvY2F0aW9uKTtcblxuICAgIC8vIHNjYW4gZm9yd2FyZHNcbiAgICBjdXJyZW50RW50cnkgPSBfcmFuZ2VFbnRyaWVzW3N0YXJ0aW5nRW50cnlJbmRleF07XG4gICAgbmV4dFJhbmdlSW5kZXggPSBzdGFydGluZ0VudHJ5SW5kZXggKyAxO1xuXG4gICAgd2hpbGUgKG5leHRSYW5nZUluZGV4IDwgX3JhbmdlRW50cmllcy5sZW5ndGgpXG4gICAge1xuICAgICAgICB2YXIgbmV4dEVudHJ5ID0gX3JhbmdlRW50cmllc1tuZXh0UmFuZ2VJbmRleF07XG5cbiAgICAgICAgaWYgKG5leHRFbnRyeS5yYW5nZS5sb2NhdGlvbiA8IENQTWF4UmFuZ2UocmFuZ2VMaW1pdCkgJiYgW25leHRFbnRyeS5hdHRyaWJ1dGVzIGlzRXF1YWxUb0RpY3Rpb25hcnk6Y29tcGFyaXNvbkRpY3RdKVxuICAgICAgICB7XG4gICAgICAgICAgICBjdXJyZW50RW50cnkgPSBuZXh0RW50cnk7XG4gICAgICAgICAgICBuZXh0UmFuZ2VJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGFSYW5nZS5sZW5ndGggPSBNSU4oQ1BNYXhSYW5nZShjdXJyZW50RW50cnkucmFuZ2UpLCBDUE1heFJhbmdlKHJhbmdlTGltaXQpKSAtIGFSYW5nZS5sb2NhdGlvbjtcblxuICAgIHJldHVybiBjb21wYXJpc29uRGljdDtcbn1cblxuLyohXG4gICAgUmV0dXJucyB0aGUgc3BlY2lmaWVkIG5hbWVkIGF0dHJpYnV0ZSBmb3IgdGhlIGdpdmVuIGNoYXJhY3RlciBpbmRleCBhbmQsIGlmXG4gICAgcmVxdWlyZWQsIHRoZSByYW5nZSBvdmVyIHdoaWNoIHRoZSBhdHRyaWJ1dGUgYXBwbGllcy5cbiAgICBAbm90ZSB0aGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCB0aGUgcmFuZ2UgcmV0dXJuZWQgaXMgaW4gZmFjdCB0aGUgY29tcGxldGVcbiAgICByYW5nZSBvZiBhIHBhcnRpY3VsYXIgYXR0cmlidXRlLiBUbyBlbnN1cmUgdGhpcyB1c2VcbiAgICBcXGMgLWF0dHJpYnV0ZTphdEluZGV4Omxvbmdlc3RFZmZlY3RpdmVSYW5nZTppblJhbmdlOiBpbnN0ZWFkIGJ1dFxuICAgIG5vdGUgdGhhdCBpdCBtYXkgdGFrZSBzaWduaWZpY2FudGx5IGxvbmdlciB0byBleGVjdXRlLlxuICAgIEBwYXJhbSBhdHRyaWJ1dGUgdGhlIG5hbWUgb2YgdGhlIGRlc2lyZWQgYXR0cmlidXRlLlxuICAgIEBwYXJhbSBhbkluZGV4IGlzIGFuIHVuc2lnbmVkIGludGVnZXIgY2hhcmFjdGVyIGluZGV4IGZyb20gd2hpY2ggdG8gcmV0cmlldmVcbiAgICB0aGUgYXR0cmlidXRlLiBJdCBtdXN0IGxpZSB3aXRoaW4gdGhlIGJvdW5kcyBvZiB0aGUgc3RyaW5nLlxuICAgIEBwYXJhbSBhUmFuZ2UgaXMgYSByZWZlcmVuY2UgdG8gYSBDUFJhbmdlIG9iamVjdCwgdGhhdCBpcyBzZXQgdXBvbiByZXR1cm5cbiAgICB0byB0aGUgcmFuZ2Ugb3ZlciB3aGljaCB0aGUgbmFtZWQgYXR0cmlidXRlIGFwcGxpZXMuICBJZiBub3QgcmVxdWlyZWQgcGFzc1xuICAgIFxcYyBuaWwuXG4gICAgQHJldHVybiB0aGUgbmFtZWQgYXR0cmlidXRlIG9yIFxcYyBuaWwgaXMgdGhlIGF0dHJpYnV0ZSBkb2VzIG5vdFxuICAgIGV4aXN0LlxuKi9cbi0gKGlkKWF0dHJpYnV0ZTooQ1BTdHJpbmcpYXR0cmlidXRlIGF0SW5kZXg6KENQVUludGVnZXIpaW5kZXggZWZmZWN0aXZlUmFuZ2U6KENQUmFuZ2VQb2ludGVyKWFSYW5nZVxue1xuICAgIGlmICghYXR0cmlidXRlKVxuICAgIHtcbiAgICAgICAgaWYgKGFSYW5nZSlcbiAgICAgICAge1xuICAgICAgICAgICAgYVJhbmdlLmxvY2F0aW9uID0gMDtcbiAgICAgICAgICAgIGFSYW5nZS5sZW5ndGggPSBfc3RyaW5nLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuaWw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtbc2VsZiBhdHRyaWJ1dGVzQXRJbmRleDppbmRleCBlZmZlY3RpdmVSYW5nZTphUmFuZ2VdIHZhbHVlRm9yS2V5OmF0dHJpYnV0ZV07XG59XG5cbi8qIVxuICAgIFJldHVybnMgdGhlIHNwZWNpZmllZCBuYW1lZCBhdHRyaWJ1dGUgZm9yIHRoZSBnaXZlbiBjaGFyYWN0ZXIgaW5kZXggYW5kIHRoZVxuICAgIHJhbmdlIG92ZXIgd2hpY2ggdGhlIGF0dHJpYnV0ZSBhcHBsaWVzLiBUaGlzIGlzIHRoZSBtYXhpbXVtIHJhbmdlIGJvdGhcbiAgICBmb3J3YXJkcyBhbmQgYmFja3dhcmRzIGluIHRoZSBzdHJpbmcgb3ZlciB3aGljaCB0aGUgYXR0cmlidXRlIGFwcGxpZXMsXG4gICAgYm91bmRlZCBpbiBib3RoIGRpcmVjdGlvbnMgYnkgdGhlIHJhbmdlIGxpbWl0IHBhcmFtZXRlcixcbiAgICBcXGMgcmFuZ2VMaW1pdC5cbiAgICBAbm90ZSB0aGlzIG1ldGhvZCBwZXJmb3JtcyBhIHNlYXJjaCB0byBmaW5kIHRoaXMgcmFuZ2Ugd2hpY2ggbWF5IGJlXG4gICAgY29tcHV0YXRpb25hbGx5IGludGVuc2l2ZS4gVXNlIHRoZSBcXGMgcmFuZ2VMaW1pdCB0byBsaW1pdCB0aGVcbiAgICBzZWFyY2ggc3BhY2Ugb3IgdXNlIFxcYyAtYXR0cmlidXRlOmF0SW5kZXg6ZWZmZWN0aXZlUmFuZ2U6IGJ1dFxuICAgIG5vdGUgdGhhdCBpdCBpcyBub3QgZ3VhcmFudGVlZCB0byByZXR1cm4gdGhlIGZ1bGwgcmFuZ2Ugb2YgdGhlIGN1cnJlbnRcbiAgICBjaGFyYWN0ZXIncyBuYW1lZCBhdHRyaWJ1dGUuXG4gICAgQHBhcmFtIGF0dHJpYnV0ZSB0aGUgbmFtZSBvZiB0aGUgZGVzaXJlZCBhdHRyaWJ1dGUuXG4gICAgQHBhcmFtIGFuSW5kZXggaXMgYW4gdW5zaWduZWQgaW50ZWdlciBjaGFyYWN0ZXIgaW5kZXggZnJvbSB3aGljaCB0byByZXRyaWV2ZVxuICAgIHRoZSBhdHRyaWJ1dGUuIEl0IG11c3QgbGllIHdpdGhpbiB0aGUgYm91bmRzIG9mIHRoZSBzdHJpbmcuXG4gICAgQHBhcmFtIGFSYW5nZSAgaXMgYSByZWZlcmVuY2UgdG8gYSBDUFJhbmdlIG9iamVjdCwgdGhhdCBpcyBzZXQgdXBvbiByZXR1cm5cbiAgICB0byB0aGUgcmFuZ2Ugb3ZlciB3aGljaCB0aGUgbmFtZWQgYXR0cmlidXRlIGFwcGxpZXMuXG4gICAgQHBhcmFtIHJhbmdlTGltaXQgYSByYW5nZSBsaW1pdGluZyB0aGUgc2VhcmNoIGZvciB0aGUgYXR0cmlidXRlJ3MgYXBwbGljYWJsZVxuICAgIHJhbmdlLlxuICAgIEByZXR1cm4gdGhlIG5hbWVkIGF0dHJpYnV0ZSBvciBcXGMgbmlsIGlzIHRoZSBhdHRyaWJ1dGUgZG9lcyBub3RcbiAgICBleGlzdC5cbiovXG4tIChpZClhdHRyaWJ1dGU6KENQU3RyaW5nKWF0dHJpYnV0ZSBhdEluZGV4OihDUFVJbnRlZ2VyKWFuSW5kZXggbG9uZ2VzdEVmZmVjdGl2ZVJhbmdlOihDUFJhbmdlUG9pbnRlcilhUmFuZ2UgaW5SYW5nZTooQ1BSYW5nZSlyYW5nZUxpbWl0XG57XG4gICAgdmFyIHN0YXJ0aW5nRW50cnlJbmRleCA9IFtzZWxmIF9pbmRleE9mRW50cnlXaXRoSW5kZXg6YW5JbmRleF07XG5cbiAgICBpZiAoc3RhcnRpbmdFbnRyeUluZGV4ID09PSBDUE5vdEZvdW5kIHx8ICFhdHRyaWJ1dGUpXG4gICAgICAgIHJldHVybiBuaWw7XG5cbiAgICBpZiAoIWFSYW5nZSlcbiAgICAgICAgcmV0dXJuIFtfcmFuZ2VFbnRyaWVzW3N0YXJ0aW5nRW50cnlJbmRleF0uYXR0cmlidXRlcyBvYmplY3RGb3JLZXk6YXR0cmlidXRlXTtcblxuICAgIGlmIChDUFJhbmdlSW5SYW5nZShfcmFuZ2VFbnRyaWVzW3N0YXJ0aW5nRW50cnlJbmRleF0ucmFuZ2UsIHJhbmdlTGltaXQpKVxuICAgIHtcbiAgICAgICAgYVJhbmdlLmxvY2F0aW9uID0gcmFuZ2VMaW1pdC5sb2NhdGlvbjtcbiAgICAgICAgYVJhbmdlLmxlbmd0aCA9IHJhbmdlTGltaXQubGVuZ3RoO1xuXG4gICAgICAgIHJldHVybiBbX3JhbmdlRW50cmllc1tzdGFydGluZ0VudHJ5SW5kZXhdLmF0dHJpYnV0ZXMgb2JqZWN0Rm9yS2V5OmF0dHJpYnV0ZV07XG4gICAgfVxuXG4gICAgLy8gc2NhbiBiYWNrd2FyZHNcbiAgICB2YXIgbmV4dFJhbmdlSW5kZXggPSBzdGFydGluZ0VudHJ5SW5kZXggLSAxLFxuICAgICAgICBjdXJyZW50RW50cnkgPSBfcmFuZ2VFbnRyaWVzW3N0YXJ0aW5nRW50cnlJbmRleF0sXG4gICAgICAgIGNvbXBhcmlzb25BdHRyaWJ1dGUgPSBbY3VycmVudEVudHJ5LmF0dHJpYnV0ZXMgb2JqZWN0Rm9yS2V5OmF0dHJpYnV0ZV07XG5cbiAgICB3aGlsZSAobmV4dFJhbmdlSW5kZXggPj0gMClcbiAgICB7XG4gICAgICAgIHZhciBuZXh0RW50cnkgPSBfcmFuZ2VFbnRyaWVzW25leHRSYW5nZUluZGV4XTtcblxuICAgICAgICBpZiAoQ1BNYXhSYW5nZShuZXh0RW50cnkucmFuZ2UpID4gcmFuZ2VMaW1pdC5sb2NhdGlvbiAmJiBpc0VxdWFsKGNvbXBhcmlzb25BdHRyaWJ1dGUsIFtuZXh0RW50cnkuYXR0cmlidXRlcyBvYmplY3RGb3JLZXk6YXR0cmlidXRlXSkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGN1cnJlbnRFbnRyeSA9IG5leHRFbnRyeTtcbiAgICAgICAgICAgIG5leHRSYW5nZUluZGV4LS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgYVJhbmdlLmxvY2F0aW9uID0gTUFYKGN1cnJlbnRFbnRyeS5yYW5nZS5sb2NhdGlvbiwgcmFuZ2VMaW1pdC5sb2NhdGlvbik7XG5cbiAgICAvLyBzY2FuIGZvcndhcmRzXG4gICAgY3VycmVudEVudHJ5ID0gX3JhbmdlRW50cmllc1tzdGFydGluZ0VudHJ5SW5kZXhdO1xuICAgIG5leHRSYW5nZUluZGV4ID0gc3RhcnRpbmdFbnRyeUluZGV4ICsgMTtcblxuICAgIHdoaWxlIChuZXh0UmFuZ2VJbmRleCA8IF9yYW5nZUVudHJpZXMubGVuZ3RoKVxuICAgIHtcbiAgICAgICAgdmFyIG5leHRFbnRyeSA9IF9yYW5nZUVudHJpZXNbbmV4dFJhbmdlSW5kZXhdO1xuXG4gICAgICAgIGlmIChuZXh0RW50cnkucmFuZ2UubG9jYXRpb24gPCBDUE1heFJhbmdlKHJhbmdlTGltaXQpICYmIGlzRXF1YWwoY29tcGFyaXNvbkF0dHJpYnV0ZSwgW25leHRFbnRyeS5hdHRyaWJ1dGVzIG9iamVjdEZvcktleTphdHRyaWJ1dGVdKSlcbiAgICAgICAge1xuICAgICAgICAgICAgY3VycmVudEVudHJ5ID0gbmV4dEVudHJ5O1xuICAgICAgICAgICAgbmV4dFJhbmdlSW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBhUmFuZ2UubGVuZ3RoID0gTUlOKENQTWF4UmFuZ2UoY3VycmVudEVudHJ5LnJhbmdlKSwgQ1BNYXhSYW5nZShyYW5nZUxpbWl0KSkgLSBhUmFuZ2UubG9jYXRpb247XG5cbiAgICByZXR1cm4gY29tcGFyaXNvbkF0dHJpYnV0ZTtcbn1cblxuLy9Db21wYXJpbmcgQXR0cmlidXRlZCBTdHJpbmdzXG4vKiFcbiAgICBDb21wYXJlcyB0aGUgcmVjZWl2ZXIncyBjaGFyYWN0ZXJzIGFuZCBhdHRyaWJ1dGVzIHRvIHRoZSBzcGVjaWZpZWRcbiAgICBhdHRyaWJ1dGVkIHN0cmluZywgXFxjIGFTdHJpbmcsIGFuZCB0ZXN0cyBmb3IgZXF1YWxpdHkuXG4gICAgQHBhcmFtIGFTdHJpbmcgdGhlIENQQXR0cmlidXRlZFN0cmluZyB0byBjb21wYXJlLlxuICAgIEByZXR1cm4gYSBib29sZWFuIGluZGljYXRpbmcgZXF1YWxpdHkuXG4qL1xuLSAoQk9PTClpc0VxdWFsVG9BdHRyaWJ1dGVkU3RyaW5nOihDUEF0dHJpYnV0ZWRTdHJpbmcpYVN0cmluZ1xue1xuICAgIGlmICghYVN0cmluZylcbiAgICAgICAgcmV0dXJuIE5PO1xuXG4gICAgaWYgKF9zdHJpbmcgIT09IFthU3RyaW5nIHN0cmluZ10pXG4gICAgICAgIHJldHVybiBOTztcblxuICAgIHZhciBteVJhbmdlID0gQ1BNYWtlUmFuZ2UoKSxcbiAgICAgICAgY29tcGFyaXNvblJhbmdlID0gQ1BNYWtlUmFuZ2UoKSxcbiAgICAgICAgbXlBdHRyaWJ1dGVzID0gW3NlbGYgYXR0cmlidXRlc0F0SW5kZXg6MCBlZmZlY3RpdmVSYW5nZTpteVJhbmdlXSxcbiAgICAgICAgY29tcGFyaXNvbkF0dHJpYnV0ZXMgPSBbYVN0cmluZyBhdHRyaWJ1dGVzQXRJbmRleDowIGVmZmVjdGl2ZVJhbmdlOmNvbXBhcmlzb25SYW5nZV0sXG4gICAgICAgIGxlbmd0aCA9IF9zdHJpbmcubGVuZ3RoO1xuXG4gICAgZG9cbiAgICB7XG4gICAgICAgIGlmIChDUEludGVyc2VjdGlvblJhbmdlKG15UmFuZ2UsIGNvbXBhcmlzb25SYW5nZSkubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgIVtteUF0dHJpYnV0ZXMgaXNFcXVhbFRvRGljdGlvbmFyeTpjb21wYXJpc29uQXR0cmlidXRlc10pXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiBOTztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChDUE1heFJhbmdlKG15UmFuZ2UpIDwgQ1BNYXhSYW5nZShjb21wYXJpc29uUmFuZ2UpKVxuICAgICAgICAgICAgbXlBdHRyaWJ1dGVzID0gW3NlbGYgYXR0cmlidXRlc0F0SW5kZXg6Q1BNYXhSYW5nZShteVJhbmdlKSBlZmZlY3RpdmVSYW5nZTpteVJhbmdlXTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY29tcGFyaXNvbkF0dHJpYnV0ZXMgPSBbYVN0cmluZyBhdHRyaWJ1dGVzQXRJbmRleDpDUE1heFJhbmdlKGNvbXBhcmlzb25SYW5nZSkgZWZmZWN0aXZlUmFuZ2U6Y29tcGFyaXNvblJhbmdlXTtcbiAgICB9IHdoaWxlIChDUE1heFJhbmdlKENQVW5pb25SYW5nZShteVJhbmdlLCBjb21wYXJpc29uUmFuZ2UpKSA8IGxlbmd0aCk7XG5cbiAgICByZXR1cm4gWUVTO1xufVxuXG4vKiFcbiAgICBEZXRlcm1pbmUgd2hldGhlciB0aGUgZ2l2ZW4gb2JqZWN0IGlzIHRoZSBzYW1lIGFzIHRoZSByZWNlaXZlci4gSWYgdGhlXG4gICAgc3BlY2lmaWVkIG9iamVjdCBpcyBhbiBhdHRyaWJ1dGVkIHN0cmluZyB0aGVuIGFuIGF0dHJpYnV0ZWQgc3RyaW5nIGNvbXBhcmVcbiAgICBpcyBwZXJmb3JtZWQuXG4gICAgQHBhcmFtIGFuT2JqZWN0IGFuIG9iamVjdCB0byB0ZXN0IGZvciBlcXVhbGl0eS5cbiAgICBAcmV0dXJuIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGVxdWFsaXR5LlxuKi9cbi0gKEJPT0wpaXNFcXVhbDooaWQpYW5PYmplY3RcbntcbiAgICBpZiAoYW5PYmplY3QgPT09IHNlbGYpXG4gICAgICAgIHJldHVybiBZRVM7XG5cbiAgICBpZiAoW2FuT2JqZWN0IGlzS2luZE9mQ2xhc3M6W3NlbGYgY2xhc3NdXSlcbiAgICAgICAgcmV0dXJuIFtzZWxmIGlzRXF1YWxUb0F0dHJpYnV0ZWRTdHJpbmc6YW5PYmplY3RdO1xuXG4gICAgcmV0dXJuIE5PO1xufVxuXG4vL0V4dHJhY3RpbmcgYSBTdWJzdHJpbmdcbi8qIVxuICAgIEV4dHJhY3RzIGEgc3Vic3RyaW5nIGZyb20gdGhlIHJlY2VpdmVyLCBib3RoIGNoYXJhY3RlcnMgYW5kIGF0dHJpYnV0ZXMsXG4gICAgd2l0aGluIHRoZSByYW5nZSBnaXZlbiBieSBcXGMgYVJhbmdlLlxuICAgIEBwYXJhbSBhUmFuZ2UgdGhlIHJhbmdlIG9mIHRoZSBzdWJzdHJpbmcgdG8gZXh0cmFjdC5cbiAgICBAcmV0dXJuIGEgQ1BBdHRyaWJ1dGVkU3RyaW5nIGNvbnRhaW5pbmcgdGhlIGRlc2lyZWQgc3Vic3RyaW5nLlxuICAgIEBleGNlcHRpb24gQ1BSYW5nZUV4Y2VwdGlvbiBpZiB0aGUgcmFuZ2UgbGllcyBvdXRzaWRlIHRoZSByZWNlaXZlcidzIGJvdW5kcy5cbiovXG4tIChDUEF0dHJpYnV0ZWRTdHJpbmcpYXR0cmlidXRlZFN1YnN0cmluZ0Zyb21SYW5nZTooQ1BSYW5nZSlhUmFuZ2VcbntcbiAgICBpZiAoIWFSYW5nZSB8fCBDUE1heFJhbmdlKGFSYW5nZSkgPiBfc3RyaW5nLmxlbmd0aCB8fCBhUmFuZ2UubG9jYXRpb24gPCAwKVxuICAgICAgICBbQ1BFeGNlcHRpb24gcmFpc2U6Q1BSYW5nZUV4Y2VwdGlvblxuICAgICAgICAgICAgICAgICAgICByZWFzb246XCJ0cmllZCB0byBnZXQgYXR0cmlidXRlZFN1YnN0cmluZyBmb3IgYW4gaW52YWxpZCByYW5nZTogXCIrKGFSYW5nZT9DUFN0cmluZ0Zyb21SYW5nZShhUmFuZ2UpOlwibmlsXCIpXTtcblxuICAgIHZhciBuZXdTdHJpbmcgPSBbW0NQQXR0cmlidXRlZFN0cmluZyBhbGxvY10gaW5pdFdpdGhTdHJpbmc6X3N0cmluZy5zdWJzdHJpbmcoYVJhbmdlLmxvY2F0aW9uLCBDUE1heFJhbmdlKGFSYW5nZSkpXSxcbiAgICAgICAgZW50cnlJbmRleCA9IFtzZWxmIF9pbmRleE9mRW50cnlXaXRoSW5kZXg6YVJhbmdlLmxvY2F0aW9uXTtcblxuICAgIGlmIChlbnRyeUluZGV4ID09PSBDUE5vdEZvdW5kKVxuICAgICAgICBfQ1BSYWlzZVJhbmdlRXhjZXB0aW9uKHNlbGYsIF9jbWQsIGFSYW5nZS5sb2NhdGlvbiwgX3N0cmluZy5sZW5ndGgpO1xuXG4gICAgdmFyIGN1cnJlbnRSYW5nZUVudHJ5ID0gX3JhbmdlRW50cmllc1tlbnRyeUluZGV4XSxcbiAgICAgICAgbGFzdEluZGV4ID0gQ1BNYXhSYW5nZShhUmFuZ2UpO1xuXG4gICAgbmV3U3RyaW5nLl9yYW5nZUVudHJpZXMgPSBbXTtcblxuICAgIHdoaWxlIChjdXJyZW50UmFuZ2VFbnRyeSAmJiBDUE1heFJhbmdlKGN1cnJlbnRSYW5nZUVudHJ5LnJhbmdlKSA8IGxhc3RJbmRleClcbiAgICB7XG4gICAgICAgIHZhciBuZXdFbnRyeSA9IGNvcHlSYW5nZUVudHJ5KGN1cnJlbnRSYW5nZUVudHJ5KTtcbiAgICAgICAgbmV3RW50cnkucmFuZ2UubG9jYXRpb24gLT0gYVJhbmdlLmxvY2F0aW9uO1xuXG4gICAgICAgIGlmIChuZXdFbnRyeS5yYW5nZS5sb2NhdGlvbiA8IDApXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5ld0VudHJ5LnJhbmdlLmxlbmd0aCArPSBuZXdFbnRyeS5yYW5nZS5sb2NhdGlvbjtcbiAgICAgICAgICAgIG5ld0VudHJ5LnJhbmdlLmxvY2F0aW9uID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld1N0cmluZy5fcmFuZ2VFbnRyaWVzLnB1c2gobmV3RW50cnkpO1xuICAgICAgICBjdXJyZW50UmFuZ2VFbnRyeSA9IF9yYW5nZUVudHJpZXNbKytlbnRyeUluZGV4XTtcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudFJhbmdlRW50cnkpXG4gICAge1xuICAgICAgICB2YXIgbmV3UmFuZ2VFbnRyeSA9IGNvcHlSYW5nZUVudHJ5KGN1cnJlbnRSYW5nZUVudHJ5KTtcblxuICAgICAgICBuZXdSYW5nZUVudHJ5LnJhbmdlLmxlbmd0aCA9IENQTWF4UmFuZ2UoYVJhbmdlKSAtIG5ld1JhbmdlRW50cnkucmFuZ2UubG9jYXRpb247XG4gICAgICAgIG5ld1JhbmdlRW50cnkucmFuZ2UubG9jYXRpb24gLT0gYVJhbmdlLmxvY2F0aW9uO1xuXG4gICAgICAgIGlmIChuZXdSYW5nZUVudHJ5LnJhbmdlLmxvY2F0aW9uIDwgMClcbiAgICAgICAge1xuICAgICAgICAgICAgbmV3UmFuZ2VFbnRyeS5yYW5nZS5sZW5ndGggKz0gbmV3UmFuZ2VFbnRyeS5yYW5nZS5sb2NhdGlvbjtcbiAgICAgICAgICAgIG5ld1JhbmdlRW50cnkucmFuZ2UubG9jYXRpb24gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3U3RyaW5nLl9yYW5nZUVudHJpZXMucHVzaChuZXdSYW5nZUVudHJ5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3U3RyaW5nO1xufVxuXG4vL0NoYW5naW5nIENoYXJhY3RlcnNcbi8qIVxuICAgIFJlcGxhY2VzIHRoZSBjaGFyYWN0ZXJzIGluIHRoZSByZWNlaXZlciB3aXRoIHRob3NlIG9mIHRoZSBzcGVjaWZpZWQgc3RyaW5nXG4gICAgb3ZlciB0aGUgcmFuZ2UsIFxcYyBhUmFuZ2UuIElmIHRoZSByYW5nZSBoYXMgYSBsZW5ndGggb2YgMCB0aGVuXG4gICAgdGhlIHNwZWNpZmllZCBzdHJpbmcgaXMgaW5zZXJ0ZWQgYXQgdGhlIHJhbmdlIGxvY2F0aW9uLiBUaGUgbmV3IGNoYXJhY3RlcnNcbiAgICBpbmhlcml0IHRoZSBhdHRyaWJ1dGVzIG9mIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaW4gdGhlIHJhbmdlIHRoYXQgdGhleVxuICAgIHJlcGxhY2Ugb3IgaW4gdGhlIGNhc2UgaWYgYSAwIHJhbmdlIGxlbmd0aCwgdGhlIGZpcnN0IGNoYXJhY3RlciBiZWZvcmUgb2ZcbiAgICBhZnRlciB0aGUgaW5zZXJ0IChhZnRlciBpZiB0aGUgaW5zZXJ0IGlzIGF0IGxvY2F0aW9uIDApLlxuICAgIEBub3RlIHRoZSByZXBsYWNlbWVudCBzdHJpbmcgbmVlZCBub3QgYmUgdGhlIHNhbWUgbGVuZ3RoIGFzIHRoZSByYW5nZVxuICAgIGJlaW5nIHJlcGxhY2VkLiBUaGUgZnVsbCBcXGMgYVN0cmluZyBpcyBpbnNlcnRlZCBhbmQgdGh1cyB0aGVcbiAgICByZWNlaXZlcidzIGxlbmd0aCBjaGFuZ2VzIHRvIG1hdGNoIHRoaXNcbiAgICBAcGFyYW0gYVJhbmdlIHRoZSByYW5nZSBvZiBjaGFyYWN0ZXJzIHRvIHJlcGxhY2UuXG4gICAgQHBhcmFtIGFTdHJpbmcgdGhlIHN0cmluZyB0byByZXBsYWNlIHRoZSBzcGVjaWZpZWQgY2hhcmFjdGVycyBpbiB0aGVcbiAgICByZWNlaXZlci5cbiovXG4tICh2b2lkKXJlcGxhY2VDaGFyYWN0ZXJzSW5SYW5nZTooQ1BSYW5nZSlhUmFuZ2Ugd2l0aFN0cmluZzooQ1BTdHJpbmcpYVN0cmluZ1xue1xuICAgIGlmICghYVN0cmluZylcbiAgICAgICAgYVN0cmluZyA9IEBcIlwiO1xuXG4gICAgdmFyIGxhc3RWYWxpZEluZGV4ID0gTUFYKF9yYW5nZUVudHJpZXMubGVuZ3RoIC0gMSwgMCksXG4gICAgICAgIHN0YXJ0aW5nSW5kZXggPSBbc2VsZiBfaW5kZXhPZkVudHJ5V2l0aEluZGV4OmFSYW5nZS5sb2NhdGlvbl07XG5cbiAgICBpZiAoc3RhcnRpbmdJbmRleCA8IDApXG4gICAgICAgIHN0YXJ0aW5nSW5kZXggPSBsYXN0VmFsaWRJbmRleDtcblxuICAgIHZhciBlbmRpbmdJbmRleCA9IFtzZWxmIF9pbmRleE9mRW50cnlXaXRoSW5kZXg6Q1BNYXhSYW5nZShhUmFuZ2UpXTtcblxuICAgIGlmIChlbmRpbmdJbmRleCA8IDApXG4gICAgICAgIGVuZGluZ0luZGV4ID0gbGFzdFZhbGlkSW5kZXg7XG5cbiAgICB2YXIgYWRkaXRpb25hbExlbmd0aCA9IGFTdHJpbmcubGVuZ3RoIC0gYVJhbmdlLmxlbmd0aCxcbiAgICAgICAgcGF0Y2hQb3NpdGlvbiA9IHN0YXJ0aW5nSW5kZXg7XG5cbiAgICBfc3RyaW5nID0gX3N0cmluZy5zdWJzdHJpbmcoMCwgYVJhbmdlLmxvY2F0aW9uKSArIGFTdHJpbmcgKyBfc3RyaW5nLnN1YnN0cmluZyhDUE1heFJhbmdlKGFSYW5nZSkpO1xuICAgIHZhciBvcmlnaW5hbExlbmd0aCA9IF9yYW5nZUVudHJpZXNbcGF0Y2hQb3NpdGlvbl0ucmFuZ2UubGVuZ3RoO1xuXG4gICAgaWYgKHN0YXJ0aW5nSW5kZXggPT09IGVuZGluZ0luZGV4KVxuICAgICAgICBfcmFuZ2VFbnRyaWVzW3BhdGNoUG9zaXRpb25dLnJhbmdlLmxlbmd0aCArPSBhZGRpdGlvbmFsTGVuZ3RoO1xuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIGlmIChDUEludGVyc2VjdGlvblJhbmdlKF9yYW5nZUVudHJpZXNbcGF0Y2hQb3NpdGlvbl0ucmFuZ2UsIGFSYW5nZSkubGVuZ3RoIDwgb3JpZ2luYWxMZW5ndGgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHN0YXJ0aW5nSW5kZXgrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmRpbmdJbmRleCA+IHN0YXJ0aW5nSW5kZXgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBvcmlnaW5hbE9mZnNldD0gX3JhbmdlRW50cmllc1tzdGFydGluZ0luZGV4XS5yYW5nZS5sb2NhdGlvbixcbiAgICAgICAgICAgICAgICBvZmZzZXRGcm9tU3BsaWNpbmcgPSBDUE1heFJhbmdlKF9yYW5nZUVudHJpZXNbZW5kaW5nSW5kZXhdLnJhbmdlKSAtIG9yaWdpbmFsT2Zmc2V0O1xuICAgICAgICAgICAgX3JhbmdlRW50cmllcy5zcGxpY2Uoc3RhcnRpbmdJbmRleCwgZW5kaW5nSW5kZXggLSBzdGFydGluZ0luZGV4KTtcbiAgICAgICAgICAgIF9yYW5nZUVudHJpZXNbc3RhcnRpbmdJbmRleF0ucmFuZ2UgPSBDUE1ha2VSYW5nZShvcmlnaW5hbE9mZnNldCwgb2Zmc2V0RnJvbVNwbGljaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXRjaFBvc2l0aW9uICE9PSBzdGFydGluZ0luZGV4KVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgbGhzT2Zmc2V0ID0gYVN0cmluZy5sZW5ndGggLSBDUEludGVyc2VjdGlvblJhbmdlKF9yYW5nZUVudHJpZXNbcGF0Y2hQb3NpdGlvbl0ucmFuZ2UsIGFSYW5nZSkubGVuZ3RoO1xuICAgICAgICAgICAgX3JhbmdlRW50cmllc1twYXRjaFBvc2l0aW9uXS5yYW5nZS5sZW5ndGggPSBvcmlnaW5hbExlbmd0aCArIGxoc09mZnNldDtcbiAgICAgICAgICAgIHZhciByaHNPZmZzZXQgPSBhU3RyaW5nLmxlbmd0aCAtIENQSW50ZXJzZWN0aW9uUmFuZ2UoX3JhbmdlRW50cmllc1tzdGFydGluZ0luZGV4XS5yYW5nZSwgYVJhbmdlKS5sZW5ndGg7XG4gICAgICAgICAgICBfcmFuZ2VFbnRyaWVzW3N0YXJ0aW5nSW5kZXhdLnJhbmdlLmxvY2F0aW9uICs9IGxoc09mZnNldDtcbiAgICAgICAgICAgIF9yYW5nZUVudHJpZXNbc3RhcnRpbmdJbmRleF0ucmFuZ2UubGVuZ3RoICs9IHJoc09mZnNldDtcbiAgICAgICAgICAgIHBhdGNoUG9zaXRpb24gPSBzdGFydGluZ0luZGV4O1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIF9yYW5nZUVudHJpZXNbcGF0Y2hQb3NpdGlvbl0ucmFuZ2UubGVuZ3RoICs9IGFkZGl0aW9uYWxMZW5ndGg7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgcGF0Y2hJbmRleCA9IHBhdGNoUG9zaXRpb24gKyAxLCBsID0gX3JhbmdlRW50cmllcy5sZW5ndGg7IHBhdGNoSW5kZXggPCBsOyBwYXRjaEluZGV4KyspXG4gICAgICAgIF9yYW5nZUVudHJpZXNbcGF0Y2hJbmRleF0ucmFuZ2UubG9jYXRpb24gKz0gYWRkaXRpb25hbExlbmd0aDtcbn1cblxuLyohXG4gICAgRGVsZXRlcyBhIHJhbmdlIG9mIGNoYXJhY3RlcnMgYW5kIHRoZWlyIGFzc29jaWF0ZWQgYXR0cmlidXRlcy5cbiAgICBAcGFyYW0gYVJhbmdlIGEgQ1BSYW5nZSBpbmRpY2F0aW5nIHRoZSByYW5nZSBvZiBjaGFyYWN0ZXJzIHRvIGRlbGV0ZS5cbiovXG4tICh2b2lkKWRlbGV0ZUNoYXJhY3RlcnNJblJhbmdlOihDUFJhbmdlKWFSYW5nZVxue1xuICAgIFtzZWxmIHJlcGxhY2VDaGFyYWN0ZXJzSW5SYW5nZTphUmFuZ2Ugd2l0aFN0cmluZzpuaWxdO1xufVxuXG4vL0NoYW5naW5nIEF0dHJpYnV0ZXNcbi8qIVxuICAgIFNldHMgdGhlIGF0dHJpYnV0ZXMgb2YgdGhlIHNwZWNpZmllZCBjaGFyYWN0ZXIgcmFuZ2UuXG5cbiAgICBAbm90ZSBUaGlzIHByb2Nlc3MgcmVtb3ZlcyB0aGUgYXR0cmlidXRlcyBhbHJlYWR5IGFzc29jaWF0ZWQgd2l0aCB0aGVcbiAgICBjaGFyYWN0ZXIgcmFuZ2UuIElmIHlvdSB3aXNoIHRvIHJldGFpbiB0aGUgY3VycmVudCBhdHRyaWJ1dGVzIHVzZVxuICAgIFxcYyAtYWRkQXR0cmlidXRlczpyYW5nZTouXG4gICAgQHBhcmFtIGFEaWN0aW9uYXJ5IGEgQ1BEaWN0aW9uYXJ5IG9mIGF0dHJpYnV0ZXMgKG5hbWVzIGFuZCB2YWx1ZXMpIHRvIHNldFxuICAgIHRvLlxuICAgIEBwYXJhbSBhUmFuZ2UgYSBDUFJhbmdlIGluZGljYXRpbmcgdGhlIHJhbmdlIG9mIGNoYXJhY3RlcnMgdG8gc2V0IHRoZWlyXG4gICAgYXNzb2NpYXRlZCBhdHRyaWJ1dGVzIHRvIFxcYyBhRGljdGlvbmFyeS5cbiovXG4tICh2b2lkKXNldEF0dHJpYnV0ZXM6KENQRGljdGlvbmFyeSlhRGljdGlvbmFyeSByYW5nZTooQ1BSYW5nZSlhUmFuZ2VcbntcbiAgICB2YXIgc3RhcnRpbmdFbnRyeUluZGV4ID0gW3NlbGYgX2luZGV4T2ZSYW5nZUVudHJ5Rm9ySW5kZXg6YVJhbmdlLmxvY2F0aW9uIHNwbGl0T25NYXhJbmRleDpZRVNdLFxuICAgICAgICBlbmRpbmdFbnRyeUluZGV4ID0gW3NlbGYgX2luZGV4T2ZSYW5nZUVudHJ5Rm9ySW5kZXg6Q1BNYXhSYW5nZShhUmFuZ2UpIHNwbGl0T25NYXhJbmRleDpZRVNdLFxuICAgICAgICBjdXJyZW50ID0gc3RhcnRpbmdFbnRyeUluZGV4O1xuXG4gICAgaWYgKGN1cnJlbnQgPCAwKVxuICAgICAgICBjdXJyZW50ID0gTUFYKF9yYW5nZUVudHJpZXMubGVuZ3RoIC0gMSwgMCk7XG5cbiAgICBpZiAoZW5kaW5nRW50cnlJbmRleCA9PT0gQ1BOb3RGb3VuZClcbiAgICAgICAgZW5kaW5nRW50cnlJbmRleCA9IF9yYW5nZUVudHJpZXMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGN1cnJlbnQgPCBlbmRpbmdFbnRyeUluZGV4KVxuICAgICAgICBfcmFuZ2VFbnRyaWVzW2N1cnJlbnQrK10uYXR0cmlidXRlcyA9IFthRGljdGlvbmFyeSBjb3B5XTtcblxuICAgIC8vbmVjZXNzYXJ5P1xuICAgIFtzZWxmIF9jb2FsZXNjZVJhbmdlRW50cmllc0Zyb21JbmRleDpzdGFydGluZ0VudHJ5SW5kZXggdG9JbmRleDplbmRpbmdFbnRyeUluZGV4XTtcbn1cblxuLyohXG4gICAgQWRkIGEgY29sbGVjdGlvbiBvZiBhdHRyaWJ1dGVzIHRvIHRoZSBzcGVjaWZpZWQgY2hhcmFjdGVyIHJhbmdlLlxuXG4gICAgQG5vdGUgQXR0cmlidXRlcyBjdXJyZW50bHkgYXNzb2NpYXRlZCB3aXRoIHRoZSBjaGFyYWN0ZXJzIGluIHRoZSByYW5nZSBhcmVcbiAgICB1bnRvdWNoZWQuIFRvIHJlbW92ZSBhbGwgcHJldmlvdXMgYXR0cmlidXRlcyB3aGVuIGFkZGluZyB1c2VcbiAgICBcXGMgLXNldEF0dHJpYnV0ZXM6cmFuZ2U6LlxuICAgIEBwYXJhbSBhRGljdGlvbmFyeSBhIENQRGljdGlvbmFyeSBvZiBhdHRyaWJ1dGVzIChuYW1lcyBhbmQgdmFsdWVzKSB0byBhZGQuXG4gICAgQHBhcmFtIGFSYW5nZSBhIENQUmFuZ2UgaW5kaWNhdGluZyB0aGUgcmFuZ2Ugb2YgY2hhcmFjdGVycyB0byBhZGQgdGhlXG4gICAgYXR0cmlidXRlcyB0by5cbiovXG4tICh2b2lkKWFkZEF0dHJpYnV0ZXM6KENQRGljdGlvbmFyeSlhRGljdGlvbmFyeSByYW5nZTooQ1BSYW5nZSlhUmFuZ2VcbntcbiAgICB2YXIgc3RhcnRpbmdFbnRyeUluZGV4ID0gW3NlbGYgX2luZGV4T2ZSYW5nZUVudHJ5Rm9ySW5kZXg6YVJhbmdlLmxvY2F0aW9uIHNwbGl0T25NYXhJbmRleDpZRVNdLFxuICAgICAgICBlbmRpbmdFbnRyeUluZGV4ID0gW3NlbGYgX2luZGV4T2ZSYW5nZUVudHJ5Rm9ySW5kZXg6Q1BNYXhSYW5nZShhUmFuZ2UpIHNwbGl0T25NYXhJbmRleDpZRVNdLFxuICAgICAgICBjdXJyZW50ID0gc3RhcnRpbmdFbnRyeUluZGV4O1xuXG4gICAgaWYgKGVuZGluZ0VudHJ5SW5kZXggPT09IENQTm90Rm91bmQpXG4gICAgICAgIGVuZGluZ0VudHJ5SW5kZXggPSBfcmFuZ2VFbnRyaWVzLmxlbmd0aDtcblxuICAgIHdoaWxlIChjdXJyZW50IDwgZW5kaW5nRW50cnlJbmRleClcbiAgICB7XG4gICAgICAgIHZhciBrZXlzID0gW2FEaWN0aW9uYXJ5IGFsbEtleXNdLFxuICAgICAgICAgICAgY291bnQgPSBba2V5cyBjb3VudF07XG5cbiAgICAgICAgd2hpbGUgKGNvdW50LS0pXG4gICAgICAgICAgICBbX3JhbmdlRW50cmllc1tjdXJyZW50XS5hdHRyaWJ1dGVzIHNldE9iamVjdDpbYURpY3Rpb25hcnkgb2JqZWN0Rm9yS2V5OmtleXNbY291bnRdXSBmb3JLZXk6a2V5c1tjb3VudF1dO1xuXG4gICAgICAgIGN1cnJlbnQrKztcbiAgICB9XG5cbiAgICAvL25lY2Vzc2FyeT9cbiAgICBbc2VsZiBfY29hbGVzY2VSYW5nZUVudHJpZXNGcm9tSW5kZXg6c3RhcnRpbmdFbnRyeUluZGV4IHRvSW5kZXg6ZW5kaW5nRW50cnlJbmRleF07XG59XG5cbi8qIVxuICAgIEFkZCBhbiBhdHRyaWJ1dGUgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBhbmQgdmFsdWUgdG8gdGhlIHNwZWNpZmllZCBjaGFyYWN0ZXJcbiAgICByYW5nZS5cblxuICAgIEBub3RlIEF0dHJpYnV0ZXMgY3VycmVudGx5IGFzc29jaWF0ZWQgd2l0aCB0aGUgY2hhcmFjdGVycyBpbiB0aGUgcmFuZ2UgYXJlXG4gICAgdW50b3VjaGVkLiBUbyByZW1vdmUgYWxsIHByZXZpb3VzIGF0dHJpYnV0ZXMgd2hlbiBhZGRpbmcgdXNlXG4gICAgXFxjIC1zZXRBdHRyaWJ1dGVzOnJhbmdlOi5cbiAgICBAcGFyYW0gYW5BdHRyaWJ1dGUgYSBDUFN0cmluZyBvZiB0aGUgYXR0cmlidXRlIG5hbWUuXG4gICAgQHBhcmFtIGFWYWx1ZSBhIHZhbHVlIHRvIGFzc2lnbiB0byB0aGUgYXR0cmlidXRlLiBDYW4gYmUgb2YgYW55IHR5cGUuXG4gICAgQHBhcmFtIGFSYW5nZSBhIENQUmFuZ2UgaW5kaWNhdGluZyB0aGUgcmFuZ2Ugb2YgY2hhcmFjdGVycyB0byBhZGQgdGhlXG4gICAgYXR0cmlidXRlIHRvby5cbiovXG4tICh2b2lkKWFkZEF0dHJpYnV0ZTooQ1BTdHJpbmcpYW5BdHRyaWJ1dGUgdmFsdWU6KGlkKWFWYWx1ZSByYW5nZTooQ1BSYW5nZSlhUmFuZ2VcbntcbiAgICBbc2VsZiBhZGRBdHRyaWJ1dGVzOkB7IGFuQXR0cmlidXRlOiBhVmFsdWUgfSByYW5nZTphUmFuZ2VdO1xufVxuXG4vKiFcbiAgICBSZW1vdmUgYSBuYW1lZCBhdHRyaWJ1dGUgZnJvbSBhIGNoYXJhY3RlciByYW5nZS5cbiAgICBAcGFyYW0gYW5BdHRyaWJ1dGUgYSBDUFN0cmluZyBzcGVjaWZ5aW5nIHRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUuXG4gICAgQHBhcmFtIGFSYW5nZSBhIENQUmFuZ2UgaW5kaWNhdGluZyB0aGUgcmFuZ2Ugb2YgY2hhcmFjdGVyIGZyb20gd2hpY2ggdGhlXG4gICAgYXR0cmlidXRlIHdpbGwgYmUgcmVtb3ZlZC5cbiovXG4tICh2b2lkKXJlbW92ZUF0dHJpYnV0ZTooQ1BTdHJpbmcpYW5BdHRyaWJ1dGUgcmFuZ2U6KENQUmFuZ2UpYVJhbmdlXG57XG4gICAgdmFyIHN0YXJ0aW5nRW50cnlJbmRleCA9IFtzZWxmIF9pbmRleE9mUmFuZ2VFbnRyeUZvckluZGV4OmFSYW5nZS5sb2NhdGlvbiBzcGxpdE9uTWF4SW5kZXg6WUVTXSxcbiAgICAgICAgZW5kaW5nRW50cnlJbmRleCA9IFtzZWxmIF9pbmRleE9mUmFuZ2VFbnRyeUZvckluZGV4OkNQTWF4UmFuZ2UoYVJhbmdlKSBzcGxpdE9uTWF4SW5kZXg6WUVTXSxcbiAgICAgICAgY3VycmVudCA9IHN0YXJ0aW5nRW50cnlJbmRleDtcblxuICAgIGlmIChlbmRpbmdFbnRyeUluZGV4ID09PSBDUE5vdEZvdW5kKVxuICAgICAgICBlbmRpbmdFbnRyeUluZGV4ID0gX3JhbmdlRW50cmllcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoY3VycmVudCA8IGVuZGluZ0VudHJ5SW5kZXgpXG4gICAgICAgIFtfcmFuZ2VFbnRyaWVzW2N1cnJlbnQrK10uYXR0cmlidXRlcyByZW1vdmVPYmplY3RGb3JLZXk6YW5BdHRyaWJ1dGVdO1xuXG4gICAgLy9uZWNlc3Nhcnk/XG4gICAgW3NlbGYgX2NvYWxlc2NlUmFuZ2VFbnRyaWVzRnJvbUluZGV4OnN0YXJ0aW5nRW50cnlJbmRleCB0b0luZGV4OmVuZGluZ0VudHJ5SW5kZXhdO1xufVxuXG4vL0NoYW5naW5nIENoYXJhY3RlcnMgYW5kIEF0dHJpYnV0ZXNcbi8qIVxuICAgIEFwcGVuZCBhbiBhdHRyaWJ1dGVkIHN0cmluZyAoY2hhcmFjdGVycyBhbmQgYXR0cmlidXRlcykgb24gdG8gdGhlIGVuZCBvZlxuICAgIHRoZSByZWNlaXZlci5cbiAgICBAcGFyYW0gYVN0cmluZyBhIENQQXR0cmlidXRlZFN0cmluZyB0byBhcHBlbmQuXG4qL1xuLSAodm9pZClhcHBlbmRBdHRyaWJ1dGVkU3RyaW5nOihDUEF0dHJpYnV0ZWRTdHJpbmcpYVN0cmluZ1xue1xuICAgIFtzZWxmIGluc2VydEF0dHJpYnV0ZWRTdHJpbmc6YVN0cmluZyBhdEluZGV4Ol9zdHJpbmcubGVuZ3RoXTtcbn1cblxuLyohXG4gICAgSW5zZXJ0cyBhbiBhdHRyaWJ1dGVkIHN0cmluZyAoY2hhcmFjdGVycyBhbmQgYXR0cmlidXRlcykgYXQgaW5kZXgsXG4gICAgXFxjIGFuSW5kZXgsIGludG8gdGhlIHJlY2VpdmVyLiBUaGUgcG9ydGlvbiBvZiB0aGVcbiAgICByZWNlaXZlcidzIGF0dHJpYnV0ZWQgc3RyaW5nIGZyb20gdGhlIHNwZWNpZmllZCBpbmRleCB0byB0aGUgZW5kIGlzIHNoaWZ0ZWRcbiAgICB1bnRpbCBhZnRlciB0aGUgaW5zZXJ0ZWQgc3RyaW5nLlxuICAgIEBwYXJhbSBhU3RyaW5nIGEgQ1BBdHRyaWJ1dGVkU3RyaW5nIHRvIGluc2VydC5cbiAgICBAcGFyYW0gYW5JbmRleCB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGluc2VydCBpcyB0byBvY2N1ci5cbiAgICBAZXhjZXB0aW9uIENQUmFuZ2VFeGNlcHRpb24gSWYgdGhlIGluZGV4IGlzIG91dCBvZiBib3VuZHMuXG4qL1xuLSAodm9pZClpbnNlcnRBdHRyaWJ1dGVkU3RyaW5nOihDUEF0dHJpYnV0ZWRTdHJpbmcpYVN0cmluZyBhdEluZGV4OihDUFVJbnRlZ2VyKWFuSW5kZXhcbntcbiAgICBpZiAoYW5JbmRleCA8IDAgfHwgYW5JbmRleCA+IFtzZWxmIGxlbmd0aF0pXG4gICAgICAgIFtDUEV4Y2VwdGlvbiByYWlzZTpDUFJhbmdlRXhjZXB0aW9uIHJlYXNvbjpcInRyaWVkIHRvIGluc2VydCBhdHRyaWJ1dGVkIHN0cmluZyBhdCBhbiBpbnZhbGlkIGluZGV4OiBcIiArIGFuSW5kZXhdO1xuXG4gICAgdmFyIGVudHJ5SW5kZXhPZk5leHRFbnRyeSA9IFtzZWxmIF9pbmRleE9mUmFuZ2VFbnRyeUZvckluZGV4OmFuSW5kZXggc3BsaXRPbk1heEluZGV4OllFU10sXG4gICAgICAgIG90aGVyUmFuZ2VFbnRyaWVzID0gYVN0cmluZy5fcmFuZ2VFbnRyaWVzLFxuICAgICAgICBsZW5ndGggPSBbYVN0cmluZyBsZW5ndGhdO1xuXG4gICAgaWYgKGVudHJ5SW5kZXhPZk5leHRFbnRyeSA9PT0gQ1BOb3RGb3VuZClcbiAgICAgICAgZW50cnlJbmRleE9mTmV4dEVudHJ5ID0gX3JhbmdlRW50cmllcy5sZW5ndGg7XG5cbiAgICBfc3RyaW5nID0gX3N0cmluZy5zdWJzdHJpbmcoMCwgYW5JbmRleCkgKyBhU3RyaW5nLl9zdHJpbmcgKyBfc3RyaW5nLnN1YnN0cmluZyhhbkluZGV4KTtcblxuICAgIHZhciBjdXJyZW50ID0gZW50cnlJbmRleE9mTmV4dEVudHJ5O1xuICAgIHdoaWxlIChjdXJyZW50IDwgX3JhbmdlRW50cmllcy5sZW5ndGgpXG4gICAgICAgIF9yYW5nZUVudHJpZXNbY3VycmVudCsrXS5yYW5nZS5sb2NhdGlvbiArPSBsZW5ndGg7XG5cbiAgICB2YXIgbmV3UmFuZ2VFbnRyeUNvdW50ID0gb3RoZXJSYW5nZUVudHJpZXMubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IDA7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBuZXdSYW5nZUVudHJ5Q291bnQpXG4gICAge1xuICAgICAgICB2YXIgZW50cnlDb3B5ID0gY29weVJhbmdlRW50cnkob3RoZXJSYW5nZUVudHJpZXNbaW5kZXgrK10pO1xuICAgICAgICBlbnRyeUNvcHkucmFuZ2UubG9jYXRpb24gKz0gYW5JbmRleDtcblxuICAgICAgICBfcmFuZ2VFbnRyaWVzLnNwbGljZShlbnRyeUluZGV4T2ZOZXh0RW50cnkgLSAxICsgaW5kZXgsIDAsIGVudHJ5Q29weSk7XG4gICAgfVxuXG4gICAgW3NlbGYgX2NvYWxlc2NlUmFuZ2VFbnRyaWVzRnJvbUluZGV4Ok1BWCgwLCBlbnRyeUluZGV4T2ZOZXh0RW50cnkgLSAxKSB0b0luZGV4Ok1JTihlbnRyeUluZGV4T2ZOZXh0RW50cnkgKyAxLCBfcmFuZ2VFbnRyaWVzLmxlbmd0aCAtIDEpXTtcbn1cblxuLyohXG4gICAgUmVwbGFjZXMgY2hhcmFjdGVycyBhbmQgYXR0cmlidXRlcyBpbiB0aGUgcmFuZ2UgXFxjIGFSYW5nZSB3aXRoXG4gICAgdGhvc2Ugb2YgdGhlIGdpdmVuIGF0dHJpYnV0ZWQgc3RyaW5nLCBcXGMgYVN0cmluZy5cbiAgICBAcGFyYW0gYVJhbmdlIGEgQ1BSYW5nZSBvYmplY3Qgc3BlY2lmeWluZyB0aGUgcmFuZ2Ugb2YgY2hhcmFjdGVycyBhbmRcbiAgICBhdHRyaWJ1dGVzIGluIHRoZSBvYmplY3QgdG8gcmVwbGFjZS5cbiAgICBAcGFyYW0gYVN0cmluZyBhIENQQXR0cmlidXRlZFN0cmluZyBjb250YWluaW5nIHRoZSBkYXRhIHRvIGJlIHVzZWQgZm9yXG4gICAgcmVwbGFjZW1lbnQuXG4qL1xuLSAodm9pZClyZXBsYWNlQ2hhcmFjdGVyc0luUmFuZ2U6KENQUmFuZ2UpYVJhbmdlIHdpdGhBdHRyaWJ1dGVkU3RyaW5nOihDUEF0dHJpYnV0ZWRTdHJpbmcpYVN0cmluZ1xue1xuICAgIFtzZWxmIGRlbGV0ZUNoYXJhY3RlcnNJblJhbmdlOmFSYW5nZV07XG4gICAgW3NlbGYgaW5zZXJ0QXR0cmlidXRlZFN0cmluZzphU3RyaW5nIGF0SW5kZXg6YVJhbmdlLmxvY2F0aW9uXTtcbn1cblxuLyohXG4gICAgU2V0cyB0aGUgb2JqZWN0cyBjaGFyYWN0ZXJzIGFuZCBhdHRyaWJ1dGVzIHRvIHRob3NlIG9mIFxcYyBhU3RyaW5nLlxuICAgIEBwYXJhbSBhU3RyaW5nIGlzIGEgQ1BBdHRyaWJ1dGVkU3RyaW5nIGZyb20gd2hpY2ggdGhlIGNvbnRlbnRzIHdpbGwgYmVcbiAgICBjb3BpZWQuXG4qL1xuLSAodm9pZClzZXRBdHRyaWJ1dGVkU3RyaW5nOihDUEF0dHJpYnV0ZWRTdHJpbmcpYVN0cmluZ1xue1xuICAgIF9zdHJpbmcgPSBhU3RyaW5nLl9zdHJpbmc7XG4gICAgX3JhbmdlRW50cmllcyA9IFthU3RyaW5nLl9yYW5nZUVudHJpZXMgYXJyYXlCeUFwcGx5aW5nQmxvY2s6ZnVuY3Rpb24oZW50cnkpXG4gICAge1xuICAgICAgICByZXR1cm4gY29weVJhbmdlRW50cnkoZW50cnkpO1xuICAgIH1dO1xufVxuXG4vL1ByaXZhdGUgbWV0aG9kc1xuLSAoTnVtYmVyKV9pbmRleE9mUmFuZ2VFbnRyeUZvckluZGV4Oih1bnNpZ25lZCljaGFyYWN0ZXJJbmRleCBzcGxpdE9uTWF4SW5kZXg6KEJPT0wpc3BsaXRcbntcbiAgICB2YXIgaW5kZXggPSBbc2VsZiBfaW5kZXhPZkVudHJ5V2l0aEluZGV4OmNoYXJhY3RlckluZGV4XTtcblxuICAgIGlmIChpbmRleCA9PT0gQ1BOb3RGb3VuZClcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuXG4gICAgdmFyIHJhbmdlRW50cnkgPSBfcmFuZ2VFbnRyaWVzW2luZGV4XTtcblxuICAgIGlmIChyYW5nZUVudHJ5LnJhbmdlLmxvY2F0aW9uID09PSBjaGFyYWN0ZXJJbmRleCB8fCAoQ1BNYXhSYW5nZShyYW5nZUVudHJ5LnJhbmdlKSAtIDEgPT09IGNoYXJhY3RlckluZGV4ICYmICFzcGxpdCkpXG4gICAgICAgIHJldHVybiBpbmRleDtcblxuICAgIHZhciBuZXdFbnRyaWVzID0gc3BsaXRSYW5nZUVudHJ5QXRJbmRleChyYW5nZUVudHJ5LCBjaGFyYWN0ZXJJbmRleCk7XG4gICAgX3JhbmdlRW50cmllcy5zcGxpY2UoaW5kZXgsIDEsIG5ld0VudHJpZXNbMF0sIG5ld0VudHJpZXNbMV0pO1xuICAgIGluZGV4Kys7XG5cbiAgICByZXR1cm4gaW5kZXg7XG59XG5cbi0gKHZvaWQpX2NvYWxlc2NlUmFuZ2VFbnRyaWVzRnJvbUluZGV4Oih1bnNpZ25lZClzdGFydCB0b0luZGV4Oih1bnNpZ25lZCllbmRcbntcbiAgICB2YXIgY3VycmVudCA9IHN0YXJ0O1xuXG4gICAgaWYgKGVuZCA+PSBfcmFuZ2VFbnRyaWVzLmxlbmd0aClcbiAgICAgICAgZW5kID0gX3JhbmdlRW50cmllcy5sZW5ndGggLSAxO1xuXG4gICAgd2hpbGUgKGN1cnJlbnQgPCBlbmQpXG4gICAge1xuICAgICAgICB2YXIgYSA9IF9yYW5nZUVudHJpZXNbY3VycmVudF0sXG4gICAgICAgICAgICBiID0gX3JhbmdlRW50cmllc1tjdXJyZW50ICsgMV07XG5cbiAgICAgICAgaWYgKGEgJiYgYiAmJiBbYS5hdHRyaWJ1dGVzIGlzRXF1YWxUb0RpY3Rpb25hcnk6Yi5hdHRyaWJ1dGVzXSlcbiAgICAgICAge1xuICAgICAgICAgICAgYS5yYW5nZS5sZW5ndGggPSBDUE1heFJhbmdlKGIucmFuZ2UpIC0gYS5yYW5nZS5sb2NhdGlvbjtcbiAgICAgICAgICAgIF9yYW5nZUVudHJpZXMuc3BsaWNlKGN1cnJlbnQgKyAxLCAxKTtcbiAgICAgICAgICAgIGVuZC0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGN1cnJlbnQrKztcbiAgICB9XG59XG5cbi8vR3JvdXBpbmcgQ2hhbmdlc1xuLyohXG4gICAgVGhpcyBmdW5jdGlvbiBpcyBkZWxpYmVyYXRlbHkgZW1wdHkuIEl0IGlzIHByb3ZpZGVkIHRvIGVhc2UgY29kZSBjb252ZXJ0aW5nXG4gICAgZnJvbSBDb2NvYS5cbiovXG4tICh2b2lkKWJlZ2luRWRpdGluZ1xue1xuICAgIC8vZG8gbm90aGluZyAoc2F5cyBjb2NvdHJvbiBhbmQgZ251c3RlcClcbn1cblxuLyohXG4gICAgVGhpcyBmdW5jdGlvbiBpcyBkZWxpYmVyYXRlbHkgZW1wdHkuIEl0IGlzIHByb3ZpZGVkIHRvIGVhc2UgY29kZSBjb252ZXJ0aW5nXG4gICAgZnJvbSBDb2NvYS5cbiovXG4tICh2b2lkKWVuZEVkaXRpbmdcbntcbiAgICAvL2RvIG5vdGhpbmcgKHNheXMgY29jb3Ryb24gYW5kIGdudXN0ZXApXG59XG5cbkBlbmRcblxudmFyIENQQXR0cmlidXRlZFN0cmluZ1N0cmluZ0tleSAgICAgPSBcIkNQQXR0cmlidXRlZFN0cmluZ1N0cmluZ1wiLFxuICAgIENQQXR0cmlidXRlZFN0cmluZ1Jhbmdlc0tleSAgICAgPSBcIkNQQXR0cmlidXRlZFN0cmluZ1Jhbmdlc1wiLFxuICAgIENQQXR0cmlidXRlZFN0cmluZ0F0dHJpYnV0ZXNLZXkgPSBcIkNQQXR0cmlidXRlZFN0cmluZ0F0dHJpYnV0ZXNcIjtcblxuQGltcGxlbWVudGF0aW9uIENQQXR0cmlidXRlZFN0cmluZyAoQ1BDb2RpbmcpXG5cbi0gKGlkKWluaXRXaXRoQ29kZXI6KENQQ29kZXIpYUNvZGVyXG57XG4gICAgc2VsZiA9IFtzZWxmIGluaXRdO1xuXG4gICAgaWYgKHNlbGYpXG4gICAge1xuICAgICAgICBfc3RyaW5nID0gW2FDb2RlciBkZWNvZGVPYmplY3RGb3JLZXk6Q1BBdHRyaWJ1dGVkU3RyaW5nU3RyaW5nS2V5XTtcbiAgICAgICAgdmFyIGRlY29kZWRSYW5nZXMgPSBbYUNvZGVyIGRlY29kZU9iamVjdEZvcktleTpDUEF0dHJpYnV0ZWRTdHJpbmdSYW5nZXNLZXldLFxuICAgICAgICAgICAgZGVjb2RlZEF0dHJpYnV0ZXMgPSBbYUNvZGVyIGRlY29kZU9iamVjdEZvcktleTpDUEF0dHJpYnV0ZWRTdHJpbmdBdHRyaWJ1dGVzS2V5XTtcblxuICAgICAgICBfcmFuZ2VFbnRyaWVzID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBkZWNvZGVkUmFuZ2VzLmxlbmd0aDsgaSA8IGw7IGkrKylcbiAgICAgICAgICAgIF9yYW5nZUVudHJpZXMucHVzaChtYWtlUmFuZ2VFbnRyeShkZWNvZGVkUmFuZ2VzW2ldLCBkZWNvZGVkQXR0cmlidXRlc1tpXSkpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xufVxuXG4tICh2b2lkKWVuY29kZVdpdGhDb2RlcjooQ1BDb2RlcilhQ29kZXJcbntcbiAgICBbYUNvZGVyIGVuY29kZU9iamVjdDpfc3RyaW5nIGZvcktleTpDUEF0dHJpYnV0ZWRTdHJpbmdTdHJpbmdLZXldO1xuXG4gICAgdmFyIHJhbmdlc0ZvckVuY29kaW5nID0gW10sXG4gICAgICAgIGRpY3RzRm9yRW5jb2RpbmcgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gX3JhbmdlRW50cmllcy5sZW5ndGg7IGkgPCBsOyBpKyspXG4gICAge1xuICAgICAgICByYW5nZXNGb3JFbmNvZGluZy5wdXNoKF9yYW5nZUVudHJpZXNbaV0ucmFuZ2UpO1xuICAgICAgICBkaWN0c0ZvckVuY29kaW5nLnB1c2goX3JhbmdlRW50cmllc1tpXS5hdHRyaWJ1dGVzKTtcbiAgICB9XG5cbiAgICBbYUNvZGVyIGVuY29kZU9iamVjdDpyYW5nZXNGb3JFbmNvZGluZyBmb3JLZXk6Q1BBdHRyaWJ1dGVkU3RyaW5nUmFuZ2VzS2V5XTtcbiAgICBbYUNvZGVyIGVuY29kZU9iamVjdDpkaWN0c0ZvckVuY29kaW5nIGZvcktleTpDUEF0dHJpYnV0ZWRTdHJpbmdBdHRyaWJ1dGVzS2V5XTtcbn1cblxuQGVuZFxuXG4vKiFcbiAgICBAY2xhc3MgQ1BNdXRhYmxlQXR0cmlidXRlZFN0cmluZ1xuICAgIEBpbmdyb3VwIGNvbXBhdGliaWxpdHlcblxuICAgIFRoaXMgY2xhc3MgaXMganVzdCBhbiBlbXB0eSBzdWJjbGFzcyBvZiBDUEF0dHJpYnV0ZWRTdHJpbmcuXG4gICAgQ1BBdHRyaWJ1dGVkU3RyaW5nIGFscmVhZHkgaW1wbGVtZW50cyBtdXRhYmxlIG1ldGhvZHMgYW5kXG4gICAgdGhpcyBjbGFzcyBvbmx5IGV4aXN0cyBmb3Igc291cmNlIGNvbXBhdGliaWxpdHkuXG4qL1xuQGltcGxlbWVudGF0aW9uIENQTXV0YWJsZUF0dHJpYnV0ZWRTdHJpbmcgOiBDUEF0dHJpYnV0ZWRTdHJpbmdcblxuQGVuZFxuXG52YXIgaXNFcXVhbCA9IGZ1bmN0aW9uKGEsIGIpXG57XG4gICAgaWYgKGEgPT09IGIpXG4gICAgICAgIHJldHVybiBZRVM7XG5cbiAgICBpZiAoW2EgcmVzcG9uZHNUb1NlbGVjdG9yOkBzZWxlY3Rvcihpc0VxdWFsOildICYmIFthIGlzRXF1YWw6Yl0pXG4gICAgICAgIHJldHVybiBZRVM7XG5cbiAgICByZXR1cm4gTk87XG59O1xuXG52YXIgbWFrZVJhbmdlRW50cnkgPSBmdW5jdGlvbigvKkNQUmFuZ2UqL2FSYW5nZSwgLypDUERpY3Rpb25hcnkqL2F0dHJpYnV0ZXMpXG57XG4gICAgcmV0dXJuIHtyYW5nZTphUmFuZ2UsIGF0dHJpYnV0ZXM6W2F0dHJpYnV0ZXMgY29weV19O1xufTtcblxudmFyIGNvcHlSYW5nZUVudHJ5ID0gZnVuY3Rpb24oLypSYW5nZUVudHJ5Ki9hUmFuZ2VFbnRyeSlcbntcbiAgICByZXR1cm4gbWFrZVJhbmdlRW50cnkoQ1BNYWtlUmFuZ2VDb3B5KGFSYW5nZUVudHJ5LnJhbmdlKSwgW2FSYW5nZUVudHJ5LmF0dHJpYnV0ZXMgY29weV0pO1xufTtcblxudmFyIHNwbGl0UmFuZ2VFbnRyeUF0SW5kZXggPSBmdW5jdGlvbigvKlJhbmdlRW50cnkqL2FSYW5nZUVudHJ5LCAvKnVuc2lnbmVkKi9hbkluZGV4KVxue1xuICAgIHZhciBuZXdSYW5nZUVudHJ5ID0gY29weVJhbmdlRW50cnkoYVJhbmdlRW50cnkpLFxuICAgICAgICBjYWNoZWRJbmRleCA9IENQTWF4UmFuZ2UoYVJhbmdlRW50cnkucmFuZ2UpO1xuXG4gICAgYVJhbmdlRW50cnkucmFuZ2UubGVuZ3RoID0gYW5JbmRleCAtIGFSYW5nZUVudHJ5LnJhbmdlLmxvY2F0aW9uO1xuICAgIG5ld1JhbmdlRW50cnkucmFuZ2UubG9jYXRpb24gPSBhbkluZGV4O1xuICAgIG5ld1JhbmdlRW50cnkucmFuZ2UubGVuZ3RoID0gY2FjaGVkSW5kZXggLSBhbkluZGV4O1xuICAgIG5ld1JhbmdlRW50cnkuYXR0cmlidXRlcyA9IFtuZXdSYW5nZUVudHJ5LmF0dHJpYnV0ZXMgY29weV07XG5cbiAgICByZXR1cm4gW2FSYW5nZUVudHJ5LCBuZXdSYW5nZUVudHJ5XTtcbn07XG4iXX0=t;35991;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPRange.j", YES);objj_executeFile("CPString.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPAttributedString"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_string", "CPString"), new objj_ivar("_rangeEntries", "CPArray")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPAttributedString__init(self, _cmd)
{
    return (self.isa.method_msgSend["initWithString:attributes:"] || _objj_forward)(self, (self.isa.method_dtable["initWithString:attributes:"], self.isa.method_dtable["initWithString:attributes:"], "initWithString:attributes:"), "", nil);
}

,["id"]), new objj_method(sel_getUid("initWithString:"), function $CPAttributedString__initWithString_(self, _cmd, aString)
{
    return (self.isa.method_msgSend["initWithString:attributes:"] || _objj_forward)(self, (self.isa.method_dtable["initWithString:attributes:"], self.isa.method_dtable["initWithString:attributes:"], "initWithString:attributes:"), aString, nil);
}

,["id","CPString"]), new objj_method(sel_getUid("initWithAttributedString:"), function $CPAttributedString__initWithAttributedString_(self, _cmd, aString)
{
    var string = (self.isa.method_msgSend["initWithString:attributes:"] || _objj_forward)(self, (self.isa.method_dtable["initWithString:attributes:"], self.isa.method_dtable["initWithString:attributes:"], "initWithString:attributes:"), "", nil);
    (string == null ? null : (string.isa.method_msgSend["setAttributedString:"] || _objj_forward)(string, (string.isa.method_dtable["setAttributedString:"], "setAttributedString:"), aString));
    return string;
}

,["id","CPAttributedString"]), new objj_method(sel_getUid("initWithString:attributes:"), function $CPAttributedString__initWithString_attributes_(self, _cmd, aString, attributes)
{
    self = (objj_getClass("CPAttributedString").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        if (!attributes)
            attributes = (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
        self._string = "" + aString;
        self._rangeEntries = [makeRangeEntry(CPMakeRange(0, self._string.length), attributes)];
    }
    return self;
    var ___r1;
}

,["id","CPString","CPDictionary"]), new objj_method(sel_getUid("string"), function $CPAttributedString__string(self, _cmd)
{
    return self._string;
}

,["CPString"]), new objj_method(sel_getUid("mutableString"), function $CPAttributedString__mutableString(self, _cmd)
{
    return (self.isa.method_msgSend["string"] || _objj_forward)(self, (self.isa.method_dtable["string"], "string"));
}

,["CPString"]), new objj_method(sel_getUid("length"), function $CPAttributedString__length(self, _cmd)
{
    return self._string.length;
}

,["unsigned"]), new objj_method(sel_getUid("_indexOfEntryWithIndex:"), function $CPAttributedString___indexOfEntryWithIndex_(self, _cmd, anIndex)
{
    if (anIndex < 0 || anIndex > self._string.length || anIndex === undefined)
        return CPNotFound;
    var sortFunction =     function(index, entry)
    {
        if (CPLocationInRange(index, entry.range) || !index && !CPMaxRange(entry.range))
            return CPOrderedSame;
        else if (CPMaxRange(entry.range) <= index)
            return CPOrderedDescending;
        else
            return CPOrderedAscending;
    };
    return ((___r1 = self._rangeEntries), ___r1 == null ? null : (___r1.isa.method_msgSend["indexOfObject:inSortedRange:options:usingComparator:"] || _objj_forward)(___r1, (self._rangeEntries.isa.method_dtable["indexOfObject:inSortedRange:options:usingComparator:"], self._rangeEntries.isa.method_dtable["indexOfObject:inSortedRange:options:usingComparator:"], self._rangeEntries.isa.method_dtable["indexOfObject:inSortedRange:options:usingComparator:"], self._rangeEntries.isa.method_dtable["indexOfObject:inSortedRange:options:usingComparator:"], "indexOfObject:inSortedRange:options:usingComparator:"), anIndex, nil, 0, sortFunction));
    var ___r1;
}

,["unsigned","unsigned"]), new objj_method(sel_getUid("attributesAtIndex:effectiveRange:"), function $CPAttributedString__attributesAtIndex_effectiveRange_(self, _cmd, anIndex, aRange)
{
    var entryIndex = (self.isa.method_msgSend["_indexOfEntryWithIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_indexOfEntryWithIndex:"], "_indexOfEntryWithIndex:"), anIndex);
    if (entryIndex === CPNotFound)
        return (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    var matchingRange = self._rangeEntries[entryIndex];
    if (aRange)
    {
        aRange.location = matchingRange.range.location;
        aRange.length = matchingRange.range.length;
    }
    return matchingRange.attributes;
    var ___r1;
}

,["CPDictionary","CPUInteger","CPRangePointer"]), new objj_method(sel_getUid("attributesAtIndex:longestEffectiveRange:inRange:"), function $CPAttributedString__attributesAtIndex_longestEffectiveRange_inRange_(self, _cmd, anIndex, aRange, rangeLimit)
{
    var startingEntryIndex = (self.isa.method_msgSend["_indexOfEntryWithIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_indexOfEntryWithIndex:"], "_indexOfEntryWithIndex:"), anIndex);
    if (startingEntryIndex === CPNotFound)
        return (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    if (!aRange)
        return self._rangeEntries[startingEntryIndex].attributes;
    if (CPRangeInRange(self._rangeEntries[startingEntryIndex].range, rangeLimit))
    {
        aRange.location = rangeLimit.location;
        aRange.length = rangeLimit.length;
        return self._rangeEntries[startingEntryIndex].attributes;
    }
    var nextRangeIndex = startingEntryIndex - 1,
        currentEntry = self._rangeEntries[startingEntryIndex],
        comparisonDict = currentEntry.attributes;
    while (nextRangeIndex >= 0)
    {
        var nextEntry = self._rangeEntries[nextRangeIndex];
        if (CPMaxRange(nextEntry.range) > rangeLimit.location && ((___r1 = nextEntry.attributes), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqualToDictionary:"] || _objj_forward)(___r1, "isEqualToDictionary:", comparisonDict)))
        {
            currentEntry = nextEntry;
            nextRangeIndex--;
        }
        else
            break;
    }
    aRange.location = MAX(currentEntry.range.location, rangeLimit.location);
    currentEntry = self._rangeEntries[startingEntryIndex];
    nextRangeIndex = startingEntryIndex + 1;
    while (nextRangeIndex < self._rangeEntries.length)
    {
        var nextEntry = self._rangeEntries[nextRangeIndex];
        if (nextEntry.range.location < CPMaxRange(rangeLimit) && ((___r1 = nextEntry.attributes), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqualToDictionary:"] || _objj_forward)(___r1, "isEqualToDictionary:", comparisonDict)))
        {
            currentEntry = nextEntry;
            nextRangeIndex++;
        }
        else
            break;
    }
    aRange.length = MIN(CPMaxRange(currentEntry.range), CPMaxRange(rangeLimit)) - aRange.location;
    return comparisonDict;
    var ___r1;
}

,["CPDictionary","CPUInteger","CPRangePointer","CPRange"]), new objj_method(sel_getUid("attribute:atIndex:effectiveRange:"), function $CPAttributedString__attribute_atIndex_effectiveRange_(self, _cmd, attribute, index, aRange)
{
    if (!attribute)
    {
        if (aRange)
        {
            aRange.location = 0;
            aRange.length = self._string.length;
        }
        return nil;
    }
    return ((___r1 = (self.isa.method_msgSend["attributesAtIndex:effectiveRange:"] || _objj_forward)(self, (self.isa.method_dtable["attributesAtIndex:effectiveRange:"], self.isa.method_dtable["attributesAtIndex:effectiveRange:"], "attributesAtIndex:effectiveRange:"), index, aRange)), ___r1 == null ? null : (___r1.isa.method_msgSend["valueForKey:"] || _objj_forward)(___r1, "valueForKey:", attribute));
    var ___r1;
}

,["id","CPString","CPUInteger","CPRangePointer"]), new objj_method(sel_getUid("attribute:atIndex:longestEffectiveRange:inRange:"), function $CPAttributedString__attribute_atIndex_longestEffectiveRange_inRange_(self, _cmd, attribute, anIndex, aRange, rangeLimit)
{
    var startingEntryIndex = (self.isa.method_msgSend["_indexOfEntryWithIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_indexOfEntryWithIndex:"], "_indexOfEntryWithIndex:"), anIndex);
    if (startingEntryIndex === CPNotFound || !attribute)
        return nil;
    if (!aRange)
        return ((___r1 = self._rangeEntries[startingEntryIndex].attributes), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, "objectForKey:", attribute));
    if (CPRangeInRange(self._rangeEntries[startingEntryIndex].range, rangeLimit))
    {
        aRange.location = rangeLimit.location;
        aRange.length = rangeLimit.length;
        return ((___r1 = self._rangeEntries[startingEntryIndex].attributes), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, "objectForKey:", attribute));
    }
    var nextRangeIndex = startingEntryIndex - 1,
        currentEntry = self._rangeEntries[startingEntryIndex],
        comparisonAttribute = ((___r1 = currentEntry.attributes), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, "objectForKey:", attribute));
    while (nextRangeIndex >= 0)
    {
        var nextEntry = self._rangeEntries[nextRangeIndex];
        if (CPMaxRange(nextEntry.range) > rangeLimit.location && isEqual(comparisonAttribute, ((___r1 = nextEntry.attributes), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, "objectForKey:", attribute))))
        {
            currentEntry = nextEntry;
            nextRangeIndex--;
        }
        else
            break;
    }
    aRange.location = MAX(currentEntry.range.location, rangeLimit.location);
    currentEntry = self._rangeEntries[startingEntryIndex];
    nextRangeIndex = startingEntryIndex + 1;
    while (nextRangeIndex < self._rangeEntries.length)
    {
        var nextEntry = self._rangeEntries[nextRangeIndex];
        if (nextEntry.range.location < CPMaxRange(rangeLimit) && isEqual(comparisonAttribute, ((___r1 = nextEntry.attributes), ___r1 == null ? null : (___r1.isa.method_msgSend["objectForKey:"] || _objj_forward)(___r1, "objectForKey:", attribute))))
        {
            currentEntry = nextEntry;
            nextRangeIndex++;
        }
        else
            break;
    }
    aRange.length = MIN(CPMaxRange(currentEntry.range), CPMaxRange(rangeLimit)) - aRange.location;
    return comparisonAttribute;
    var ___r1;
}

,["id","CPString","CPUInteger","CPRangePointer","CPRange"]), new objj_method(sel_getUid("isEqualToAttributedString:"), function $CPAttributedString__isEqualToAttributedString_(self, _cmd, aString)
{
    if (!aString)
        return NO;
    if (self._string !== (aString == null ? null : (aString.isa.method_msgSend["string"] || _objj_forward)(aString, (aString.isa.method_dtable["string"], "string"))))
        return NO;
    var myRange = CPMakeRange(),
        comparisonRange = CPMakeRange(),
        myAttributes = (self.isa.method_msgSend["attributesAtIndex:effectiveRange:"] || _objj_forward)(self, (self.isa.method_dtable["attributesAtIndex:effectiveRange:"], self.isa.method_dtable["attributesAtIndex:effectiveRange:"], "attributesAtIndex:effectiveRange:"), 0, myRange),
        comparisonAttributes = (aString == null ? null : (aString.isa.method_msgSend["attributesAtIndex:effectiveRange:"] || _objj_forward)(aString, (aString.isa.method_dtable["attributesAtIndex:effectiveRange:"], aString.isa.method_dtable["attributesAtIndex:effectiveRange:"], "attributesAtIndex:effectiveRange:"), 0, comparisonRange)),
        length = self._string.length;
    do
    {
        if ((CPIntersectionRange(myRange, comparisonRange)).length > 0 && !(myAttributes == null ? null : (myAttributes.isa.method_msgSend["isEqualToDictionary:"] || _objj_forward)(myAttributes, (myAttributes.isa.method_dtable["isEqualToDictionary:"], "isEqualToDictionary:"), comparisonAttributes)))
        {
            return NO;
        }
        else if (CPMaxRange(myRange) < CPMaxRange(comparisonRange))
            myAttributes = (self.isa.method_msgSend["attributesAtIndex:effectiveRange:"] || _objj_forward)(self, (self.isa.method_dtable["attributesAtIndex:effectiveRange:"], self.isa.method_dtable["attributesAtIndex:effectiveRange:"], "attributesAtIndex:effectiveRange:"), CPMaxRange(myRange), myRange);
        else
            comparisonAttributes = (aString == null ? null : (aString.isa.method_msgSend["attributesAtIndex:effectiveRange:"] || _objj_forward)(aString, (aString.isa.method_dtable["attributesAtIndex:effectiveRange:"], aString.isa.method_dtable["attributesAtIndex:effectiveRange:"], "attributesAtIndex:effectiveRange:"), CPMaxRange(comparisonRange), comparisonRange));
    }
    while (CPMaxRange(CPUnionRange(myRange, comparisonRange)) < length);
        return YES;
}

,["BOOL","CPAttributedString"]), new objj_method(sel_getUid("isEqual:"), function $CPAttributedString__isEqual_(self, _cmd, anObject)
{
    if (anObject === self)
        return YES;
    if ((anObject == null ? null : (anObject.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class")))))
        return (self.isa.method_msgSend["isEqualToAttributedString:"] || _objj_forward)(self, (self.isa.method_dtable["isEqualToAttributedString:"], "isEqualToAttributedString:"), anObject);
    return NO;
}

,["BOOL","id"]), new objj_method(sel_getUid("attributedSubstringFromRange:"), function $CPAttributedString__attributedSubstringFromRange_(self, _cmd, aRange)
{
    if (!aRange || CPMaxRange(aRange) > self._string.length || aRange.location < 0)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPRangeException, "tried to get attributedSubstring for an invalid range: " + (aRange ? CPStringFromRange(aRange) : "nil"));
    var newString = ((___r1 = (CPAttributedString.isa.method_msgSend["alloc"] || _objj_forward)(CPAttributedString, (CPAttributedString.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithString:"] || _objj_forward)(___r1, "initWithString:", self._string.substring(aRange.location, CPMaxRange(aRange)))),
        entryIndex = (self.isa.method_msgSend["_indexOfEntryWithIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_indexOfEntryWithIndex:"], "_indexOfEntryWithIndex:"), aRange.location);
    if (entryIndex === CPNotFound)
        _CPRaiseRangeException(self, _cmd, aRange.location, self._string.length);
    var currentRangeEntry = self._rangeEntries[entryIndex],
        lastIndex = CPMaxRange(aRange);
    newString._rangeEntries = [];
    while (currentRangeEntry && CPMaxRange(currentRangeEntry.range) < lastIndex)
    {
        var newEntry = copyRangeEntry(currentRangeEntry);
        newEntry.range.location -= aRange.location;
        if (newEntry.range.location < 0)
        {
            newEntry.range.length += newEntry.range.location;
            newEntry.range.location = 0;
        }
        newString._rangeEntries.push(newEntry);
        currentRangeEntry = self._rangeEntries[++entryIndex];
    }
    if (currentRangeEntry)
    {
        var newRangeEntry = copyRangeEntry(currentRangeEntry);
        newRangeEntry.range.length = CPMaxRange(aRange) - newRangeEntry.range.location;
        newRangeEntry.range.location -= aRange.location;
        if (newRangeEntry.range.location < 0)
        {
            newRangeEntry.range.length += newRangeEntry.range.location;
            newRangeEntry.range.location = 0;
        }
        newString._rangeEntries.push(newRangeEntry);
    }
    return newString;
    var ___r1;
}

,["CPAttributedString","CPRange"]), new objj_method(sel_getUid("replaceCharactersInRange:withString:"), function $CPAttributedString__replaceCharactersInRange_withString_(self, _cmd, aRange, aString)
{
    if (!aString)
        aString = "";
    var lastValidIndex = MAX(self._rangeEntries.length - 1, 0),
        startingIndex = (self.isa.method_msgSend["_indexOfEntryWithIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_indexOfEntryWithIndex:"], "_indexOfEntryWithIndex:"), aRange.location);
    if (startingIndex < 0)
        startingIndex = lastValidIndex;
    var endingIndex = (self.isa.method_msgSend["_indexOfEntryWithIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_indexOfEntryWithIndex:"], "_indexOfEntryWithIndex:"), CPMaxRange(aRange));
    if (endingIndex < 0)
        endingIndex = lastValidIndex;
    var additionalLength = aString.length - aRange.length,
        patchPosition = startingIndex;
    self._string = self._string.substring(0, aRange.location) + aString + self._string.substring(CPMaxRange(aRange));
    var originalLength = self._rangeEntries[patchPosition].range.length;
    if (startingIndex === endingIndex)
        self._rangeEntries[patchPosition].range.length += additionalLength;
    else
    {
        if ((CPIntersectionRange(self._rangeEntries[patchPosition].range, aRange)).length < originalLength)
        {
            startingIndex++;
        }
        if (endingIndex > startingIndex)
        {
            var originalOffset = self._rangeEntries[startingIndex].range.location,
                offsetFromSplicing = CPMaxRange(self._rangeEntries[endingIndex].range) - originalOffset;
            self._rangeEntries.splice(startingIndex, endingIndex - startingIndex);
            self._rangeEntries[startingIndex].range = CPMakeRange(originalOffset, offsetFromSplicing);
        }
        if (patchPosition !== startingIndex)
        {
            var lhsOffset = aString.length - (CPIntersectionRange(self._rangeEntries[patchPosition].range, aRange)).length;
            self._rangeEntries[patchPosition].range.length = originalLength + lhsOffset;
            var rhsOffset = aString.length - (CPIntersectionRange(self._rangeEntries[startingIndex].range, aRange)).length;
            self._rangeEntries[startingIndex].range.location += lhsOffset;
            self._rangeEntries[startingIndex].range.length += rhsOffset;
            patchPosition = startingIndex;
        }
        else
            self._rangeEntries[patchPosition].range.length += additionalLength;
    }
    for (var patchIndex = patchPosition + 1, l = self._rangeEntries.length; patchIndex < l; patchIndex++)
        self._rangeEntries[patchIndex].range.location += additionalLength;
}

,["void","CPRange","CPString"]), new objj_method(sel_getUid("deleteCharactersInRange:"), function $CPAttributedString__deleteCharactersInRange_(self, _cmd, aRange)
{
    (self.isa.method_msgSend["replaceCharactersInRange:withString:"] || _objj_forward)(self, (self.isa.method_dtable["replaceCharactersInRange:withString:"], self.isa.method_dtable["replaceCharactersInRange:withString:"], "replaceCharactersInRange:withString:"), aRange, nil);
}

,["void","CPRange"]), new objj_method(sel_getUid("setAttributes:range:"), function $CPAttributedString__setAttributes_range_(self, _cmd, aDictionary, aRange)
{
    var startingEntryIndex = (self.isa.method_msgSend["_indexOfRangeEntryForIndex:splitOnMaxIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_indexOfRangeEntryForIndex:splitOnMaxIndex:"], self.isa.method_dtable["_indexOfRangeEntryForIndex:splitOnMaxIndex:"], "_indexOfRangeEntryForIndex:splitOnMaxIndex:"), aRange.location, YES),
        endingEntryIndex = (self.isa.method_msgSend["_indexOfRangeEntryForIndex:splitOnMaxIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_indexOfRangeEntryForIndex:splitOnMaxIndex:"], self.isa.method_dtable["_indexOfRangeEntryForIndex:splitOnMaxIndex:"], "_indexOfRangeEntryForIndex:splitOnMaxIndex:"), CPMaxRange(aRange), YES),
        current = startingEntryIndex;
    if (current < 0)
        current = MAX(self._rangeEntries.length - 1, 0);
    if (endingEntryIndex === CPNotFound)
        endingEntryIndex = self._rangeEntries.length;
    while (current < endingEntryIndex)
        self._rangeEntries[current++].attributes = (aDictionary == null ? null : (aDictionary.isa.method_msgSend["copy"] || _objj_forward)(aDictionary, (aDictionary.isa.method_dtable["copy"], "copy")));
    (self.isa.method_msgSend["_coalesceRangeEntriesFromIndex:toIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_coalesceRangeEntriesFromIndex:toIndex:"], self.isa.method_dtable["_coalesceRangeEntriesFromIndex:toIndex:"], "_coalesceRangeEntriesFromIndex:toIndex:"), startingEntryIndex, endingEntryIndex);
}

,["void","CPDictionary","CPRange"]), new objj_method(sel_getUid("addAttributes:range:"), function $CPAttributedString__addAttributes_range_(self, _cmd, aDictionary, aRange)
{
    var startingEntryIndex = (self.isa.method_msgSend["_indexOfRangeEntryForIndex:splitOnMaxIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_indexOfRangeEntryForIndex:splitOnMaxIndex:"], self.isa.method_dtable["_indexOfRangeEntryForIndex:splitOnMaxIndex:"], "_indexOfRangeEntryForIndex:splitOnMaxIndex:"), aRange.location, YES),
        endingEntryIndex = (self.isa.method_msgSend["_indexOfRangeEntryForIndex:splitOnMaxIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_indexOfRangeEntryForIndex:splitOnMaxIndex:"], self.isa.method_dtable["_indexOfRangeEntryForIndex:splitOnMaxIndex:"], "_indexOfRangeEntryForIndex:splitOnMaxIndex:"), CPMaxRange(aRange), YES),
        current = startingEntryIndex;
    if (endingEntryIndex === CPNotFound)
        endingEntryIndex = self._rangeEntries.length;
    while (current < endingEntryIndex)
    {
        var keys = (aDictionary == null ? null : (aDictionary.isa.method_msgSend["allKeys"] || _objj_forward)(aDictionary, (aDictionary.isa.method_dtable["allKeys"], "allKeys"))),
            count = (keys == null ? null : (keys.isa.method_msgSend["count"] || _objj_forward)(keys, (keys.isa.method_dtable["count"], "count")));
        while (count--)
            ((___r1 = self._rangeEntries[current].attributes), ___r1 == null ? null : (___r1.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(___r1, "setObject:forKey:", (aDictionary == null ? null : (aDictionary.isa.method_msgSend["objectForKey:"] || _objj_forward)(aDictionary, (aDictionary.isa.method_dtable["objectForKey:"], "objectForKey:"), keys[count])), keys[count]));
        current++;
    }
    (self.isa.method_msgSend["_coalesceRangeEntriesFromIndex:toIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_coalesceRangeEntriesFromIndex:toIndex:"], self.isa.method_dtable["_coalesceRangeEntriesFromIndex:toIndex:"], "_coalesceRangeEntriesFromIndex:toIndex:"), startingEntryIndex, endingEntryIndex);
    var ___r1;
}

,["void","CPDictionary","CPRange"]), new objj_method(sel_getUid("addAttribute:value:range:"), function $CPAttributedString__addAttribute_value_range_(self, _cmd, anAttribute, aValue, aRange)
{
    (self.isa.method_msgSend["addAttributes:range:"] || _objj_forward)(self, (self.isa.method_dtable["addAttributes:range:"], self.isa.method_dtable["addAttributes:range:"], "addAttributes:range:"), (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:forKeys:"] || _objj_forward)(___r1, "initWithObjects:forKeys:", [aValue], [anAttribute])), aRange);
    var ___r1;
}

,["void","CPString","id","CPRange"]), new objj_method(sel_getUid("removeAttribute:range:"), function $CPAttributedString__removeAttribute_range_(self, _cmd, anAttribute, aRange)
{
    var startingEntryIndex = (self.isa.method_msgSend["_indexOfRangeEntryForIndex:splitOnMaxIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_indexOfRangeEntryForIndex:splitOnMaxIndex:"], self.isa.method_dtable["_indexOfRangeEntryForIndex:splitOnMaxIndex:"], "_indexOfRangeEntryForIndex:splitOnMaxIndex:"), aRange.location, YES),
        endingEntryIndex = (self.isa.method_msgSend["_indexOfRangeEntryForIndex:splitOnMaxIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_indexOfRangeEntryForIndex:splitOnMaxIndex:"], self.isa.method_dtable["_indexOfRangeEntryForIndex:splitOnMaxIndex:"], "_indexOfRangeEntryForIndex:splitOnMaxIndex:"), CPMaxRange(aRange), YES),
        current = startingEntryIndex;
    if (endingEntryIndex === CPNotFound)
        endingEntryIndex = self._rangeEntries.length;
    while (current < endingEntryIndex)
        ((___r1 = self._rangeEntries[current++].attributes), ___r1 == null ? null : (___r1.isa.method_msgSend["removeObjectForKey:"] || _objj_forward)(___r1, "removeObjectForKey:", anAttribute));
    (self.isa.method_msgSend["_coalesceRangeEntriesFromIndex:toIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_coalesceRangeEntriesFromIndex:toIndex:"], self.isa.method_dtable["_coalesceRangeEntriesFromIndex:toIndex:"], "_coalesceRangeEntriesFromIndex:toIndex:"), startingEntryIndex, endingEntryIndex);
    var ___r1;
}

,["void","CPString","CPRange"]), new objj_method(sel_getUid("appendAttributedString:"), function $CPAttributedString__appendAttributedString_(self, _cmd, aString)
{
    (self.isa.method_msgSend["insertAttributedString:atIndex:"] || _objj_forward)(self, (self.isa.method_dtable["insertAttributedString:atIndex:"], self.isa.method_dtable["insertAttributedString:atIndex:"], "insertAttributedString:atIndex:"), aString, self._string.length);
}

,["void","CPAttributedString"]), new objj_method(sel_getUid("insertAttributedString:atIndex:"), function $CPAttributedString__insertAttributedString_atIndex_(self, _cmd, aString, anIndex)
{
    if (anIndex < 0 || anIndex > (self.isa.method_msgSend["length"] || _objj_forward)(self, (self.isa.method_dtable["length"], "length")))
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPRangeException, "tried to insert attributed string at an invalid index: " + anIndex);
    var entryIndexOfNextEntry = (self.isa.method_msgSend["_indexOfRangeEntryForIndex:splitOnMaxIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_indexOfRangeEntryForIndex:splitOnMaxIndex:"], self.isa.method_dtable["_indexOfRangeEntryForIndex:splitOnMaxIndex:"], "_indexOfRangeEntryForIndex:splitOnMaxIndex:"), anIndex, YES),
        otherRangeEntries = aString._rangeEntries,
        length = (aString == null ? null : (aString.isa.method_msgSend["length"] || _objj_forward)(aString, (aString.isa.method_dtable["length"], "length")));
    if (entryIndexOfNextEntry === CPNotFound)
        entryIndexOfNextEntry = self._rangeEntries.length;
    self._string = self._string.substring(0, anIndex) + aString._string + self._string.substring(anIndex);
    var current = entryIndexOfNextEntry;
    while (current < self._rangeEntries.length)
        self._rangeEntries[current++].range.location += length;
    var newRangeEntryCount = otherRangeEntries.length,
        index = 0;
    while (index < newRangeEntryCount)
    {
        var entryCopy = copyRangeEntry(otherRangeEntries[index++]);
        entryCopy.range.location += anIndex;
        self._rangeEntries.splice(entryIndexOfNextEntry - 1 + index, 0, entryCopy);
    }
    (self.isa.method_msgSend["_coalesceRangeEntriesFromIndex:toIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_coalesceRangeEntriesFromIndex:toIndex:"], self.isa.method_dtable["_coalesceRangeEntriesFromIndex:toIndex:"], "_coalesceRangeEntriesFromIndex:toIndex:"), MAX(0, entryIndexOfNextEntry - 1), MIN(entryIndexOfNextEntry + 1, self._rangeEntries.length - 1));
}

,["void","CPAttributedString","CPUInteger"]), new objj_method(sel_getUid("replaceCharactersInRange:withAttributedString:"), function $CPAttributedString__replaceCharactersInRange_withAttributedString_(self, _cmd, aRange, aString)
{
    (self.isa.method_msgSend["deleteCharactersInRange:"] || _objj_forward)(self, (self.isa.method_dtable["deleteCharactersInRange:"], "deleteCharactersInRange:"), aRange);
    (self.isa.method_msgSend["insertAttributedString:atIndex:"] || _objj_forward)(self, (self.isa.method_dtable["insertAttributedString:atIndex:"], self.isa.method_dtable["insertAttributedString:atIndex:"], "insertAttributedString:atIndex:"), aString, aRange.location);
}

,["void","CPRange","CPAttributedString"]), new objj_method(sel_getUid("setAttributedString:"), function $CPAttributedString__setAttributedString_(self, _cmd, aString)
{
    self._string = aString._string;
    self._rangeEntries = ((___r1 = aString._rangeEntries), ___r1 == null ? null : (___r1.isa.method_msgSend["arrayByApplyingBlock:"] || _objj_forward)(___r1, "arrayByApplyingBlock:",     function(entry)
    {
        return copyRangeEntry(entry);
    }));
    var ___r1;
}

,["void","CPAttributedString"]), new objj_method(sel_getUid("_indexOfRangeEntryForIndex:splitOnMaxIndex:"), function $CPAttributedString___indexOfRangeEntryForIndex_splitOnMaxIndex_(self, _cmd, characterIndex, split)
{
    var index = (self.isa.method_msgSend["_indexOfEntryWithIndex:"] || _objj_forward)(self, (self.isa.method_dtable["_indexOfEntryWithIndex:"], "_indexOfEntryWithIndex:"), characterIndex);
    if (index === CPNotFound)
        return index;
    var rangeEntry = self._rangeEntries[index];
    if (rangeEntry.range.location === characterIndex || CPMaxRange(rangeEntry.range) - 1 === characterIndex && !split)
        return index;
    var newEntries = splitRangeEntryAtIndex(rangeEntry, characterIndex);
    self._rangeEntries.splice(index, 1, newEntries[0], newEntries[1]);
    index++;
    return index;
}

,["Number","unsigned","BOOL"]), new objj_method(sel_getUid("_coalesceRangeEntriesFromIndex:toIndex:"), function $CPAttributedString___coalesceRangeEntriesFromIndex_toIndex_(self, _cmd, start, end)
{
    var current = start;
    if (end >= self._rangeEntries.length)
        end = self._rangeEntries.length - 1;
    while (current < end)
    {
        var a = self._rangeEntries[current],
            b = self._rangeEntries[current + 1];
        if (a && b && ((___r1 = a.attributes), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqualToDictionary:"] || _objj_forward)(___r1, "isEqualToDictionary:", b.attributes)))
        {
            a.range.length = CPMaxRange(b.range) - a.range.location;
            self._rangeEntries.splice(current + 1, 1);
            end--;
        }
        else
            current++;
    }
    var ___r1;
}

,["void","unsigned","unsigned"]), new objj_method(sel_getUid("beginEditing"), function $CPAttributedString__beginEditing(self, _cmd)
{
}

,["void"]), new objj_method(sel_getUid("endEditing"), function $CPAttributedString__endEditing(self, _cmd)
{
}

,["void"])]);
}
var CPAttributedStringStringKey = "CPAttributedStringString",
    CPAttributedStringRangesKey = "CPAttributedStringRanges",
    CPAttributedStringAttributesKey = "CPAttributedStringAttributes";
{
var the_class = objj_getClass("CPAttributedString")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPAttributedString\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPAttributedString__initWithCoder_(self, _cmd, aCoder)
{
    self = (self == null ? null : (self.isa.method_msgSend["init"] || _objj_forward)(self, (self.isa.method_dtable["init"], "init")));
    if (self)
    {
        self._string = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPAttributedStringStringKey));
        var decodedRanges = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPAttributedStringRangesKey)),
            decodedAttributes = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPAttributedStringAttributesKey));
        self._rangeEntries = [];
        for (var i = 0, l = decodedRanges.length; i < l; i++)
            self._rangeEntries.push(makeRangeEntry(decodedRanges[i], decodedAttributes[i]));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPAttributedString__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._string, CPAttributedStringStringKey));
    var rangesForEncoding = [],
        dictsForEncoding = [];
    for (var i = 0, l = self._rangeEntries.length; i < l; i++)
    {
        rangesForEncoding.push(self._rangeEntries[i].range);
        dictsForEncoding.push(self._rangeEntries[i].attributes);
    }
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), rangesForEncoding, CPAttributedStringRangesKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), dictsForEncoding, CPAttributedStringAttributesKey));
}

,["void","CPCoder"])]);
}

{var the_class = objj_allocateClassPair(CPAttributedString, "CPMutableAttributedString"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
}
var isEqual = function(a, b)
{
    if (a === b)
        return YES;
    if ((a == null ? null : (a.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(a, (a.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("isEqual:"))) && (a == null ? null : (a.isa.method_msgSend["isEqual:"] || _objj_forward)(a, (a.isa.method_dtable["isEqual:"], "isEqual:"), b)))
        return YES;
    return NO;
};
var makeRangeEntry = function(aRange, attributes)
{
    return {range: aRange, attributes: (attributes == null ? null : (attributes.isa.method_msgSend["copy"] || _objj_forward)(attributes, (attributes.isa.method_dtable["copy"], "copy")))};
};
var copyRangeEntry = function(aRangeEntry)
{
    return makeRangeEntry(CPMakeRangeCopy(aRangeEntry.range), ((___r1 = aRangeEntry.attributes), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy")));
    var ___r1;
};
var splitRangeEntryAtIndex = function(aRangeEntry, anIndex)
{
    var newRangeEntry = copyRangeEntry(aRangeEntry),
        cachedIndex = CPMaxRange(aRangeEntry.range);
    aRangeEntry.range.length = anIndex - aRangeEntry.range.location;
    newRangeEntry.range.location = anIndex;
    newRangeEntry.range.length = cachedIndex - anIndex;
    newRangeEntry.attributes = ((___r1 = newRangeEntry.attributes), ___r1 == null ? null : (___r1.isa.method_msgSend["copy"] || _objj_forward)(___r1, "copy"));
    return [aRangeEntry, newRangeEntry];
    var ___r1;
};
p;13;CPException.jt;25512;@STATIC;1.0;i;9;CPCoder.ji;10;CPObject.ji;10;CPString.jS;15004;;10437;

objj_executeFile("CPCoder.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPString.j", YES);CPInvalidArgumentException = "CPInvalidArgumentException";
CPUnsupportedMethodException = "CPUnsupportedMethodException";
CPRangeException = "CPRangeException";
CPInternalInconsistencyException = "CPInternalInconsistencyException";
CPGenericException = "CPGenericException";

{var the_class = objj_allocateClassPair(CPObject, "CPException"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_userInfo", "id"), new objj_ivar("name", "CPString"), new objj_ivar("message", "CPString")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithName:reason:userInfo:"), function $CPException__initWithName_reason_userInfo_(self, _cmd, aName, aReason, aUserInfo)
{
    self = (objj_getClass("CPException").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self.name = aName;
        self.message = aReason;
        self._userInfo = aUserInfo;
    }
    return self;
}

,["id","CPString","CPString","CPDictionary"]), new objj_method(sel_getUid("name"), function $CPException__name(self, _cmd)
{
    return self.name;
}

,["CPString"]), new objj_method(sel_getUid("reason"), function $CPException__reason(self, _cmd)
{
    return self.message;
}

,["CPString"]), new objj_method(sel_getUid("userInfo"), function $CPException__userInfo(self, _cmd)
{
    return self._userInfo;
}

,["CPDictionary"]), new objj_method(sel_getUid("description"), function $CPException__description(self, _cmd)
{
    return self.message;
}

,["CPString"]), new objj_method(sel_getUid("raise"), function $CPException__raise(self, _cmd)
{
    throw self;
}

,["void"]), new objj_method(sel_getUid("isEqual:"), function $CPException__isEqual_(self, _cmd, anObject)
{
    if (!anObject || !anObject.isa)
        return NO;
    return (anObject == null ? null : (anObject.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), CPException)) && self.name === (anObject == null ? null : (anObject.isa.method_msgSend["name"] || _objj_forward)(anObject, (anObject.isa.method_dtable["name"], "name"))) && self.message === (anObject == null ? null : (anObject.isa.method_msgSend["message"] || _objj_forward)(anObject, (anObject.isa.method_dtable["message"], "message"))) && (self._userInfo === (anObject == null ? null : (anObject.isa.method_msgSend["userInfo"] || _objj_forward)(anObject, (anObject.isa.method_dtable["userInfo"], "userInfo"))) || ((___r1 = self._userInfo), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, (self._userInfo.isa.method_dtable["isEqual:"], "isEqual:"), (anObject == null ? null : (anObject.isa.method_msgSend["userInfo"] || _objj_forward)(anObject, (anObject.isa.method_dtable["userInfo"], "userInfo"))))));
    var ___r1;
}

,["BOOL","id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPException__alloc(self, _cmd)
{
    var result = new Error();
    result.isa = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"));
    return result;
}

,["id"]), new objj_method(sel_getUid("raise:reason:"), function $CPException__raise_reason_(self, _cmd, aName, aReason)
{
    ((___r1 = (self.isa.method_msgSend["exceptionWithName:reason:userInfo:"] || _objj_forward)(self, (self.isa.method_dtable["exceptionWithName:reason:userInfo:"], self.isa.method_dtable["exceptionWithName:reason:userInfo:"], self.isa.method_dtable["exceptionWithName:reason:userInfo:"], "exceptionWithName:reason:userInfo:"), aName, aReason, nil)), ___r1 == null ? null : (___r1.isa.method_msgSend["raise"] || _objj_forward)(___r1, "raise"));
    var ___r1;
}

,["void","CPString","CPString"]), new objj_method(sel_getUid("raise:format:"), function $CPException__raise_format_(self, _cmd, aName, aFormat)
{
    if (!aFormat)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "raise:format: the format can't be 'nil'");
    var aReason = ObjectiveJ.sprintf.apply(this, Array.prototype.slice.call(arguments, 3));
    ((___r1 = (self.isa.method_msgSend["exceptionWithName:reason:userInfo:"] || _objj_forward)(self, (self.isa.method_dtable["exceptionWithName:reason:userInfo:"], self.isa.method_dtable["exceptionWithName:reason:userInfo:"], self.isa.method_dtable["exceptionWithName:reason:userInfo:"], "exceptionWithName:reason:userInfo:"), aName, aReason, nil)), ___r1 == null ? null : (___r1.isa.method_msgSend["raise"] || _objj_forward)(___r1, "raise"));
    var ___r1;
}

,["void","CPString","CPString"]), new objj_method(sel_getUid("exceptionWithName:reason:userInfo:"), function $CPException__exceptionWithName_reason_userInfo_(self, _cmd, aName, aReason, aUserInfo)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithName:reason:userInfo:"] || _objj_forward)(___r1, "initWithName:reason:userInfo:", aName, aReason, aUserInfo));
    var ___r1;
}

,["CPException","CPString","CPString","CPDictionary"])]);
}
{
var the_class = objj_getClass("CPException")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPException\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("copy"), function $CPException__copy(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["exceptionWithName:reason:userInfo:"] || _objj_forward)(___r1, "exceptionWithName:reason:userInfo:", self.name, self.message, self._userInfo));
    var ___r1;
}

,["id"])]);
}
var CPExceptionNameKey = "CPExceptionNameKey",
    CPExceptionReasonKey = "CPExceptionReasonKey",
    CPExceptionUserInfoKey = "CPExceptionUserInfoKey";
{
var the_class = objj_getClass("CPException")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPException\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPException__initWithCoder_(self, _cmd, aCoder)
{
    if (self = (objj_getClass("CPException").super_class.method_dtable["init"] || _objj_forward)(self, "init"))
    {
        self.name = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPExceptionNameKey));
        self.message = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPExceptionReasonKey));
        self._userInfo = (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPExceptionUserInfoKey));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPException__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self.name, CPExceptionNameKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self.message, CPExceptionReasonKey));
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._userInfo, CPExceptionUserInfoKey));
}

,["void","CPCoder"])]);
}
Error.prototype.isa = CPException;
Error.prototype._userInfo = null;
(CPException.isa.method_msgSend["initialize"] || _objj_forward)(CPException, (CPException.isa.method_dtable["initialize"], "initialize"));
_CPRaiseInvalidAbstractInvocation = function(anObject, aSelector)
{
    (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "*** -" + sel_getName(aSelector) + " cannot be sent to an abstract object of class " + (anObject == null ? null : (anObject.isa.method_msgSend["className"] || _objj_forward)(anObject, (anObject.isa.method_dtable["className"], "className"))) + ": Create a concrete instance!");
}
_CPRaiseInvalidArgumentException = function(anObject, aSelector, aMessage)
{
    (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, (class_isMetaClass(anObject.isa) ? "+" : "-") + "[" + (anObject == null ? null : (anObject.isa.method_msgSend["className"] || _objj_forward)(anObject, (anObject.isa.method_dtable["className"], "className"))) + " " + aSelector + "]: " + aMessage);
}
_CPRaiseRangeException = function(anObject, aSelector, anIndex, aCount)
{
    (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPRangeException, (class_isMetaClass(anObject.isa) ? "+" : "-") + "[" + (anObject == null ? null : (anObject.isa.method_msgSend["className"] || _objj_forward)(anObject, (anObject.isa.method_dtable["className"], "className"))) + " " + aSelector + "]: " + "index (" + anIndex + ") beyond bounds (" + aCount + ")");
}
_CPReportLenientDeprecation = function(aClass, oldSelector, newSelector)
{
    CPLog.warn("[" + CPStringFromClass(aClass) + " " + CPStringFromSelector(oldSelector) + "] is deprecated, using " + CPStringFromSelector(newSelector) + " instead.");
}
p;24;_CPAggregateExpression.jt;11619;@STATIC;1.0;i;9;CPArray.ji;10;CPString.ji;15;_CPExpression.jS;6192;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9DUEFnZ3JlZ2F0ZUV4cHJlc3Npb24uaiIsInVuZGVmaW5lZF9fQ1BBZ2dyZWdhdGVFeHByZXNzaW9uX0FjY2Vzc29ycyJdLCJuYW1lcyI6WyJzZWxmIl0sIm1hcHBpbmdzIjoiOztBQXFCQSxrQixpQkFDQSxrQixrQkFDQSxrQix1QkFFQTtBQUFBO0FBQUEsMkIsMkJBQUEsc0M7NkJDbkJBLDRCO0FBQ0E7SUFDSSxNLENBQU8sZTtBQURYLEM7O2VBR0EsNEIsK0VBQStCLFE7QUFDL0I7SUFDSSxlLEdBQWEsUUFBYjtBQURKLEM7O3NCRG1CQSw0Qix1RkFBaUMsVTtBQUNqQztJQUNJQSxJLEdBQU8sQyxtREFBQSxnQix1QkFBQSxzREFBOEIseUJBQTlCLENBQVA7SUFFQSxJQUFJQSxJQUFKO1FBQ0ksZSxHQUFhLFVBQWI7SUFFSixNLENBQU9BLEk7QUFOWCxDOztvQkFTQSw0QixtRUFBb0IsTTtBQUNwQjtJQUNJLElBQUlBLEksQ0FBQSxHLENBQVMsTUFBYjtRQUNJLE0sQ0FBTyxHO0lBRVgsSUFBSSxNLENBQUEsRyxDQUFXLEcsSUFBTyxPQUFPLEcsQ0FBUCxHLENBQWVBLElBQUEsQ0FBSyxHLElBQU8sQ0FBQyxVQUFDLENBQUMsTUFBRCxtQkFBQyxNQUFELG9EQUFDLE1BQUQsR0FBUSxzQ0FBUixpQkFBRCxxR0FBNkIsZUFBN0IsRUFBbEQ7UUFDSSxNLENBQU8sRTtJQUVYLE0sQ0FBTyxHOztBQVBYLEM7O2lCQVVBLDRCLHVIQUFvQyxNLEVBQTZCLE87QUFDakU7SUFDSSxNLENBQU8sVUFBQyxlQUFELHVHQUFZLDBEQUFaLDRCLElBQWlDLFEsQ0FBUyxHO0lBQ2pEO1FBQ0ksTSxDQUFPLENBQUMsR0FBRCxtQkFBQyxHQUFELDRFQUFDLEdBQUQsR0FBSywyREFBTCxFQUFzQywyREFBdEMseUNBQStCLE1BQS9CLEVBQThDLE9BQTlDLEU7SUFEWCxDQURPLEU7O0FBRFgsQzs7OEJBT0EsNEI7QUFDQTtJQUNJLElBQUksWSxHQUFlLFVBQUMsZUFBRCx1R0FBWSwwREFBWiw0QixJQUFpQyxRLENBQVMsRztJQUM3RDtRQUNJLE0sQ0FBTyxDQUFDLEdBQUQsbUJBQUMsR0FBRCxxREFBQyxHQUFELEdBQUssb0NBQUwsa0I7SUFEWCxDQURtQixFQUFuQjtJQUtBLE0sQ0FBTyxHLENBQUEsQyxDQUFNLENBQUMsWUFBRCxtQkFBQyxZQUFELG1FQUFDLFlBQUQsR0FBYywyREFBZCxnQ0FBdUMsR0FBdkMsRSxDQUFOLEMsQ0FBb0QsRzs7QUFOL0QsQzs7Z0JBU0EsNEIsNkhBQW1FLFM7QUFDbkU7SUFDSSxJQUFJLFcsR0FBYyxVQUFDLGVBQUQsdUdBQVksMERBQVosNEIsSUFBaUMsUSxDQUFTLEc7SUFDNUQ7UUFDSSxNLENBQU8sQ0FBQyxHQUFELG1CQUFDLEdBQUQsK0VBQUMsR0FBRCxHQUFLLDhEQUFMLDRDQUEwQyxTQUExQyxFO0lBRFgsQ0FEa0IsRUFBbEI7SUFLQSxNLENBQU8sQ0FBQyxZQUFELGlFQUFDLFlBQUQsR0FBYyx5REFBZCw4QkFBcUMsV0FBckMsQzs7QUFOWCxDOzs7O0FBV0EsSUFBSSxlLEdBQWtCLGNBQXRCO0FBRUE7QUFBQTs7NERBRUEsNEIsK0VBQTZCLEs7QUFDN0I7SUFDSSxJQUFJLFUsR0FBYSxDQUFDLEtBQUQsbUJBQUMsS0FBRCw2REFBQyxLQUFELEdBQU8sOENBQVAsMEJBQTBCLGVBQTFCLEVBQWpCO0lBQ0EsTSxDQUFPLENBQUNBLElBQUQsNERBQUNBLElBQUQsR0FBTSw0Q0FBTix5QkFBd0IsVUFBeEIsQztBQUZYLEM7O29CQUtBLDRCLG1GQUFpQyxLO0FBQ2pDO0lBQ0ksQ0FBQyxLQUFELG1CQUFDLEtBQUQsOERBQUMsS0FBRCxHQUFPLCtDQUFQLEVBQStCLCtDQUEvQiwyQkFBb0IsZUFBcEIsRUFBc0MsZUFBdEM7QUFESixDIiwiZmlsZSI6Il9DUEFnZ3JlZ2F0ZUV4cHJlc3Npb24uanMiLCJzb3VyY2VSb290IjoiZmlsZTovVXNlcnMvZGF2aWQvcHJvZ3JhbXMvY2FwcHVjY2luby9Gb3VuZGF0aW9uLyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBfQ1BBZ2dyZWdhdGVFeHByZXNzaW9uLmpcbiAqXG4gKiBDcmVhdGVkIGJ5IGNhY2FvZGV2LlxuICogQ29weXJpZ2h0IDIwMTAuXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyXG4gKiB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmVcbiAqIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5rbGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgMDIxMTAtMTMwMSBVU0FcbiAqL1xuXG5AaW1wb3J0IFwiQ1BBcnJheS5qXCJcbkBpbXBvcnQgXCJDUFN0cmluZy5qXCJcbkBpbXBvcnQgXCJfQ1BFeHByZXNzaW9uLmpcIlxuXG5AaW1wbGVtZW50YXRpb24gX0NQQWdncmVnYXRlRXhwcmVzc2lvbiA6IENQRXhwcmVzc2lvblxue1xuICAgIENQQXJyYXkgX2FnZ3JlZ2F0ZSBAYWNjZXNzb3JzKGdldHRlcj1jb2xsZWN0aW9uKTtcbn1cblxuLSAoaWQpaW5pdFdpdGhBZ2dyZWdhdGU6KENQQXJyYXkpY29sbGVjdGlvblxue1xuICAgIHNlbGYgPSBbc3VwZXIgaW5pdFdpdGhFeHByZXNzaW9uVHlwZTpDUEFnZ3JlZ2F0ZUV4cHJlc3Npb25UeXBlXTtcblxuICAgIGlmIChzZWxmKVxuICAgICAgICBfYWdncmVnYXRlID0gY29sbGVjdGlvbjtcblxuICAgIHJldHVybiBzZWxmO1xufVxuXG4tIChCT09MKWlzRXF1YWw6KGlkKW9iamVjdFxue1xuICAgIGlmIChzZWxmID09PSBvYmplY3QpXG4gICAgICAgIHJldHVybiBZRVM7XG5cbiAgICBpZiAob2JqZWN0ID09PSBuaWwgfHwgb2JqZWN0LmlzYSAhPT0gc2VsZi5pc2EgfHwgIVtbb2JqZWN0IGNvbGxlY3Rpb25dIGlzRXF1YWw6X2FnZ3JlZ2F0ZV0pXG4gICAgICAgIHJldHVybiBOTztcblxuICAgIHJldHVybiBZRVM7XG59XG5cbi0gKGlkKWV4cHJlc3Npb25WYWx1ZVdpdGhPYmplY3Q6KGlkKW9iamVjdCBjb250ZXh0OihDUERpY3Rpb25hcnkpY29udGV4dFxue1xuICAgIHJldHVybiBbX2FnZ3JlZ2F0ZSBhcnJheUJ5QXBwbHlpbmdCbG9jazpmdW5jdGlvbihleHApXG4gICAge1xuICAgICAgICByZXR1cm4gW2V4cCBleHByZXNzaW9uVmFsdWVXaXRoT2JqZWN0Om9iamVjdCBjb250ZXh0OmNvbnRleHRdO1xuICAgIH1dO1xufVxuXG4tIChDUFN0cmluZylkZXNjcmlwdGlvblxueyAgICBcbiAgICB2YXIgZGVzY3JpcHRpb25zID0gW19hZ2dyZWdhdGUgYXJyYXlCeUFwcGx5aW5nQmxvY2s6ZnVuY3Rpb24oZXhwKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIFtleHAgZGVzY3JpcHRpb25dO1xuICAgIH1dO1xuXG4gICAgcmV0dXJuIFwie1wiICsgW2Rlc2NyaXB0aW9ucyBjb21wb25lbnRzSm9pbmVkQnlTdHJpbmc6XCIsXCJdICsgXCJ9XCIgO1xufVxuXG4tIChDUEV4cHJlc3Npb24pX2V4cHJlc3Npb25XaXRoU3Vic3RpdHV0aW9uVmFyaWFibGVzOihDUERpY3Rpb25hcnkpdmFyaWFibGVzXG57XG4gICAgdmFyIHN1YnN0X2FycmF5ID0gW19hZ2dyZWdhdGUgYXJyYXlCeUFwcGx5aW5nQmxvY2s6ZnVuY3Rpb24oZXhwKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIFtleHAgX2V4cHJlc3Npb25XaXRoU3Vic3RpdHV0aW9uVmFyaWFibGVzOnZhcmlhYmxlc107XG4gICAgfV07XG5cbiAgICByZXR1cm4gW0NQRXhwcmVzc2lvbiBleHByZXNzaW9uRm9yQWdncmVnYXRlOnN1YnN0X2FycmF5XTtcbn1cblxuQGVuZFxuXG52YXIgQ1BDb2xsZWN0aW9uS2V5ID0gQFwiQ1BDb2xsZWN0aW9uXCI7XG5cbkBpbXBsZW1lbnRhdGlvbiBfQ1BBZ2dyZWdhdGVFeHByZXNzaW9uIChDUENvZGluZylcblxuLSAoaWQpaW5pdFdpdGhDb2RlcjooQ1BDb2Rlciljb2Rlclxue1xuICAgIHZhciBjb2xsZWN0aW9uID0gW2NvZGVyIGRlY29kZU9iamVjdEZvcktleTpDUENvbGxlY3Rpb25LZXldO1xuICAgIHJldHVybiBbc2VsZiBpbml0V2l0aEFnZ3JlZ2F0ZTpjb2xsZWN0aW9uXTtcbn1cblxuLSAodm9pZCllbmNvZGVXaXRoQ29kZXI6KENQQ29kZXIpY29kZXJcbntcbiAgICBbY29kZXIgZW5jb2RlT2JqZWN0Ol9hZ2dyZWdhdGUgZm9yS2V5OkNQQ29sbGVjdGlvbktleV07XG59XG5cbkBlbmRcbiIsIkBpbXBsZW1lbnRhdGlvbiBfQ1BBZ2dyZWdhdGVFeHByZXNzaW9uIDogQ1BFeHByZXNzaW9uXG57XG4gICAgQ1BBcnJheSBfYWdncmVnYXRlIDtcbn1cblxuXG4tIChDUEFycmF5KWNvbGxlY3Rpb25cbntcbiAgICByZXR1cm4gX2FnZ3JlZ2F0ZTtcbn1cbi0gKHZvaWQpX3NldEFnZ3JlZ2F0ZTooQ1BBcnJheSluZXdWYWx1ZVxue1xuICAgIF9hZ2dyZWdhdGUgPSBuZXdWYWx1ZTtcbn1cblxuQGVuZCJdfQ==t;5353;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPString.j", YES);objj_executeFile("_CPExpression.j", YES);
{var the_class = objj_allocateClassPair(CPExpression, "_CPAggregateExpression"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_aggregate", "CPArray")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("collection"), function $_CPAggregateExpression__collection(self, _cmd)
{
    return self._aggregate;
}

,["CPArray"]), new objj_method(sel_getUid("_setAggregate:"), function $_CPAggregateExpression___setAggregate_(self, _cmd, newValue)
{
    self._aggregate = newValue;
}

,["void","CPArray"]), new objj_method(sel_getUid("initWithAggregate:"), function $_CPAggregateExpression__initWithAggregate_(self, _cmd, collection)
{
    self = (objj_getClass("_CPAggregateExpression").super_class.method_dtable["initWithExpressionType:"] || _objj_forward)(self, "initWithExpressionType:", CPAggregateExpressionType);
    if (self)
        self._aggregate = collection;
    return self;
}

,["id","CPArray"]), new objj_method(sel_getUid("isEqual:"), function $_CPAggregateExpression__isEqual_(self, _cmd, object)
{
    if (self === object)
        return YES;
    if (object === nil || object.isa !== self.isa || !((___r1 = (object == null ? null : (object.isa.method_msgSend["collection"] || _objj_forward)(object, (object.isa.method_dtable["collection"], "collection")))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, "isEqual:", self._aggregate)))
        return NO;
    return YES;
    var ___r1;
}

,["BOOL","id"]), new objj_method(sel_getUid("expressionValueWithObject:context:"), function $_CPAggregateExpression__expressionValueWithObject_context_(self, _cmd, object, context)
{
    return ((___r1 = self._aggregate), ___r1 == null ? null : (___r1.isa.method_msgSend["arrayByApplyingBlock:"] || _objj_forward)(___r1, (self._aggregate.isa.method_dtable["arrayByApplyingBlock:"], "arrayByApplyingBlock:"),     function(exp)
    {
        return (exp == null ? null : (exp.isa.method_msgSend["expressionValueWithObject:context:"] || _objj_forward)(exp, (exp.isa.method_dtable["expressionValueWithObject:context:"], exp.isa.method_dtable["expressionValueWithObject:context:"], "expressionValueWithObject:context:"), object, context));
    }));
    var ___r1;
}

,["id","id","CPDictionary"]), new objj_method(sel_getUid("description"), function $_CPAggregateExpression__description(self, _cmd)
{
    var descriptions = ((___r1 = self._aggregate), ___r1 == null ? null : (___r1.isa.method_msgSend["arrayByApplyingBlock:"] || _objj_forward)(___r1, (self._aggregate.isa.method_dtable["arrayByApplyingBlock:"], "arrayByApplyingBlock:"),     function(exp)
    {
        return (exp == null ? null : (exp.isa.method_msgSend["description"] || _objj_forward)(exp, (exp.isa.method_dtable["description"], "description")));
    }));
    return "{" + (descriptions == null ? null : (descriptions.isa.method_msgSend["componentsJoinedByString:"] || _objj_forward)(descriptions, (descriptions.isa.method_dtable["componentsJoinedByString:"], "componentsJoinedByString:"), ",")) + "}";
    var ___r1;
}

,["CPString"]), new objj_method(sel_getUid("_expressionWithSubstitutionVariables:"), function $_CPAggregateExpression___expressionWithSubstitutionVariables_(self, _cmd, variables)
{
    var subst_array = ((___r1 = self._aggregate), ___r1 == null ? null : (___r1.isa.method_msgSend["arrayByApplyingBlock:"] || _objj_forward)(___r1, (self._aggregate.isa.method_dtable["arrayByApplyingBlock:"], "arrayByApplyingBlock:"),     function(exp)
    {
        return (exp == null ? null : (exp.isa.method_msgSend["_expressionWithSubstitutionVariables:"] || _objj_forward)(exp, (exp.isa.method_dtable["_expressionWithSubstitutionVariables:"], "_expressionWithSubstitutionVariables:"), variables));
    }));
    return (CPExpression.isa.method_msgSend["expressionForAggregate:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForAggregate:"], "expressionForAggregate:"), subst_array);
    var ___r1;
}

,["CPExpression","CPDictionary"])]);
}
var CPCollectionKey = "CPCollection";
{
var the_class = objj_getClass("_CPAggregateExpression")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"_CPAggregateExpression\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $_CPAggregateExpression__initWithCoder_(self, _cmd, coder)
{
    var collection = (coder == null ? null : (coder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPCollectionKey));
    return (self.isa.method_msgSend["initWithAggregate:"] || _objj_forward)(self, (self.isa.method_dtable["initWithAggregate:"], "initWithAggregate:"), collection);
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $_CPAggregateExpression__encodeWithCoder_(self, _cmd, coder)
{
    (coder == null ? null : (coder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeObject:forKey:"], coder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._aggregate, CPCollectionKey));
}

,["void","CPCoder"])]);
}
p;19;_CPSelfExpression.jt;5208;@STATIC;1.0;i;14;CPDictionary.ji;10;CPString.ji;15;_CPExpression.jS;3184;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9DUFNlbGZFeHByZXNzaW9uLmoiXSwibmFtZXMiOlsic2VsZiJdLCJtYXBwaW5ncyI6Ijs7QUFxQkEsa0Isc0JBQ0Esa0Isa0JBQ0Esa0IsdUJBRUEsSUFBSSxlLEdBQWtCLEdBQXRCO0FBRUE7QUFBQTtBQUFBLDJCOzZCQVlBLDRCO0FBQ0E7SUFDSUEsSSxHQUFPLEMsOENBQUEsZ0IsdUJBQUEsc0RBQThCLCtCQUE5QixDQUFQO0lBRUEsTSxDQUFPQSxJO0FBSFgsQzs7VUFNQSw0QiwwRUFBNkIsSztBQUM3QjtJQUNJLE0sQ0FBTyxDQUFDLGlCQUFELHlEQUFDLGlCQUFELEdBQW1CLHNEQUFuQixxQjtBQURYLEM7O29CQUlBLDRCLDhFQUFpQyxLO0FBQ2pDO0FBQUEsQzs7c0JBR0EsNEIsOERBQW9CLE07QUFDcEI7SUFDSSxNLENBQVEsTSxDQUFELEcsQ0FBWUEsSTtBQUR2QixDOztpQkFJQSw0QixrSEFBb0MsTSxFQUE2QixPO0FBQ2pFO0lBQ0ksTSxDQUFPLE07QUFEWCxDOzs4QkFJQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLE07QUFEWCxDOzs7OEJBbkNBLDRCO0FBQ0E7SUFDSSxJQUFJLGUsQ0FBQSxFLENBQW1CLEdBQXZCO1FBQ0ksZSxHQUFrQixDQUFDLGlCQUFELDZDQUFDLGlCQUFELEdBQW1CLDBDQUFuQixTQUFsQjtJQUVKLE0sQ0FBTyxlO0FBSlgsQyIsImZpbGUiOiJfQ1BTZWxmRXhwcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi9Vc2Vycy9kYXZpZC9wcm9ncmFtcy9jYXBwdWNjaW5vL0ZvdW5kYXRpb24vIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIF9DUFNlbGZFeHByZXNzaW9uLmpcbiAqXG4gKiBDcmVhdGVkIGJ5IGNhY2FvZGV2LlxuICogQ29weXJpZ2h0IDIwMTAuXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyXG4gKiB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmVcbiAqIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5rbGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgMDIxMTAtMTMwMSBVU0FcbiAqL1xuXG5AaW1wb3J0IFwiQ1BEaWN0aW9uYXJ5LmpcIlxuQGltcG9ydCBcIkNQU3RyaW5nLmpcIlxuQGltcG9ydCBcIl9DUEV4cHJlc3Npb24ualwiXG5cbnZhciBldmFsdWF0ZWRPYmplY3QgPSBuaWw7XG5cbkBpbXBsZW1lbnRhdGlvbiBfQ1BTZWxmRXhwcmVzc2lvbiA6IENQRXhwcmVzc2lvblxue1xufVxuXG4rIChpZClldmFsdWF0ZWRPYmplY3RcbntcbiAgICBpZiAoZXZhbHVhdGVkT2JqZWN0ID09IG5pbClcbiAgICAgICAgZXZhbHVhdGVkT2JqZWN0ID0gW19DUFNlbGZFeHByZXNzaW9uIG5ld107XG5cbiAgICByZXR1cm4gZXZhbHVhdGVkT2JqZWN0O1xufVxuXG4tIChpZClpbml0XG57XG4gICAgc2VsZiA9IFtzdXBlciBpbml0V2l0aEV4cHJlc3Npb25UeXBlOkNQRXZhbHVhdGVkT2JqZWN0RXhwcmVzc2lvblR5cGVdO1xuXG4gICAgcmV0dXJuIHNlbGY7XG59XG5cbi0gKGlkKWluaXRXaXRoQ29kZXI6KENQQ29kZXIpY29kZXJcbntcbiAgICByZXR1cm4gW19DUFNlbGZFeHByZXNzaW9uIGV2YWx1YXRlZE9iamVjdF07XG59XG5cbi0gKHZvaWQpZW5jb2RlV2l0aENvZGVyOihDUENvZGVyKWNvZGVyXG57XG59XG5cbi0gKEJPT0wpaXNFcXVhbDooaWQpb2JqZWN0XG57XG4gICAgcmV0dXJuIChvYmplY3QgPT09IHNlbGYpO1xufVxuXG4tIChpZClleHByZXNzaW9uVmFsdWVXaXRoT2JqZWN0OihpZClvYmplY3QgY29udGV4dDooQ1BEaWN0aW9uYXJ5KWNvbnRleHRcbntcbiAgICByZXR1cm4gb2JqZWN0O1xufVxuXG4tIChDUFN0cmluZylkZXNjcmlwdGlvblxue1xuICAgIHJldHVybiBAXCJTRUxGXCI7XG59XG5cbkBlbmRcblxuIl19t;1944;

objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPString.j", YES);objj_executeFile("_CPExpression.j", YES);var evaluatedObject = nil;

{var the_class = objj_allocateClassPair(CPExpression, "_CPSelfExpression"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $_CPSelfExpression__init(self, _cmd)
{
    self = (objj_getClass("_CPSelfExpression").super_class.method_dtable["initWithExpressionType:"] || _objj_forward)(self, "initWithExpressionType:", CPEvaluatedObjectExpressionType);
    return self;
}

,["id"]), new objj_method(sel_getUid("initWithCoder:"), function $_CPSelfExpression__initWithCoder_(self, _cmd, coder)
{
    return (_CPSelfExpression.isa.method_msgSend["evaluatedObject"] || _objj_forward)(_CPSelfExpression, (_CPSelfExpression.isa.method_dtable["evaluatedObject"], "evaluatedObject"));
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $_CPSelfExpression__encodeWithCoder_(self, _cmd, coder)
{
}

,["void","CPCoder"]), new objj_method(sel_getUid("isEqual:"), function $_CPSelfExpression__isEqual_(self, _cmd, object)
{
    return object === self;
}

,["BOOL","id"]), new objj_method(sel_getUid("expressionValueWithObject:context:"), function $_CPSelfExpression__expressionValueWithObject_context_(self, _cmd, object, context)
{
    return object;
}

,["id","id","CPDictionary"]), new objj_method(sel_getUid("description"), function $_CPSelfExpression__description(self, _cmd)
{
    return "SELF";
}

,["CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("evaluatedObject"), function $_CPSelfExpression__evaluatedObject(self, _cmd)
{
    if (evaluatedObject == nil)
        evaluatedObject = (_CPSelfExpression.isa.method_msgSend["new"] || _objj_forward)(_CPSelfExpression, (_CPSelfExpression.isa.method_dtable["new"], "new"));
    return evaluatedObject;
}

,["id"])]);
}
p;23;_CPSubqueryExpression.jt;22672;@STATIC;1.0;i;9;CPArray.ji;14;CPDictionary.ji;15;_CPExpression.ji;14;_CPPredicate.jS;10836;;11737;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPDictionary.j", YES);objj_executeFile("_CPExpression.j", YES);objj_executeFile("_CPPredicate.j", YES);
{var the_class = objj_allocateClassPair(CPExpression, "_CPSubqueryExpression"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_collection", "CPExpression"), new objj_ivar("_variableExpression", "CPExpression"), new objj_ivar("_subpredicate", "CPPredicate")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("collection"), function $_CPSubqueryExpression__collection(self, _cmd)
{
    return self._collection;
}

,["CPExpression"]), new objj_method(sel_getUid("_setCollection:"), function $_CPSubqueryExpression___setCollection_(self, _cmd, newValue)
{
    self._collection = newValue;
}

,["void","CPExpression"]), new objj_method(sel_getUid("predicate"), function $_CPSubqueryExpression__predicate(self, _cmd)
{
    return self._subpredicate;
}

,["CPPredicate"]), new objj_method(sel_getUid("_setSubpredicate:"), function $_CPSubqueryExpression___setSubpredicate_(self, _cmd, newValue)
{
    self._subpredicate = newValue;
}

,["void","CPPredicate"]), new objj_method(sel_getUid("initWithExpression:usingIteratorVariable:predicate:"), function $_CPSubqueryExpression__initWithExpression_usingIteratorVariable_predicate_(self, _cmd, collection, variable, subpredicate)
{
    var variableExpression = (CPExpression.isa.method_msgSend["expressionForVariable:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForVariable:"], "expressionForVariable:"), variable);
    return (self.isa.method_msgSend["initWithExpression:usingIteratorExpression:predicate:"] || _objj_forward)(self, (self.isa.method_dtable["initWithExpression:usingIteratorExpression:predicate:"], self.isa.method_dtable["initWithExpression:usingIteratorExpression:predicate:"], self.isa.method_dtable["initWithExpression:usingIteratorExpression:predicate:"], "initWithExpression:usingIteratorExpression:predicate:"), collection, variableExpression, subpredicate);
}

,["id","CPExpression","CPString","CPPredicate"]), new objj_method(sel_getUid("initWithExpression:usingIteratorExpression:predicate:"), function $_CPSubqueryExpression__initWithExpression_usingIteratorExpression_predicate_(self, _cmd, collection, variableExpression, subpredicate)
{
    self = (objj_getClass("_CPSubqueryExpression").super_class.method_dtable["initWithExpressionType:"] || _objj_forward)(self, "initWithExpressionType:", CPSubqueryExpressionType);
    if (self)
    {
        self._subpredicate = subpredicate;
        self._collection = collection;
        self._variableExpression = variableExpression;
    }
    return self;
}

,["id","CPExpression","CPExpression","CPPredicate"]), new objj_method(sel_getUid("expressionValueWithObject:context:"), function $_CPSubqueryExpression__expressionValueWithObject_context_(self, _cmd, object, aContext)
{
    var collection = ((___r1 = self._collection), ___r1 == null ? null : (___r1.isa.method_msgSend["expressionValueWithObject:context:"] || _objj_forward)(___r1, (self._collection.isa.method_dtable["expressionValueWithObject:context:"], self._collection.isa.method_dtable["expressionValueWithObject:context:"], "expressionValueWithObject:context:"), object, aContext)),
        result = (CPArray.isa.method_msgSend["array"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["array"], "array")),
        variable = (self.isa.method_msgSend["variable"] || _objj_forward)(self, (self.isa.method_dtable["variable"], "variable")),
        context = aContext || (___r1 = (CPDictionary.isa.method_msgSend["alloc"] || _objj_forward)(CPDictionary, "alloc"), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    if ((context == null ? null : (context.isa.method_msgSend["objectForKey:"] || _objj_forward)(context, (context.isa.method_dtable["objectForKey:"], "objectForKey:"), variable)) == nil)
        (context == null ? null : (context.isa.method_msgSend["setObject:forKey:"] || _objj_forward)(context, (context.isa.method_dtable["setObject:forKey:"], context.isa.method_dtable["setObject:forKey:"], "setObject:forKey:"), (CPExpression.isa.method_msgSend["expressionForEvaluatedObject"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForEvaluatedObject"], "expressionForEvaluatedObject")), variable));
    (collection == null ? null : (collection.isa.method_msgSend["enumerateObjectsUsingBlock:"] || _objj_forward)(collection, (collection.isa.method_dtable["enumerateObjectsUsingBlock:"], "enumerateObjectsUsingBlock:"),     function(exp, idx, stop)
    {
        if (((___r1 = self._subpredicate), ___r1 == null ? null : (___r1.isa.method_msgSend["evaluateWithObject:substitutionVariables:"] || _objj_forward)(___r1, (self._subpredicate.isa.method_dtable["evaluateWithObject:substitutionVariables:"], self._subpredicate.isa.method_dtable["evaluateWithObject:substitutionVariables:"], "evaluateWithObject:substitutionVariables:"), exp, context)))
            (result == null ? null : (result.isa.method_msgSend["addObject:"] || _objj_forward)(result, (result.isa.method_dtable["addObject:"], "addObject:"), exp));
        var ___r1;
    }));
    return result;
    var ___r1;
}

,["id","id","id"]), new objj_method(sel_getUid("isEqual:"), function $_CPSubqueryExpression__isEqual_(self, _cmd, object)
{
    if (self === object)
        return YES;
    if (object === nil || object.isa !== self.isa || !((___r1 = self._collection), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, (self._collection.isa.method_dtable["isEqual:"], "isEqual:"), (object == null ? null : (object.isa.method_msgSend["collection"] || _objj_forward)(object, (object.isa.method_dtable["collection"], "collection"))))) || !((___r1 = self._variableExpression), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, (self._variableExpression.isa.method_dtable["isEqual:"], "isEqual:"), (object == null ? null : (object.isa.method_msgSend["variableExpression"] || _objj_forward)(object, (object.isa.method_dtable["variableExpression"], "variableExpression"))))) || !((___r1 = self._subpredicate), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, (self._subpredicate.isa.method_dtable["isEqual:"], "isEqual:"), (object == null ? null : (object.isa.method_msgSend["predicate"] || _objj_forward)(object, (object.isa.method_dtable["predicate"], "predicate"))))))
        return NO;
    return YES;
    var ___r1;
}

,["BOOL","id"]), new objj_method(sel_getUid("copy"), function $_CPSubqueryExpression__copy(self, _cmd)
{
    return ((___r1 = (_CPSubqueryExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPSubqueryExpression, (_CPSubqueryExpression.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithExpression:usingIteratorExpression:predicate:"] || _objj_forward)(___r1, "initWithExpression:usingIteratorExpression:predicate:", ((___r2 = self._collection), ___r2 == null ? null : (___r2.isa.method_msgSend["copy"] || _objj_forward)(___r2, (self._collection.isa.method_dtable["copy"], "copy"))), ((___r2 = self._variableExpression), ___r2 == null ? null : (___r2.isa.method_msgSend["copy"] || _objj_forward)(___r2, (self._variableExpression.isa.method_dtable["copy"], "copy"))), ((___r2 = self._subpredicate), ___r2 == null ? null : (___r2.isa.method_msgSend["copy"] || _objj_forward)(___r2, (self._subpredicate.isa.method_dtable["copy"], "copy")))));
    var ___r1, ___r2;
}

,["id"]), new objj_method(sel_getUid("description"), function $_CPSubqueryExpression__description(self, _cmd)
{
    return (self.isa.method_msgSend["predicateFormat"] || _objj_forward)(self, (self.isa.method_dtable["predicateFormat"], "predicateFormat"));
}

,["CPString"]), new objj_method(sel_getUid("predicateFormat"), function $_CPSubqueryExpression__predicateFormat(self, _cmd)
{
    return "SUBQUERY(" + ((___r1 = self._collection), ___r1 == null ? null : (___r1.isa.method_msgSend["description"] || _objj_forward)(___r1, (self._collection.isa.method_dtable["description"], "description"))) + ", " + ((___r1 = self._variableExpression), ___r1 == null ? null : (___r1.isa.method_msgSend["description"] || _objj_forward)(___r1, (self._variableExpression.isa.method_dtable["description"], "description"))) + ", " + ((___r1 = self._subpredicate), ___r1 == null ? null : (___r1.isa.method_msgSend["predicateFormat"] || _objj_forward)(___r1, (self._subpredicate.isa.method_dtable["predicateFormat"], "predicateFormat"))) + ")";
    var ___r1;
}

,["CPString"]), new objj_method(sel_getUid("variable"), function $_CPSubqueryExpression__variable(self, _cmd)
{
    return ((___r1 = self._variableExpression), ___r1 == null ? null : (___r1.isa.method_msgSend["variable"] || _objj_forward)(___r1, (self._variableExpression.isa.method_dtable["variable"], "variable")));
    var ___r1;
}

,["CPString"]), new objj_method(sel_getUid("variableExpression"), function $_CPSubqueryExpression__variableExpression(self, _cmd)
{
    return self._variableExpression;
}

,["CPExpression"])]);
}
var CPExpressionKey = "CPExpression",
    CPSubpredicateKey = "CPSubpredicate",
    CPVariableKey = "CPVariable";
{
var the_class = objj_getClass("_CPSubqueryExpression")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"_CPSubqueryExpression\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $_CPSubqueryExpression__initWithCoder_(self, _cmd, coder)
{
    var collection = (coder == null ? null : (coder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPExpressionKey)),
        subpredicate = (coder == null ? null : (coder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPSubpredicateKey)),
        variableExpression = (coder == null ? null : (coder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPVariableKey));
    return (self.isa.method_msgSend["initWithExpression:usingIteratorExpression:predicate:"] || _objj_forward)(self, (self.isa.method_dtable["initWithExpression:usingIteratorExpression:predicate:"], self.isa.method_dtable["initWithExpression:usingIteratorExpression:predicate:"], self.isa.method_dtable["initWithExpression:usingIteratorExpression:predicate:"], "initWithExpression:usingIteratorExpression:predicate:"), collection, variableExpression, subpredicate);
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $_CPSubqueryExpression__encodeWithCoder_(self, _cmd, coder)
{
    (coder == null ? null : (coder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeObject:forKey:"], coder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._collection, CPExpressionKey));
    (coder == null ? null : (coder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeObject:forKey:"], coder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._subpredicate, CPSubpredicateKey));
    (coder == null ? null : (coder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeObject:forKey:"], coder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._variableExpression, CPVariableKey));
}

,["void","CPCoder"])]);
}
p;28;_CPConstantValueExpression.jt;9092;@STATIC;1.0;i;14;CPDictionary.ji;15;_CPExpression.jS;5188;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9DUENvbnN0YW50VmFsdWVFeHByZXNzaW9uLmoiLCJ1bmRlZmluZWRfX0NQQ29uc3RhbnRWYWx1ZUV4cHJlc3Npb25fQWNjZXNzb3JzIl0sIm5hbWVzIjpbInNlbGYiXSwibWFwcGluZ3MiOiI7O0FBd0JBLGtCLHNCQUNBLGtCLHVCQUVBO0FBQUE7QUFBQSwyQiwyQkFBQSw2Qjs2QkNyQkEsNEI7QUFDQTtJQUNJLE0sQ0FBTyxXO0FBRFgsQzs7VUFHQSw0QiwyRUFBc0IsUTtBQUN0QjtJQUNJLFcsR0FBUyxRQUFUO0FBREosQzs7aUJEcUJBLDRCLG1GQUF3QixLO0FBQ3hCO0lBQ0lBLEksR0FBTyxDLHVEQUFBLGdCLHVCQUFBLHNEQUE4Qiw2QkFBOUIsQ0FBUDtJQUVBLElBQUlBLElBQUo7UUFDSSxXLEdBQVMsS0FBVDtJQUVKLE0sQ0FBT0EsSTtBQU5YLEM7O2VBU0EsNEIsdUVBQW9CLE07QUFDcEI7SUFDSSxJQUFJQSxJLENBQUEsRyxDQUFTLE1BQWI7UUFDSSxNLENBQU8sRztJQUVYLElBQUksTSxDQUFBLEcsQ0FBVyxHLElBQU8sT0FBTyxHLENBQVAsRyxDQUFlQSxJQUFBLENBQUssRyxJQUFPLENBQUMsVUFBQyxDQUFDLE1BQUQsbUJBQUMsTUFBRCx1REFBQyxNQUFELEdBQVEseUNBQVIsb0JBQUQscUdBQWdDLFdBQWhDLEVBQWxEO1FBQ0ksTSxDQUFPLEU7SUFFWCxNLENBQU8sRzs7QUFQWCxDOztpQkFVQSw0QiwySEFBb0MsTSxFQUE2QixPO0FBQ2pFO0lBQ0ksTSxDQUFPLFc7QUFEWCxDOzs4QkFJQSw0QjtBQUNBO0lBQ0ksSUFBSSxVQUFDLFdBQUQsZ0dBQVEsK0NBQVIscUJBQXNCLENBQUMsUUFBRCwrQ0FBQyxRQUFELEdBQVUsbUNBQVYsV0FBdEIsRUFBSjtRQUNJLE0sQ0FBTyxJLENBQUEsQyxDQUFRLFcsQ0FBUixDLENBQWlCLEk7SUFFNUIsSUFBSSxXLENBQUEsRyxDQUFXLENBQUMsTUFBRCw4Q0FBQyxNQUFELEdBQVEsZ0NBQVIsVUFBZjtRQUNJLE0sQ0FBTyxLO0lBRVgsTSxDQUFPLFVBQUMsV0FBRCw2RkFBUSw0Q0FBUixrQjs7QUFQWCxDOzs7O0FBWUEsSUFBSSxrQixHQUFxQixpQkFBekI7QUFFQTtBQUFBOzs0REFFQSw0QixtRkFBNkIsSztBQUM3QjtJQUNJLElBQUksSyxHQUFRLENBQUMsS0FBRCxtQkFBQyxLQUFELDZEQUFDLEtBQUQsR0FBTyw4Q0FBUCwwQkFBMEIsa0JBQTFCLEVBQVo7SUFDQSxNLENBQU8sQ0FBQ0EsSUFBRCx3REFBQ0EsSUFBRCxHQUFNLHdDQUFOLHFCQUFvQixLQUFwQixDO0FBRlgsQzs7b0JBS0EsNEIsdUZBQWlDLEs7QUFDakM7SUFDSSxDQUFDLEtBQUQsbUJBQUMsS0FBRCw4REFBQyxLQUFELEdBQU8sK0NBQVAsRUFBMkIsK0NBQTNCLDJCQUFvQixXQUFwQixFQUFrQyxrQkFBbEM7QUFESixDIiwiZmlsZSI6Il9DUENvbnN0YW50VmFsdWVFeHByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6ImZpbGU6L1VzZXJzL2RhdmlkL3Byb2dyYW1zL2NhcHB1Y2Npbm8vRm91bmRhdGlvbi8iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogX0NQQ29uc3RhbnRWYWx1ZUV4cHJlc3Npb24ualxuICpcbiAqIFBvcnRpb25zIGJhc2VkIG9uIE5TRXhwcmVzc2lvbl9jb25zdGFudC5tIGluIENvY290cm9uIChodHRwOi8vd3d3LmNvY290cm9uLm9yZy8pXG4gKiBDb3B5cmlnaHQgKGMpIDIwMDYtMjAwNyBDaHJpc3RvcGhlciBKLiBXLiBMbG95ZFxuICpcbiAqIENyZWF0ZWQgYnkgY2FjYW9kZXYuXG4gKiBDb3B5cmlnaHQgMjAxMC5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXJcbiAqIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgbGlicmFyeTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZVxuICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAwMjExMC0xMzAxIFVTQVxuICovXG5cbkBpbXBvcnQgXCJDUERpY3Rpb25hcnkualwiXG5AaW1wb3J0IFwiX0NQRXhwcmVzc2lvbi5qXCJcblxuQGltcGxlbWVudGF0aW9uIF9DUENvbnN0YW50VmFsdWVFeHByZXNzaW9uIDogQ1BFeHByZXNzaW9uXG57XG4gICAgaWQgX3ZhbHVlIEBhY2Nlc3NvcnMoZ2V0dGVyPWNvbnN0YW50VmFsdWUpO1xufVxuXG4tIChpZClpbml0V2l0aFZhbHVlOihpZCl2YWx1ZVxue1xuICAgIHNlbGYgPSBbc3VwZXIgaW5pdFdpdGhFeHByZXNzaW9uVHlwZTpDUENvbnN0YW50VmFsdWVFeHByZXNzaW9uVHlwZV07XG5cbiAgICBpZiAoc2VsZilcbiAgICAgICAgX3ZhbHVlID0gdmFsdWU7XG5cbiAgICByZXR1cm4gc2VsZjtcbn1cblxuLSAoQk9PTClpc0VxdWFsOihpZClvYmplY3RcbntcbiAgICBpZiAoc2VsZiA9PT0gb2JqZWN0KVxuICAgICAgICByZXR1cm4gWUVTO1xuXG4gICAgaWYgKG9iamVjdCA9PT0gbmlsIHx8IG9iamVjdC5pc2EgIT09IHNlbGYuaXNhIHx8ICFbW29iamVjdCBjb25zdGFudFZhbHVlXSBpc0VxdWFsOl92YWx1ZV0pXG4gICAgICAgIHJldHVybiBOTztcblxuICAgIHJldHVybiBZRVM7XG59XG5cbi0gKGlkKWV4cHJlc3Npb25WYWx1ZVdpdGhPYmplY3Q6KGlkKW9iamVjdCBjb250ZXh0OihDUERpY3Rpb25hcnkpY29udGV4dFxue1xuICAgIHJldHVybiBfdmFsdWU7XG59XG5cbi0gKENQU3RyaW5nKWRlc2NyaXB0aW9uXG57XG4gICAgaWYgKFtfdmFsdWUgaXNLaW5kT2ZDbGFzczpbQ1BTdHJpbmcgY2xhc3NdXSlcbiAgICAgICAgcmV0dXJuIEBcIlxcXCJcIiArIF92YWx1ZSArIEBcIlxcXCJcIjtcblxuICAgIGlmIChfdmFsdWUgPT09IFtDUE51bGwgbnVsbF0pXG4gICAgICAgIHJldHVybiBAXCJuaWxcIjtcblxuICAgIHJldHVybiBbX3ZhbHVlIGRlc2NyaXB0aW9uXTtcbn1cblxuQGVuZFxuXG52YXIgQ1BDb25zdGFudFZhbHVlS2V5ID0gQFwiQ1BDb25zdGFudFZhbHVlXCI7XG5cbkBpbXBsZW1lbnRhdGlvbiBfQ1BDb25zdGFudFZhbHVlRXhwcmVzc2lvbiAoQ1BDb2RpbmcpXG5cbi0gKGlkKWluaXRXaXRoQ29kZXI6KENQQ29kZXIpY29kZXJcbntcbiAgICB2YXIgdmFsdWUgPSBbY29kZXIgZGVjb2RlT2JqZWN0Rm9yS2V5OkNQQ29uc3RhbnRWYWx1ZUtleV07XG4gICAgcmV0dXJuIFtzZWxmIGluaXRXaXRoVmFsdWU6dmFsdWVdO1xufVxuXG4tICh2b2lkKWVuY29kZVdpdGhDb2RlcjooQ1BDb2Rlciljb2Rlclxue1xuICAgIFtjb2RlciBlbmNvZGVPYmplY3Q6X3ZhbHVlIGZvcktleTpDUENvbnN0YW50VmFsdWVLZXldO1xufVxuXG5AZW5kXG4iLCJAaW1wbGVtZW50YXRpb24gX0NQQ29uc3RhbnRWYWx1ZUV4cHJlc3Npb24gOiBDUEV4cHJlc3Npb25cbntcbiAgICBpZCBfdmFsdWUgO1xufVxuXG5cbi0gKGlkKWNvbnN0YW50VmFsdWVcbntcbiAgICByZXR1cm4gX3ZhbHVlO1xufVxuLSAodm9pZClfc2V0VmFsdWU6KGlkKW5ld1ZhbHVlXG57XG4gICAgX3ZhbHVlID0gbmV3VmFsdWU7XG59XG5cbkBlbmQiXX0=t;3839;

objj_executeFile("CPDictionary.j", YES);objj_executeFile("_CPExpression.j", YES);
{var the_class = objj_allocateClassPair(CPExpression, "_CPConstantValueExpression"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_value", "id")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("constantValue"), function $_CPConstantValueExpression__constantValue(self, _cmd)
{
    return self._value;
}

,["id"]), new objj_method(sel_getUid("_setValue:"), function $_CPConstantValueExpression___setValue_(self, _cmd, newValue)
{
    self._value = newValue;
}

,["void","id"]), new objj_method(sel_getUid("initWithValue:"), function $_CPConstantValueExpression__initWithValue_(self, _cmd, value)
{
    self = (objj_getClass("_CPConstantValueExpression").super_class.method_dtable["initWithExpressionType:"] || _objj_forward)(self, "initWithExpressionType:", CPConstantValueExpressionType);
    if (self)
        self._value = value;
    return self;
}

,["id","id"]), new objj_method(sel_getUid("isEqual:"), function $_CPConstantValueExpression__isEqual_(self, _cmd, object)
{
    if (self === object)
        return YES;
    if (object === nil || object.isa !== self.isa || !((___r1 = (object == null ? null : (object.isa.method_msgSend["constantValue"] || _objj_forward)(object, (object.isa.method_dtable["constantValue"], "constantValue")))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, "isEqual:", self._value)))
        return NO;
    return YES;
    var ___r1;
}

,["BOOL","id"]), new objj_method(sel_getUid("expressionValueWithObject:context:"), function $_CPConstantValueExpression__expressionValueWithObject_context_(self, _cmd, object, context)
{
    return self._value;
}

,["id","id","CPDictionary"]), new objj_method(sel_getUid("description"), function $_CPConstantValueExpression__description(self, _cmd)
{
    if (((___r1 = self._value), ___r1 == null ? null : (___r1.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(___r1, (self._value.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPString.isa.method_msgSend["class"] || _objj_forward)(CPString, (CPString.isa.method_dtable["class"], "class")))))
        return "\"" + self._value + "\"";
    if (self._value === (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null")))
        return "nil";
    return ((___r1 = self._value), ___r1 == null ? null : (___r1.isa.method_msgSend["description"] || _objj_forward)(___r1, (self._value.isa.method_dtable["description"], "description")));
    var ___r1;
}

,["CPString"])]);
}
var CPConstantValueKey = "CPConstantValue";
{
var the_class = objj_getClass("_CPConstantValueExpression")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"_CPConstantValueExpression\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $_CPConstantValueExpression__initWithCoder_(self, _cmd, coder)
{
    var value = (coder == null ? null : (coder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPConstantValueKey));
    return (self.isa.method_msgSend["initWithValue:"] || _objj_forward)(self, (self.isa.method_dtable["initWithValue:"], "initWithValue:"), value);
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $_CPConstantValueExpression__encodeWithCoder_(self, _cmd, coder)
{
    (coder == null ? null : (coder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeObject:forKey:"], coder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._value, CPConstantValueKey));
}

,["void","CPCoder"])]);
}
p;31;CPCompoundPredicate_Constants.jt;2361;@STATIC;1.0;S;2264;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQQ29tcG91bmRQcmVkaWNhdGVfQ29uc3RhbnRzLmoiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUE2QkEsa0IsR0FBcUIsQ0FBckI7QUFNQSxrQixHQUFxQixDQUFyQjtBQU1BLGlCLEdBQXFCLENBQXJCIiwiZmlsZSI6IkNQQ29tcG91bmRQcmVkaWNhdGVfQ29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6ImZpbGU6L1VzZXJzL2RhdmlkL3Byb2dyYW1zL2NhcHB1Y2Npbm8vRm91bmRhdGlvbi8iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ1BDb21wb3VuZFByZWRpY2F0ZV9oLmpcbiAqXG4gKiBQb3J0aW9ucyBiYXNlZCBvbiBOU0NvbXBvdW5kUHJlZGljYXRlLm0gaW4gQ29jb3Ryb24gKGh0dHA6Ly93d3cuY29jb3Ryb24ub3JnLylcbiAqIENvcHlyaWdodCAoYykgMjAwNi0yMDA3IENocmlzdG9waGVyIEouIFcuIExsb3lkXG4gKlxuICogQ3JlYXRlZCBieSBjYWNhb2Rldi5cbiAqIENvcHlyaWdodCAyMDEwLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlclxuICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlXG4gKiBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BIDAyMTEwLTEzMDEgVVNBXG4gKi9cblxuLyohXG4gICAgQSBwcmVkaWNhdGUgdG8gZGlyZWN0bHkgY29tcGFyZSB0aGUgbGVmdCBhbmQgcmlnaHQgaGFuZCBzaWRlcy5cbiAgICBAZ2xvYmFsXG4gICAgQGNsYXNzIENQQ29tcG91bmRQcmVkaWNhdGVcbiovXG5DUE5vdFByZWRpY2F0ZVR5cGUgPSAwO1xuLyohXG4gICAgQSBwcmVkaWNhdGUgdG8gZGlyZWN0bHkgY29tcGFyZSB0aGUgbGVmdCBhbmQgcmlnaHQgaGFuZCBzaWRlcy5cbiAgICBAZ2xvYmFsXG4gICAgQGNsYXNzIENQQ29tcG91bmRQcmVkaWNhdGVcbiovXG5DUEFuZFByZWRpY2F0ZVR5cGUgPSAxO1xuLyohXG4gICAgQSBwcmVkaWNhdGUgdG8gZGlyZWN0bHkgY29tcGFyZSB0aGUgbGVmdCBhbmQgcmlnaHQgaGFuZCBzaWRlcy5cbiAgICBAZ2xvYmFsXG4gICAgQGNsYXNzIENQQ29tcG91bmRQcmVkaWNhdGVcbiovXG5DUE9yUHJlZGljYXRlVHlwZSAgPSAyO1xuIl19t;73;

CPNotPredicateType = 0;
CPAndPredicateType = 1;
CPOrPredicateType = 2;
p;18;_CPSetExpression.jt;20408;@STATIC;1.0;i;13;CPException.ji;7;CPSet.ji;15;_CPExpression.jS;10648;;9684;

objj_executeFile("CPException.j", YES);objj_executeFile("CPSet.j", YES);objj_executeFile("_CPExpression.j", YES);
{var the_class = objj_allocateClassPair(CPExpression, "_CPSetExpression"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_left", "CPExpression"), new objj_ivar("_right", "CPExpression")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("leftExpression"), function $_CPSetExpression__leftExpression(self, _cmd)
{
    return self._left;
}

,["CPExpression"]), new objj_method(sel_getUid("_setLeft:"), function $_CPSetExpression___setLeft_(self, _cmd, newValue)
{
    self._left = newValue;
}

,["void","CPExpression"]), new objj_method(sel_getUid("rightExpression"), function $_CPSetExpression__rightExpression(self, _cmd)
{
    return self._right;
}

,["CPExpression"]), new objj_method(sel_getUid("_setRight:"), function $_CPSetExpression___setRight_(self, _cmd, newValue)
{
    self._right = newValue;
}

,["void","CPExpression"]), new objj_method(sel_getUid("initWithType:left:right:"), function $_CPSetExpression__initWithType_left_right_(self, _cmd, type, left, right)
{
    self = (objj_getClass("_CPSetExpression").super_class.method_dtable["initWithExpressionType:"] || _objj_forward)(self, "initWithExpressionType:", type);
    if (self)
    {
        self._left = left;
        self._right = right;
    }
    return self;
}

,["id","int","CPExpression","CPExpression"]), new objj_method(sel_getUid("isEqual:"), function $_CPSetExpression__isEqual_(self, _cmd, object)
{
    if (self === object)
        return YES;
    if (object === nil || object.isa !== self.isa || !((___r1 = (object == null ? null : (object.isa.method_msgSend["leftExpression"] || _objj_forward)(object, (object.isa.method_dtable["leftExpression"], "leftExpression")))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, "isEqual:", self._left)) || !((___r1 = (object == null ? null : (object.isa.method_msgSend["rightExpression"] || _objj_forward)(object, (object.isa.method_dtable["rightExpression"], "rightExpression")))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, "isEqual:", self._right)))
        return NO;
    return YES;
    var ___r1;
}

,["BOOL","id"]), new objj_method(sel_getUid("expressionValueWithObject:context:"), function $_CPSetExpression__expressionValueWithObject_context_(self, _cmd, object, context)
{
    var right = ((___r1 = self._right), ___r1 == null ? null : (___r1.isa.method_msgSend["expressionValueWithObject:context:"] || _objj_forward)(___r1, (self._right.isa.method_dtable["expressionValueWithObject:context:"], self._right.isa.method_dtable["expressionValueWithObject:context:"], "expressionValueWithObject:context:"), object, context));
    if ((right == null ? null : (right.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(right, (right.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPArray.isa.method_msgSend["class"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["class"], "class")))))
        right = (CPSet.isa.method_msgSend["setWithArray:"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["setWithArray:"], "setWithArray:"), right);
    else if ((right == null ? null : (right.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(right, (right.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPDictionary.isa.method_msgSend["class"] || _objj_forward)(CPDictionary, (CPDictionary.isa.method_dtable["class"], "class")))))
        right = (CPSet.isa.method_msgSend["setWithArray:"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["setWithArray:"], "setWithArray:"), (right == null ? null : (right.isa.method_msgSend["allValues"] || _objj_forward)(right, (right.isa.method_dtable["allValues"], "allValues"))));
    else if (!(right == null ? null : (right.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(right, (right.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPSet.isa.method_msgSend["class"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["class"], "class")))))
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "The right expression for a CP*SetExpressionType expression must evaluate to a CPArray, CPDictionary or CPSet");
    var left = ((___r1 = self._left), ___r1 == null ? null : (___r1.isa.method_msgSend["expressionValueWithObject:context:"] || _objj_forward)(___r1, (self._left.isa.method_dtable["expressionValueWithObject:context:"], self._left.isa.method_dtable["expressionValueWithObject:context:"], "expressionValueWithObject:context:"), object, context));
    if (!(left == null ? null : (left.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(left, (left.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPSet.isa.method_msgSend["class"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["class"], "class")))))
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "The left expression for a CP*SetExpressionType expression must evaluate to a CPSet");
    var result = (left == null ? null : (left.isa.method_msgSend["copy"] || _objj_forward)(left, (left.isa.method_dtable["copy"], "copy")));
    switch(self._type) {
        case CPIntersectSetExpressionType:
            (result == null ? null : (result.isa.method_msgSend["intersectSet:"] || _objj_forward)(result, (result.isa.method_dtable["intersectSet:"], "intersectSet:"), right));
            break;
        case CPUnionSetExpressionType:
            (result == null ? null : (result.isa.method_msgSend["unionSet:"] || _objj_forward)(result, (result.isa.method_dtable["unionSet:"], "unionSet:"), right));
            break;
        case CPMinusSetExpressionType:
            (result == null ? null : (result.isa.method_msgSend["minusSet:"] || _objj_forward)(result, (result.isa.method_dtable["minusSet:"], "minusSet:"), right));
            break;
default:
    }
    return result;
    var ___r1;
}

,["id","id","CPDictionary"]), new objj_method(sel_getUid("_expressionWithSubstitutionVariables:"), function $_CPSetExpression___expressionWithSubstitutionVariables_(self, _cmd, variables)
{
    return self;
}

,["CPExpression","CPDictionary"]), new objj_method(sel_getUid("description"), function $_CPSetExpression__description(self, _cmd)
{
    var desc;
    switch(self._type) {
        case CPIntersectSetExpressionType:
            desc = " INTERSECT ";
            break;
        case CPUnionSetExpressionType:
            desc = " UNION ";
            break;
        case CPMinusSetExpressionType:
            desc = " MINUS ";
            break;
default:
    }
    return ((___r1 = self._left), ___r1 == null ? null : (___r1.isa.method_msgSend["description"] || _objj_forward)(___r1, (self._left.isa.method_dtable["description"], "description"))) + desc + ((___r1 = self._right), ___r1 == null ? null : (___r1.isa.method_msgSend["description"] || _objj_forward)(___r1, (self._right.isa.method_dtable["description"], "description")));
    var ___r1;
}

,["CPString"])]);
}
var CPLeftExpressionKey = "CPLeftExpression",
    CPRightExpressionKey = "CPRightExpression",
    CPExpressionType = "CPExpressionType";
{
var the_class = objj_getClass("_CPSetExpression")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"_CPSetExpression\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $_CPSetExpression__initWithCoder_(self, _cmd, coder)
{
    var left = (coder == null ? null : (coder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPLeftExpressionKey)),
        right = (coder == null ? null : (coder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPRightExpressionKey)),
        type = (coder == null ? null : (coder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPExpressionType));
    return (self.isa.method_msgSend["initWithType:left:right:"] || _objj_forward)(self, (self.isa.method_dtable["initWithType:left:right:"], self.isa.method_dtable["initWithType:left:right:"], self.isa.method_dtable["initWithType:left:right:"], "initWithType:left:right:"), type, left, right);
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $_CPSetExpression__encodeWithCoder_(self, _cmd, coder)
{
    (coder == null ? null : (coder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeObject:forKey:"], coder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._left, CPLeftExpressionKey));
    (coder == null ? null : (coder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeObject:forKey:"], coder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._right, CPRightExpressionKey));
    (coder == null ? null : (coder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeInt:forKey:"], coder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._type, CPExpressionType));
}

,["void","CPCoder"])]);
}
p;21;CPCompoundPredicate.jt;30875;@STATIC;1.0;i;31;CPCompoundPredicate_Constants.ji;9;CPArray.ji;14;_CPPredicate.jS;17044;t;13735;

objj_executeFile("CPCompoundPredicate_Constants.j", YES);objj_executeFile("CPArray.j", YES);objj_executeFile("_CPPredicate.j", YES);{var the_typedef = objj_allocateTypeDef("CPCompoundPredicateType");
objj_registerTypeDef(the_typedef);
}
{var the_class = objj_allocateClassPair(CPPredicate, "CPCompoundPredicate"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_type", "CPCompoundPredicateType"), new objj_ivar("_predicates", "CPArray")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithType:subpredicates:"), function $CPCompoundPredicate__initWithType_subpredicates_(self, _cmd, type, predicates)
{
    self = (objj_getClass("CPCompoundPredicate").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._type = type;
        self._predicates = predicates;
    }
    return self;
}

,["id","CPCompoundPredicateType","CPArray"]), new objj_method(sel_getUid("compoundPredicateType"), function $CPCompoundPredicate__compoundPredicateType(self, _cmd)
{
    return self._type;
}

,["CPCompoundPredicateType"]), new objj_method(sel_getUid("subpredicates"), function $CPCompoundPredicate__subpredicates(self, _cmd)
{
    return self._predicates;
}

,["CPArray"]), new objj_method(sel_getUid("predicateWithSubstitutionVariables:"), function $CPCompoundPredicate__predicateWithSubstitutionVariables_(self, _cmd, variables)
{
    var subp = (CPArray.isa.method_msgSend["array"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["array"], "array")),
        count = (subp == null ? null : (subp.isa.method_msgSend["count"] || _objj_forward)(subp, (subp.isa.method_dtable["count"], "count"))),
        i = 0;
    for (; i < count; i++)
    {
        var p = (subp == null ? null : (subp.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(subp, (subp.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i)),
            sp = (p == null ? null : (p.isa.method_msgSend["predicateWithSubstitutionVariables:"] || _objj_forward)(p, (p.isa.method_dtable["predicateWithSubstitutionVariables:"], "predicateWithSubstitutionVariables:"), variables));
        (subp == null ? null : (subp.isa.method_msgSend["addObject:"] || _objj_forward)(subp, (subp.isa.method_dtable["addObject:"], "addObject:"), sp));
    }
    return ((___r1 = (CPCompoundPredicate.isa.method_msgSend["alloc"] || _objj_forward)(CPCompoundPredicate, (CPCompoundPredicate.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithType:subpredicates:"] || _objj_forward)(___r1, "initWithType:subpredicates:", self._type, subp));
    var ___r1;
}

,["CPPredicate","CPDictionary"]), new objj_method(sel_getUid("predicateFormat"), function $CPCompoundPredicate__predicateFormat(self, _cmd)
{
    var result = "",
        args = (CPArray.isa.method_msgSend["array"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["array"], "array")),
        count = ((___r1 = self._predicates), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._predicates.isa.method_dtable["count"], "count"))),
        i = 0;
    if (count == 0)
        return "TRUEPREDICATE";
    for (; i < count; i++)
    {
        var subpredicate = ((___r1 = self._predicates), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, (self._predicates.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i)),
            precedence = (subpredicate == null ? null : (subpredicate.isa.method_msgSend["predicateFormat"] || _objj_forward)(subpredicate, (subpredicate.isa.method_dtable["predicateFormat"], "predicateFormat")));
        if ((subpredicate == null ? null : (subpredicate.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(subpredicate, (subpredicate.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPCompoundPredicate.isa.method_msgSend["class"] || _objj_forward)(CPCompoundPredicate, (CPCompoundPredicate.isa.method_dtable["class"], "class")))) && ((___r1 = (subpredicate == null ? null : (subpredicate.isa.method_msgSend["subpredicates"] || _objj_forward)(subpredicate, (subpredicate.isa.method_dtable["subpredicates"], "subpredicates")))), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, "count")) > 1 && (subpredicate == null ? null : (subpredicate.isa.method_msgSend["compoundPredicateType"] || _objj_forward)(subpredicate, (subpredicate.isa.method_dtable["compoundPredicateType"], "compoundPredicateType"))) != self._type)
            precedence = (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "(%s)", precedence);
        if (precedence != nil)
            (args == null ? null : (args.isa.method_msgSend["addObject:"] || _objj_forward)(args, (args.isa.method_dtable["addObject:"], "addObject:"), precedence));
    }
    switch(self._type) {
        case CPNotPredicateType:
            result += "NOT " + (args == null ? null : (args.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(args, (args.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), 0));
            break;
        case CPAndPredicateType:
            result += (args == null ? null : (args.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(args, (args.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), 0));
            var count = (args == null ? null : (args.isa.method_msgSend["count"] || _objj_forward)(args, (args.isa.method_dtable["count"], "count")));
            for (var j = 1; j < count; j++)
                result += " AND " + (args == null ? null : (args.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(args, (args.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), j));
            break;
        case CPOrPredicateType:
            result += (args == null ? null : (args.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(args, (args.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), 0));
            var count = (args == null ? null : (args.isa.method_msgSend["count"] || _objj_forward)(args, (args.isa.method_dtable["count"], "count")));
            for (var j = 1; j < count; j++)
                result += " OR " + (args == null ? null : (args.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(args, (args.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), j));
            break;
    }
    return result;
    var ___r1;
}

,["CPString"]), new objj_method(sel_getUid("evaluateWithObject:"), function $CPCompoundPredicate__evaluateWithObject_(self, _cmd, object)
{
    return (self.isa.method_msgSend["evaluateWithObject:substitutionVariables:"] || _objj_forward)(self, (self.isa.method_dtable["evaluateWithObject:substitutionVariables:"], self.isa.method_dtable["evaluateWithObject:substitutionVariables:"], "evaluateWithObject:substitutionVariables:"), object, nil);
}

,["BOOL","id"]), new objj_method(sel_getUid("evaluateWithObject:substitutionVariables:"), function $CPCompoundPredicate__evaluateWithObject_substitutionVariables_(self, _cmd, object, variables)
{
    var result = NO,
        count = ((___r1 = self._predicates), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._predicates.isa.method_dtable["count"], "count"))),
        i = 0;
    if (count == 0)
        return YES;
    for (; i < count; i++)
    {
        var predicate = ((___r1 = self._predicates), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, (self._predicates.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i));
        switch(self._type) {
            case CPNotPredicateType:
                return !(predicate == null ? null : (predicate.isa.method_msgSend["evaluateWithObject:substitutionVariables:"] || _objj_forward)(predicate, (predicate.isa.method_dtable["evaluateWithObject:substitutionVariables:"], predicate.isa.method_dtable["evaluateWithObject:substitutionVariables:"], "evaluateWithObject:substitutionVariables:"), object, variables));
            case CPAndPredicateType:
                if (i == 0)
                    result = (predicate == null ? null : (predicate.isa.method_msgSend["evaluateWithObject:substitutionVariables:"] || _objj_forward)(predicate, (predicate.isa.method_dtable["evaluateWithObject:substitutionVariables:"], predicate.isa.method_dtable["evaluateWithObject:substitutionVariables:"], "evaluateWithObject:substitutionVariables:"), object, variables));
                else
                    result = result && (predicate == null ? null : (predicate.isa.method_msgSend["evaluateWithObject:substitutionVariables:"] || _objj_forward)(predicate, (predicate.isa.method_dtable["evaluateWithObject:substitutionVariables:"], predicate.isa.method_dtable["evaluateWithObject:substitutionVariables:"], "evaluateWithObject:substitutionVariables:"), object, variables));
                if (!result)
                    return NO;
                break;
            case CPOrPredicateType:
                if ((predicate == null ? null : (predicate.isa.method_msgSend["evaluateWithObject:substitutionVariables:"] || _objj_forward)(predicate, (predicate.isa.method_dtable["evaluateWithObject:substitutionVariables:"], predicate.isa.method_dtable["evaluateWithObject:substitutionVariables:"], "evaluateWithObject:substitutionVariables:"), object, variables)))
                    return YES;
                break;
        }
    }
    return result;
    var ___r1;
}

,["BOOL","id","CPDictionary"]), new objj_method(sel_getUid("isEqual:"), function $CPCompoundPredicate__isEqual_(self, _cmd, anObject)
{
    if (self === anObject)
        return YES;
    if (anObject === nil || anObject.isa !== self.isa || self._type !== (anObject == null ? null : (anObject.isa.method_msgSend["compoundPredicateType"] || _objj_forward)(anObject, (anObject.isa.method_dtable["compoundPredicateType"], "compoundPredicateType"))) || !((___r1 = self._predicates), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqualToArray:"] || _objj_forward)(___r1, (self._predicates.isa.method_dtable["isEqualToArray:"], "isEqualToArray:"), (anObject == null ? null : (anObject.isa.method_msgSend["subpredicates"] || _objj_forward)(anObject, (anObject.isa.method_dtable["subpredicates"], "subpredicates"))))))
        return NO;
    return YES;
    var ___r1;
}

,["BOOL","id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("notPredicateWithSubpredicate:"), function $CPCompoundPredicate__notPredicateWithSubpredicate_(self, _cmd, predicate)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithType:subpredicates:"] || _objj_forward)(___r1, "initWithType:subpredicates:", CPNotPredicateType, (CPArray.isa.method_msgSend["arrayWithObject:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObject:"], "arrayWithObject:"), predicate)));
    var ___r1;
}

,["CPPredicate","CPPredicate"]), new objj_method(sel_getUid("andPredicateWithSubpredicates:"), function $CPCompoundPredicate__andPredicateWithSubpredicates_(self, _cmd, subpredicates)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithType:subpredicates:"] || _objj_forward)(___r1, "initWithType:subpredicates:", CPAndPredicateType, subpredicates));
    var ___r1;
}

,["CPPredicate","CPArray"]), new objj_method(sel_getUid("orPredicateWithSubpredicates:"), function $CPCompoundPredicate__orPredicateWithSubpredicates_(self, _cmd, predicates)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithType:subpredicates:"] || _objj_forward)(___r1, "initWithType:subpredicates:", CPOrPredicateType, predicates));
    var ___r1;
}

,["CPPredicate","CPArray"])]);
}
{
var the_class = objj_getClass("CPCompoundPredicate")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPCompoundPredicate\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPCompoundPredicate__initWithCoder_(self, _cmd, coder)
{
    self = (objj_getClass("CPCompoundPredicate").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self != nil)
    {
        self._predicates = (coder == null ? null : (coder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), "CPCompoundPredicateSubpredicates"));
        self._type = (coder == null ? null : (coder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), "CPCompoundPredicateType"));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPCompoundPredicate__encodeWithCoder_(self, _cmd, coder)
{
    (coder == null ? null : (coder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeObject:forKey:"], coder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._predicates, "CPCompoundPredicateSubpredicates"));
    (coder == null ? null : (coder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeInt:forKey:"], coder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._type, "CPCompoundPredicateType"));
}

,["void","CPCoder"])]);
}
p;22;_CPKeyPathExpression.jt;9649;@STATIC;1.0;i;18;CPKeyValueCoding.ji;10;CPString.ji;15;_CPExpression.ji;23;_CPFunctionExpression.ji;28;_CPConstantValueExpression.jS;5172;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9DUEtleVBhdGhFeHByZXNzaW9uLmoiXSwibmFtZXMiOlsic2VsZiJdLCJtYXBwaW5ncyI6Ijs7QUF3QkEsa0IsMEJBQ0Esa0Isa0JBQ0Esa0IsdUJBQ0Esa0IsK0JBQ0Esa0Isb0NBRUE7QUFBQTtBQUFBLDJCOzZCQUlBLDRCLGlGQUFnQyxPO0FBQ2hDO0lBQ0ksTSxDQUFPLENBQUNBLElBQUQscUVBQUNBLElBQUQsR0FBTSxxREFBTixFQUFrRSxxREFBbEUsa0NBQXNCLENBQUMsWUFBRCxzRUFBQyxZQUFELEdBQWMsOERBQWQsa0NBQXRCLEVBQTZFLE9BQTdFLEM7QUFEWCxDOztxQkFJQSw0Qix1R0FBb0MsTyxFQUE2QixPO0FBQ2pFO0lBQ0ksSUFBSSxHLEdBQU0sQ0FBQyxZQUFELHFFQUFDLFlBQUQsR0FBYyw2REFBZCxrQ0FBeUMsT0FBekMsQ0FBVjtJQUVBQSxJLEdBQU8sQyxpREFBQSxnQix1Q0FBQSxzRUFBc0IsT0FBdEIsRUFBdUMsWSxrQkFBdkMsRUFBNkUsQ0FBQyxHLENBQTlFLEVBQXdGLHVCQUF4RixDQUFQO0lBRUEsTSxDQUFPQSxJO0FBTFgsQzs7b0NBUUEsNEIsaUVBQW9CLE07QUFDcEI7SUFDSSxJQUFJLE0sQ0FBQSxHLENBQVdBLElBQWY7UUFDSSxNLENBQU8sRztJQUVYLElBQUksTSxDQUFBLEcsQ0FBVyxHLElBQU8sT0FBTyxHLENBQVAsRyxDQUFlQSxJQUFBLENBQUssRyxJQUFPLENBQUMsVUFBQyxDQUFDLE1BQUQsbUJBQUMsTUFBRCxpREFBQyxNQUFELEdBQVEsbUNBQVIsY0FBRCxxSEFBa0MsQ0FBQ0EsSUFBRCxpREFBQ0EsSUFBRCxHQUFNLGlDQUFOLGFBQWxDLEVBQWxEO1FBQ0ksTSxDQUFPLEU7SUFFWCxNLENBQU8sRzs7QUFQWCxDOztpQkFVQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLFVBQUMsQ0FBQ0EsSUFBRCxtREFBQ0EsSUFBRCxHQUFNLG1DQUFOLGVBQUQsaUhBQWdDLENBQWhDLEU7O0FBRFgsQzs7b0JBSUEsNEI7QUFDQTtJQUNJLE0sQ0FBTyxVQUFDLENBQUNBLElBQUQsd0RBQUNBLElBQUQsR0FBTSx3Q0FBTixvQkFBRCxtRzs7QUFEWCxDOztnQkFJQSw0QjtBQUNBO0lBQ0ksSUFBSSxNLEdBQVMsRUFBYjtJQUNBLElBQUksVUFBQyxhQUFELGdHQUFVLGlEQUFWLHFCLENBQUEsRSxDQUE2QiwrQkFBakM7UUFDSSxNLElBQVUsVUFBQyxhQUFELDZGQUFVLDhDQUFWLGtCLENBQUEsQyxDQUF5QixHQUFuQztJQUNKLE0sSUFBVSxDQUFDQSxJQUFELGlEQUFDQSxJQUFELEdBQU0saUNBQU4sYUFBVjtJQUVBLE0sQ0FBTyxNOztBQU5YLEM7Ozs7QUFXQTtBQUFBOzs0REFFQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLENBQUNBLElBQUQsdURBQUNBLElBQUQsR0FBTSx1Q0FBTixtQjtBQURYLEMiLCJmaWxlIjoiX0NQS2V5UGF0aEV4cHJlc3Npb24uanMiLCJzb3VyY2VSb290IjoiZmlsZTovVXNlcnMvZGF2aWQvcHJvZ3JhbXMvY2FwcHVjY2luby9Gb3VuZGF0aW9uLyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBfQ1BLZXlQYXRoRXhwcmVzc2lvbi5qXG4gKlxuICogUG9ydGlvbnMgYmFzZWQgb24gTlNFeHByZXNzaW9uX2tleXBhdGgubSBpbiBDb2NvdHJvbiAoaHR0cDovL3d3dy5jb2NvdHJvbi5vcmcvKVxuICogQ29weXJpZ2h0IChjKSAyMDA2LTIwMDcgQ2hyaXN0b3BoZXIgSi4gVy4gTGxveWRcbiAqXG4gKiBDcmVhdGVkIGJ5IGNhY2FvZGV2LlxuICogQ29weXJpZ2h0IDIwMTAuXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyXG4gKiB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmVcbiAqIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5rbGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgMDIxMTAtMTMwMSBVU0FcbiAqL1xuXG5AaW1wb3J0IFwiQ1BLZXlWYWx1ZUNvZGluZy5qXCJcbkBpbXBvcnQgXCJDUFN0cmluZy5qXCJcbkBpbXBvcnQgXCJfQ1BFeHByZXNzaW9uLmpcIlxuQGltcG9ydCBcIl9DUEZ1bmN0aW9uRXhwcmVzc2lvbi5qXCJcbkBpbXBvcnQgXCJfQ1BDb25zdGFudFZhbHVlRXhwcmVzc2lvbi5qXCJcblxuQGltcGxlbWVudGF0aW9uIF9DUEtleVBhdGhFeHByZXNzaW9uIDogX0NQRnVuY3Rpb25FeHByZXNzaW9uXG57XG59XG5cbi0gKGlkKWluaXRXaXRoS2V5UGF0aDooQ1BTdHJpbmcpa2V5UGF0aFxue1xuICAgIHJldHVybiBbc2VsZiBpbml0V2l0aE9wZXJhbmQ6W0NQRXhwcmVzc2lvbiBleHByZXNzaW9uRm9yRXZhbHVhdGVkT2JqZWN0XSBhbmRLZXlQYXRoOmtleVBhdGhdO1xufVxuXG4tIChpZClpbml0V2l0aE9wZXJhbmQ6KENQRXhwcmVzc2lvbilvcGVyYW5kIGFuZEtleVBhdGg6KENQU3RyaW5nKWtleVBhdGhcbntcbiAgICB2YXIgYXJnID0gW0NQRXhwcmVzc2lvbiBleHByZXNzaW9uRm9yQ29uc3RhbnRWYWx1ZTprZXlQYXRoXTtcbiAgICAvLyBDb2NvYTogaWYgaXQncyBhIGRpcmVjdCBwYXRoIHNlbGVjdG9yIHVzZSB2YWx1ZUZvcktleTpcbiAgICBzZWxmID0gW3N1cGVyIGluaXRXaXRoVGFyZ2V0Om9wZXJhbmQgc2VsZWN0b3I6QHNlbGVjdG9yKHZhbHVlRm9yS2V5UGF0aDopIGFyZ3VtZW50czpbYXJnXSB0eXBlOkNQS2V5UGF0aEV4cHJlc3Npb25UeXBlXTtcblxuICAgIHJldHVybiBzZWxmO1xufVxuXG4tIChCT09MKWlzRXF1YWw6KGlkKW9iamVjdFxue1xuICAgIGlmIChvYmplY3QgPT09IHNlbGYpXG4gICAgICAgIHJldHVybiBZRVM7XG5cbiAgICBpZiAob2JqZWN0ID09PSBuaWwgfHwgb2JqZWN0LmlzYSAhPT0gc2VsZi5pc2EgfHwgIVtbb2JqZWN0IGtleVBhdGhdIGlzRXF1YWxUb1N0cmluZzpbc2VsZiBrZXlQYXRoXV0pXG4gICAgICAgIHJldHVybiBOTztcblxuICAgIHJldHVybiBZRVM7XG59XG5cbi0gKENQRXhwcmVzc2lvbilwYXRoRXhwcmVzc2lvblxue1xuICAgIHJldHVybiBbW3NlbGYgYXJndW1lbnRzXSBvYmplY3RBdEluZGV4OjBdO1xufVxuXG4tIChDUFN0cmluZylrZXlQYXRoXG57XG4gICAgcmV0dXJuIFtbc2VsZiBwYXRoRXhwcmVzc2lvbl0ga2V5UGF0aF07XG59XG5cbi0gKENQU3RyaW5nKWRlc2NyaXB0aW9uXG57XG4gICAgdmFyIHJlc3VsdCA9IFwiXCI7XG4gICAgaWYgKFtfb3BlcmFuZCBleHByZXNzaW9uVHlwZV0gIT0gQ1BFdmFsdWF0ZWRPYmplY3RFeHByZXNzaW9uVHlwZSlcbiAgICAgICAgcmVzdWx0ICs9IFtfb3BlcmFuZCBkZXNjcmlwdGlvbl0gKyBcIi5cIjtcbiAgICByZXN1bHQgKz0gW3NlbGYga2V5UGF0aF07XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5AZW5kXG5cbkBpbXBsZW1lbnRhdGlvbiBfQ1BDb25zdGFudFZhbHVlRXhwcmVzc2lvbiAoS2V5UGF0aClcblxuLSAoQ1BTdHJpbmcpa2V5UGF0aFxue1xuICAgIHJldHVybiBbc2VsZiBjb25zdGFudFZhbHVlXTtcbn1cblxuQGVuZFxuIl19t;4332;

objj_executeFile("CPKeyValueCoding.j", YES);objj_executeFile("CPString.j", YES);objj_executeFile("_CPExpression.j", YES);objj_executeFile("_CPFunctionExpression.j", YES);objj_executeFile("_CPConstantValueExpression.j", YES);
{var the_class = objj_allocateClassPair(_CPFunctionExpression, "_CPKeyPathExpression"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithKeyPath:"), function $_CPKeyPathExpression__initWithKeyPath_(self, _cmd, keyPath)
{
    return (self.isa.method_msgSend["initWithOperand:andKeyPath:"] || _objj_forward)(self, (self.isa.method_dtable["initWithOperand:andKeyPath:"], self.isa.method_dtable["initWithOperand:andKeyPath:"], "initWithOperand:andKeyPath:"), (CPExpression.isa.method_msgSend["expressionForEvaluatedObject"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForEvaluatedObject"], "expressionForEvaluatedObject")), keyPath);
}

,["id","CPString"]), new objj_method(sel_getUid("initWithOperand:andKeyPath:"), function $_CPKeyPathExpression__initWithOperand_andKeyPath_(self, _cmd, operand, keyPath)
{
    var arg = (CPExpression.isa.method_msgSend["expressionForConstantValue:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForConstantValue:"], "expressionForConstantValue:"), keyPath);
    self = (objj_getClass("_CPKeyPathExpression").super_class.method_dtable["initWithTarget:selector:arguments:type:"] || _objj_forward)(self, "initWithTarget:selector:arguments:type:", operand, sel_getUid("valueForKeyPath:"), [arg], CPKeyPathExpressionType);
    return self;
}

,["id","CPExpression","CPString"]), new objj_method(sel_getUid("isEqual:"), function $_CPKeyPathExpression__isEqual_(self, _cmd, object)
{
    if (object === self)
        return YES;
    if (object === nil || object.isa !== self.isa || !((___r1 = (object == null ? null : (object.isa.method_msgSend["keyPath"] || _objj_forward)(object, (object.isa.method_dtable["keyPath"], "keyPath")))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqualToString:"] || _objj_forward)(___r1, "isEqualToString:", (self.isa.method_msgSend["keyPath"] || _objj_forward)(self, (self.isa.method_dtable["keyPath"], "keyPath")))))
        return NO;
    return YES;
    var ___r1;
}

,["BOOL","id"]), new objj_method(sel_getUid("pathExpression"), function $_CPKeyPathExpression__pathExpression(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["arguments"] || _objj_forward)(self, (self.isa.method_dtable["arguments"], "arguments"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, "objectAtIndex:", 0));
    var ___r1;
}

,["CPExpression"]), new objj_method(sel_getUid("keyPath"), function $_CPKeyPathExpression__keyPath(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["pathExpression"] || _objj_forward)(self, (self.isa.method_dtable["pathExpression"], "pathExpression"))), ___r1 == null ? null : (___r1.isa.method_msgSend["keyPath"] || _objj_forward)(___r1, "keyPath"));
    var ___r1;
}

,["CPString"]), new objj_method(sel_getUid("description"), function $_CPKeyPathExpression__description(self, _cmd)
{
    var result = "";
    if (((___r1 = self._operand), ___r1 == null ? null : (___r1.isa.method_msgSend["expressionType"] || _objj_forward)(___r1, (self._operand.isa.method_dtable["expressionType"], "expressionType"))) != CPEvaluatedObjectExpressionType)
        result += ((___r1 = self._operand), ___r1 == null ? null : (___r1.isa.method_msgSend["description"] || _objj_forward)(___r1, (self._operand.isa.method_dtable["description"], "description"))) + ".";
    result += (self.isa.method_msgSend["keyPath"] || _objj_forward)(self, (self.isa.method_dtable["keyPath"], "keyPath"));
    return result;
    var ___r1;
}

,["CPString"])]);
}
{
var the_class = objj_getClass("_CPConstantValueExpression")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"_CPConstantValueExpression\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("keyPath"), function $_CPConstantValueExpression__keyPath(self, _cmd)
{
    return (self.isa.method_msgSend["constantValue"] || _objj_forward)(self, (self.isa.method_dtable["constantValue"], "constantValue"));
}

,["CPString"])]);
}
p;23;CPComparisonPredicate.jt;70009;@STATIC;1.0;i;33;CPComparisonPredicate_Constants.ji;9;CPArray.ji;14;CPEnumerator.ji;8;CPNull.ji;10;CPString.ji;15;_CPExpression.ji;14;_CPPredicate.jS;41656;;28189;

objj_executeFile("CPComparisonPredicate_Constants.j", YES);objj_executeFile("CPArray.j", YES);objj_executeFile("CPEnumerator.j", YES);objj_executeFile("CPNull.j", YES);objj_executeFile("CPString.j", YES);objj_executeFile("_CPExpression.j", YES);objj_executeFile("_CPPredicate.j", YES);{var the_typedef = objj_allocateTypeDef("CPComparisonPredicateModifier");
objj_registerTypeDef(the_typedef);
}{var the_typedef = objj_allocateTypeDef("CPPredicateOperatorType");
objj_registerTypeDef(the_typedef);
}
{var the_class = objj_allocateClassPair(CPPredicate, "CPComparisonPredicate"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_left", "CPExpression"), new objj_ivar("_right", "CPExpression"), new objj_ivar("_modifier", "CPComparisonPredicateModifier"), new objj_ivar("_type", "CPPredicateOperatorType"), new objj_ivar("_options", "unsigned int"), new objj_ivar("_customSelector", "SEL")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithLeftExpression:rightExpression:customSelector:"), function $CPComparisonPredicate__initWithLeftExpression_rightExpression_customSelector_(self, _cmd, left, right, selector)
{
    self = (objj_getClass("CPComparisonPredicate").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._left = left;
        self._right = right;
        self._modifier = CPDirectPredicateModifier;
        self._type = CPCustomSelectorPredicateOperatorType;
        self._options = 0;
        self._customSelector = selector;
    }
    return self;
}

,["id","CPExpression","CPExpression","SEL"]), new objj_method(sel_getUid("initWithLeftExpression:rightExpression:modifier:type:options:"), function $CPComparisonPredicate__initWithLeftExpression_rightExpression_modifier_type_options_(self, _cmd, left, right, modifier, type, options)
{
    self = (objj_getClass("CPComparisonPredicate").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._left = left;
        self._right = right;
        self._modifier = modifier;
        self._type = type;
        self._options = type != CPMatchesPredicateOperatorType && type != CPLikePredicateOperatorType && type != CPBeginsWithPredicateOperatorType && type != CPEndsWithPredicateOperatorType && type != CPInPredicateOperatorType && type != CPContainsPredicateOperatorType ? 0 : options;
        self._customSelector = NULL;
    }
    return self;
}

,["id","CPExpression","CPExpression","CPComparisonPredicateModifier","CPPredicateOperatorType","unsigned"]), new objj_method(sel_getUid("comparisonPredicateModifier"), function $CPComparisonPredicate__comparisonPredicateModifier(self, _cmd)
{
    return self._modifier;
}

,["CPComparisonPredicateModifier"]), new objj_method(sel_getUid("customSelector"), function $CPComparisonPredicate__customSelector(self, _cmd)
{
    return self._customSelector;
}

,["SEL"]), new objj_method(sel_getUid("leftExpression"), function $CPComparisonPredicate__leftExpression(self, _cmd)
{
    return self._left;
}

,["CPExpression"]), new objj_method(sel_getUid("options"), function $CPComparisonPredicate__options(self, _cmd)
{
    return self._options;
}

,["unsigned"]), new objj_method(sel_getUid("predicateOperatorType"), function $CPComparisonPredicate__predicateOperatorType(self, _cmd)
{
    return self._type;
}

,["CPPredicateOperatorType"]), new objj_method(sel_getUid("rightExpression"), function $CPComparisonPredicate__rightExpression(self, _cmd)
{
    return self._right;
}

,["CPExpression"]), new objj_method(sel_getUid("predicateFormat"), function $CPComparisonPredicate__predicateFormat(self, _cmd)
{
    var modifier;
    switch(self._modifier) {
        case CPDirectPredicateModifier:
            modifier = "";
            break;
        case CPAllPredicateModifier:
            modifier = "ALL ";
            break;
        case CPAnyPredicateModifier:
            modifier = "ANY ";
            break;
default:
            modifier = "";
            break;
    }
    var options;
    switch(self._options) {
        case CPCaseInsensitivePredicateOption:
            options = "[c]";
            break;
        case CPDiacriticInsensitivePredicateOption:
            options = "[d]";
            break;
        case CPCaseInsensitivePredicateOption | CPDiacriticInsensitivePredicateOption:
            options = "[cd]";
            break;
default:
            options = "";
            break;
    }
    var operator;
    switch(self._type) {
        case CPLessThanPredicateOperatorType:
            operator = "<";
            break;
        case CPLessThanOrEqualToPredicateOperatorType:
            operator = "<=";
            break;
        case CPGreaterThanPredicateOperatorType:
            operator = ">";
            break;
        case CPGreaterThanOrEqualToPredicateOperatorType:
            operator = ">=";
            break;
        case CPEqualToPredicateOperatorType:
            operator = "==";
            break;
        case CPNotEqualToPredicateOperatorType:
            operator = "!=";
            break;
        case CPMatchesPredicateOperatorType:
            operator = "MATCHES";
            break;
        case CPLikePredicateOperatorType:
            operator = "LIKE";
            break;
        case CPBeginsWithPredicateOperatorType:
            operator = "BEGINSWITH";
            break;
        case CPEndsWithPredicateOperatorType:
            operator = "ENDSWITH";
            break;
        case CPInPredicateOperatorType:
            operator = "IN";
            break;
        case CPContainsPredicateOperatorType:
            operator = "CONTAINS";
            break;
        case CPCustomSelectorPredicateOperatorType:
            operator = CPStringFromSelector(self._customSelector);
            break;
    }
    return (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "%s%s %s%s %s", modifier, ((___r1 = self._left), ___r1 == null ? null : (___r1.isa.method_msgSend["description"] || _objj_forward)(___r1, (self._left.isa.method_dtable["description"], "description"))), operator, options, ((___r1 = self._right), ___r1 == null ? null : (___r1.isa.method_msgSend["description"] || _objj_forward)(___r1, (self._right.isa.method_dtable["description"], "description"))));
    var ___r1;
}

,["CPString"]), new objj_method(sel_getUid("predicateWithSubstitutionVariables:"), function $CPComparisonPredicate__predicateWithSubstitutionVariables_(self, _cmd, variables)
{
    var left = ((___r1 = self._left), ___r1 == null ? null : (___r1.isa.method_msgSend["_expressionWithSubstitutionVariables:"] || _objj_forward)(___r1, (self._left.isa.method_dtable["_expressionWithSubstitutionVariables:"], "_expressionWithSubstitutionVariables:"), variables)),
        right = ((___r1 = self._right), ___r1 == null ? null : (___r1.isa.method_msgSend["_expressionWithSubstitutionVariables:"] || _objj_forward)(___r1, (self._right.isa.method_dtable["_expressionWithSubstitutionVariables:"], "_expressionWithSubstitutionVariables:"), variables));
    if (self._type != CPCustomSelectorPredicateOperatorType)
        return (CPComparisonPredicate.isa.method_msgSend["predicateWithLeftExpression:rightExpression:modifier:type:options:"] || _objj_forward)(CPComparisonPredicate, (CPComparisonPredicate.isa.method_dtable["predicateWithLeftExpression:rightExpression:modifier:type:options:"], CPComparisonPredicate.isa.method_dtable["predicateWithLeftExpression:rightExpression:modifier:type:options:"], CPComparisonPredicate.isa.method_dtable["predicateWithLeftExpression:rightExpression:modifier:type:options:"], CPComparisonPredicate.isa.method_dtable["predicateWithLeftExpression:rightExpression:modifier:type:options:"], CPComparisonPredicate.isa.method_dtable["predicateWithLeftExpression:rightExpression:modifier:type:options:"], "predicateWithLeftExpression:rightExpression:modifier:type:options:"), left, right, self._modifier, self._type, self._options);
    else
        return (CPComparisonPredicate.isa.method_msgSend["predicateWithLeftExpression:rightExpression:customSelector:"] || _objj_forward)(CPComparisonPredicate, (CPComparisonPredicate.isa.method_dtable["predicateWithLeftExpression:rightExpression:customSelector:"], CPComparisonPredicate.isa.method_dtable["predicateWithLeftExpression:rightExpression:customSelector:"], CPComparisonPredicate.isa.method_dtable["predicateWithLeftExpression:rightExpression:customSelector:"], "predicateWithLeftExpression:rightExpression:customSelector:"), left, right, self._customSelector);
    var ___r1;
}

,["CPPredicate","CPDictionary"]), new objj_method(sel_getUid("isEqual:"), function $CPComparisonPredicate__isEqual_(self, _cmd, anObject)
{
    if (self === anObject)
        return YES;
    if (anObject === nil || anObject.isa !== self.isa || self._modifier !== (anObject == null ? null : (anObject.isa.method_msgSend["comparisonPredicateModifier"] || _objj_forward)(anObject, (anObject.isa.method_dtable["comparisonPredicateModifier"], "comparisonPredicateModifier"))) || self._type !== (anObject == null ? null : (anObject.isa.method_msgSend["predicateOperatorType"] || _objj_forward)(anObject, (anObject.isa.method_dtable["predicateOperatorType"], "predicateOperatorType"))) || self._options !== (anObject == null ? null : (anObject.isa.method_msgSend["options"] || _objj_forward)(anObject, (anObject.isa.method_dtable["options"], "options"))) || self._customSelector !== (anObject == null ? null : (anObject.isa.method_msgSend["customSelector"] || _objj_forward)(anObject, (anObject.isa.method_dtable["customSelector"], "customSelector"))) || !((___r1 = self._left), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, (self._left.isa.method_dtable["isEqual:"], "isEqual:"), (anObject == null ? null : (anObject.isa.method_msgSend["leftExpression"] || _objj_forward)(anObject, (anObject.isa.method_dtable["leftExpression"], "leftExpression"))))) || !((___r1 = self._right), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, (self._right.isa.method_dtable["isEqual:"], "isEqual:"), (anObject == null ? null : (anObject.isa.method_msgSend["rightExpression"] || _objj_forward)(anObject, (anObject.isa.method_dtable["rightExpression"], "rightExpression"))))))
        return NO;
    return YES;
    var ___r1;
}

,["BOOL","id"]), new objj_method(sel_getUid("_evaluateValue:rightValue:"), function $CPComparisonPredicate___evaluateValue_rightValue_(self, _cmd, lhs, rhs)
{
    var leftIsNil = lhs == nil || (lhs == null ? null : (lhs.isa.method_msgSend["isEqual:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["isEqual:"], "isEqual:"), (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null")))),
        rightIsNil = rhs == nil || (rhs == null ? null : (rhs.isa.method_msgSend["isEqual:"] || _objj_forward)(rhs, (rhs.isa.method_dtable["isEqual:"], "isEqual:"), (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null"))));
    if ((leftIsNil || rightIsNil) && self._type != CPCustomSelectorPredicateOperatorType)
        return leftIsNil == rightIsNil && (self._type == CPEqualToPredicateOperatorType || self._type == CPLessThanOrEqualToPredicateOperatorType || self._type == CPGreaterThanOrEqualToPredicateOperatorType);
    var string_compare_options = 0;
    switch(self._type) {
        case CPLessThanPredicateOperatorType:
            return (lhs == null ? null : (lhs.isa.method_msgSend["compare:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["compare:"], "compare:"), rhs)) == CPOrderedAscending;
        case CPLessThanOrEqualToPredicateOperatorType:
            return (lhs == null ? null : (lhs.isa.method_msgSend["compare:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["compare:"], "compare:"), rhs)) != CPOrderedDescending;
        case CPGreaterThanPredicateOperatorType:
            return (lhs == null ? null : (lhs.isa.method_msgSend["compare:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["compare:"], "compare:"), rhs)) == CPOrderedDescending;
        case CPGreaterThanOrEqualToPredicateOperatorType:
            return (lhs == null ? null : (lhs.isa.method_msgSend["compare:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["compare:"], "compare:"), rhs)) != CPOrderedAscending;
        case CPEqualToPredicateOperatorType:
            return (lhs == null ? null : (lhs.isa.method_msgSend["isEqual:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["isEqual:"], "isEqual:"), rhs));
        case CPNotEqualToPredicateOperatorType:
            return !(lhs == null ? null : (lhs.isa.method_msgSend["isEqual:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["isEqual:"], "isEqual:"), rhs));
        case CPMatchesPredicateOperatorType:
            var commut = self._options & CPCaseInsensitivePredicateOption ? "gi" : "g";
            if (self._options & CPDiacriticInsensitivePredicateOption)
            {
                lhs = lhs.stripDiacritics();
                rhs = rhs.stripDiacritics();
            }
            return (new RegExp(rhs, commut)).test(lhs);
        case CPLikePredicateOperatorType:
            if (self._options & CPDiacriticInsensitivePredicateOption)
            {
                lhs = lhs.stripDiacritics();
                rhs = rhs.stripDiacritics();
            }
            var commut = self._options & CPCaseInsensitivePredicateOption ? "gi" : "g",
                reg = new RegExp(rhs.escapeForRegExp(), commut);
            return reg.test(lhs);
        case CPBeginsWithPredicateOperatorType:
            var range = CPMakeRange(0, MIN((lhs == null ? null : (lhs.isa.method_msgSend["length"] || _objj_forward)(lhs, (lhs.isa.method_dtable["length"], "length"))), (rhs == null ? null : (rhs.isa.method_msgSend["length"] || _objj_forward)(rhs, (rhs.isa.method_dtable["length"], "length")))));
            if (self._options & CPCaseInsensitivePredicateOption)
                string_compare_options |= CPCaseInsensitiveSearch;
            if (self._options & CPDiacriticInsensitivePredicateOption)
                string_compare_options |= CPDiacriticInsensitiveSearch;
            return (lhs == null ? null : (lhs.isa.method_msgSend["compare:options:range:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["compare:options:range:"], lhs.isa.method_dtable["compare:options:range:"], lhs.isa.method_dtable["compare:options:range:"], "compare:options:range:"), rhs, string_compare_options, range)) == CPOrderedSame;
        case CPEndsWithPredicateOperatorType:
            var range = CPMakeRange(MAX((lhs == null ? null : (lhs.isa.method_msgSend["length"] || _objj_forward)(lhs, (lhs.isa.method_dtable["length"], "length"))) - (rhs == null ? null : (rhs.isa.method_msgSend["length"] || _objj_forward)(rhs, (rhs.isa.method_dtable["length"], "length"))), 0), MIN((lhs == null ? null : (lhs.isa.method_msgSend["length"] || _objj_forward)(lhs, (lhs.isa.method_dtable["length"], "length"))), (rhs == null ? null : (rhs.isa.method_msgSend["length"] || _objj_forward)(rhs, (rhs.isa.method_dtable["length"], "length")))));
            if (self._options & CPCaseInsensitivePredicateOption)
                string_compare_options |= CPCaseInsensitiveSearch;
            if (self._options & CPDiacriticInsensitivePredicateOption)
                string_compare_options |= CPDiacriticInsensitiveSearch;
            return (lhs == null ? null : (lhs.isa.method_msgSend["compare:options:range:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["compare:options:range:"], lhs.isa.method_dtable["compare:options:range:"], lhs.isa.method_dtable["compare:options:range:"], "compare:options:range:"), rhs, string_compare_options, range)) == CPOrderedSame;
        case CPCustomSelectorPredicateOperatorType:
            return (lhs == null ? null : (lhs.isa.method_msgSend["performSelector:withObject:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["performSelector:withObject:"], lhs.isa.method_dtable["performSelector:withObject:"], "performSelector:withObject:"), self._customSelector, rhs));
        case CPInPredicateOperatorType:
            var a = lhs;
            lhs = rhs;
            rhs = a;
        case CPContainsPredicateOperatorType:
            if (!(lhs == null ? null : (lhs.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPString.isa.method_msgSend["class"] || _objj_forward)(CPString, (CPString.isa.method_dtable["class"], "class")))))
            {
                if (!(lhs == null ? null : (lhs.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("objectEnumerator"))))
                    (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "The left/right hand side for a CONTAINS/IN  operator must be a collection or a string");
                return (lhs == null ? null : (lhs.isa.method_msgSend["containsObject:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["containsObject:"], "containsObject:"), rhs));
            }
            if (self._options & CPCaseInsensitivePredicateOption)
                string_compare_options |= CPCaseInsensitiveSearch;
            if (self._options & CPDiacriticInsensitivePredicateOption)
                string_compare_options |= CPDiacriticInsensitiveSearch;
            return (lhs == null ? null : (lhs.isa.method_msgSend["rangeOfString:options:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["rangeOfString:options:"], lhs.isa.method_dtable["rangeOfString:options:"], "rangeOfString:options:"), rhs, string_compare_options)).location != CPNotFound;
        case CPBetweenPredicateOperatorType:
            if ((rhs == null ? null : (rhs.isa.method_msgSend["count"] || _objj_forward)(rhs, (rhs.isa.method_dtable["count"], "count"))) < 2)
                (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "The right hand side for a BETWEEN operator must contain 2 objects");
            return (lhs == null ? null : (lhs.isa.method_msgSend["compare:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["compare:"], "compare:"), rhs[0])) == CPOrderedDescending && (lhs == null ? null : (lhs.isa.method_msgSend["compare:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["compare:"], "compare:"), rhs[1])) == CPOrderedAscending;
default:
            return NO;
    }
}

,["BOOL","id","id"]), new objj_method(sel_getUid("evaluateWithObject:"), function $CPComparisonPredicate__evaluateWithObject_(self, _cmd, object)
{
    return (self.isa.method_msgSend["evaluateWithObject:substitutionVariables:"] || _objj_forward)(self, (self.isa.method_dtable["evaluateWithObject:substitutionVariables:"], self.isa.method_dtable["evaluateWithObject:substitutionVariables:"], "evaluateWithObject:substitutionVariables:"), object, nil);
}

,["BOOL","id"]), new objj_method(sel_getUid("evaluateWithObject:substitutionVariables:"), function $CPComparisonPredicate__evaluateWithObject_substitutionVariables_(self, _cmd, object, variables)
{
    var leftValue = ((___r1 = self._left), ___r1 == null ? null : (___r1.isa.method_msgSend["expressionValueWithObject:context:"] || _objj_forward)(___r1, (self._left.isa.method_dtable["expressionValueWithObject:context:"], self._left.isa.method_dtable["expressionValueWithObject:context:"], "expressionValueWithObject:context:"), object, variables)),
        rightValue = ((___r1 = self._right), ___r1 == null ? null : (___r1.isa.method_msgSend["expressionValueWithObject:context:"] || _objj_forward)(___r1, (self._right.isa.method_dtable["expressionValueWithObject:context:"], self._right.isa.method_dtable["expressionValueWithObject:context:"], "expressionValueWithObject:context:"), object, variables));
    leftValue = typeof leftValue == "boolean" ? (CPNumber.isa.method_msgSend["numberWithBool:"] || _objj_forward)(CPNumber, (CPNumber.isa.method_dtable["numberWithBool:"], "numberWithBool:"), leftValue) : leftValue;
    rightValue = typeof rightValue == "boolean" ? (CPNumber.isa.method_msgSend["numberWithBool:"] || _objj_forward)(CPNumber, (CPNumber.isa.method_dtable["numberWithBool:"], "numberWithBool:"), rightValue) : rightValue;
    if (self._modifier == CPDirectPredicateModifier)
        return (self.isa.method_msgSend["_evaluateValue:rightValue:"] || _objj_forward)(self, (self.isa.method_dtable["_evaluateValue:rightValue:"], self.isa.method_dtable["_evaluateValue:rightValue:"], "_evaluateValue:rightValue:"), leftValue, rightValue);
    else
    {
        if (!(leftValue == null ? null : (leftValue.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(leftValue, (leftValue.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), sel_getUid("objectEnumerator"))))
            (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "The left hand side for an ALL or ANY operator must be either a CPArray or a CPSet");
        var e = (leftValue == null ? null : (leftValue.isa.method_msgSend["objectEnumerator"] || _objj_forward)(leftValue, (leftValue.isa.method_dtable["objectEnumerator"], "objectEnumerator"))),
            result = self._modifier == CPAllPredicateModifier,
            value;
        while ((value = (e == null ? null : (e.isa.method_msgSend["nextObject"] || _objj_forward)(e, (e.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        {
            var eval = (self.isa.method_msgSend["_evaluateValue:rightValue:"] || _objj_forward)(self, (self.isa.method_dtable["_evaluateValue:rightValue:"], self.isa.method_dtable["_evaluateValue:rightValue:"], "_evaluateValue:rightValue:"), value, rightValue);
            if (eval != result)
                return eval;
        }
        return result;
    }
    var ___r1;
}

,["BOOL","id","CPDictionary"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("predicateWithLeftExpression:rightExpression:customSelector:"), function $CPComparisonPredicate__predicateWithLeftExpression_rightExpression_customSelector_(self, _cmd, left, right, selector)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithLeftExpression:rightExpression:customSelector:"] || _objj_forward)(___r1, "initWithLeftExpression:rightExpression:customSelector:", left, right, selector));
    var ___r1;
}

,["CPPredicate","CPExpression","CPExpression","SEL"]), new objj_method(sel_getUid("predicateWithLeftExpression:rightExpression:modifier:type:options:"), function $CPComparisonPredicate__predicateWithLeftExpression_rightExpression_modifier_type_options_(self, _cmd, left, right, modifier, type, options)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithLeftExpression:rightExpression:modifier:type:options:"] || _objj_forward)(___r1, "initWithLeftExpression:rightExpression:modifier:type:options:", left, right, modifier, type, options));
    var ___r1;
}

,["CPPredicate","CPExpression","CPExpression","CPComparisonPredicateModifier","int","unsigned"])]);
}
{
var the_class = objj_getClass("CPComparisonPredicate")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPComparisonPredicate\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPComparisonPredicate__initWithCoder_(self, _cmd, coder)
{
    self = (objj_getClass("CPComparisonPredicate").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self != nil)
    {
        self._left = (coder == null ? null : (coder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), "CPComparisonPredicateLeftExpression"));
        self._right = (coder == null ? null : (coder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), "CPComparisonPredicateRightExpression"));
        self._modifier = (coder == null ? null : (coder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), "CPComparisonPredicateModifier"));
        self._type = (coder == null ? null : (coder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), "CPComparisonPredicateType"));
        self._options = (coder == null ? null : (coder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), "CPComparisonPredicateOptions"));
        self._customSelector = (coder == null ? null : (coder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), "CPComparisonPredicateCustomSelector"));
    }
    return self;
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPComparisonPredicate__encodeWithCoder_(self, _cmd, coder)
{
    (coder == null ? null : (coder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeObject:forKey:"], coder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._left, "CPComparisonPredicateLeftExpression"));
    (coder == null ? null : (coder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeObject:forKey:"], coder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._right, "CPComparisonPredicateRightExpression"));
    (coder == null ? null : (coder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeInt:forKey:"], coder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._modifier, "CPComparisonPredicateModifier"));
    (coder == null ? null : (coder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeInt:forKey:"], coder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._type, "CPComparisonPredicateType"));
    (coder == null ? null : (coder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeInt:forKey:"], coder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._options, "CPComparisonPredicateOptions"));
    (coder == null ? null : (coder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeObject:forKey:"], coder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._customSelector, "CPComparisonPredicateCustomSelector"));
}

,["void","CPCoder"])]);
}
var source = ['*', '?', '(', ')', '{', '}', '.', '+', '|', '/', '$', '^'],
    dest = ['.*', '.?', '\\(', '\\)', '\\{', '\\}', '\\.', '\\+', '\\|', '\\/', '\\$', '\\^'];
String.prototype.escapeForRegExp = function()
{
    var foundChar = false,
        i = 0;
    for (; i < source.length; ++i)
    {
        if (this.indexOf(source[i]) !== -1)
        {
            foundChar = true;
            break;
        }    }    if (!foundChar)
        return this;
    var result = "";
    for (i = 0; i < this.length; ++i)
    {
        var sourceIndex = source.indexOf(this.charAt(i));
        if (sourceIndex !== -1)
            result += dest[sourceIndex];
        else
            result += this.charAt(i);
    }    return result;
};
p;14;_CPPredicate.jt;154945;@STATIC;1.0;i;9;CPArray.ji;13;CPException.ji;8;CPNull.ji;10;CPObject.ji;11;CPScanner.ji;7;CPSet.ji;9;CPValue.ji;16;CPCharacterSet.ji;33;CPComparisonPredicate_Constants.ji;31;CPCompoundPredicate_Constants.ji;15;_CPExpression.jS;78476;;76228;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPNull.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPScanner.j", YES);objj_executeFile("CPSet.j", YES);objj_executeFile("CPValue.j", YES);objj_executeFile("CPCharacterSet.j", YES);objj_executeFile("CPComparisonPredicate_Constants.j", YES);objj_executeFile("CPCompoundPredicate_Constants.j", YES);objj_executeFile("_CPExpression.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPPredicate"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("predicateWithSubstitutionVariables:"), function $CPPredicate__predicateWithSubstitutionVariables_(self, _cmd, variables)
{
}

,["CPPredicate","CPDictionary"]), new objj_method(sel_getUid("evaluateWithObject:"), function $CPPredicate__evaluateWithObject_(self, _cmd, object)
{
}

,["BOOL","id"]), new objj_method(sel_getUid("evaluateWithObject:substitutionVariables:"), function $CPPredicate__evaluateWithObject_substitutionVariables_(self, _cmd, object, variables)
{
}

,["BOOL","id","CPDictionary"]), new objj_method(sel_getUid("predicateFormat"), function $CPPredicate__predicateFormat(self, _cmd)
{
}

,["CPString"]), new objj_method(sel_getUid("description"), function $CPPredicate__description(self, _cmd)
{
    return (self.isa.method_msgSend["predicateFormat"] || _objj_forward)(self, (self.isa.method_dtable["predicateFormat"], "predicateFormat"));
}

,["CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("predicateWithFormat:"), function $CPPredicate__predicateWithFormat_(self, _cmd, format)
{
    if (!format)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, _cmd + " the format can't be 'nil'");
    var args = Array.prototype.slice.call(arguments, 3);
    return (self.isa.method_msgSend["predicateWithFormat:argumentArray:"] || _objj_forward)(self, (self.isa.method_dtable["predicateWithFormat:argumentArray:"], self.isa.method_dtable["predicateWithFormat:argumentArray:"], "predicateWithFormat:argumentArray:"), arguments[2], args);
}

,["CPPredicate","CPString"]), new objj_method(sel_getUid("predicateWithFormat:argumentArray:"), function $CPPredicate__predicateWithFormat_argumentArray_(self, _cmd, format, args)
{
    if (!format)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, _cmd + " the format can't be 'nil'");
    var s = ((___r1 = (CPPredicateScanner == null ? null : (CPPredicateScanner.isa.method_msgSend["alloc"] || _objj_forward)(CPPredicateScanner, (CPPredicateScanner.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithString:args:"] || _objj_forward)(___r1, "initWithString:args:", format, args)),
        p = (s == null ? null : (s.isa.method_msgSend["parse"] || _objj_forward)(s, (s.isa.method_dtable["parse"], "parse")));
    return p;
    var ___r1;
}

,["CPPredicate","CPString","CPArray"]), new objj_method(sel_getUid("predicateWithFormat:arguments:"), function $CPPredicate__predicateWithFormat_arguments_(self, _cmd, format, argList)
{
    return nil;
}

,["CPPredicate","CPString","va_list"]), new objj_method(sel_getUid("predicateWithValue:"), function $CPPredicate__predicateWithValue_(self, _cmd, value)
{
    return ((___r1 = (CPPredicate_BOOL == null ? null : (CPPredicate_BOOL.isa.method_msgSend["alloc"] || _objj_forward)(CPPredicate_BOOL, (CPPredicate_BOOL.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithBool:"] || _objj_forward)(___r1, "initWithBool:", value));
    var ___r1;
}

,["CPPredicate","BOOL"])]);
}

{var the_class = objj_allocateClassPair(CPPredicate, "CPPredicate_BOOL"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_value", "BOOL")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithBool:"), function $CPPredicate_BOOL__initWithBool_(self, _cmd, value)
{
    self._value = value;
    return self;
}

,["id","BOOL"]), new objj_method(sel_getUid("isEqual:"), function $CPPredicate_BOOL__isEqual_(self, _cmd, anObject)
{
    if (self === anObject)
        return YES;
    if (anObject === nil || self.isa !== anObject.isa || self._value !== (anObject == null ? null : (anObject.isa.method_msgSend["evaluateWithObject:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["evaluateWithObject:"], "evaluateWithObject:"), nil)))
        return NO;
    return YES;
}

,["BOOL","id"]), new objj_method(sel_getUid("evaluateWithObject:"), function $CPPredicate_BOOL__evaluateWithObject_(self, _cmd, object)
{
    return self._value;
}

,["BOOL","id"]), new objj_method(sel_getUid("evaluateWithObject:substitutionVariables:"), function $CPPredicate_BOOL__evaluateWithObject_substitutionVariables_(self, _cmd, object, variables)
{
    return self._value;
}

,["BOOL","id","CPDictionary"]), new objj_method(sel_getUid("predicateFormat"), function $CPPredicate_BOOL__predicateFormat(self, _cmd)
{
    return self._value ? "TRUEPREDICATE" : "FALSEPREDICATE";
}

,["CPString"])]);
}
{
var the_class = objj_getClass("CPArray")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPArray\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("filteredArrayUsingPredicate:"), function $CPArray__filteredArrayUsingPredicate_(self, _cmd, predicate)
{
    var count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")),
        result = (CPArray.isa.method_msgSend["array"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["array"], "array")),
        i = 0;
    for (; i < count; i++)
    {
        var object = (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i);
        if ((predicate == null ? null : (predicate.isa.method_msgSend["evaluateWithObject:"] || _objj_forward)(predicate, (predicate.isa.method_dtable["evaluateWithObject:"], "evaluateWithObject:"), object)))
            result.push(object);
    }
    return result;
}

,["CPArray","CPPredicate"]), new objj_method(sel_getUid("filterUsingPredicate:"), function $CPArray__filterUsingPredicate_(self, _cmd, predicate)
{
    var count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"));
    while (count--)
    {
        if (!(predicate == null ? null : (predicate.isa.method_msgSend["evaluateWithObject:"] || _objj_forward)(predicate, (predicate.isa.method_dtable["evaluateWithObject:"], "evaluateWithObject:"), (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), count))))
            self.splice(count, 1);
    }
}

,["void","CPPredicate"])]);
}
{
var the_class = objj_getClass("CPSet")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPSet\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("filteredSetUsingPredicate:"), function $CPSet__filteredSetUsingPredicate_(self, _cmd, predicate)
{
    var count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")),
        result = (CPSet.isa.method_msgSend["set"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["set"], "set")),
        i = 0;
    for (; i < count; i++)
    {
        var object = (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i);
        if ((predicate == null ? null : (predicate.isa.method_msgSend["evaluateWithObject:"] || _objj_forward)(predicate, (predicate.isa.method_dtable["evaluateWithObject:"], "evaluateWithObject:"), object)))
            (result == null ? null : (result.isa.method_msgSend["addObject:"] || _objj_forward)(result, (result.isa.method_dtable["addObject:"], "addObject:"), object));
    }
    return result;
}

,["CPSet","CPPredicate"]), new objj_method(sel_getUid("filterUsingPredicate:"), function $CPSet__filterUsingPredicate_(self, _cmd, predicate)
{
    var count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"));
    while (--count >= 0)
    {
        var object = (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), count);
        if (!(predicate == null ? null : (predicate.isa.method_msgSend["evaluateWithObject:"] || _objj_forward)(predicate, (predicate.isa.method_dtable["evaluateWithObject:"], "evaluateWithObject:"), object)))
            (self.isa.method_msgSend["removeObjectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["removeObjectAtIndex:"], "removeObjectAtIndex:"), count);
    }
}

,["void","CPPredicate"])]);
}

{var the_class = objj_allocateClassPair(CPScanner, "CPPredicateScanner"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_args", "CPEnumerator"), new objj_ivar("_retrieved", "unsigned")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithString:args:"), function $CPPredicateScanner__initWithString_args_(self, _cmd, format, args)
{
    self = (objj_getClass("CPPredicateScanner").super_class.method_dtable["initWithString:"] || _objj_forward)(self, "initWithString:", format);
    if (self)
    {
        self._args = (args == null ? null : (args.isa.method_msgSend["objectEnumerator"] || _objj_forward)(args, (args.isa.method_dtable["objectEnumerator"], "objectEnumerator")));
    }
    return self;
}

,["id","CPString","CPArray"]), new objj_method(sel_getUid("nextArg"), function $CPPredicateScanner__nextArg(self, _cmd)
{
    return ((___r1 = self._args), ___r1 == null ? null : (___r1.isa.method_msgSend["nextObject"] || _objj_forward)(___r1, (self._args.isa.method_dtable["nextObject"], "nextObject")));
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("scanPredicateKeyword:"), function $CPPredicateScanner__scanPredicateKeyword_(self, _cmd, key)
{
    var loc = (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation"));
    (self.isa.method_msgSend["setCaseSensitive:"] || _objj_forward)(self, (self.isa.method_dtable["setCaseSensitive:"], "setCaseSensitive:"), NO);
    if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), key, NULL))
        return NO;
    if ((self.isa.method_msgSend["isAtEnd"] || _objj_forward)(self, (self.isa.method_dtable["isAtEnd"], "isAtEnd")))
        return YES;
    var c = ((___r1 = (self.isa.method_msgSend["string"] || _objj_forward)(self, (self.isa.method_dtable["string"], "string"))), ___r1 == null ? null : (___r1.isa.method_msgSend["characterAtIndex:"] || _objj_forward)(___r1, "characterAtIndex:", (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation"))));
    if (!((___r1 = (CPCharacterSet.isa.method_msgSend["alphanumericCharacterSet"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["alphanumericCharacterSet"], "alphanumericCharacterSet"))), ___r1 == null ? null : (___r1.isa.method_msgSend["characterIsMember:"] || _objj_forward)(___r1, "characterIsMember:", c)))
        return YES;
    (self.isa.method_msgSend["setScanLocation:"] || _objj_forward)(self, (self.isa.method_dtable["setScanLocation:"], "setScanLocation:"), loc);
    return NO;
    var ___r1;
}

,["BOOL","CPString"]), new objj_method(sel_getUid("parse"), function $CPPredicateScanner__parse(self, _cmd)
{
    var r = nil;
    try {
        (self.isa.method_msgSend["setCharactersToBeSkipped:"] || _objj_forward)(self, (self.isa.method_dtable["setCharactersToBeSkipped:"], "setCharactersToBeSkipped:"), (CPCharacterSet.isa.method_msgSend["whitespaceCharacterSet"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["whitespaceCharacterSet"], "whitespaceCharacterSet")));
        r = (self.isa.method_msgSend["parsePredicate"] || _objj_forward)(self, (self.isa.method_dtable["parsePredicate"], "parsePredicate"));
    }
    catch(error) {
        CPLogConsole("Unable to parse predicate '" + (self.isa.method_msgSend["string"] || _objj_forward)(self, (self.isa.method_dtable["string"], "string")) + "' with " + error);
    }
    finally {
        if (!(self.isa.method_msgSend["isAtEnd"] || _objj_forward)(self, (self.isa.method_dtable["isAtEnd"], "isAtEnd")))
        {
            var pstr = (self.isa.method_msgSend["string"] || _objj_forward)(self, (self.isa.method_dtable["string"], "string")),
                loc = (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation"));
            CPLogConsole("Format string contains extra characters: '" + (pstr == null ? null : (pstr.isa.method_msgSend["substringToIndex:"] || _objj_forward)(pstr, (pstr.isa.method_dtable["substringToIndex:"], "substringToIndex:"), loc)) + "**" + (pstr == null ? null : (pstr.isa.method_msgSend["substringFromIndex:"] || _objj_forward)(pstr, (pstr.isa.method_dtable["substringFromIndex:"], "substringFromIndex:"), loc)) + "**'");
        }
    }
    return r;
}

,["CPPredicate"]), new objj_method(sel_getUid("parsePredicate"), function $CPPredicateScanner__parsePredicate(self, _cmd)
{
    return (self.isa.method_msgSend["parseAnd"] || _objj_forward)(self, (self.isa.method_dtable["parseAnd"], "parseAnd"));
}

,["CPPredicate"]), new objj_method(sel_getUid("parseAnd"), function $CPPredicateScanner__parseAnd(self, _cmd)
{
    var l = (self.isa.method_msgSend["parseOr"] || _objj_forward)(self, (self.isa.method_dtable["parseOr"], "parseOr"));
    while ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "AND") || (self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "&&"))
    {
        var r = (self.isa.method_msgSend["parseOr"] || _objj_forward)(self, (self.isa.method_dtable["parseOr"], "parseOr"));
        if ((r == null ? null : (r.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(r, (r.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPCompoundPredicate == null ? null : (CPCompoundPredicate.isa.method_msgSend["class"] || _objj_forward)(CPCompoundPredicate, (CPCompoundPredicate.isa.method_dtable["class"], "class"))))) && (r == null ? null : (r.isa.method_msgSend["compoundPredicateType"] || _objj_forward)(r, (r.isa.method_dtable["compoundPredicateType"], "compoundPredicateType"))) == CPAndPredicateType)
        {
            if ((l == null ? null : (l.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(l, (l.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPCompoundPredicate == null ? null : (CPCompoundPredicate.isa.method_msgSend["class"] || _objj_forward)(CPCompoundPredicate, (CPCompoundPredicate.isa.method_dtable["class"], "class"))))) && (l == null ? null : (l.isa.method_msgSend["compoundPredicateType"] || _objj_forward)(l, (l.isa.method_dtable["compoundPredicateType"], "compoundPredicateType"))) == CPAndPredicateType)
            {
                ((___r1 = (l == null ? null : (l.isa.method_msgSend["subpredicates"] || _objj_forward)(l, (l.isa.method_dtable["subpredicates"], "subpredicates")))), ___r1 == null ? null : (___r1.isa.method_msgSend["addObjectsFromArray:"] || _objj_forward)(___r1, "addObjectsFromArray:", (r == null ? null : (r.isa.method_msgSend["subpredicates"] || _objj_forward)(r, (r.isa.method_dtable["subpredicates"], "subpredicates")))));
            }
            else
            {
                ((___r1 = (r == null ? null : (r.isa.method_msgSend["subpredicates"] || _objj_forward)(r, (r.isa.method_dtable["subpredicates"], "subpredicates")))), ___r1 == null ? null : (___r1.isa.method_msgSend["insertObject:atIndex:"] || _objj_forward)(___r1, "insertObject:atIndex:", l, 0));
                l = r;
            }
        }
        else if ((l == null ? null : (l.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(l, (l.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPCompoundPredicate == null ? null : (CPCompoundPredicate.isa.method_msgSend["class"] || _objj_forward)(CPCompoundPredicate, (CPCompoundPredicate.isa.method_dtable["class"], "class"))))) && (l == null ? null : (l.isa.method_msgSend["compoundPredicateType"] || _objj_forward)(l, (l.isa.method_dtable["compoundPredicateType"], "compoundPredicateType"))) == CPAndPredicateType)
        {
            ((___r1 = (l == null ? null : (l.isa.method_msgSend["subpredicates"] || _objj_forward)(l, (l.isa.method_dtable["subpredicates"], "subpredicates")))), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, "addObject:", r));
        }
        else
        {
            l = (CPCompoundPredicate == null ? null : (CPCompoundPredicate.isa.method_msgSend["andPredicateWithSubpredicates:"] || _objj_forward)(CPCompoundPredicate, (CPCompoundPredicate.isa.method_dtable["andPredicateWithSubpredicates:"], "andPredicateWithSubpredicates:"), (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), l, r)));
        }
    }
    return l;
    var ___r1;
}

,["CPPredicate"]), new objj_method(sel_getUid("parseNot"), function $CPPredicateScanner__parseNot(self, _cmd)
{
    if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "(", NULL))
    {
        var r = (self.isa.method_msgSend["parsePredicate"] || _objj_forward)(self, (self.isa.method_dtable["parsePredicate"], "parsePredicate"));
        if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ")", NULL))
            CPRaiseParseError(self, "predicate");
        return r;
    }
    if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "NOT") || (self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "!"))
    {
        return (CPCompoundPredicate == null ? null : (CPCompoundPredicate.isa.method_msgSend["notPredicateWithSubpredicate:"] || _objj_forward)(CPCompoundPredicate, (CPCompoundPredicate.isa.method_dtable["notPredicateWithSubpredicate:"], "notPredicateWithSubpredicate:"), (self.isa.method_msgSend["parseNot"] || _objj_forward)(self, (self.isa.method_dtable["parseNot"], "parseNot"))));
    }
    if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "TRUEPREDICATE"))
    {
        return (CPPredicate.isa.method_msgSend["predicateWithValue:"] || _objj_forward)(CPPredicate, (CPPredicate.isa.method_dtable["predicateWithValue:"], "predicateWithValue:"), YES);
    }
    if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "FALSEPREDICATE"))
    {
        return (CPPredicate.isa.method_msgSend["predicateWithValue:"] || _objj_forward)(CPPredicate, (CPPredicate.isa.method_dtable["predicateWithValue:"], "predicateWithValue:"), NO);
    }
    return (self.isa.method_msgSend["parseComparison"] || _objj_forward)(self, (self.isa.method_dtable["parseComparison"], "parseComparison"));
}

,["CPPredicate"]), new objj_method(sel_getUid("parseOr"), function $CPPredicateScanner__parseOr(self, _cmd)
{
    var l = (self.isa.method_msgSend["parseNot"] || _objj_forward)(self, (self.isa.method_dtable["parseNot"], "parseNot"));
    while ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "OR") || (self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "||"))
    {
        var r = (self.isa.method_msgSend["parseNot"] || _objj_forward)(self, (self.isa.method_dtable["parseNot"], "parseNot"));
        if ((r == null ? null : (r.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(r, (r.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPCompoundPredicate == null ? null : (CPCompoundPredicate.isa.method_msgSend["class"] || _objj_forward)(CPCompoundPredicate, (CPCompoundPredicate.isa.method_dtable["class"], "class"))))) && (r == null ? null : (r.isa.method_msgSend["compoundPredicateType"] || _objj_forward)(r, (r.isa.method_dtable["compoundPredicateType"], "compoundPredicateType"))) == CPOrPredicateType)
        {
            if ((l == null ? null : (l.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(l, (l.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPCompoundPredicate == null ? null : (CPCompoundPredicate.isa.method_msgSend["class"] || _objj_forward)(CPCompoundPredicate, (CPCompoundPredicate.isa.method_dtable["class"], "class"))))) && (l == null ? null : (l.isa.method_msgSend["compoundPredicateType"] || _objj_forward)(l, (l.isa.method_dtable["compoundPredicateType"], "compoundPredicateType"))) == CPOrPredicateType)
            {
                ((___r1 = (l == null ? null : (l.isa.method_msgSend["subpredicates"] || _objj_forward)(l, (l.isa.method_dtable["subpredicates"], "subpredicates")))), ___r1 == null ? null : (___r1.isa.method_msgSend["addObjectsFromArray:"] || _objj_forward)(___r1, "addObjectsFromArray:", (r == null ? null : (r.isa.method_msgSend["subpredicates"] || _objj_forward)(r, (r.isa.method_dtable["subpredicates"], "subpredicates")))));
            }
            else
            {
                ((___r1 = (r == null ? null : (r.isa.method_msgSend["subpredicates"] || _objj_forward)(r, (r.isa.method_dtable["subpredicates"], "subpredicates")))), ___r1 == null ? null : (___r1.isa.method_msgSend["insertObject:atIndex:"] || _objj_forward)(___r1, "insertObject:atIndex:", l, 0));
                l = r;
            }
        }
        else if ((l == null ? null : (l.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(l, (l.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPCompoundPredicate == null ? null : (CPCompoundPredicate.isa.method_msgSend["class"] || _objj_forward)(CPCompoundPredicate, (CPCompoundPredicate.isa.method_dtable["class"], "class"))))) && (l == null ? null : (l.isa.method_msgSend["compoundPredicateType"] || _objj_forward)(l, (l.isa.method_dtable["compoundPredicateType"], "compoundPredicateType"))) == CPOrPredicateType)
        {
            ((___r1 = (l == null ? null : (l.isa.method_msgSend["subpredicates"] || _objj_forward)(l, (l.isa.method_dtable["subpredicates"], "subpredicates")))), ___r1 == null ? null : (___r1.isa.method_msgSend["addObject:"] || _objj_forward)(___r1, "addObject:", r));
        }
        else
        {
            l = (CPCompoundPredicate == null ? null : (CPCompoundPredicate.isa.method_msgSend["orPredicateWithSubpredicates:"] || _objj_forward)(CPCompoundPredicate, (CPCompoundPredicate.isa.method_dtable["orPredicateWithSubpredicates:"], "orPredicateWithSubpredicates:"), (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), l, r)));
        }
    }
    return l;
    var ___r1;
}

,["CPPredicate"]), new objj_method(sel_getUid("parseComparison"), function $CPPredicateScanner__parseComparison(self, _cmd)
{
    var modifier = CPDirectPredicateModifier,
        type = 0,
        opts = 0,
        left,
        right,
        p,
        negate = NO;
    if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "ANY"))
    {
        modifier = CPAnyPredicateModifier;
    }
    else if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "ALL"))
    {
        modifier = CPAllPredicateModifier;
    }
    else if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "NONE"))
    {
        modifier = CPAnyPredicateModifier;
        negate = YES;
    }
    else if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "SOME"))
    {
        modifier = CPAllPredicateModifier;
        negate = YES;
    }
    left = (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression"));
    if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "!=", NULL) || (self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "<>", NULL))
    {
        type = CPNotEqualToPredicateOperatorType;
    }
    else if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "<=", NULL) || (self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "=<", NULL))
    {
        type = CPLessThanOrEqualToPredicateOperatorType;
    }
    else if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ">=", NULL) || (self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "=>", NULL))
    {
        type = CPGreaterThanOrEqualToPredicateOperatorType;
    }
    else if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "<", NULL))
    {
        type = CPLessThanPredicateOperatorType;
    }
    else if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ">", NULL))
    {
        type = CPGreaterThanPredicateOperatorType;
    }
    else if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "==", NULL) || (self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "=", NULL))
    {
        type = CPEqualToPredicateOperatorType;
    }
    else if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "MATCHES"))
    {
        type = CPMatchesPredicateOperatorType;
    }
    else if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "LIKE"))
    {
        type = CPLikePredicateOperatorType;
    }
    else if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "BEGINSWITH"))
    {
        type = CPBeginsWithPredicateOperatorType;
    }
    else if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "ENDSWITH"))
    {
        type = CPEndsWithPredicateOperatorType;
    }
    else if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "IN"))
    {
        type = CPInPredicateOperatorType;
    }
    else if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "CONTAINS"))
    {
        type = CPContainsPredicateOperatorType;
    }
    else if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "BETWEEN"))
    {
        type = CPBetweenPredicateOperatorType;
    }
    else
        CPRaiseParseError(self, "comparison predicate");
    if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "[cd]", NULL))
    {
        opts = CPCaseInsensitivePredicateOption | CPDiacriticInsensitivePredicateOption;
    }
    else if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "[c]", NULL))
    {
        opts = CPCaseInsensitivePredicateOption;
    }
    else if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "[d]", NULL))
    {
        opts = CPDiacriticInsensitivePredicateOption;
    }
    right = (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression"));
    p = (CPComparisonPredicate == null ? null : (CPComparisonPredicate.isa.method_msgSend["predicateWithLeftExpression:rightExpression:modifier:type:options:"] || _objj_forward)(CPComparisonPredicate, (CPComparisonPredicate.isa.method_dtable["predicateWithLeftExpression:rightExpression:modifier:type:options:"], CPComparisonPredicate.isa.method_dtable["predicateWithLeftExpression:rightExpression:modifier:type:options:"], CPComparisonPredicate.isa.method_dtable["predicateWithLeftExpression:rightExpression:modifier:type:options:"], CPComparisonPredicate.isa.method_dtable["predicateWithLeftExpression:rightExpression:modifier:type:options:"], CPComparisonPredicate.isa.method_dtable["predicateWithLeftExpression:rightExpression:modifier:type:options:"], "predicateWithLeftExpression:rightExpression:modifier:type:options:"), left, right, modifier, type, opts));
    return negate ? (CPCompoundPredicate == null ? null : (CPCompoundPredicate.isa.method_msgSend["notPredicateWithSubpredicate:"] || _objj_forward)(CPCompoundPredicate, (CPCompoundPredicate.isa.method_dtable["notPredicateWithSubpredicate:"], "notPredicateWithSubpredicate:"), p)) : p;
}

,["CPPredicate"]), new objj_method(sel_getUid("parseExpression"), function $CPPredicateScanner__parseExpression(self, _cmd)
{
    return (self.isa.method_msgSend["parseBinaryExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseBinaryExpression"], "parseBinaryExpression"));
}

,["CPExpression"]), new objj_method(sel_getUid("parseSimpleExpression"), function $CPPredicateScanner__parseSimpleExpression(self, _cmd)
{
    var identifier,
        location,
        ident,
        dbl;
    if ((self.isa.method_msgSend["scanDouble:"] || _objj_forward)(self, (self.isa.method_dtable["scanDouble:"], "scanDouble:"), function(__input) { if (arguments.length) return dbl = __input; return dbl; }))
        return (CPExpression.isa.method_msgSend["expressionForConstantValue:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForConstantValue:"], "expressionForConstantValue:"), dbl);
    if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "-", NULL))
        return (CPExpression.isa.method_msgSend["expressionForFunction:arguments:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForFunction:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:arguments:"], "expressionForFunction:arguments:"), "chs:", (CPArray.isa.method_msgSend["arrayWithObject:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObject:"], "arrayWithObject:"), (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression"))));
    if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "(", NULL))
    {
        var arg = (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression"));
        if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ")", NULL))
            CPRaiseParseError(self, "expression");
        return arg;
    }
    if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "{", NULL))
    {
        var a = [];
        if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "}", NULL))
            return (CPExpression.isa.method_msgSend["expressionForConstantValue:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForConstantValue:"], "expressionForConstantValue:"), a);
        (a == null ? null : (a.isa.method_msgSend["addObject:"] || _objj_forward)(a, (a.isa.method_dtable["addObject:"], "addObject:"), (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression"))));
        while ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ",", NULL))
            (a == null ? null : (a.isa.method_msgSend["addObject:"] || _objj_forward)(a, (a.isa.method_dtable["addObject:"], "addObject:"), (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression"))));
        if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "}", NULL))
            CPRaiseParseError(self, "expression");
        return (CPExpression.isa.method_msgSend["expressionForAggregate:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForAggregate:"], "expressionForAggregate:"), a);
    }
    if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "NULL") || (self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "NIL"))
    {
        return (CPExpression.isa.method_msgSend["expressionForConstantValue:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForConstantValue:"], "expressionForConstantValue:"), (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null")));
    }
    if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "TRUE") || (self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "YES"))
    {
        return (CPExpression.isa.method_msgSend["expressionForConstantValue:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForConstantValue:"], "expressionForConstantValue:"), YES);
    }
    if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "FALSE") || (self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "NO"))
    {
        return (CPExpression.isa.method_msgSend["expressionForConstantValue:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForConstantValue:"], "expressionForConstantValue:"), NO);
    }
    if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "SELF"))
    {
        return (CPExpression.isa.method_msgSend["expressionForEvaluatedObject"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForEvaluatedObject"], "expressionForEvaluatedObject"));
    }
    if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "$", NULL))
    {
        var variable = (self.isa.method_msgSend["parseSimpleExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseSimpleExpression"], "parseSimpleExpression"));
        if (!(variable == null ? null : (variable.isa.method_msgSend["keyPath"] || _objj_forward)(variable, (variable.isa.method_dtable["keyPath"], "keyPath"))))
            CPRaiseParseError(self, "expression");
        return (CPExpression.isa.method_msgSend["expressionForVariable:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForVariable:"], "expressionForVariable:"), variable);
    }
    location = (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation"));
    if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "%", NULL))
    {
        if ((self.isa.method_msgSend["isAtEnd"] || _objj_forward)(self, (self.isa.method_dtable["isAtEnd"], "isAtEnd")) == NO)
        {
            var c = ((___r1 = (self.isa.method_msgSend["string"] || _objj_forward)(self, (self.isa.method_dtable["string"], "string"))), ___r1 == null ? null : (___r1.isa.method_msgSend["characterAtIndex:"] || _objj_forward)(___r1, "characterAtIndex:", (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation"))));
            switch(c) {
                case '%':
                    location = (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation"));
                    break;
                case 'K':
                    (self.isa.method_msgSend["setScanLocation:"] || _objj_forward)(self, (self.isa.method_dtable["setScanLocation:"], "setScanLocation:"), (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation")) + 1);
                    return (CPExpression.isa.method_msgSend["expressionForKeyPath:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForKeyPath:"], "expressionForKeyPath:"), (self.isa.method_msgSend["nextArg"] || _objj_forward)(self, (self.isa.method_dtable["nextArg"], "nextArg")));
                case '@':
                case 'c':
                case 'C':
                case 'd':
                case 'D':
                case 'i':
                case 'o':
                case 'O':
                case 'u':
                case 'U':
                case 'x':
                case 'X':
                case 'e':
                case 'E':
                case 'f':
                case 'g':
                case 'G':
                    (self.isa.method_msgSend["setScanLocation:"] || _objj_forward)(self, (self.isa.method_dtable["setScanLocation:"], "setScanLocation:"), (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation")) + 1);
                    return (CPExpression.isa.method_msgSend["expressionForConstantValue:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForConstantValue:"], "expressionForConstantValue:"), (self.isa.method_msgSend["nextArg"] || _objj_forward)(self, (self.isa.method_dtable["nextArg"], "nextArg")));
                case 'h':
                    (self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "h", NULL);
                    if ((self.isa.method_msgSend["isAtEnd"] || _objj_forward)(self, (self.isa.method_dtable["isAtEnd"], "isAtEnd")) == NO)
                    {
                        c = ((___r1 = (self.isa.method_msgSend["string"] || _objj_forward)(self, (self.isa.method_dtable["string"], "string"))), ___r1 == null ? null : (___r1.isa.method_msgSend["characterAtIndex:"] || _objj_forward)(___r1, "characterAtIndex:", (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation"))));
                        if (c == 'i' || c == 'u')
                        {
                            (self.isa.method_msgSend["setScanLocation:"] || _objj_forward)(self, (self.isa.method_dtable["setScanLocation:"], "setScanLocation:"), (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation")) + 1);
                            return (CPExpression.isa.method_msgSend["expressionForConstantValue:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForConstantValue:"], "expressionForConstantValue:"), (self.isa.method_msgSend["nextArg"] || _objj_forward)(self, (self.isa.method_dtable["nextArg"], "nextArg")));
                        }
                    }
                    break;
                case 'q':
                    (self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "q", NULL);
                    if ((self.isa.method_msgSend["isAtEnd"] || _objj_forward)(self, (self.isa.method_dtable["isAtEnd"], "isAtEnd")) == NO)
                    {
                        c = ((___r1 = (self.isa.method_msgSend["string"] || _objj_forward)(self, (self.isa.method_dtable["string"], "string"))), ___r1 == null ? null : (___r1.isa.method_msgSend["characterAtIndex:"] || _objj_forward)(___r1, "characterAtIndex:", (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation"))));
                        if (c == 'i' || c == 'u' || c == 'x' || c == 'X')
                        {
                            (self.isa.method_msgSend["setScanLocation:"] || _objj_forward)(self, (self.isa.method_dtable["setScanLocation:"], "setScanLocation:"), (self.isa.method_msgSend["scanLocation"] || _objj_forward)(self, (self.isa.method_dtable["scanLocation"], "scanLocation")) + 1);
                            return (CPExpression.isa.method_msgSend["expressionForConstantValue:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForConstantValue:"], "expressionForConstantValue:"), (self.isa.method_msgSend["nextArg"] || _objj_forward)(self, (self.isa.method_dtable["nextArg"], "nextArg")));
                        }
                    }
                    break;
            }
        }
        (self.isa.method_msgSend["setScanLocation:"] || _objj_forward)(self, (self.isa.method_dtable["setScanLocation:"], "setScanLocation:"), location);
    }
    if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "\"", NULL))
    {
        var skip = (self.isa.method_msgSend["charactersToBeSkipped"] || _objj_forward)(self, (self.isa.method_dtable["charactersToBeSkipped"], "charactersToBeSkipped")),
            str = "";
        (self.isa.method_msgSend["setCharactersToBeSkipped:"] || _objj_forward)(self, (self.isa.method_dtable["setCharactersToBeSkipped:"], "setCharactersToBeSkipped:"), nil);
        (self.isa.method_msgSend["scanUpToString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanUpToString:intoString:"], self.isa.method_dtable["scanUpToString:intoString:"], "scanUpToString:intoString:"), "\"", function(__input) { if (arguments.length) return str = __input; return str; });
        if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "\"", NULL) == NO)
            CPRaiseParseError(self, "expression");
        (self.isa.method_msgSend["setCharactersToBeSkipped:"] || _objj_forward)(self, (self.isa.method_dtable["setCharactersToBeSkipped:"], "setCharactersToBeSkipped:"), skip);
        return (CPExpression.isa.method_msgSend["expressionForConstantValue:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForConstantValue:"], "expressionForConstantValue:"), str);
    }
    if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "'", NULL))
    {
        var skip = (self.isa.method_msgSend["charactersToBeSkipped"] || _objj_forward)(self, (self.isa.method_dtable["charactersToBeSkipped"], "charactersToBeSkipped")),
            str = "";
        (self.isa.method_msgSend["setCharactersToBeSkipped:"] || _objj_forward)(self, (self.isa.method_dtable["setCharactersToBeSkipped:"], "setCharactersToBeSkipped:"), nil);
        (self.isa.method_msgSend["scanUpToString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanUpToString:intoString:"], self.isa.method_dtable["scanUpToString:intoString:"], "scanUpToString:intoString:"), "'", function(__input) { if (arguments.length) return str = __input; return str; });
        if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "'", NULL) == NO)
            CPRaiseParseError(self, "expression");
        (self.isa.method_msgSend["setCharactersToBeSkipped:"] || _objj_forward)(self, (self.isa.method_dtable["setCharactersToBeSkipped:"], "setCharactersToBeSkipped:"), skip);
        return (CPExpression.isa.method_msgSend["expressionForConstantValue:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForConstantValue:"], "expressionForConstantValue:"), str);
    }
    if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "@", NULL))
    {
        var e = (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression"));
        if (!(e == null ? null : (e.isa.method_msgSend["keyPath"] || _objj_forward)(e, (e.isa.method_dtable["keyPath"], "keyPath"))))
            CPRaiseParseError(self, "expression");
        return (CPExpression.isa.method_msgSend["expressionForKeyPath:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForKeyPath:"], "expressionForKeyPath:"), (e == null ? null : (e.isa.method_msgSend["keyPath"] || _objj_forward)(e, (e.isa.method_dtable["keyPath"], "keyPath"))) + "@");
    }
    if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "SUBQUERY", NULL))
    {
        if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "(", NULL))
            CPRaiseParseError(self, "expression");
        var collection = (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression")),
            variableExpression,
            subpredicate;
        if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ",", NULL))
            CPRaiseParseError(self, "expression");
        variableExpression = (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression"));
        if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ",", NULL))
            CPRaiseParseError(self, "expression");
        subpredicate = (self.isa.method_msgSend["parsePredicate"] || _objj_forward)(self, (self.isa.method_dtable["parsePredicate"], "parsePredicate"));
        if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ")", NULL))
            CPRaiseParseError(self, "predicate");
        return ((___r1 = (_CPSubqueryExpression == null ? null : (_CPSubqueryExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPSubqueryExpression, (_CPSubqueryExpression.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithExpression:usingIteratorExpression:predicate:"] || _objj_forward)(___r1, "initWithExpression:usingIteratorExpression:predicate:", collection, variableExpression, subpredicate));
    }
    if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "TERNARY", NULL))
    {
        if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "(", NULL))
            CPRaiseParseError(self, "expression");
        var predicate = (self.isa.method_msgSend["parsePredicate"] || _objj_forward)(self, (self.isa.method_dtable["parsePredicate"], "parsePredicate")),
            trueExpression,
            falseExpression;
        if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ",", NULL))
            CPRaiseParseError(self, "predicate");
        trueExpression = (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression"));
        if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ",", NULL))
            CPRaiseParseError(self, "expression");
        falseExpression = (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression"));
        if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ")", NULL))
            CPRaiseParseError(self, "expression");
        return (CPExpression.isa.method_msgSend["expressionForConditional:trueExpression:falseExpression:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForConditional:trueExpression:falseExpression:"], CPExpression.isa.method_dtable["expressionForConditional:trueExpression:falseExpression:"], CPExpression.isa.method_dtable["expressionForConditional:trueExpression:falseExpression:"], "expressionForConditional:trueExpression:falseExpression:"), predicate, trueExpression, falseExpression);
    }
    if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "FUNCTION", NULL))
    {
        if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "(", NULL))
            CPRaiseParseError(self, "expression");
        var args = (CPArray.isa.method_msgSend["arrayWithObject:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObject:"], "arrayWithObject:"), (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression")));
        while ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ",", NULL))
            (args == null ? null : (args.isa.method_msgSend["addObject:"] || _objj_forward)(args, (args.isa.method_dtable["addObject:"], "addObject:"), (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression"))));
        if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ")", NULL) || (args == null ? null : (args.isa.method_msgSend["count"] || _objj_forward)(args, (args.isa.method_dtable["count"], "count"))) < 2 || ((___r1 = args[1]), ___r1 == null ? null : (___r1.isa.method_msgSend["expressionType"] || _objj_forward)(___r1, "expressionType")) != CPConstantValueExpressionType)
            CPRaiseParseError(self, "expression");
        return (CPExpression.isa.method_msgSend["expressionForFunction:selectorName:arguments:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForFunction:selectorName:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:selectorName:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:selectorName:arguments:"], "expressionForFunction:selectorName:arguments:"), args[0], ((___r1 = args[1]), ___r1 == null ? null : (___r1.isa.method_msgSend["constantValue"] || _objj_forward)(___r1, "constantValue")), args.slice(2));
    }
    (self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "#", NULL);
    if (!identifier)
        identifier = (CPCharacterSet.isa.method_msgSend["characterSetWithCharactersInString:"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["characterSetWithCharactersInString:"], "characterSetWithCharactersInString:"), "_$abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
    if (!(self.isa.method_msgSend["scanCharactersFromSet:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanCharactersFromSet:intoString:"], self.isa.method_dtable["scanCharactersFromSet:intoString:"], "scanCharactersFromSet:intoString:"), identifier, function(__input) { if (arguments.length) return ident = __input; return ident; }))
        CPRaiseParseError(self, "expression");
    return (CPExpression.isa.method_msgSend["expressionForKeyPath:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForKeyPath:"], "expressionForKeyPath:"), ident);
    var ___r1;
}

,["CPExpression"]), new objj_method(sel_getUid("parseFunctionalExpression"), function $CPPredicateScanner__parseFunctionalExpression(self, _cmd)
{
    var left = (self.isa.method_msgSend["parseSimpleExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseSimpleExpression"], "parseSimpleExpression"));
    while (YES)
    {
        if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ".", NULL))
        {
            var right = (self.isa.method_msgSend["parseSimpleExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseSimpleExpression"], "parseSimpleExpression")),
                expressionType = (right == null ? null : (right.isa.method_msgSend["expressionType"] || _objj_forward)(right, (right.isa.method_dtable["expressionType"], "expressionType")));
            if (expressionType == CPKeyPathExpressionType)
                left = ((___r1 = (_CPKeyPathExpression == null ? null : (_CPKeyPathExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPKeyPathExpression, (_CPKeyPathExpression.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithOperand:andKeyPath:"] || _objj_forward)(___r1, "initWithOperand:andKeyPath:", left, (right == null ? null : (right.isa.method_msgSend["keyPath"] || _objj_forward)(right, (right.isa.method_dtable["keyPath"], "keyPath")))));
            else if (expressionType == CPVariableExpressionType)
                left = (CPExpression.isa.method_msgSend["expressionForFunction:selectorName:arguments:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForFunction:selectorName:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:selectorName:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:selectorName:arguments:"], "expressionForFunction:selectorName:arguments:"), left, "valueForKey:", [right]);
            else
                CPRaiseParseError(self, "expression");
        }
        else if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "[", NULL))
        {
            if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "FIRST"))
            {
                left = (CPExpression.isa.method_msgSend["expressionForFunction:arguments:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForFunction:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:arguments:"], "expressionForFunction:arguments:"), "first:", (CPArray.isa.method_msgSend["arrayWithObject:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObject:"], "arrayWithObject:"), left));
            }
            else if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "LAST"))
            {
                left = (CPExpression.isa.method_msgSend["expressionForFunction:arguments:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForFunction:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:arguments:"], "expressionForFunction:arguments:"), "last:", (CPArray.isa.method_msgSend["arrayWithObject:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObject:"], "arrayWithObject:"), left));
            }
            else if ((self.isa.method_msgSend["scanPredicateKeyword:"] || _objj_forward)(self, (self.isa.method_dtable["scanPredicateKeyword:"], "scanPredicateKeyword:"), "SIZE"))
            {
                left = (CPExpression.isa.method_msgSend["expressionForFunction:arguments:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForFunction:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:arguments:"], "expressionForFunction:arguments:"), "count:", (CPArray.isa.method_msgSend["arrayWithObject:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObject:"], "arrayWithObject:"), left));
            }
            else
            {
                var index = (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression"));
                left = (CPExpression.isa.method_msgSend["expressionForFunction:arguments:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForFunction:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:arguments:"], "expressionForFunction:arguments:"), "fromObject:index:", (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), left, index));
            }
            if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "]", NULL))
                CPRaiseParseError(self, "expression");
        }
        else if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ":", NULL))
        {
            if (!(left == null ? null : (left.isa.method_msgSend["keyPath"] || _objj_forward)(left, (left.isa.method_dtable["keyPath"], "keyPath"))))
                CPRaiseParseError(self, "expression");
            var selector = (left == null ? null : (left.isa.method_msgSend["keyPath"] || _objj_forward)(left, (left.isa.method_dtable["keyPath"], "keyPath"))) + ":",
                args = [];
            if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "(", NULL))
            {
                var str;
                (self.isa.method_msgSend["scanCharactersFromSet:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanCharactersFromSet:intoString:"], self.isa.method_dtable["scanCharactersFromSet:intoString:"], "scanCharactersFromSet:intoString:"), (CPCharacterSet.isa.method_msgSend["lowercaseLetterCharacterSet"] || _objj_forward)(CPCharacterSet, (CPCharacterSet.isa.method_dtable["lowercaseLetterCharacterSet"], "lowercaseLetterCharacterSet")), function(__input) { if (arguments.length) return str = __input; return str; });
                if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ":(", NULL))
                    CPRaiseParseError(self, "expression");
                selector += str + ":";
            }
            if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ")", NULL))
            {
                (args == null ? null : (args.isa.method_msgSend["addObject:"] || _objj_forward)(args, (args.isa.method_dtable["addObject:"], "addObject:"), (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression"))));
                while ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ",", NULL))
                    (args == null ? null : (args.isa.method_msgSend["addObject:"] || _objj_forward)(args, (args.isa.method_dtable["addObject:"], "addObject:"), (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression"))));
                if (!(self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ")", NULL))
                    CPRaiseParseError(self, "expression");
            }
            left = (CPExpression.isa.method_msgSend["expressionForFunction:arguments:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForFunction:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:arguments:"], "expressionForFunction:arguments:"), selector, args);
        }
        else if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "UNION", NULL))
        {
            left = (CPExpression.isa.method_msgSend["expressionForUnionSet:with:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForUnionSet:with:"], CPExpression.isa.method_dtable["expressionForUnionSet:with:"], "expressionForUnionSet:with:"), left, (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression")));
        }
        else if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "INTERSECT", NULL))
        {
            left = (CPExpression.isa.method_msgSend["expressionForIntersectSet:with:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForIntersectSet:with:"], CPExpression.isa.method_dtable["expressionForIntersectSet:with:"], "expressionForIntersectSet:with:"), left, (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression")));
        }
        else if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "MINUS", NULL))
        {
            left = (CPExpression.isa.method_msgSend["expressionForMinusSet:with:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForMinusSet:with:"], CPExpression.isa.method_dtable["expressionForMinusSet:with:"], "expressionForMinusSet:with:"), left, (self.isa.method_msgSend["parseExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseExpression"], "parseExpression")));
        }
        else
        {
            return left;
        }
    }
    var ___r1;
}

,["CPExpression"]), new objj_method(sel_getUid("parsePowerExpression"), function $CPPredicateScanner__parsePowerExpression(self, _cmd)
{
    var left = (self.isa.method_msgSend["parseFunctionalExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseFunctionalExpression"], "parseFunctionalExpression"));
    while (YES)
    {
        var right;
        if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "**", NULL))
        {
            right = (self.isa.method_msgSend["parseFunctionalExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseFunctionalExpression"], "parseFunctionalExpression"));
            left = (CPExpression.isa.method_msgSend["expressionForFunction:arguments:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForFunction:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:arguments:"], "expressionForFunction:arguments:"), "raise:to:", (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), left, right));
        }
        else
        {
            return left;
        }
    }
}

,["CPExpression"]), new objj_method(sel_getUid("parseMultiplicationExpression"), function $CPPredicateScanner__parseMultiplicationExpression(self, _cmd)
{
    var left = (self.isa.method_msgSend["parsePowerExpression"] || _objj_forward)(self, (self.isa.method_dtable["parsePowerExpression"], "parsePowerExpression"));
    while (YES)
    {
        var right;
        if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "*", NULL))
        {
            right = (self.isa.method_msgSend["parsePowerExpression"] || _objj_forward)(self, (self.isa.method_dtable["parsePowerExpression"], "parsePowerExpression"));
            left = (CPExpression.isa.method_msgSend["expressionForFunction:arguments:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForFunction:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:arguments:"], "expressionForFunction:arguments:"), "multiply:by:", (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), left, right));
        }
        else if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "/", NULL))
        {
            right = (self.isa.method_msgSend["parsePowerExpression"] || _objj_forward)(self, (self.isa.method_dtable["parsePowerExpression"], "parsePowerExpression"));
            left = (CPExpression.isa.method_msgSend["expressionForFunction:arguments:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForFunction:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:arguments:"], "expressionForFunction:arguments:"), "divide:by:", (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), left, right));
        }
        else
        {
            return left;
        }
    }
}

,["CPExpression"]), new objj_method(sel_getUid("parseAdditionExpression"), function $CPPredicateScanner__parseAdditionExpression(self, _cmd)
{
    var left = (self.isa.method_msgSend["parseMultiplicationExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseMultiplicationExpression"], "parseMultiplicationExpression"));
    while (YES)
    {
        var right;
        if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "+", NULL))
        {
            right = (self.isa.method_msgSend["parseMultiplicationExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseMultiplicationExpression"], "parseMultiplicationExpression"));
            left = (CPExpression.isa.method_msgSend["expressionForFunction:arguments:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForFunction:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:arguments:"], "expressionForFunction:arguments:"), "add:to:", (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), left, right));
        }
        else if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), "-", NULL))
        {
            right = (self.isa.method_msgSend["parseMultiplicationExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseMultiplicationExpression"], "parseMultiplicationExpression"));
            left = (CPExpression.isa.method_msgSend["expressionForFunction:arguments:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForFunction:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:arguments:"], "expressionForFunction:arguments:"), "from:substract:", (CPArray.isa.method_msgSend["arrayWithObjects:"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["arrayWithObjects:"], "arrayWithObjects:"), left, right));
        }
        else
        {
            return left;
        }
    }
}

,["CPExpression"]), new objj_method(sel_getUid("parseBinaryExpression"), function $CPPredicateScanner__parseBinaryExpression(self, _cmd)
{
    var left = (self.isa.method_msgSend["parseAdditionExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseAdditionExpression"], "parseAdditionExpression"));
    while (YES)
    {
        var right;
        if ((self.isa.method_msgSend["scanString:intoString:"] || _objj_forward)(self, (self.isa.method_dtable["scanString:intoString:"], self.isa.method_dtable["scanString:intoString:"], "scanString:intoString:"), ":=", NULL))
        {
            right = (self.isa.method_msgSend["parseAdditionExpression"] || _objj_forward)(self, (self.isa.method_dtable["parseAdditionExpression"], "parseAdditionExpression"));
        }
        else
        {
            return left;
        }
    }
}

,["CPExpression"])]);
}
var CPRaiseParseError = function(aScanner, target)
{
    (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "unable to parse " + target + " at index " + (aScanner == null ? null : (aScanner.isa.method_msgSend["scanLocation"] || _objj_forward)(aScanner, (aScanner.isa.method_dtable["scanLocation"], "scanLocation"))));
};
p;23;_CPFunctionExpression.jt;38028;@STATIC;1.0;i;9;CPArray.ji;8;CPDate.ji;14;CPDictionary.ji;13;CPException.ji;10;CPString.ji;15;_CPExpression.jS;19500;t;18403;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPDate.j", YES);objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPString.j", YES);objj_executeFile("_CPExpression.j", YES);
{var the_class = objj_allocateClassPair(CPExpression, "_CPFunctionExpression"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_operand", "CPExpression"), new objj_ivar("_selector", "SEL"), new objj_ivar("_arguments", "CPArray"), new objj_ivar("_argc", "int"), new objj_ivar("_maxargs", "int")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("operand"), function $_CPFunctionExpression__operand(self, _cmd)
{
    return self._operand;
}

,["CPExpression"]), new objj_method(sel_getUid("_setOperand:"), function $_CPFunctionExpression___setOperand_(self, _cmd, newValue)
{
    self._operand = newValue;
}

,["void","CPExpression"]), new objj_method(sel_getUid("arguments"), function $_CPFunctionExpression__arguments(self, _cmd)
{
    return self._arguments;
}

,["CPArray"]), new objj_method(sel_getUid("_setArguments:"), function $_CPFunctionExpression___setArguments_(self, _cmd, newValue)
{
    self._arguments = newValue;
}

,["void","CPArray"]), new objj_method(sel_getUid("initWithSelector:arguments:"), function $_CPFunctionExpression__initWithSelector_arguments_(self, _cmd, aSelector, parameters)
{
    var target = (CPPredicateUtilities == null ? null : (CPPredicateUtilities.isa.method_msgSend["class"] || _objj_forward)(CPPredicateUtilities, (CPPredicateUtilities.isa.method_dtable["class"], "class")));
    if (!(target == null ? null : (target.isa.method_msgSend["respondsToSelector:"] || _objj_forward)(target, (target.isa.method_dtable["respondsToSelector:"], "respondsToSelector:"), aSelector)))
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "Unknown function implementation: " + aSelector);
    var operand = (CPExpression.isa.method_msgSend["expressionForConstantValue:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForConstantValue:"], "expressionForConstantValue:"), target);
    return (self.isa.method_msgSend["initWithTarget:selector:arguments:"] || _objj_forward)(self, (self.isa.method_dtable["initWithTarget:selector:arguments:"], self.isa.method_dtable["initWithTarget:selector:arguments:"], self.isa.method_dtable["initWithTarget:selector:arguments:"], "initWithTarget:selector:arguments:"), operand, aSelector, parameters);
}

,["id","SEL","CPArray"]), new objj_method(sel_getUid("initWithTarget:selector:arguments:"), function $_CPFunctionExpression__initWithTarget_selector_arguments_(self, _cmd, operand, aSelector, parameters)
{
    return (self.isa.method_msgSend["initWithTarget:selector:arguments:type:"] || _objj_forward)(self, (self.isa.method_dtable["initWithTarget:selector:arguments:type:"], self.isa.method_dtable["initWithTarget:selector:arguments:type:"], self.isa.method_dtable["initWithTarget:selector:arguments:type:"], self.isa.method_dtable["initWithTarget:selector:arguments:type:"], "initWithTarget:selector:arguments:type:"), operand, aSelector, parameters, CPFunctionExpressionType);
}

,["id","CPExpression","SEL","CPArray"]), new objj_method(sel_getUid("initWithTarget:selector:arguments:type:"), function $_CPFunctionExpression__initWithTarget_selector_arguments_type_(self, _cmd, operand, aSelector, parameters, type)
{
    self = (objj_getClass("_CPFunctionExpression").super_class.method_dtable["initWithExpressionType:"] || _objj_forward)(self, "initWithExpressionType:", type);
    if (self)
    {
        self._selector = aSelector;
        self._operand = operand;
        self._arguments = parameters;
        self._argc = (parameters == null ? null : (parameters.isa.method_msgSend["count"] || _objj_forward)(parameters, (parameters.isa.method_dtable["count"], "count")));
        self._maxargs = ((___r1 = ((___r2 = CPStringFromSelector(self._selector)), ___r2 == null ? null : (___r2.isa.method_msgSend["componentsSeparatedByString:"] || _objj_forward)(___r2, "componentsSeparatedByString:", ":"))), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, "count")) - 1;
    }
    return self;
    var ___r1, ___r2;
}

,["id","CPExpression","SEL","CPArray","int"]), new objj_method(sel_getUid("isEqual:"), function $_CPFunctionExpression__isEqual_(self, _cmd, object)
{
    if (self === object)
        return YES;
    if (object === nil || object.isa !== self.isa || !((___r1 = (object == null ? null : (object.isa.method_msgSend["_function"] || _objj_forward)(object, (object.isa.method_dtable["_function"], "_function")))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, "isEqual:", self._selector)) || !((___r1 = (object == null ? null : (object.isa.method_msgSend["operand"] || _objj_forward)(object, (object.isa.method_dtable["operand"], "operand")))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, "isEqual:", self._operand)) || !((___r1 = (object == null ? null : (object.isa.method_msgSend["arguments"] || _objj_forward)(object, (object.isa.method_dtable["arguments"], "arguments")))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqualToArray:"] || _objj_forward)(___r1, "isEqualToArray:", self._arguments)))
        return NO;
    return YES;
    var ___r1;
}

,["BOOL","id"]), new objj_method(sel_getUid("_function"), function $_CPFunctionExpression___function(self, _cmd)
{
    return CPStringFromSelector(self._selector);
}

,["CPString"]), new objj_method(sel_getUid("function"), function $_CPFunctionExpression__function(self, _cmd)
{
    return (self.isa.method_msgSend["_function"] || _objj_forward)(self, (self.isa.method_dtable["_function"], "_function"));
}

,["CPString"]), new objj_method(sel_getUid("expressionValueWithObject:context:"), function $_CPFunctionExpression__expressionValueWithObject_context_(self, _cmd, object, context)
{
    var target = ((___r1 = self._operand), ___r1 == null ? null : (___r1.isa.method_msgSend["expressionValueWithObject:context:"] || _objj_forward)(___r1, (self._operand.isa.method_dtable["expressionValueWithObject:context:"], self._operand.isa.method_dtable["expressionValueWithObject:context:"], "expressionValueWithObject:context:"), object, context)),
        objj_args = [target, self._selector],
        i = 0;
    for (; i < self._argc; i++)
    {
        var arg = ((___r1 = self._arguments[i]), ___r1 == null ? null : (___r1.isa.method_msgSend["expressionValueWithObject:context:"] || _objj_forward)(___r1, "expressionValueWithObject:context:", object, context));
        objj_args.push(arg);
    }
    if (self._argc > self._maxargs)
    {
        var r = MAX(self._maxargs + 1, 2);
        objj_args = (objj_args.slice(0, r)).concat([objj_args.slice(r)]);
    }
    return objj_msgSend.apply(this, objj_args);
    var ___r1;
}

,["id","id","CPDictionary"]), new objj_method(sel_getUid("description"), function $_CPFunctionExpression__description(self, _cmd)
{
    var result = "";
    if (((___r1 = self._operand), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, (self._operand.isa.method_dtable["isEqual:"], "isEqual:"), (CPExpression.isa.method_msgSend["expressionForConstantValue:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForConstantValue:"], "expressionForConstantValue:"), (CPPredicateUtilities == null ? null : (CPPredicateUtilities.isa.method_msgSend["class"] || _objj_forward)(CPPredicateUtilities, (CPPredicateUtilities.isa.method_dtable["class"], "class")))))))
        result += CPStringFromSelector(self._selector) + "(";
    else
    {
        result += "FUNCTION(";
        result += self._operand ? ((___r1 = self._operand), ___r1 == null ? null : (___r1.isa.method_msgSend["description"] || _objj_forward)(___r1, (self._operand.isa.method_dtable["description"], "description"))) + ", " : "";
        result += self._selector ? CPStringFromSelector(self._selector) + ", " : "";
    }
    for (var i = 0; i < self._argc; i++)
        result = result + ((___r1 = self._arguments[i]), ___r1 == null ? null : (___r1.isa.method_msgSend["description"] || _objj_forward)(___r1, "description")) + (i + 1 < self._argc ? ", " : "");
    result += ")";
    return result;
    var ___r1;
}

,["CPString"]), new objj_method(sel_getUid("_expressionWithSubstitutionVariables:"), function $_CPFunctionExpression___expressionWithSubstitutionVariables_(self, _cmd, variables)
{
    var operand = ((___r1 = (self.isa.method_msgSend["operand"] || _objj_forward)(self, (self.isa.method_dtable["operand"], "operand"))), ___r1 == null ? null : (___r1.isa.method_msgSend["_expressionWithSubstitutionVariables:"] || _objj_forward)(___r1, "_expressionWithSubstitutionVariables:", variables)),
        args = ((___r1 = self._arguments), ___r1 == null ? null : (___r1.isa.method_msgSend["arrayByApplyingBlock:"] || _objj_forward)(___r1, (self._arguments.isa.method_dtable["arrayByApplyingBlock:"], "arrayByApplyingBlock:"),     function(arg)
    {
        return (arg == null ? null : (arg.isa.method_msgSend["_expressionWithSubstitutionVariables:"] || _objj_forward)(arg, (arg.isa.method_dtable["_expressionWithSubstitutionVariables:"], "_expressionWithSubstitutionVariables:"), variables));
    }));
    return (CPExpression.isa.method_msgSend["expressionForFunction:selectorName:arguments:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForFunction:selectorName:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:selectorName:arguments:"], CPExpression.isa.method_dtable["expressionForFunction:selectorName:arguments:"], "expressionForFunction:selectorName:arguments:"), operand, (self.isa.method_msgSend["_function"] || _objj_forward)(self, (self.isa.method_dtable["_function"], "_function")), args);
    var ___r1;
}

,["CPExpression","CPDictionary"])]);
}
var CPSelectorNameKey = "CPSelectorName",
    CPArgumentsKey = "CPArguments",
    CPOperandKey = "CPOperand",
    CPExpressionTypeKey = "CPExpressionType";
{
var the_class = objj_getClass("_CPFunctionExpression")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"_CPFunctionExpression\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $_CPFunctionExpression__initWithCoder_(self, _cmd, coder)
{
    var type = (coder == null ? null : (coder.isa.method_msgSend["decodeIntForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeIntForKey:"], "decodeIntForKey:"), CPExpressionTypeKey)),
        operand = (coder == null ? null : (coder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPOperandKey)),
        selector = CPSelectorFromString((coder == null ? null : (coder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPSelectorNameKey))),
        parameters = (coder == null ? null : (coder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPArgumentsKey));
    return (self.isa.method_msgSend["initWithTarget:selector:arguments:type:"] || _objj_forward)(self, (self.isa.method_dtable["initWithTarget:selector:arguments:type:"], self.isa.method_dtable["initWithTarget:selector:arguments:type:"], self.isa.method_dtable["initWithTarget:selector:arguments:type:"], self.isa.method_dtable["initWithTarget:selector:arguments:type:"], "initWithTarget:selector:arguments:type:"), operand, selector, parameters, type);
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $_CPFunctionExpression__encodeWithCoder_(self, _cmd, coder)
{
    (coder == null ? null : (coder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeObject:forKey:"], coder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), (self.isa.method_msgSend["_function"] || _objj_forward)(self, (self.isa.method_dtable["_function"], "_function")), CPSelectorNameKey));
    (coder == null ? null : (coder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeObject:forKey:"], coder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._arguments, CPArgumentsKey));
    (coder == null ? null : (coder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeObject:forKey:"], coder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._operand, CPOperandKey));
    (coder == null ? null : (coder.isa.method_msgSend["encodeInt:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeInt:forKey:"], coder.isa.method_dtable["encodeInt:forKey:"], "encodeInt:forKey:"), self._type, CPExpressionTypeKey));
}

,["void","CPCoder"])]);
}

{var the_class = objj_allocateClassPair(CPObject, "CPPredicateUtilities"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(meta_class, [new objj_method(sel_getUid("sum:"), function $CPPredicateUtilities__sum_(self, _cmd, parameters)
{
    var sum = 0,
        count = parameters.length;
    while (count--)
        sum += parameters[count];
    return sum;
}

,["float","CPArray"]), new objj_method(sel_getUid("count:"), function $CPPredicateUtilities__count_(self, _cmd, parameters)
{
    return (parameters == null ? null : (parameters.isa.method_msgSend["count"] || _objj_forward)(parameters, (parameters.isa.method_dtable["count"], "count")));
}

,["float","CPArray"]), new objj_method(sel_getUid("min:"), function $CPPredicateUtilities__min_(self, _cmd, parameters)
{
    return (parameters.sort())[0];
}

,["float","CPArray"]), new objj_method(sel_getUid("max:"), function $CPPredicateUtilities__max_(self, _cmd, parameters)
{
    return (parameters.sort())[parameters.length - 1];
}

,["float","CPArray"]), new objj_method(sel_getUid("average:"), function $CPPredicateUtilities__average_(self, _cmd, parameters)
{
    return (self.isa.method_msgSend["sum:"] || _objj_forward)(self, (self.isa.method_dtable["sum:"], "sum:"), parameters) / parameters.length;
}

,["float","CPArray"]), new objj_method(sel_getUid("first:"), function $CPPredicateUtilities__first_(self, _cmd, parameters)
{
    return parameters[0];
}

,["id","CPArray"]), new objj_method(sel_getUid("last:"), function $CPPredicateUtilities__last_(self, _cmd, parameters)
{
    return parameters[parameters.length - 1];
}

,["id","CPArray"]), new objj_method(sel_getUid("fromObject:index:"), function $CPPredicateUtilities__fromObject_index_(self, _cmd, object, anIndex)
{
    if ((object == null ? null : (object.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(object, (object.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPDictionary.isa.method_msgSend["class"] || _objj_forward)(CPDictionary, (CPDictionary.isa.method_dtable["class"], "class")))))
        return (object == null ? null : (object.isa.method_msgSend["objectForKey:"] || _objj_forward)(object, (object.isa.method_dtable["objectForKey:"], "objectForKey:"), anIndex));
    else
        (object == null ? null : (object.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(object, (object.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPArray.isa.method_msgSend["class"] || _objj_forward)(CPArray, (CPArray.isa.method_dtable["class"], "class"))));
    return (object == null ? null : (object.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(object, (object.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), anIndex));
    (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "object[#] requires a CPDictionary or CPArray");
}

,["id","id","id"]), new objj_method(sel_getUid("add:to:"), function $CPPredicateUtilities__add_to_(self, _cmd, n, m)
{
    return n + m;
}

,["float","int","int"]), new objj_method(sel_getUid("from:substract:"), function $CPPredicateUtilities__from_substract_(self, _cmd, n, m)
{
    return n - m;
}

,["float","int","int"]), new objj_method(sel_getUid("multiply:by:"), function $CPPredicateUtilities__multiply_by_(self, _cmd, n, m)
{
    return n * m;
}

,["float","float","int"]), new objj_method(sel_getUid("divide:by:"), function $CPPredicateUtilities__divide_by_(self, _cmd, n, m)
{
    return n / m;
}

,["float","float","float"]), new objj_method(sel_getUid("sqrt:"), function $CPPredicateUtilities__sqrt_(self, _cmd, n)
{
    return SQRT(n);
}

,["float","float"]), new objj_method(sel_getUid("raise:to:"), function $CPPredicateUtilities__raise_to_(self, _cmd, num, power)
{
    return POW(num, power);
}

,["float","float","int"]), new objj_method(sel_getUid("abs:"), function $CPPredicateUtilities__abs_(self, _cmd, num)
{
    return ABS(num);
}

,["float","float"]), new objj_method(sel_getUid("now:"), function $CPPredicateUtilities__now_(self, _cmd, _)
{
    return (CPDate.isa.method_msgSend["date"] || _objj_forward)(CPDate, (CPDate.isa.method_dtable["date"], "date"));
}

,["CPDate","id"]), new objj_method(sel_getUid("ln:"), function $CPPredicateUtilities__ln_(self, _cmd, num)
{
    return LN10(num);
}

,["float","float"]), new objj_method(sel_getUid("exp:"), function $CPPredicateUtilities__exp_(self, _cmd, num)
{
    return EXP(num);
}

,["float","float"]), new objj_method(sel_getUid("ceiling:"), function $CPPredicateUtilities__ceiling_(self, _cmd, num)
{
    return CEIL(num);
}

,["float","float"]), new objj_method(sel_getUid("random:"), function $CPPredicateUtilities__random_(self, _cmd, num)
{
    return ROUND(RAND() * num);
}

,["int","int"]), new objj_method(sel_getUid("modulus:by:"), function $CPPredicateUtilities__modulus_by_(self, _cmd, n, m)
{
    return n % m;
}

,["int","int","int"]), new objj_method(sel_getUid("chs:"), function $CPPredicateUtilities__chs_(self, _cmd, num)
{
    return -num;
}

,["float","int"])]);
}
p;15;_CPExpression.jt;41407;@STATIC;1.0;i;9;CPArray.ji;14;CPDictionary.ji;18;CPKeyValueCoding.ji;10;CPObject.ji;10;CPString.jS;30048;t;11246;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPKeyValueCoding.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPString.j", YES);CPConstantValueExpressionType = 0;
CPEvaluatedObjectExpressionType = 1;
CPVariableExpressionType = 2;
CPKeyPathExpressionType = 3;
CPFunctionExpressionType = 4;
CPAggregateExpressionType = 5;
CPSubqueryExpressionType = 6;
CPUnionSetExpressionType = 7;
CPIntersectSetExpressionType = 8;
CPMinusSetExpressionType = 9;
CPBlockExpressionType = 10;
CPConditionalExpressionType = 11;

{var the_class = objj_allocateClassPair(CPObject, "CPExpression"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_type", "int")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithExpressionType:"), function $CPExpression__initWithExpressionType_(self, _cmd, type)
{
    self._type = type;
    return self;
}

,["id","int"]), new objj_method(sel_getUid("expressionType"), function $CPExpression__expressionType(self, _cmd)
{
    return self._type;
}

,["int"]), new objj_method(sel_getUid("constantValue"), function $CPExpression__constantValue(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
    return nil;
}

,["id"]), new objj_method(sel_getUid("variable"), function $CPExpression__variable(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
    return nil;
}

,["CPString"]), new objj_method(sel_getUid("keyPath"), function $CPExpression__keyPath(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
    return nil;
}

,["CPString"]), new objj_method(sel_getUid("function"), function $CPExpression__function(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
    return nil;
}

,["CPString"]), new objj_method(sel_getUid("arguments"), function $CPExpression__arguments(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
    return nil;
}

,["CPArray"]), new objj_method(sel_getUid("collection"), function $CPExpression__collection(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
    return nil;
}

,["id"]), new objj_method(sel_getUid("predicate"), function $CPExpression__predicate(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
    return nil;
}

,["CPPredicate"]), new objj_method(sel_getUid("operand"), function $CPExpression__operand(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
    return nil;
}

,["CPExpression"]), new objj_method(sel_getUid("leftExpression"), function $CPExpression__leftExpression(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
    return nil;
}

,["CPExpression"]), new objj_method(sel_getUid("rightExpression"), function $CPExpression__rightExpression(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
    return nil;
}

,["CPExpression"]), new objj_method(sel_getUid("expressionBlock"), function $CPExpression__expressionBlock(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
    return nil;
}

,["Function"]), new objj_method(sel_getUid("trueExpression"), function $CPExpression__trueExpression(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
    return nil;
}

,["CPExpression"]), new objj_method(sel_getUid("falseExpression"), function $CPExpression__falseExpression(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
    return nil;
}

,["CPExpression"]), new objj_method(sel_getUid("_expressionWithSubstitutionVariables:"), function $CPExpression___expressionWithSubstitutionVariables_(self, _cmd, variables)
{
    return self;
}

,["CPExpression","CPDictionary"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("expressionForConstantValue:"), function $CPExpression__expressionForConstantValue_(self, _cmd, value)
{
    return ((___r1 = (_CPConstantValueExpression == null ? null : (_CPConstantValueExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPConstantValueExpression, (_CPConstantValueExpression.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithValue:"] || _objj_forward)(___r1, "initWithValue:", value));
    var ___r1;
}

,["CPExpression","id"]), new objj_method(sel_getUid("expressionForEvaluatedObject"), function $CPExpression__expressionForEvaluatedObject(self, _cmd)
{
    return (_CPSelfExpression == null ? null : (_CPSelfExpression.isa.method_msgSend["evaluatedObject"] || _objj_forward)(_CPSelfExpression, (_CPSelfExpression.isa.method_dtable["evaluatedObject"], "evaluatedObject")));
}

,["CPExpression"]), new objj_method(sel_getUid("expressionForVariable:"), function $CPExpression__expressionForVariable_(self, _cmd, string)
{
    return ((___r1 = (_CPVariableExpression == null ? null : (_CPVariableExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPVariableExpression, (_CPVariableExpression.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithVariable:"] || _objj_forward)(___r1, "initWithVariable:", string));
    var ___r1;
}

,["CPExpression","CPString"]), new objj_method(sel_getUid("expressionForKeyPath:"), function $CPExpression__expressionForKeyPath_(self, _cmd, keyPath)
{
    return ((___r1 = (_CPKeyPathExpression == null ? null : (_CPKeyPathExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPKeyPathExpression, (_CPKeyPathExpression.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithKeyPath:"] || _objj_forward)(___r1, "initWithKeyPath:", keyPath));
    var ___r1;
}

,["CPExpression","CPString"]), new objj_method(sel_getUid("expressionForAggregate:"), function $CPExpression__expressionForAggregate_(self, _cmd, collection)
{
    return ((___r1 = (_CPAggregateExpression == null ? null : (_CPAggregateExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPAggregateExpression, (_CPAggregateExpression.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithAggregate:"] || _objj_forward)(___r1, "initWithAggregate:", collection));
    var ___r1;
}

,["CPExpression","CPArray"]), new objj_method(sel_getUid("expressionForUnionSet:with:"), function $CPExpression__expressionForUnionSet_with_(self, _cmd, left, right)
{
    return ((___r1 = (_CPSetExpression == null ? null : (_CPSetExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPSetExpression, (_CPSetExpression.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithType:left:right:"] || _objj_forward)(___r1, "initWithType:left:right:", CPUnionSetExpressionType, left, right));
    var ___r1;
}

,["CPExpression","CPExpression","CPExpression"]), new objj_method(sel_getUid("expressionForIntersectSet:with:"), function $CPExpression__expressionForIntersectSet_with_(self, _cmd, left, right)
{
    return ((___r1 = (_CPSetExpression == null ? null : (_CPSetExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPSetExpression, (_CPSetExpression.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithType:left:right:"] || _objj_forward)(___r1, "initWithType:left:right:", CPIntersectSetExpressionType, left, right));
    var ___r1;
}

,["CPExpression","CPExpression","CPExpression"]), new objj_method(sel_getUid("expressionForMinusSet:with:"), function $CPExpression__expressionForMinusSet_with_(self, _cmd, left, right)
{
    return ((___r1 = (_CPSetExpression == null ? null : (_CPSetExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPSetExpression, (_CPSetExpression.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithType:left:right:"] || _objj_forward)(___r1, "initWithType:left:right:", CPMinusSetExpressionType, left, right));
    var ___r1;
}

,["CPExpression","CPExpression","CPExpression"]), new objj_method(sel_getUid("expressionForFunction:arguments:"), function $CPExpression__expressionForFunction_arguments_(self, _cmd, function_name, parameters)
{
    return ((___r1 = (_CPFunctionExpression == null ? null : (_CPFunctionExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPFunctionExpression, (_CPFunctionExpression.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithSelector:arguments:"] || _objj_forward)(___r1, "initWithSelector:arguments:", CPSelectorFromString(function_name), parameters));
    var ___r1;
}

,["CPExpression","CPString","CPArray"]), new objj_method(sel_getUid("expressionForFunction:selectorName:arguments:"), function $CPExpression__expressionForFunction_selectorName_arguments_(self, _cmd, target, selectorName, parameters)
{
    return ((___r1 = (_CPFunctionExpression == null ? null : (_CPFunctionExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPFunctionExpression, (_CPFunctionExpression.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithTarget:selector:arguments:"] || _objj_forward)(___r1, "initWithTarget:selector:arguments:", target, CPSelectorFromString(selectorName), parameters));
    var ___r1;
}

,["CPExpression","CPExpression","CPString","CPArray"]), new objj_method(sel_getUid("expressionForSubquery:usingIteratorVariable:predicate:"), function $CPExpression__expressionForSubquery_usingIteratorVariable_predicate_(self, _cmd, expression, variable, predicate)
{
    return ((___r1 = (_CPSubqueryExpression == null ? null : (_CPSubqueryExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPSubqueryExpression, (_CPSubqueryExpression.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithExpression:usingIteratorVariable:predicate:"] || _objj_forward)(___r1, "initWithExpression:usingIteratorVariable:predicate:", expression, variable, predicate));
    var ___r1;
}

,["CPExpression","CPExpression","CPString","CPPredicate"]), new objj_method(sel_getUid("expressionForBlock:arguments:"), function $CPExpression__expressionForBlock_arguments_(self, _cmd, aBlock, args)
{
    return ((___r1 = (_CPBlockExpression == null ? null : (_CPBlockExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPBlockExpression, (_CPBlockExpression.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithBlock:arguments:"] || _objj_forward)(___r1, "initWithBlock:arguments:", aBlock, args));
    var ___r1;
}

,["CPExpression","Function","CPArray"]), new objj_method(sel_getUid("expressionForConditional:trueExpression:falseExpression:"), function $CPExpression__expressionForConditional_trueExpression_falseExpression_(self, _cmd, aPredicate, trueExpression, falseExpression)
{
    return ((___r1 = (_CPConditionalExpression == null ? null : (_CPConditionalExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPConditionalExpression, (_CPConditionalExpression.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithPredicate:trueExpression:falseExpression:"] || _objj_forward)(___r1, "initWithPredicate:trueExpression:falseExpression:", aPredicate, trueExpression, falseExpression));
    var ___r1;
}

,["CPExpression","CPPredicate","CPExpression","CPExpression"])]);
}
p;14;CPExpression.jt;2862;@STATIC;1.0;i;15;_CPExpression.ji;28;_CPConstantValueExpression.ji;19;_CPSelfExpression.ji;23;_CPVariableExpression.ji;22;_CPKeyPathExpression.ji;23;_CPFunctionExpression.ji;24;_CPAggregateExpression.ji;18;_CPSetExpression.ji;23;_CPSubqueryExpression.ji;20;_CPBlockExpression.ji;26;_CPConditionalExpression.jS;2012;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQRXhwcmVzc2lvbi5qIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBcUJBLGtCLHVCQUNBLGtCLG9DQUNBLGtCLDJCQUNBLGtCLCtCQUNBLGtCLDhCQUNBLGtCLCtCQUNBLGtCLGdDQUNBLGtCLDBCQUNBLGtCLCtCQUNBLGtCLDRCQUNBLGtCIiwiZmlsZSI6IkNQRXhwcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi9Vc2Vycy9kYXZpZC9wcm9ncmFtcy9jYXBwdWNjaW5vL0ZvdW5kYXRpb24vIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENQRXhwcmVzc2lvbi5qXG4gKlxuICogQ3JlYXRlZCBieSBjYWNhb2Rldi5cbiAqIENvcHlyaWdodCAyMDEwLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlclxuICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlXG4gKiBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BIDAyMTEwLTEzMDEgVVNBXG4gKi9cblxuQGltcG9ydCBcIl9DUEV4cHJlc3Npb24ualwiXG5AaW1wb3J0IFwiX0NQQ29uc3RhbnRWYWx1ZUV4cHJlc3Npb24ualwiXG5AaW1wb3J0IFwiX0NQU2VsZkV4cHJlc3Npb24ualwiXG5AaW1wb3J0IFwiX0NQVmFyaWFibGVFeHByZXNzaW9uLmpcIlxuQGltcG9ydCBcIl9DUEtleVBhdGhFeHByZXNzaW9uLmpcIlxuQGltcG9ydCBcIl9DUEZ1bmN0aW9uRXhwcmVzc2lvbi5qXCJcbkBpbXBvcnQgXCJfQ1BBZ2dyZWdhdGVFeHByZXNzaW9uLmpcIlxuQGltcG9ydCBcIl9DUFNldEV4cHJlc3Npb24ualwiXG5AaW1wb3J0IFwiX0NQU3VicXVlcnlFeHByZXNzaW9uLmpcIlxuQGltcG9ydCBcIl9DUEJsb2NrRXhwcmVzc2lvbi5qXCJcbkBpbXBvcnQgXCJfQ1BDb25kaXRpb25hbEV4cHJlc3Npb24ualwiXG4iXX0=t;529;

objj_executeFile("_CPExpression.j", YES);objj_executeFile("_CPConstantValueExpression.j", YES);objj_executeFile("_CPSelfExpression.j", YES);objj_executeFile("_CPVariableExpression.j", YES);objj_executeFile("_CPKeyPathExpression.j", YES);objj_executeFile("_CPFunctionExpression.j", YES);objj_executeFile("_CPAggregateExpression.j", YES);objj_executeFile("_CPSetExpression.j", YES);objj_executeFile("_CPSubqueryExpression.j", YES);objj_executeFile("_CPBlockExpression.j", YES);objj_executeFile("_CPConditionalExpression.j", YES);p;20;_CPBlockExpression.jt;10167;@STATIC;1.0;i;15;_CPExpression.jS;5620;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9DUEJsb2NrRXhwcmVzc2lvbi5qIiwidW5kZWZpbmVkX19DUEJsb2NrRXhwcmVzc2lvbl9BY2Nlc3NvcnMiXSwibmFtZXMiOlsic2VsZiJdLCJtYXBwaW5ncyI6Ijs7QUFxQkEsa0IsdUJBRUE7QUFBQTtBQUFBLDJCLDJCQUFBLG1DLEVBQUEsc0M7NkJDaEJBLDRCO0FBQ0E7SUFDSSxNLENBQU8sVztBQURYLEM7O2dCQUdBLDRCLG1FQUE0QixRO0FBQzVCO0lBQ0ksVyxHQUFTLFFBQVQ7QUFESixDOzt1QkFHQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLGU7QUFEWCxDOztlQUdBLDRCLDJFQUErQixRO0FBQy9CO0lBQ0ksZSxHQUFhLFFBQWI7QUFESixDOztzQkRTQSw0QiwrRkFBOEIsTSxFQUEwQixTO0FBQ3hEO0lBQ0lBLEksR0FBTyxDLCtDQUFBLGdCLHVCQUFBLHNEQUE4QixxQkFBOUIsQ0FBUDtJQUVBLElBQUlBLElBQUo7SUFDQTtRQUNJLFcsR0FBUyxNQUFUO1FBQ0EsZSxHQUFhLFNBQWI7SUFGSixDO0lBS0EsTSxDQUFPQSxJO0FBVFgsQzs7K0JBWUEsNEIsK0RBQW9CLE07QUFDcEI7SUFDSSxJQUFJQSxJLENBQUEsRyxDQUFTLE1BQWI7UUFDSSxNLENBQU8sRztJQUVYLElBQUksTSxDQUFBLEcsQ0FBVyxHLElBQU8sT0FBTyxHLENBQVAsRyxDQUFlQSxJQUFBLENBQUssRyxJQUFPLENBQUMsTUFBRCxtQkFBQyxNQUFELHlEQUFDLE1BQUQsR0FBUSwyQ0FBUixzQixDQUFBLEcsQ0FBNkIsVyxJQUFVLENBQUMsVUFBQyxDQUFDLE1BQUQsbUJBQUMsTUFBRCxtREFBQyxNQUFELEdBQVEscUNBQVIsZ0JBQUQscUdBQTRCLGVBQTVCLEVBQXpGO1FBQ0ksTSxDQUFPLEU7SUFFWCxNLENBQU8sRzs7QUFQWCxDOztpQkFVQSw0QixtSEFBb0MsTSxFQUE2QixPO0FBQ2pFO0lBQ0ksSUFBSSxJLEdBQU8sVUFBQyxlQUFELHVHQUFZLDBEQUFaLDRCLElBQWlDLFEsQ0FBUyxHO0lBQ3JEO1FBQ0ksTSxDQUFPLENBQUMsR0FBRCxtQkFBQyxHQUFELDRFQUFDLEdBQUQsR0FBSywyREFBTCxFQUFzQywyREFBdEMseUNBQStCLE1BQS9CLEVBQThDLE9BQTlDLEU7SUFEWCxDQURXLEVBQVg7SUFLQSxNLENBQU8sVyxDQUFPLE0sRUFBUSxJLEVBQU0sTzs7QUFOaEMsQzs7OEJBU0EsNEIseUhBQW1FLFE7QUFDbkU7SUFDSSxJQUFJLEksR0FBTyxVQUFDLGVBQUQsdUdBQVksMERBQVosNEIsSUFBaUMsUSxDQUFTLEc7SUFDckQ7UUFDSSxNLENBQU8sQ0FBQyxHQUFELG1CQUFDLEdBQUQsK0VBQUMsR0FBRCxHQUFLLDhEQUFMLDRDQUEwQyxRQUExQyxFO0lBRFgsQ0FEVyxFQUFYO0lBS0EsTSxDQUFPLFVBQUMsQ0FBQyxrQkFBRCwrQ0FBQyxrQkFBRCxHQUFvQiw2Q0FBcEIsV0FBRCxxSUFBMEMsV0FBMUMsRUFBMkQsSUFBM0QsRTs7QUFOWCxDOzttQ0FTQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLENBQUMsUUFBRCwyREFBQyxRQUFELEdBQVUsK0NBQVYsd0JBQTJCLHFCQUEzQixFQUFtRCxVQUFDLGVBQUQsNkZBQVksZ0RBQVosa0JBQW5ELEM7O0FBRFgsQyIsImZpbGUiOiJfQ1BCbG9ja0V4cHJlc3Npb24uanMiLCJzb3VyY2VSb290IjoiZmlsZTovVXNlcnMvZGF2aWQvcHJvZ3JhbXMvY2FwcHVjY2luby9Gb3VuZGF0aW9uLyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBfQ1BCbG9ja0V4cHJlc3Npb24ualxuICpcbiAqIENyZWF0ZWQgYnkgY2FjYW9kZXYuXG4gKiBDb3B5cmlnaHQgMjAxNS5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXJcbiAqIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgbGlicmFyeTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZVxuICogRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3RyZWV0LCBGaWZ0aCBGbG9vciwgQm9zdG9uLCBNQSAwMjExMC0xMzAxIFVTQVxuICovXG5cbkBpbXBvcnQgXCJfQ1BFeHByZXNzaW9uLmpcIlxuXG5AaW1wbGVtZW50YXRpb24gX0NQQmxvY2tFeHByZXNzaW9uIDogIENQRXhwcmVzc2lvblxue1xuICAgIEZ1bmN0aW9uIF9ibG9jayBAYWNjZXNzb3JzKGdldHRlcj1leHByZXNzaW9uQmxvY2spO1xuICAgIENQQXJyYXkgIF9hcmd1bWVudHMgQGFjY2Vzc29ycyhnZXR0ZXI9YXJndW1lbnRzKTtcbn1cblxuLSAoaWQpaW5pdFdpdGhCbG9jazooRnVuY3Rpb24pYUJsb2NrIGFyZ3VtZW50czooQ1BBcnJheSlhcmd1bWVudHNcbntcbiAgICBzZWxmID0gW3N1cGVyIGluaXRXaXRoRXhwcmVzc2lvblR5cGU6Q1BCbG9ja0V4cHJlc3Npb25UeXBlXTtcblxuICAgIGlmIChzZWxmKVxuICAgIHtcbiAgICAgICAgX2Jsb2NrID0gYUJsb2NrO1xuICAgICAgICBfYXJndW1lbnRzID0gYXJndW1lbnRzO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xufVxuXG4tIChCT09MKWlzRXF1YWw6KGlkKW9iamVjdFxue1xuICAgIGlmIChzZWxmID09PSBvYmplY3QpXG4gICAgICAgIHJldHVybiBZRVM7XG5cbiAgICBpZiAob2JqZWN0ID09PSBuaWwgfHwgb2JqZWN0LmlzYSAhPT0gc2VsZi5pc2EgfHwgW29iamVjdCBleHByZXNzaW9uQmxvY2tdICE9PSBfYmxvY2sgfHwgIVtbb2JqZWN0IGFyZ3VtZW50c10gaXNFcXVhbDpfYXJndW1lbnRzXSlcbiAgICAgICAgcmV0dXJuIE5PO1xuXG4gICAgcmV0dXJuIFlFUztcbn1cblxuLSAoaWQpZXhwcmVzc2lvblZhbHVlV2l0aE9iamVjdDooaWQpb2JqZWN0IGNvbnRleHQ6KENQRGljdGlvbmFyeSljb250ZXh0XG57XG4gICAgdmFyIGFyZ3MgPSBbX2FyZ3VtZW50cyBhcnJheUJ5QXBwbHlpbmdCbG9jazpmdW5jdGlvbihleHApXG4gICAge1xuICAgICAgICByZXR1cm4gW2V4cCBleHByZXNzaW9uVmFsdWVXaXRoT2JqZWN0Om9iamVjdCBjb250ZXh0OmNvbnRleHRdO1xuICAgIH1dO1xuXG4gICAgcmV0dXJuIF9ibG9jayhvYmplY3QsIGFyZ3MsIGNvbnRleHQpO1xufVxuXG4tIChDUEV4cHJlc3Npb24pX2V4cHJlc3Npb25XaXRoU3Vic3RpdHV0aW9uVmFyaWFibGVzOihDUERpY3Rpb25hcnkpYmluZGluZ3NcbntcbiAgICB2YXIgYXJncyA9IFtfYXJndW1lbnRzIGFycmF5QnlBcHBseWluZ0Jsb2NrOmZ1bmN0aW9uKGV4cClcbiAgICB7XG4gICAgICAgIHJldHVybiBbZXhwIF9leHByZXNzaW9uV2l0aFN1YnN0aXR1dGlvblZhcmlhYmxlczpiaW5kaW5nc107XG4gICAgfV07XG5cbiAgICByZXR1cm4gW1tfQ1BCbG9ja0V4cHJlc3Npb24gYWxsb2NdIGluaXRXaXRoQmxvY2s6X2Jsb2NrIGFyZ3VtZW50czphcmdzXTtcbn1cblxuLSAoQ1BTdHJpbmcpZGVzY3JpcHRpb25cbntcbiAgICByZXR1cm4gW0NQU3RyaW5nIHN0cmluZ1dpdGhGb3JtYXQ6QFwiQmxvY2soZnVuY3Rpb24sICVAKVwiLCBbX2FyZ3VtZW50cyBkZXNjcmlwdGlvbl1dO1xufVxuXG5AZW5kIiwiQGltcGxlbWVudGF0aW9uIF9DUEJsb2NrRXhwcmVzc2lvbiA6ICBDUEV4cHJlc3Npb25cbntcbiAgICBGdW5jdGlvbiBfYmxvY2sgO1xuICAgIENQQXJyYXkgIF9hcmd1bWVudHMgO1xufVxuXG5cbi0gKEZ1bmN0aW9uKWV4cHJlc3Npb25CbG9ja1xue1xuICAgIHJldHVybiBfYmxvY2s7XG59XG4tICh2b2lkKV9zZXRCbG9jazooRnVuY3Rpb24pbmV3VmFsdWVcbntcbiAgICBfYmxvY2sgPSBuZXdWYWx1ZTtcbn1cbi0gKENQQXJyYXkpYXJndW1lbnRzXG57XG4gICAgcmV0dXJuIF9hcmd1bWVudHM7XG59XG4tICh2b2lkKV9zZXRBcmd1bWVudHM6KENQQXJyYXkpbmV3VmFsdWVcbntcbiAgICBfYXJndW1lbnRzID0gbmV3VmFsdWU7XG59XG5cbkBlbmQiXX0=t;4501;

objj_executeFile("_CPExpression.j", YES);
{var the_class = objj_allocateClassPair(CPExpression, "_CPBlockExpression"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_block", "Function"), new objj_ivar("_arguments", "CPArray")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("expressionBlock"), function $_CPBlockExpression__expressionBlock(self, _cmd)
{
    return self._block;
}

,["Function"]), new objj_method(sel_getUid("_setBlock:"), function $_CPBlockExpression___setBlock_(self, _cmd, newValue)
{
    self._block = newValue;
}

,["void","Function"]), new objj_method(sel_getUid("arguments"), function $_CPBlockExpression__arguments(self, _cmd)
{
    return self._arguments;
}

,["CPArray"]), new objj_method(sel_getUid("_setArguments:"), function $_CPBlockExpression___setArguments_(self, _cmd, newValue)
{
    self._arguments = newValue;
}

,["void","CPArray"]), new objj_method(sel_getUid("initWithBlock:arguments:"), function $_CPBlockExpression__initWithBlock_arguments_(self, _cmd, aBlock, arguments)
{
    self = (objj_getClass("_CPBlockExpression").super_class.method_dtable["initWithExpressionType:"] || _objj_forward)(self, "initWithExpressionType:", CPBlockExpressionType);
    if (self)
    {
        self._block = aBlock;
        self._arguments = arguments;
    }
    return self;
}

,["id","Function","CPArray"]), new objj_method(sel_getUid("isEqual:"), function $_CPBlockExpression__isEqual_(self, _cmd, object)
{
    if (self === object)
        return YES;
    if (object === nil || object.isa !== self.isa || (object == null ? null : (object.isa.method_msgSend["expressionBlock"] || _objj_forward)(object, (object.isa.method_dtable["expressionBlock"], "expressionBlock"))) !== self._block || !((___r1 = (object == null ? null : (object.isa.method_msgSend["arguments"] || _objj_forward)(object, (object.isa.method_dtable["arguments"], "arguments")))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, "isEqual:", self._arguments)))
        return NO;
    return YES;
    var ___r1;
}

,["BOOL","id"]), new objj_method(sel_getUid("expressionValueWithObject:context:"), function $_CPBlockExpression__expressionValueWithObject_context_(self, _cmd, object, context)
{
    var args = ((___r1 = self._arguments), ___r1 == null ? null : (___r1.isa.method_msgSend["arrayByApplyingBlock:"] || _objj_forward)(___r1, (self._arguments.isa.method_dtable["arrayByApplyingBlock:"], "arrayByApplyingBlock:"),     function(exp)
    {
        return (exp == null ? null : (exp.isa.method_msgSend["expressionValueWithObject:context:"] || _objj_forward)(exp, (exp.isa.method_dtable["expressionValueWithObject:context:"], exp.isa.method_dtable["expressionValueWithObject:context:"], "expressionValueWithObject:context:"), object, context));
    }));
    return self._block(object, args, context);
    var ___r1;
}

,["id","id","CPDictionary"]), new objj_method(sel_getUid("_expressionWithSubstitutionVariables:"), function $_CPBlockExpression___expressionWithSubstitutionVariables_(self, _cmd, bindings)
{
    var args = ((___r1 = self._arguments), ___r1 == null ? null : (___r1.isa.method_msgSend["arrayByApplyingBlock:"] || _objj_forward)(___r1, (self._arguments.isa.method_dtable["arrayByApplyingBlock:"], "arrayByApplyingBlock:"),     function(exp)
    {
        return (exp == null ? null : (exp.isa.method_msgSend["_expressionWithSubstitutionVariables:"] || _objj_forward)(exp, (exp.isa.method_dtable["_expressionWithSubstitutionVariables:"], "_expressionWithSubstitutionVariables:"), bindings));
    }));
    return ((___r1 = (_CPBlockExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPBlockExpression, (_CPBlockExpression.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithBlock:arguments:"] || _objj_forward)(___r1, "initWithBlock:arguments:", self._block, args));
    var ___r1;
}

,["CPExpression","CPDictionary"]), new objj_method(sel_getUid("description"), function $_CPBlockExpression__description(self, _cmd)
{
    return (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "Block(function, %@)", ((___r1 = self._arguments), ___r1 == null ? null : (___r1.isa.method_msgSend["description"] || _objj_forward)(___r1, (self._arguments.isa.method_dtable["description"], "description"))));
    var ___r1;
}

,["CPString"])]);
}
p;26;_CPConditionalExpression.jt;13972;@STATIC;1.0;i;14;_CPPredicate.ji;15;_CPExpression.jS;7208;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9DUENvbmRpdGlvbmFsRXhwcmVzc2lvbi5qIiwidW5kZWZpbmVkX19DUENvbmRpdGlvbmFsRXhwcmVzc2lvbl9BY2Nlc3NvcnMiXSwibmFtZXMiOlsic2VsZiJdLCJtYXBwaW5ncyI6Ijs7QUFvQkEsa0Isc0JBQ0Esa0IsdUJBRUE7QUFBQTtBQUFBLDJCLDJCQUFBLDBDLEVBQUEsZ0QsRUFBQSxpRDs2QkNmQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLGU7QUFEWCxDOzttQkFHQSw0QixpRkFBbUMsUTtBQUNuQztJQUNJLGUsR0FBYSxRQUFiO0FBREosQzs7MEJBR0EsNEI7QUFDQTtJQUNJLE0sQ0FBTyxvQjtBQURYLEM7O29CQUdBLDRCLDJGQUF5QyxRO0FBQ3pDO0lBQ0ksb0IsR0FBa0IsUUFBbEI7QUFESixDOzsyQkFHQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLHFCO0FBRFgsQzs7b0JBR0EsNEIsNkZBQTBDLFE7QUFDMUM7SUFDSSxxQixHQUFtQixRQUFuQjtBQURKLEM7OzJCRENBLDRCLHVKQUFxQyxVLEVBQXdDLGMsRUFBNkMsZTtBQUMxSDtJQUNJQSxJLEdBQU8sQyxxREFBQSxnQix1QkFBQSxzREFBOEIsMkJBQTlCLENBQVA7SUFFQSxJQUFJQSxJQUFKO0lBQ0E7UUFDSSxlLEdBQWEsVUFBYjtRQUNBLG9CLEdBQWtCLGNBQWxCO1FBQ0EscUIsR0FBbUIsZUFBbkI7SUFISixDO0lBTUEsTSxDQUFPQSxJO0FBVlgsQzs7c0RBYUEsNEIscUVBQW9CLE07QUFDcEI7SUFDSSxJQUFJQSxJLENBQUEsRyxDQUFTLE1BQWI7UUFDSSxNLENBQU8sRztJQUVYLElBQUksTSxDQUFBLEcsQ0FBVyxHLElBQU8sT0FBTyxHLENBQVAsRyxDQUFlQSxJQUFBLENBQUssRyxJQUFPLENBQUMsVUFBQyxDQUFDLE1BQUQsbUJBQUMsTUFBRCxtREFBQyxNQUFELEdBQVEscUNBQVIsZ0JBQUQscUdBQTRCLGVBQTVCLEUsSUFBMkMsQ0FBQyxVQUFDLENBQUMsTUFBRCxtQkFBQyxNQUFELHdEQUFDLE1BQUQsR0FBUSwwQ0FBUixxQkFBRCxxR0FBaUMsb0JBQWpDLEUsSUFBcUQsQ0FBQyxVQUFDLENBQUMsTUFBRCxtQkFBQyxNQUFELHlEQUFDLE1BQUQsR0FBUSwyQ0FBUixzQkFBRCxxR0FBa0MscUJBQWxDLEVBQXBKO1FBQ0ksTSxDQUFPLEU7SUFFWCxNLENBQU8sRzs7QUFQWCxDOztpQkFVQSw0Qix5SEFBb0MsTSxFQUE2QixPO0FBQ2pFO0lBQ0ksSUFBSSxJLEdBQU8sVUFBQyxlQUFELDJIQUFZLDhFQUFaLEVBQXNDLDhFQUF0QyxnREFBK0IsTUFBL0IsRUFBNEQsT0FBNUQsRTtRQUNQLEcsR0FBTSxJLEdBQU8sb0IsR0FBa0IscUJBRG5DO0lBR0EsTSxDQUFPLENBQUMsR0FBRCxtQkFBQyxHQUFELDRFQUFDLEdBQUQsR0FBSywyREFBTCxFQUFzQywyREFBdEMseUNBQStCLE1BQS9CLEVBQThDLE9BQTlDLEU7O0FBSlgsQzs7OEJBT0EsNEIsK0hBQW1FLFE7QUFDbkU7SUFDSSxJQUFJLFMsR0FBWSxVQUFDLGVBQUQscUhBQVksd0VBQVosMENBQStDLFFBQS9DLEU7UUFDWixPLEdBQVUsVUFBQyxvQkFBRCx1SEFBaUIsK0VBQWpCLDRDQUFzRCxRQUF0RCxFO1FBQ1YsUSxHQUFXLFVBQUMscUJBQUQsdUhBQWtCLGdGQUFsQiw0Q0FBdUQsUUFBdkQsRUFGZjtJQUlBLE0sQ0FBTyxVQUFDLENBQUMsd0JBQUQsK0NBQUMsd0JBQUQsR0FBMEIsbURBQTFCLFdBQUQsdUxBQW9ELFNBQXBELEVBQTZFLE9BQTdFLEVBQXFHLFFBQXJHLEU7O0FBTFgsQzs7bUNBUUEsNEI7QUFDQTtJQUNJLE0sQ0FBTyxDQUFDLFFBQUQsMkRBQUMsUUFBRCxHQUFVLCtDQUFWLHdCQUEyQixtQkFBM0IsRUFBaUQsVUFBQyxlQUFELGlHQUFZLG9EQUFaLHNCQUFqRCxFQUErRSxVQUFDLG9CQUFELDZGQUFpQixxREFBakIsa0JBQS9FLEVBQThHLFVBQUMscUJBQUQsNkZBQWtCLHNEQUFsQixrQkFBOUcsQzs7QUFEWCxDIiwiZmlsZSI6Il9DUENvbmRpdGlvbmFsRXhwcmVzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi9Vc2Vycy9kYXZpZC9wcm9ncmFtcy9jYXBwdWNjaW5vL0ZvdW5kYXRpb24vIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIF9DUENvbmRpdGlvbmFsRXhwcmVzc2lvbi5qXG4gKlxuICogQ3JlYXRlZCBieSBjYWNhb2Rldi5cbiAqIENvcHlyaWdodCAyMDE1LlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlclxuICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlXG4gKiBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BIDAyMTEwLTEzMDEgVVNBXG4gKi9cbkBpbXBvcnQgXCJfQ1BQcmVkaWNhdGUualwiXG5AaW1wb3J0IFwiX0NQRXhwcmVzc2lvbi5qXCJcblxuQGltcGxlbWVudGF0aW9uIF9DUENvbmRpdGlvbmFsRXhwcmVzc2lvbiA6ICBDUEV4cHJlc3Npb25cbntcbiAgICBDUFByZWRpY2F0ZSAgIF9wcmVkaWNhdGUgQGFjY2Vzc29ycyhnZXR0ZXI9cHJlZGljYXRlKTtcbiAgICBDUEV4cHJlc3Npb24gIF90cnVlRXhwcmVzc2lvbiBAYWNjZXNzb3JzKGdldHRlcj10cnVlRXhwcmVzc2lvbik7XG4gICAgQ1BFeHByZXNzaW9uICBfZmFsc2VFeHByZXNzaW9uIEBhY2Nlc3NvcnMoZ2V0dGVyPWZhbHNlRXhwcmVzc2lvbik7XG59XG5cbi0gKGlkKWluaXRXaXRoUHJlZGljYXRlOihDUFByZWRpY2F0ZSlhUHJlZGljYXRlIHRydWVFeHByZXNzaW9uOihDUEV4cHJlc3Npb24pdHJ1ZUV4cHJlc3Npb24gZmFsc2VFeHByZXNzaW9uOihDUEV4cHJlc3Npb24pZmFsc2VFeHByZXNzaW9uXG57XG4gICAgc2VsZiA9IFtzdXBlciBpbml0V2l0aEV4cHJlc3Npb25UeXBlOkNQQ29uZGl0aW9uYWxFeHByZXNzaW9uVHlwZV07XG5cbiAgICBpZiAoc2VsZilcbiAgICB7XG4gICAgICAgIF9wcmVkaWNhdGUgPSBhUHJlZGljYXRlO1xuICAgICAgICBfdHJ1ZUV4cHJlc3Npb24gPSB0cnVlRXhwcmVzc2lvbjtcbiAgICAgICAgX2ZhbHNlRXhwcmVzc2lvbiA9IGZhbHNlRXhwcmVzc2lvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbn1cblxuLSAoQk9PTClpc0VxdWFsOihpZClvYmplY3RcbntcbiAgICBpZiAoc2VsZiA9PT0gb2JqZWN0KVxuICAgICAgICByZXR1cm4gWUVTO1xuXG4gICAgaWYgKG9iamVjdCA9PT0gbmlsIHx8IG9iamVjdC5pc2EgIT09IHNlbGYuaXNhIHx8ICFbW29iamVjdCBwcmVkaWNhdGVdIGlzRXF1YWw6X3ByZWRpY2F0ZV0gfHwgIVtbb2JqZWN0IHRydWVFeHByZXNzaW9uXSBpc0VxdWFsOl90cnVlRXhwcmVzc2lvbl0gfHwgIVtbb2JqZWN0IGZhbHNlRXhwcmVzc2lvbl0gaXNFcXVhbDpfZmFsc2VFeHByZXNzaW9uXSlcbiAgICAgICAgcmV0dXJuIE5PO1xuXG4gICAgcmV0dXJuIFlFUztcbn1cblxuLSAoaWQpZXhwcmVzc2lvblZhbHVlV2l0aE9iamVjdDooaWQpb2JqZWN0IGNvbnRleHQ6KENQRGljdGlvbmFyeSljb250ZXh0XG57XG4gICAgdmFyIGV2YWwgPSBbX3ByZWRpY2F0ZSBldmFsdWF0ZVdpdGhPYmplY3Q6b2JqZWN0IHN1YnN0aXR1dGlvblZhcmlhYmxlczpjb250ZXh0XSxcbiAgICAgICAgZXhwID0gZXZhbCA/IF90cnVlRXhwcmVzc2lvbiA6IF9mYWxzZUV4cHJlc3Npb247XG5cbiAgICByZXR1cm4gW2V4cCBleHByZXNzaW9uVmFsdWVXaXRoT2JqZWN0Om9iamVjdCBjb250ZXh0OmNvbnRleHRdO1xufVxuXG4tIChDUEV4cHJlc3Npb24pX2V4cHJlc3Npb25XaXRoU3Vic3RpdHV0aW9uVmFyaWFibGVzOihDUERpY3Rpb25hcnkpYmluZGluZ3NcbntcbiAgICB2YXIgcHJlZGljYXRlID0gW19wcmVkaWNhdGUgcHJlZGljYXRlV2l0aFN1YnN0aXR1dGlvblZhcmlhYmxlczpiaW5kaW5nc10sXG4gICAgICAgIHRydWVFeHAgPSBbX3RydWVFeHByZXNzaW9uIF9leHByZXNzaW9uV2l0aFN1YnN0aXR1dGlvblZhcmlhYmxlczpiaW5kaW5nc10sXG4gICAgICAgIGZhbHNlRXhwID0gW19mYWxzZUV4cHJlc3Npb24gX2V4cHJlc3Npb25XaXRoU3Vic3RpdHV0aW9uVmFyaWFibGVzOmJpbmRpbmdzXTtcblxuICAgIHJldHVybiBbW19DUENvbmRpdGlvbmFsRXhwcmVzc2lvbiBhbGxvY10gaW5pdFdpdGhQcmVkaWNhdGU6cHJlZGljYXRlIHRydWVFeHByZXNzaW9uOnRydWVFeHAgZmFsc2VFeHByZXNzaW9uOmZhbHNlRXhwXTtcbn1cblxuLSAoQ1BTdHJpbmcpZGVzY3JpcHRpb25cbntcbiAgICByZXR1cm4gW0NQU3RyaW5nIHN0cmluZ1dpdGhGb3JtYXQ6QFwiVEVSTkFSWSglQCwlQCwlQClcIiwgW19wcmVkaWNhdGUgcHJlZGljYXRlRm9ybWF0XSwgW190cnVlRXhwcmVzc2lvbiBkZXNjcmlwdGlvbl0sIFtfZmFsc2VFeHByZXNzaW9uIGRlc2NyaXB0aW9uXV07XG59XG5cbkBlbmQiLCJAaW1wbGVtZW50YXRpb24gX0NQQ29uZGl0aW9uYWxFeHByZXNzaW9uIDogIENQRXhwcmVzc2lvblxue1xuICAgIENQUHJlZGljYXRlICAgX3ByZWRpY2F0ZSA7XG4gICAgQ1BFeHByZXNzaW9uICBfdHJ1ZUV4cHJlc3Npb24gO1xuICAgIENQRXhwcmVzc2lvbiAgX2ZhbHNlRXhwcmVzc2lvbiA7XG59XG5cblxuLSAoQ1BQcmVkaWNhdGUpcHJlZGljYXRlXG57XG4gICAgcmV0dXJuIF9wcmVkaWNhdGU7XG59XG4tICh2b2lkKV9zZXRQcmVkaWNhdGU6KENQUHJlZGljYXRlKW5ld1ZhbHVlXG57XG4gICAgX3ByZWRpY2F0ZSA9IG5ld1ZhbHVlO1xufVxuLSAoQ1BFeHByZXNzaW9uKXRydWVFeHByZXNzaW9uXG57XG4gICAgcmV0dXJuIF90cnVlRXhwcmVzc2lvbjtcbn1cbi0gKHZvaWQpX3NldFRydWVFeHByZXNzaW9uOihDUEV4cHJlc3Npb24pbmV3VmFsdWVcbntcbiAgICBfdHJ1ZUV4cHJlc3Npb24gPSBuZXdWYWx1ZTtcbn1cbi0gKENQRXhwcmVzc2lvbilmYWxzZUV4cHJlc3Npb25cbntcbiAgICByZXR1cm4gX2ZhbHNlRXhwcmVzc2lvbjtcbn1cbi0gKHZvaWQpX3NldEZhbHNlRXhwcmVzc2lvbjooQ1BFeHByZXNzaW9uKW5ld1ZhbHVlXG57XG4gICAgX2ZhbHNlRXhwcmVzc2lvbiA9IG5ld1ZhbHVlO1xufVxuXG5AZW5kIl19t;6699;

objj_executeFile("_CPPredicate.j", YES);objj_executeFile("_CPExpression.j", YES);
{var the_class = objj_allocateClassPair(CPExpression, "_CPConditionalExpression"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_predicate", "CPPredicate"), new objj_ivar("_trueExpression", "CPExpression"), new objj_ivar("_falseExpression", "CPExpression")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("predicate"), function $_CPConditionalExpression__predicate(self, _cmd)
{
    return self._predicate;
}

,["CPPredicate"]), new objj_method(sel_getUid("_setPredicate:"), function $_CPConditionalExpression___setPredicate_(self, _cmd, newValue)
{
    self._predicate = newValue;
}

,["void","CPPredicate"]), new objj_method(sel_getUid("trueExpression"), function $_CPConditionalExpression__trueExpression(self, _cmd)
{
    return self._trueExpression;
}

,["CPExpression"]), new objj_method(sel_getUid("_setTrueExpression:"), function $_CPConditionalExpression___setTrueExpression_(self, _cmd, newValue)
{
    self._trueExpression = newValue;
}

,["void","CPExpression"]), new objj_method(sel_getUid("falseExpression"), function $_CPConditionalExpression__falseExpression(self, _cmd)
{
    return self._falseExpression;
}

,["CPExpression"]), new objj_method(sel_getUid("_setFalseExpression:"), function $_CPConditionalExpression___setFalseExpression_(self, _cmd, newValue)
{
    self._falseExpression = newValue;
}

,["void","CPExpression"]), new objj_method(sel_getUid("initWithPredicate:trueExpression:falseExpression:"), function $_CPConditionalExpression__initWithPredicate_trueExpression_falseExpression_(self, _cmd, aPredicate, trueExpression, falseExpression)
{
    self = (objj_getClass("_CPConditionalExpression").super_class.method_dtable["initWithExpressionType:"] || _objj_forward)(self, "initWithExpressionType:", CPConditionalExpressionType);
    if (self)
    {
        self._predicate = aPredicate;
        self._trueExpression = trueExpression;
        self._falseExpression = falseExpression;
    }
    return self;
}

,["id","CPPredicate","CPExpression","CPExpression"]), new objj_method(sel_getUid("isEqual:"), function $_CPConditionalExpression__isEqual_(self, _cmd, object)
{
    if (self === object)
        return YES;
    if (object === nil || object.isa !== self.isa || !((___r1 = (object == null ? null : (object.isa.method_msgSend["predicate"] || _objj_forward)(object, (object.isa.method_dtable["predicate"], "predicate")))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, "isEqual:", self._predicate)) || !((___r1 = (object == null ? null : (object.isa.method_msgSend["trueExpression"] || _objj_forward)(object, (object.isa.method_dtable["trueExpression"], "trueExpression")))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, "isEqual:", self._trueExpression)) || !((___r1 = (object == null ? null : (object.isa.method_msgSend["falseExpression"] || _objj_forward)(object, (object.isa.method_dtable["falseExpression"], "falseExpression")))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, "isEqual:", self._falseExpression)))
        return NO;
    return YES;
    var ___r1;
}

,["BOOL","id"]), new objj_method(sel_getUid("expressionValueWithObject:context:"), function $_CPConditionalExpression__expressionValueWithObject_context_(self, _cmd, object, context)
{
    var eval = ((___r1 = self._predicate), ___r1 == null ? null : (___r1.isa.method_msgSend["evaluateWithObject:substitutionVariables:"] || _objj_forward)(___r1, (self._predicate.isa.method_dtable["evaluateWithObject:substitutionVariables:"], self._predicate.isa.method_dtable["evaluateWithObject:substitutionVariables:"], "evaluateWithObject:substitutionVariables:"), object, context)),
        exp = eval ? self._trueExpression : self._falseExpression;
    return (exp == null ? null : (exp.isa.method_msgSend["expressionValueWithObject:context:"] || _objj_forward)(exp, (exp.isa.method_dtable["expressionValueWithObject:context:"], exp.isa.method_dtable["expressionValueWithObject:context:"], "expressionValueWithObject:context:"), object, context));
    var ___r1;
}

,["id","id","CPDictionary"]), new objj_method(sel_getUid("_expressionWithSubstitutionVariables:"), function $_CPConditionalExpression___expressionWithSubstitutionVariables_(self, _cmd, bindings)
{
    var predicate = ((___r1 = self._predicate), ___r1 == null ? null : (___r1.isa.method_msgSend["predicateWithSubstitutionVariables:"] || _objj_forward)(___r1, (self._predicate.isa.method_dtable["predicateWithSubstitutionVariables:"], "predicateWithSubstitutionVariables:"), bindings)),
        trueExp = ((___r1 = self._trueExpression), ___r1 == null ? null : (___r1.isa.method_msgSend["_expressionWithSubstitutionVariables:"] || _objj_forward)(___r1, (self._trueExpression.isa.method_dtable["_expressionWithSubstitutionVariables:"], "_expressionWithSubstitutionVariables:"), bindings)),
        falseExp = ((___r1 = self._falseExpression), ___r1 == null ? null : (___r1.isa.method_msgSend["_expressionWithSubstitutionVariables:"] || _objj_forward)(___r1, (self._falseExpression.isa.method_dtable["_expressionWithSubstitutionVariables:"], "_expressionWithSubstitutionVariables:"), bindings));
    return ((___r1 = (_CPConditionalExpression.isa.method_msgSend["alloc"] || _objj_forward)(_CPConditionalExpression, (_CPConditionalExpression.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithPredicate:trueExpression:falseExpression:"] || _objj_forward)(___r1, "initWithPredicate:trueExpression:falseExpression:", predicate, trueExp, falseExp));
    var ___r1;
}

,["CPExpression","CPDictionary"]), new objj_method(sel_getUid("description"), function $_CPConditionalExpression__description(self, _cmd)
{
    return (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "TERNARY(%@,%@,%@)", ((___r1 = self._predicate), ___r1 == null ? null : (___r1.isa.method_msgSend["predicateFormat"] || _objj_forward)(___r1, (self._predicate.isa.method_dtable["predicateFormat"], "predicateFormat"))), ((___r1 = self._trueExpression), ___r1 == null ? null : (___r1.isa.method_msgSend["description"] || _objj_forward)(___r1, (self._trueExpression.isa.method_dtable["description"], "description"))), ((___r1 = self._falseExpression), ___r1 == null ? null : (___r1.isa.method_msgSend["description"] || _objj_forward)(___r1, (self._falseExpression.isa.method_dtable["description"], "description"))));
    var ___r1;
}

,["CPString"])]);
}
p;33;CPComparisonPredicate_Constants.jt;8431;@STATIC;1.0;S;7656;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQQ29tcGFyaXNvblByZWRpY2F0ZV9Db25zdGFudHMuaiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQTZCQSx5QixHQUEwQyxDQUExQztBQVFBLHNCLEdBQTBDLENBQTFDO0FBUUEsc0IsR0FBMEMsQ0FBMUM7QUFPQSxnQyxHQUEwQyxDQUExQztBQU1BLHFDLEdBQTBDLENBQTFDO0FBQ0EsNEIsR0FBMEMsR0FBMUM7QUFPQSwrQixHQUEwQyxDQUExQztBQU1BLHdDLEdBQTJDLENBQTNDO0FBTUEsa0MsR0FBMEMsQ0FBMUM7QUFNQSwyQyxHQUE4QyxDQUE5QztBQU1BLDhCLEdBQTBDLENBQTFDO0FBTUEsaUMsR0FBMEMsQ0FBMUM7QUFNQSw4QixHQUEwQyxDQUExQztBQU1BLDJCLEdBQTBDLENBQTFDO0FBTUEsaUMsR0FBMEMsQ0FBMUM7QUFNQSwrQixHQUEwQyxDQUExQztBQVFBLHlCLEdBQTBDLEVBQTFDO0FBUUEscUMsR0FBMEMsRUFBMUM7QUFRQSwrQixHQUEwQyxFQUExQztBQVFBLDhCLEdBQTBDLEdBQTFDIiwiZmlsZSI6IkNQQ29tcGFyaXNvblByZWRpY2F0ZV9Db25zdGFudHMuanMiLCJzb3VyY2VSb290IjoiZmlsZTovVXNlcnMvZGF2aWQvcHJvZ3JhbXMvY2FwcHVjY2luby9Gb3VuZGF0aW9uLyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDUENvbXBhcmlzb25QcmVkaWNhdGVfQ29uc3RhbnRzLmpcbiAqXG4gKiBQb3J0aW9ucyBiYXNlZCBvbiBOU0NvbXBhcmlzb25QcmVkaWNhdGUubSBpbiBDb2NvdHJvbiAoaHR0cDovL3d3dy5jb2NvdHJvbi5vcmcvKVxuICogQ29weXJpZ2h0IChjKSAyMDA2LTIwMDcgQ2hyaXN0b3BoZXIgSi4gVy4gTGxveWRcbiAqXG4gKiBDcmVhdGVkIGJ5IGNhY2FvZGV2LlxuICogQ29weXJpZ2h0IDIwMTAuXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyXG4gKiB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmVcbiAqIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5rbGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgMDIxMTAtMTMwMSBVU0FcbiAqL1xuXG4vKiFcbiAgICBBIHByZWRpY2F0ZSB0byBkaXJlY3RseSBjb21wYXJlIHRoZSBsZWZ0IGFuZCByaWdodCBoYW5kIHNpZGVzLlxuICAgIEBnbG9iYWxcbiAgICBAY2xhc3MgQ1BDb21wYXJpc29uUHJlZGljYXRlXG4qL1xuQ1BEaXJlY3RQcmVkaWNhdGVNb2RpZmllciAgICAgICAgICAgICAgID0gMDtcbi8qIVxuICAgIEEgcHJlZGljYXRlIHRvIGNvbXBhcmUgYWxsIGVudHJpZXMgaW4gdGhlIGRlc3RpbmF0aW9uIG9mIGEgdG8tbWFueSByZWxhdGlvbnNoaXAuXG5cbiAgICBUaGUgbGVmdCBoYW5kIHNpZGUgbXVzdCBiZSBhIGNvbGxlY3Rpb24uIFRoZSBjb3JyZXNwb25kaW5nIHByZWRpY2F0ZSBjb21wYXJlcyBlYWNoIHZhbHVlIGluIHRoZSBsZWZ0IGhhbmQgc2lkZSB3aXRoIHRoZSByaWdodCBoYW5kIHNpZGUsIGFuZCByZXR1cm5zIE5PIHdoZW4gaXQgZmluZHMgdGhlIGZpcnN0IG1pc21hdGNo4oCUb3IgWUVTIGlmIGFsbCBtYXRjaC5cbiAgICBAZ2xvYmFsXG4gICAgQGNsYXNzIENQQ29tcGFyaXNvblByZWRpY2F0ZVxuKi9cbkNQQWxsUHJlZGljYXRlTW9kaWZpZXIgICAgICAgICAgICAgICAgICA9IDE7XG4vKiFcbiAgICBBIHByZWRpY2F0ZSB0byBtYXRjaCB3aXRoIGFueSBlbnRyeSBpbiB0aGUgZGVzdGluYXRpb24gb2YgYSB0by1tYW55IHJlbGF0aW9uc2hpcC5cblxuICAgIFRoZSBsZWZ0IGhhbmQgc2lkZSBtdXN0IGJlIGEgY29sbGVjdGlvbi4gVGhlIGNvcnJlc3BvbmRpbmcgcHJlZGljYXRlIGNvbXBhcmVzIGVhY2ggdmFsdWUgaW4gdGhlIGxlZnQgaGFuZCBzaWRlIGFnYWluc3QgdGhlIHJpZ2h0IGhhbmQgc2lkZSBhbmQgcmV0dXJucyBZRVMgd2hlbiBpdCBmaW5kcyB0aGUgZmlyc3QgbWF0Y2jigJRvciBOTyBpZiBubyBtYXRjaCBpcyBmb3VuZC5cbiAgICBAZ2xvYmFsXG4gICAgQGNsYXNzIENQQ29tcGFyaXNvblByZWRpY2F0ZVxuKi9cbkNQQW55UHJlZGljYXRlTW9kaWZpZXIgICAgICAgICAgICAgICAgICA9IDI7XG5cbi8qIVxuICAgIEEgY2FzZS1pbnNlbnNpdGl2ZSBwcmVkaWNhdGUuXG4gICAgQGdsb2JhbFxuICAgIEBjbGFzcyBDUENvbXBhcmlzb25QcmVkaWNhdGVcbiovXG5DUENhc2VJbnNlbnNpdGl2ZVByZWRpY2F0ZU9wdGlvbiAgICAgICAgPSAxO1xuLyohXG4gICAgQSBkaWFjcml0aWMtaW5zZW5zaXRpdmUgcHJlZGljYXRlLlxuICAgIEBnbG9iYWxcbiAgICBAY2xhc3MgQ1BDb21wYXJpc29uUHJlZGljYXRlXG4qL1xuQ1BEaWFjcml0aWNJbnNlbnNpdGl2ZVByZWRpY2F0ZU9wdGlvbiAgID0gMjtcbkNQRGlhY3JpdGljSW5zZW5zaXRpdmVTZWFyY2ggICAgICAgICAgICA9IDEyODtcblxuLyohXG4gICAgQSBsZXNzLXRoYW4gcHJlZGljYXRlLlxuICAgIEBnbG9iYWxcbiAgICBAY2xhc3MgQ1BDb21wYXJpc29uUHJlZGljYXRlXG4qL1xuQ1BMZXNzVGhhblByZWRpY2F0ZU9wZXJhdG9yVHlwZSAgICAgICAgID0gMDtcbi8qIVxuICAgIEEgbGVzcy10aGFuLW9yLWVxdWFsLXRvIHByZWRpY2F0ZS5cbiAgICBAZ2xvYmFsXG4gICAgQGNsYXNzIENQQ29tcGFyaXNvblByZWRpY2F0ZVxuKi9cbkNQTGVzc1RoYW5PckVxdWFsVG9QcmVkaWNhdGVPcGVyYXRvclR5cGUgPSAxO1xuLyohXG4gICAgQSBncmVhdGVyLXRoYW4gcHJlZGljYXRlLlxuICAgIEBnbG9iYWxcbiAgICBAY2xhc3MgQ1BDb21wYXJpc29uUHJlZGljYXRlXG4qL1xuQ1BHcmVhdGVyVGhhblByZWRpY2F0ZU9wZXJhdG9yVHlwZSAgICAgID0gMjtcbi8qIVxuICAgIEEgZ3JlYXRlci10aGFuLW9yLWVxdWFsLXRvIHByZWRpY2F0ZS5cbiAgICBAZ2xvYmFsXG4gICAgQGNsYXNzIENQQ29tcGFyaXNvblByZWRpY2F0ZVxuKi9cbkNQR3JlYXRlclRoYW5PckVxdWFsVG9QcmVkaWNhdGVPcGVyYXRvclR5cGUgPSAzO1xuLyohXG4gICAgQW4gZXF1YWwtdG8gcHJlZGljYXRlLlxuICAgIEBnbG9iYWxcbiAgICBAY2xhc3MgQ1BDb21wYXJpc29uUHJlZGljYXRlXG4qL1xuQ1BFcXVhbFRvUHJlZGljYXRlT3BlcmF0b3JUeXBlICAgICAgICAgID0gNDtcbi8qIVxuICAgIEEgbm90LWVxdWFsLXRvIHByZWRpY2F0ZS5cbiAgICBAZ2xvYmFsXG4gICAgQGNsYXNzIENQQ29tcGFyaXNvblByZWRpY2F0ZVxuKi9cbkNQTm90RXF1YWxUb1ByZWRpY2F0ZU9wZXJhdG9yVHlwZSAgICAgICA9IDU7XG4vKiFcbiAgICBBIGZ1bGwgcmVndWxhciBleHByZXNzaW9uIG1hdGNoaW5nIHByZWRpY2F0ZS5cbiAgICBAZ2xvYmFsXG4gICAgQGNsYXNzIENQQ29tcGFyaXNvblByZWRpY2F0ZVxuKi9cbkNQTWF0Y2hlc1ByZWRpY2F0ZU9wZXJhdG9yVHlwZSAgICAgICAgICA9IDY7XG4vKiFcbiAgICBBIHNpbXBsZSBzdWJzZXQgb2YgdGhlIG1hdGNoZXMgcHJlZGljYXRlLCBzaW1pbGFyIGluIGJlaGF2aW9yIHRvIFNRTCBMSUtFLlxuICAgIEBnbG9iYWxcbiAgICBAY2xhc3MgQ1BDb21wYXJpc29uUHJlZGljYXRlXG4qL1xuQ1BMaWtlUHJlZGljYXRlT3BlcmF0b3JUeXBlICAgICAgICAgICAgID0gNztcbi8qIVxuICAgIEEgYmVnaW5zLXdpdGggcHJlZGljYXRlLlxuICAgIEBnbG9iYWxcbiAgICBAY2xhc3MgQ1BDb21wYXJpc29uUHJlZGljYXRlXG4qL1xuQ1BCZWdpbnNXaXRoUHJlZGljYXRlT3BlcmF0b3JUeXBlICAgICAgID0gODtcbi8qIVxuICAgIEFuIGVuZHMtd2l0aCBwcmVkaWNhdGUuXG4gICAgQGdsb2JhbFxuICAgIEBjbGFzcyBDUENvbXBhcmlzb25QcmVkaWNhdGVcbiovXG5DUEVuZHNXaXRoUHJlZGljYXRlT3BlcmF0b3JUeXBlICAgICAgICAgPSA5O1xuLyohXG4gICAgQSBwcmVkaWNhdGUgdG8gZGV0ZXJtaW5lIGlmIHRoZSBsZWZ0IGhhbmQgc2lkZSBpcyBpbiB0aGUgcmlnaHQgaGFuZCBzaWRlLlxuXG4gICAgRm9yIHN0cmluZ3MsIHJldHVybnMgWUVTIGlmIHRoZSBsZWZ0IGhhbmQgc2lkZSBpcyBhIHN1YnN0cmluZyBvZiB0aGUgcmlnaHQgaGFuZCBzaWRlLiBGb3IgY29sbGVjdGlvbnMsIHJldHVybnMgWUVTIGlmIHRoZSBsZWZ0IGhhbmQgc2lkZSBpcyBpbiB0aGUgcmlnaHQgaGFuZCBzaWRlLlxuICAgIEBnbG9iYWxcbiAgICBAY2xhc3MgQ1BDb21wYXJpc29uUHJlZGljYXRlXG4qL1xuQ1BJblByZWRpY2F0ZU9wZXJhdG9yVHlwZSAgICAgICAgICAgICAgID0gMTA7XG4vKiFcbiAgICBQcmVkaWNhdGUgdGhhdCB1c2VzIGEgY3VzdG9tIHNlbGVjdG9yIHRoYXQgdGFrZXMgYSBzaW5nbGUgYXJndW1lbnQgYW5kIHJldHVybnMgYSBCT09MIHZhbHVlLlxuXG4gICAgVGhlIHNlbGVjdG9yIGlzIGludm9rZWQgb24gdGhlIGxlZnQgaGFuZCBzaWRlIHdpdGggdGhlIHJpZ2h0IGhhbmQgc2lkZS5cbiAgICBAZ2xvYmFsXG4gICAgQGNsYXNzIENQQ29tcGFyaXNvblByZWRpY2F0ZVxuKi9cbkNQQ3VzdG9tU2VsZWN0b3JQcmVkaWNhdGVPcGVyYXRvclR5cGUgICA9IDExO1xuLyohXG4gICAgQSBwcmVkaWNhdGUgdG8gZGV0ZXJtaW5lIGlmIHRoZSBsZWZ0IGhhbmQgc2lkZSBjb250YWlucyB0aGUgcmlnaHQgaGFuZCBzaWRlLlxuXG4gICAgUmV0dXJucyBZRVMgaWYgW2xocyBjb250YWlucyByaHNdOyB0aGUgbGVmdCBoYW5kIHNpZGUgbXVzdCBiZSBhIENQRXhwcmVzc2lvbiBvYmplY3QgdGhhdCBldmFsdWF0ZXMgdG8gYSBjb2xsZWN0aW9uXG4gICAgQGdsb2JhbFxuICAgIEBjbGFzcyBDUENvbXBhcmlzb25QcmVkaWNhdGVcbiovXG5DUENvbnRhaW5zUHJlZGljYXRlT3BlcmF0b3JUeXBlICAgICAgICAgPSA5OTtcbi8qIVxuICAgIEEgcHJlZGljYXRlIHRvIGRldGVybWluZSBpZiB0aGUgcmlnaHQgaGFuZCBzaWRlIGxpZXMgYmV0d2VlbiBib3VuZHMgc3BlY2lmaWVkIGJ5IHRoZSBsZWZ0IGhhbmQgc2lkZS5cblxuICAgIFJldHVybnMgWUVTIGlmIFtsaHMgYmV0d2VlbiByaHNdOyB0aGUgcmlnaHQgaGFuZCBzaWRlIG11c3QgYmUgYW4gYXJyYXkgaW4gd2hpY2ggdGhlIGZpcnN0IGVsZW1lbnQgc2V0cyB0aGUgbG93ZXIgYm91bmQgYW5kIHRoZSBzZWNvbmQgZWxlbWVudCB0aGUgdXBwZXIsIGluY2x1c2l2ZS4gQ29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgdXNpbmcgY29tcGFyZTogb3IgdGhlIGNsYXNzLWFwcHJvcHJpYXRlIGVxdWl2YWxlbnQuXG4gICAgQGdsb2JhbFxuICAgIEBjbGFzcyBDUENvbXBhcmlzb25QcmVkaWNhdGVcbiovXG5DUEJldHdlZW5QcmVkaWNhdGVPcGVyYXRvclR5cGUgICAgICAgICAgPSAxMDA7XG4iXX0=t;750;

CPDirectPredicateModifier = 0;
CPAllPredicateModifier = 1;
CPAnyPredicateModifier = 2;
CPCaseInsensitivePredicateOption = 1;
CPDiacriticInsensitivePredicateOption = 2;
CPDiacriticInsensitiveSearch = 128;
CPLessThanPredicateOperatorType = 0;
CPLessThanOrEqualToPredicateOperatorType = 1;
CPGreaterThanPredicateOperatorType = 2;
CPGreaterThanOrEqualToPredicateOperatorType = 3;
CPEqualToPredicateOperatorType = 4;
CPNotEqualToPredicateOperatorType = 5;
CPMatchesPredicateOperatorType = 6;
CPLikePredicateOperatorType = 7;
CPBeginsWithPredicateOperatorType = 8;
CPEndsWithPredicateOperatorType = 9;
CPInPredicateOperatorType = 10;
CPCustomSelectorPredicateOperatorType = 11;
CPContainsPredicateOperatorType = 99;
CPBetweenPredicateOperatorType = 100;
p;13;CPPredicate.jt;2063;@STATIC;1.0;i;14;_CPPredicate.ji;21;CPCompoundPredicate.ji;23;CPComparisonPredicate.ji;14;CPExpression.jS;1768;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQUHJlZGljYXRlLmoiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUF3QkEsa0Isc0JBQ0Esa0IsNkJBQ0Esa0IsK0JBQ0Esa0IiLCJmaWxlIjoiQ1BQcmVkaWNhdGUuanMiLCJzb3VyY2VSb290IjoiZmlsZTovVXNlcnMvZGF2aWQvcHJvZ3JhbXMvY2FwcHVjY2luby9Gb3VuZGF0aW9uLyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDUFByZWRpY2F0ZS5qXG4gKlxuICogQ1BQcmVkaWNhdGUgcGFyc2luZyBiYXNlZCBvbiBOU1ByZWRpY2F0ZS5tIGluIEdOVVN0ZXAgQmFzZSBMaWJyYXJ5IChodHRwOi8vd3d3LmdudXN0ZXAub3JnLylcbiAqIENvcHlyaWdodCAoYykgMjAwNSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24uXG4gKlxuICogQ3JlYXRlZCBieSBjYWNhb2Rldi5cbiAqIENvcHlyaWdodCAyMDEwLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlclxuICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlXG4gKiBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BIDAyMTEwLTEzMDEgVVNBXG4gKi9cblxuQGltcG9ydCBcIl9DUFByZWRpY2F0ZS5qXCJcbkBpbXBvcnQgXCJDUENvbXBvdW5kUHJlZGljYXRlLmpcIlxuQGltcG9ydCBcIkNQQ29tcGFyaXNvblByZWRpY2F0ZS5qXCJcbkBpbXBvcnQgXCJDUEV4cHJlc3Npb24ualwiXG4iXX0=t;178;

objj_executeFile("_CPPredicate.j", YES);objj_executeFile("CPCompoundPredicate.j", YES);objj_executeFile("CPComparisonPredicate.j", YES);objj_executeFile("CPExpression.j", YES);p;23;_CPVariableExpression.jt;11901;@STATIC;1.0;i;14;CPDictionary.ji;13;CPException.ji;10;CPString.ji;15;_CPExpression.jS;6508;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9DUFZhcmlhYmxlRXhwcmVzc2lvbi5qIiwidW5kZWZpbmVkX19DUFZhcmlhYmxlRXhwcmVzc2lvbl9BY2Nlc3NvcnMiXSwibmFtZXMiOlsic2VsZiJdLCJtYXBwaW5ncyI6Ijs7QUF3QkEsa0Isc0JBQ0Esa0IscUJBQ0Esa0Isa0JBQ0Esa0IsdUJBRUE7QUFBQTtBQUFBLDJCLDJCQUFBLHNDOzZCQ3ZCQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLGM7QUFEWCxDOztnQkFHQSw0Qiw0RUFBK0IsUTtBQUMvQjtJQUNJLGMsR0FBWSxRQUFaO0FBREosQzs7dUJEdUJBLDRCLG9GQUFpQyxRO0FBQ2pDO0lBQ0lBLEksR0FBTyxDLGtEQUFBLGdCLHVCQUFBLHNEQUE4Qix3QkFBOUIsQ0FBUDtJQUVBLElBQUlBLElBQUo7SUFDQTtRQUNJLGMsR0FBWSxDQUFDLFFBQUQsbUJBQUMsUUFBRCw4Q0FBQyxRQUFELEdBQVUsa0NBQVYsV0FBWjtJQURKLEM7SUFHQSxNLENBQU9BLEk7QUFQWCxDOztxQkFVQSw0QixrRUFBb0IsTTtBQUNwQjtJQUNJLElBQUlBLEksQ0FBQSxHLENBQVMsTUFBYjtRQUNJLE0sQ0FBTyxHO0lBRVgsSUFBSSxNLENBQUEsRyxDQUFXLEcsSUFBTyxPQUFPLEcsQ0FBUCxHLENBQWVBLElBQUEsQ0FBSyxHLElBQU8sQ0FBQyxVQUFDLENBQUMsTUFBRCxtQkFBQyxNQUFELGtEQUFDLE1BQUQsR0FBUSxvQ0FBUixlQUFELHFHQUEyQixjQUEzQixFQUFsRDtRQUNJLE0sQ0FBTyxFO0lBRVgsTSxDQUFPLEc7O0FBUFgsQzs7aUJBVUEsNEIsc0hBQWdDLE0sRUFBNkIsTztBQUM3RDtJQUNJLElBQUksVSxHQUFhLENBQUNBLElBQUQsK0VBQUNBLElBQUQsR0FBTSwrREFBTiw0Q0FBMkMsT0FBM0MsQ0FBakI7SUFFQSxNLENBQU8sQ0FBQyxVQUFELG1CQUFDLFVBQUQsNEVBQUMsVUFBRCxHQUFZLGtFQUFaLEVBQTZDLGtFQUE3Qyx5Q0FBc0MsTUFBdEMsRUFBcUQsT0FBckQsRTtBQUhYLEM7OzhCQU1BLDRCO0FBQ0E7SUFDSSxNLENBQU8sQ0FBQyxRQUFELDJEQUFDLFFBQUQsR0FBVSwrQ0FBVix3QkFBMkIsS0FBM0IsRUFBbUMsY0FBbkMsQztBQURYLEM7O2dCQUlBLDRCLDRIQUFtRSxTO0FBQ25FO0lBQ0ksSUFBSSxLLEdBQVEsQ0FBQyxTQUFELG1CQUFDLFNBQUQsdURBQUMsU0FBRCxHQUFXLDRDQUFYLG9CQUF3QixjQUF4QixFQUFaO0lBQ0EsSUFBSSxLLENBQUEsRSxDQUFTLEdBQWI7UUFDSSxDQUFDLFdBQUQsdURBQUMsV0FBRCxHQUFhLDhDQUFiLEVBQThDLDhDQUE5QyxvQkFBbUIsMEJBQW5CLEVBQXFELHVCLENBQUEsQyxDQUEyQixjLENBQTNCLEMsQ0FBdUMsZSxDQUF2QyxDLENBQXlELFNBQTlHO0lBRUosSUFBSSxDQUFDLEtBQUQsbUJBQUMsS0FBRCx3REFBQyxLQUFELEdBQU8seUNBQVAscUJBQXFCLENBQUMsWUFBRCwrQ0FBQyxZQUFELEdBQWMsdUNBQWQsV0FBckIsRUFBSjtRQUNJLE0sQ0FBTyxLO0lBRVgsTSxDQUFPLENBQUMsWUFBRCxxRUFBQyxZQUFELEdBQWMsNkRBQWQsa0NBQXlDLEtBQXpDLEM7QUFSWCxDOzs7O0FBYUEsSUFBSSxhLEdBQWdCLFlBQXBCO0FBRUE7QUFBQTs7NERBRUEsNEIsOEVBQTZCLEs7QUFDN0I7SUFDSSxJQUFJLFEsR0FBVyxDQUFDLEtBQUQsbUJBQUMsS0FBRCw2REFBQyxLQUFELEdBQU8sOENBQVAsMEJBQTBCLGFBQTFCLEVBQWY7SUFDQSxNLENBQU8sQ0FBQ0EsSUFBRCwyREFBQ0EsSUFBRCxHQUFNLDJDQUFOLHdCQUF1QixRQUF2QixDO0FBRlgsQzs7b0JBS0EsNEIsa0ZBQWlDLEs7QUFDakM7SUFDSSxDQUFDLEtBQUQsbUJBQUMsS0FBRCw4REFBQyxLQUFELEdBQU8sK0NBQVAsRUFBOEIsK0NBQTlCLDJCQUFvQixjQUFwQixFQUFxQyxhQUFyQztBQURKLEMiLCJmaWxlIjoiX0NQVmFyaWFibGVFeHByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6ImZpbGU6L1VzZXJzL2RhdmlkL3Byb2dyYW1zL2NhcHB1Y2Npbm8vRm91bmRhdGlvbi8iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogX0NQVmFyaWFibGVFeHByZXNzaW9uLmpcbiAqXG4gKiBQb3J0aW9ucyBiYXNlZCBvbiBOU0V4cHJlc3Npb25fdmFyaWFibGUubSBpbiBDb2NvdHJvbiAoaHR0cDovL3d3dy5jb2NvdHJvbi5vcmcvKVxuICogQ29weXJpZ2h0IChjKSAyMDA2LTIwMDcgQ2hyaXN0b3BoZXIgSi4gVy4gTGxveWRcbiAqXG4gKiBDcmVhdGVkIGJ5IGNhY2FvZGV2LlxuICogQ29weXJpZ2h0IDIwMTAuXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyXG4gKiB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmVcbiAqIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5rbGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgMDIxMTAtMTMwMSBVU0FcbiAqL1xuXG5AaW1wb3J0IFwiQ1BEaWN0aW9uYXJ5LmpcIlxuQGltcG9ydCBcIkNQRXhjZXB0aW9uLmpcIlxuQGltcG9ydCBcIkNQU3RyaW5nLmpcIlxuQGltcG9ydCBcIl9DUEV4cHJlc3Npb24ualwiXG5cbkBpbXBsZW1lbnRhdGlvbiBfQ1BWYXJpYWJsZUV4cHJlc3Npb24gOiAgQ1BFeHByZXNzaW9uXG57XG4gICAgQ1BTdHJpbmcgX3ZhcmlhYmxlIEBhY2Nlc3NvcnMoZ2V0dGVyPXZhcmlhYmxlKTtcbn1cblxuLSAoaWQpaW5pdFdpdGhWYXJpYWJsZTooQ1BTdHJpbmcpdmFyaWFibGVcbntcbiAgICBzZWxmID0gW3N1cGVyIGluaXRXaXRoRXhwcmVzc2lvblR5cGU6Q1BWYXJpYWJsZUV4cHJlc3Npb25UeXBlXTtcblxuICAgIGlmIChzZWxmKVxuICAgIHtcbiAgICAgICAgX3ZhcmlhYmxlID0gW3ZhcmlhYmxlIGNvcHldO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZjtcbn1cblxuLSAoQk9PTClpc0VxdWFsOihpZClvYmplY3RcbntcbiAgICBpZiAoc2VsZiA9PT0gb2JqZWN0KVxuICAgICAgICByZXR1cm4gWUVTO1xuXG4gICAgaWYgKG9iamVjdCA9PT0gbmlsIHx8IG9iamVjdC5pc2EgIT09IHNlbGYuaXNhIHx8ICFbW29iamVjdCB2YXJpYWJsZV0gaXNFcXVhbDpfdmFyaWFibGVdKVxuICAgICAgICByZXR1cm4gTk87XG5cbiAgICByZXR1cm4gWUVTO1xufVxuXG4tIChpZClleHByZXNzaW9uVmFsdWVXaXRoT2JqZWN0Om9iamVjdCBjb250ZXh0OihDUERpY3Rpb25hcnkpY29udGV4dFxue1xuICAgIHZhciBleHByZXNzaW9uID0gW3NlbGYgX2V4cHJlc3Npb25XaXRoU3Vic3RpdHV0aW9uVmFyaWFibGVzOmNvbnRleHRdO1xuXG4gICAgcmV0dXJuIFtleHByZXNzaW9uIGV4cHJlc3Npb25WYWx1ZVdpdGhPYmplY3Q6b2JqZWN0IGNvbnRleHQ6Y29udGV4dF07XG59XG5cbi0gKENQU3RyaW5nKWRlc2NyaXB0aW9uXG57XG4gICAgcmV0dXJuIFtDUFN0cmluZyBzdHJpbmdXaXRoRm9ybWF0OkBcIiQlc1wiLCBfdmFyaWFibGVdO1xufVxuXG4tIChDUEV4cHJlc3Npb24pX2V4cHJlc3Npb25XaXRoU3Vic3RpdHV0aW9uVmFyaWFibGVzOihDUERpY3Rpb25hcnkpdmFyaWFibGVzXG57XG4gICAgdmFyIHZhbHVlID0gW3ZhcmlhYmxlcyBvYmplY3RGb3JLZXk6X3ZhcmlhYmxlXTtcbiAgICBpZiAodmFsdWUgPT0gbmlsKVxuICAgICAgICBbQ1BFeGNlcHRpb24gcmFpc2U6Q1BJbnZhbGlkQXJndW1lbnRFeGNlcHRpb24gcmVhc29uOkBcIkNhbid0IGdldCB2YWx1ZSBmb3IgJ1wiICsgX3ZhcmlhYmxlICsgXCInIGluIGJpbmRpbmdzXCIgKyB2YXJpYWJsZXNdO1xuXG4gICAgaWYgKFt2YWx1ZSBpc0tpbmRPZkNsYXNzOltDUEV4cHJlc3Npb24gY2xhc3NdXSlcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuXG4gICAgcmV0dXJuIFtDUEV4cHJlc3Npb24gZXhwcmVzc2lvbkZvckNvbnN0YW50VmFsdWU6dmFsdWVdO1xufVxuXG5AZW5kXG5cbnZhciBDUFZhcmlhYmxlS2V5ID0gQFwiQ1BWYXJpYWJsZVwiO1xuXG5AaW1wbGVtZW50YXRpb24gX0NQVmFyaWFibGVFeHByZXNzaW9uIChDUENvZGluZylcblxuLSAoaWQpaW5pdFdpdGhDb2RlcjooQ1BDb2Rlciljb2Rlclxue1xuICAgIHZhciB2YXJpYWJsZSA9IFtjb2RlciBkZWNvZGVPYmplY3RGb3JLZXk6Q1BWYXJpYWJsZUtleV07XG4gICAgcmV0dXJuIFtzZWxmIGluaXRXaXRoVmFyaWFibGU6dmFyaWFibGVdO1xufVxuXG4tICh2b2lkKWVuY29kZVdpdGhDb2RlcjooQ1BDb2Rlciljb2Rlclxue1xuICAgIFtjb2RlciBlbmNvZGVPYmplY3Q6X3ZhcmlhYmxlIGZvcktleTpDUFZhcmlhYmxlS2V5XTtcbn1cblxuQGVuZFxuIiwiQGltcGxlbWVudGF0aW9uIF9DUFZhcmlhYmxlRXhwcmVzc2lvbiA6ICBDUEV4cHJlc3Npb25cbntcbiAgICBDUFN0cmluZyBfdmFyaWFibGUgO1xufVxuXG5cbi0gKENQU3RyaW5nKXZhcmlhYmxlXG57XG4gICAgcmV0dXJuIF92YXJpYWJsZTtcbn1cbi0gKHZvaWQpX3NldFZhcmlhYmxlOihDUFN0cmluZyluZXdWYWx1ZVxue1xuICAgIF92YXJpYWJsZSA9IG5ld1ZhbHVlO1xufVxuXG5AZW5kIl19t;5295;

objj_executeFile("CPDictionary.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPString.j", YES);objj_executeFile("_CPExpression.j", YES);
{var the_class = objj_allocateClassPair(CPExpression, "_CPVariableExpression"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_variable", "CPString")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("variable"), function $_CPVariableExpression__variable(self, _cmd)
{
    return self._variable;
}

,["CPString"]), new objj_method(sel_getUid("_setVariable:"), function $_CPVariableExpression___setVariable_(self, _cmd, newValue)
{
    self._variable = newValue;
}

,["void","CPString"]), new objj_method(sel_getUid("initWithVariable:"), function $_CPVariableExpression__initWithVariable_(self, _cmd, variable)
{
    self = (objj_getClass("_CPVariableExpression").super_class.method_dtable["initWithExpressionType:"] || _objj_forward)(self, "initWithExpressionType:", CPVariableExpressionType);
    if (self)
    {
        self._variable = (variable == null ? null : (variable.isa.method_msgSend["copy"] || _objj_forward)(variable, (variable.isa.method_dtable["copy"], "copy")));
    }
    return self;
}

,["id","CPString"]), new objj_method(sel_getUid("isEqual:"), function $_CPVariableExpression__isEqual_(self, _cmd, object)
{
    if (self === object)
        return YES;
    if (object === nil || object.isa !== self.isa || !((___r1 = (object == null ? null : (object.isa.method_msgSend["variable"] || _objj_forward)(object, (object.isa.method_dtable["variable"], "variable")))), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, "isEqual:", self._variable)))
        return NO;
    return YES;
    var ___r1;
}

,["BOOL","id"]), new objj_method(sel_getUid("expressionValueWithObject:context:"), function $_CPVariableExpression__expressionValueWithObject_context_(self, _cmd, object, context)
{
    var expression = (self.isa.method_msgSend["_expressionWithSubstitutionVariables:"] || _objj_forward)(self, (self.isa.method_dtable["_expressionWithSubstitutionVariables:"], "_expressionWithSubstitutionVariables:"), context);
    return (expression == null ? null : (expression.isa.method_msgSend["expressionValueWithObject:context:"] || _objj_forward)(expression, (expression.isa.method_dtable["expressionValueWithObject:context:"], expression.isa.method_dtable["expressionValueWithObject:context:"], "expressionValueWithObject:context:"), object, context));
}

,["id","id","CPDictionary"]), new objj_method(sel_getUid("description"), function $_CPVariableExpression__description(self, _cmd)
{
    return (CPString.isa.method_msgSend["stringWithFormat:"] || _objj_forward)(CPString, (CPString.isa.method_dtable["stringWithFormat:"], "stringWithFormat:"), "$%s", self._variable);
}

,["CPString"]), new objj_method(sel_getUid("_expressionWithSubstitutionVariables:"), function $_CPVariableExpression___expressionWithSubstitutionVariables_(self, _cmd, variables)
{
    var value = (variables == null ? null : (variables.isa.method_msgSend["objectForKey:"] || _objj_forward)(variables, (variables.isa.method_dtable["objectForKey:"], "objectForKey:"), self._variable));
    if (value == nil)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "Can't get value for '" + self._variable + "' in bindings" + variables);
    if ((value == null ? null : (value.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(value, (value.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPExpression.isa.method_msgSend["class"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["class"], "class")))))
        return value;
    return (CPExpression.isa.method_msgSend["expressionForConstantValue:"] || _objj_forward)(CPExpression, (CPExpression.isa.method_dtable["expressionForConstantValue:"], "expressionForConstantValue:"), value);
}

,["CPExpression","CPDictionary"])]);
}
var CPVariableKey = "CPVariable";
{
var the_class = objj_getClass("_CPVariableExpression")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"_CPVariableExpression\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $_CPVariableExpression__initWithCoder_(self, _cmd, coder)
{
    var variable = (coder == null ? null : (coder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPVariableKey));
    return (self.isa.method_msgSend["initWithVariable:"] || _objj_forward)(self, (self.isa.method_dtable["initWithVariable:"], "initWithVariable:"), variable);
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $_CPVariableExpression__encodeWithCoder_(self, _cmd, coder)
{
    (coder == null ? null : (coder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(coder, (coder.isa.method_dtable["encodeObject:forKey:"], coder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), self._variable, CPVariableKey));
}

,["void","CPCoder"])]);
}
p;23;_CPConcreteMutableSet.jt;12122;@STATIC;1.0;i;14;CPMutableSet.jS;7120;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9DUENvbmNyZXRlTXV0YWJsZVNldC5qIl0sIm5hbWVzIjpbInNlbGYiXSwibWFwcGluZ3MiOiI7O0FBQ0Esa0Isc0JBR0EsSUFBSSxjLEdBQWlCLE9BQU8sU0FBUCxDQUFpQixjQUF0QztBQU9BO0FBQUE7QUFBQSwyQiwyQkFBQSxvQyxFQUFBLG1DOzZCQVdBLDRCLDhGQUErQixPLEVBQTBCLE07QUFDekQ7SUFDSUEsSSxHQUFPLEMsa0RBQUEsZ0Isc0JBQUEscURBQXVCLE9BQXZCLEVBQXFDLE1BQXJDLENBQVA7SUFFQSxJQUFJQSxJQUFKO0lBQ0E7UUFDSSxXLEdBQVMsQ0FBVDtRQUNBLGMsR0FBWSxDLENBQVo7UUFFQSxJQUFJLEssR0FBUSxDO1lBQ1IsSyxHQUFRLEcsQ0FBSSxDQUFDLE9BQUQsbUJBQUMsT0FBRCwrQ0FBQyxPQUFELEdBQVMsa0NBQVQsWSxFQUFpQixNLENBRGpDO1FBR0EsSyxFQUFPLEssQ0FBQSxDLENBQVEsSyxFQUFPLEVBQUUsSztZQUNwQixDQUFDQSxJQUFELG1CQUFDQSxJQUFELG9EQUFDQSxJQUFELEdBQU0sb0NBQU4saUJBQWdCLFFBQVEsSyxDQUF4QjtJQVJSLEM7SUFXQSxNLENBQU9BLEk7QUFmWCxDOztpQ0FrQkEsNEI7QUFDQTtJQUNJLE0sQ0FBTyxXO0FBRFgsQzs7a0JBSUEsNEIsZ0VBQWlCLFE7QUFDakI7SUFDSSxJQUFJLEcsR0FBTSxDQUFDLFFBQUQsbUJBQUMsUUFBRCw2Q0FBQyxRQUFELEdBQVUsaUNBQVYsVUFBVjtJQUVBLElBQUksZUFBZSxJLENBQUssYyxFQUFXLEcsQ0FBbkM7UUFDSSxNLENBQU8sZUFBVSxHO0lBRHJCO0lBR0E7UUFDSSxLQUFLLElBQUksUyxJQUFhLGM7UUFDdEI7WUFDSSxJQUFJLENBQUMsZUFBZSxJLENBQUssYyxFQUFXLFMsQ0FBcEM7Z0JBQ0k7WUFFSixJQUFJLE0sR0FBUyxlQUFVLFMsQ0FBdkI7WUFFQSxJQUFJLE0sQ0FBQSxHLENBQVcsUSxJQUFZLENBQUMsTUFBRCxtQkFBQyxNQUFELGtEQUFDLE1BQUQsR0FBUSxvQ0FBUixlQUFnQixRQUFoQixFQUEzQjtnQkFDSSxNLENBQU8sTTtRQVBmLEM7SUFGSixDO0lBYUEsTSxDQUFPLEc7QUFuQlgsQzs7ZUFzQkEsNEI7QUFDQTtJQUNJLElBQUksSyxHQUFRLEM7UUFDUixRQURKO0lBR0EsS0FBSyxRLElBQVksYztJQUNqQjtRQUNJLElBQUksZUFBZSxJLENBQUssYyxFQUFXLFEsQ0FBbkM7WUFDSSxNQUFNLEksQ0FBSyxlQUFVLFEsRUFBckI7SUFGUixDO0lBS0EsTSxDQUFPLEs7QUFWWCxDOztlQWFBLDRCO0FBQ0E7SUFDSSxNLENBQU8sVUFBQyxDQUFDQSxJQUFELG9EQUFDQSxJQUFELEdBQU0sb0NBQU4sZ0JBQUQscUg7O0FBRFgsQzs7b0JBUUEsNEIsc0VBQXNCLFE7QUFDdEI7SUFDSSxJQUFJLFEsQ0FBQSxHLENBQWEsRyxJQUFPLFEsQ0FBQSxHLENBQWEsU0FBckM7UUFDSSxDQUFDLFdBQUQsdURBQUMsV0FBRCxHQUFhLDhDQUFiLEVBQThDLDhDQUE5QyxvQkFBbUIsMEJBQW5CLEVBQXFELG9DQUFyRDtJQUVKLElBQUksQ0FBQ0EsSUFBRCx5REFBQ0EsSUFBRCxHQUFNLHlDQUFOLHNCQUFxQixRQUFyQixDQUFKO1FBQ0ksTTtJQUVKLGVBQVUsQ0FBQyxRQUFELG1CQUFDLFFBQUQsNkNBQUMsUUFBRCxHQUFVLGlDQUFWLFUsSUFBa0IsUUFBNUI7SUFDQSxXLEVBQUE7QUFSSixDOztpQkFlQSw0Qiw0RUFBeUIsUTtBQUN6QjtJQUVJLElBQUksUSxDQUFBLEcsQ0FBYSxHLElBQU8sUSxDQUFBLEcsQ0FBYSxTQUFyQztRQUNJLENBQUMsV0FBRCx1REFBQyxXQUFELEdBQWEsOENBQWIsRUFBOEMsOENBQTlDLG9CQUFtQiwwQkFBbkIsRUFBcUQsb0NBQXJEO0lBR0osSUFBSSxNLEdBQVMsQ0FBQ0EsSUFBRCxpREFBQ0EsSUFBRCxHQUFNLGlDQUFOLGNBQWEsUUFBYixDQUFiO0lBR0EsSUFBSSxNLENBQUEsRyxDQUFXLEdBQWY7SUFDQTtRQUNJLE0sQ0FBTyxlQUFVLENBQUMsTUFBRCxtQkFBQyxNQUFELDZDQUFDLE1BQUQsR0FBUSwrQkFBUixVLENBQWpCO1FBQ0EsVyxFQUFBO0lBRkosQztBQVZKLEM7O2lCQW1CQSw0QjtBQUNBO0lBQ0ksYyxHQUFZLEMsQ0FBWjtJQUNBLFcsR0FBUyxDQUFUO0FBRkosQzs7WUFLQSw0QjtBQUNBO0lBQ0ksTSxDQUFPLENBQUMsS0FBRCwrQ0FBQyxLQUFELEdBQU8sZ0NBQVAsVztBQURYLEMiLCJmaWxlIjoiX0NQQ29uY3JldGVNdXRhYmxlU2V0LmpzIiwic291cmNlUm9vdCI6ImZpbGU6L1VzZXJzL2RhdmlkL3Byb2dyYW1zL2NhcHB1Y2Npbm8vRm91bmRhdGlvbi8iLCJzb3VyY2VzQ29udGVudCI6WyJcbkBpbXBvcnQgXCJDUE11dGFibGVTZXQualwiXG5cblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyohXG4gICAgQGNsYXNzIENQU2V0XG4gICAgQGluZ3JvdXAgZm91bmRhdGlvblxuICAgIEBicmllZiBBbiB1bm9yZGVyZWQgY29sbGVjdGlvbiBvZiBvYmplY3RzLlxuKi9cbkBpbXBsZW1lbnRhdGlvbiBfQ1BDb25jcmV0ZU11dGFibGVTZXQgOiBDUE11dGFibGVTZXRcbntcbiAgICBPYmplY3QgICAgICBfY29udGVudHM7XG4gICAgdW5zaWduZWQgICAgX2NvdW50O1xufVxuXG4vKlxuICAgIEluaXRpYWxpemVzIGEgbmV3bHkgYWxsb2NhdGVkIHNldCB3aXRoIG1lbWJlcnMgdGFrZW4gZnJvbSB0aGUgc3BlY2lmaWVkIGxpc3Qgb2Ygb2JqZWN0cy5cbiAgICBAcGFyYW0gb2JqZWN0cyBBIGFycmF5IG9mIG9iamVjdHMgdG8gYWRkIHRvIHRoZSBuZXcgc2V0LiBJZiB0aGUgc2FtZSBvYmplY3QgYXBwZWFycyBtb3JlIHRoYW4gb25jZSBvYmplY3RzLCBpdCBpcyBhZGRlZCBvbmx5IG9uY2UgdG8gdGhlIHJldHVybmVkIHNldC5cbiAgICBAcGFyYW0gY291bnQgVGhlIG51bWJlciBvZiBvYmplY3RzIGZyb20gb2JqZWN0cyB0byBhZGQgdG8gdGhlIG5ldyBzZXQuXG4qL1xuLSAoaWQpaW5pdFdpdGhPYmplY3RzOihDUEFycmF5KW9iamVjdHMgY291bnQ6KENQVUludGVnZXIpYUNvdW50XG57XG4gICAgc2VsZiA9IFtzdXBlciBpbml0V2l0aE9iamVjdHM6b2JqZWN0cyBjb3VudDphQ291bnRdO1xuXG4gICAgaWYgKHNlbGYpXG4gICAge1xuICAgICAgICBfY291bnQgPSAwO1xuICAgICAgICBfY29udGVudHMgPSB7IH07XG5cbiAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgIGNvdW50ID0gTUlOKFtvYmplY3RzIGNvdW50XSwgYUNvdW50KTtcblxuICAgICAgICBmb3IgKDsgaW5kZXggPCBjb3VudDsgKytpbmRleClcbiAgICAgICAgICAgIFtzZWxmIGFkZE9iamVjdDpvYmplY3RzW2luZGV4XV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG59XG5cbi0gKENQVUludGVnZXIpY291bnRcbntcbiAgICByZXR1cm4gX2NvdW50O1xufVxuXG4tIChpZCltZW1iZXI6KGlkKWFuT2JqZWN0XG57XG4gICAgdmFyIFVJRCA9IFthbk9iamVjdCBVSURdO1xuXG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoX2NvbnRlbnRzLCBVSUQpKVxuICAgICAgICByZXR1cm4gX2NvbnRlbnRzW1VJRF07XG4gICAgZWxzZVxuICAgIHtcbiAgICAgICAgZm9yICh2YXIgb2JqZWN0VUlEIGluIF9jb250ZW50cylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKF9jb250ZW50cywgb2JqZWN0VUlEKSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgdmFyIG9iamVjdCA9IF9jb250ZW50c1tvYmplY3RVSURdO1xuXG4gICAgICAgICAgICBpZiAob2JqZWN0ID09PSBhbk9iamVjdCB8fCBbb2JqZWN0IGlzRXF1YWw6YW5PYmplY3RdKVxuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmlsO1xufVxuXG4tIChDUEFycmF5KWFsbE9iamVjdHNcbntcbiAgICB2YXIgYXJyYXkgPSBbXSxcbiAgICAgICAgcHJvcGVydHk7XG5cbiAgICBmb3IgKHByb3BlcnR5IGluIF9jb250ZW50cylcbiAgICB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKF9jb250ZW50cywgcHJvcGVydHkpKVxuICAgICAgICAgICAgYXJyYXkucHVzaChfY29udGVudHNbcHJvcGVydHldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG59XG5cbi0gKENQRW51bWVyYXRvcilvYmplY3RFbnVtZXJhdG9yXG57XG4gICAgcmV0dXJuIFtbc2VsZiBhbGxPYmplY3RzXSBvYmplY3RFbnVtZXJhdG9yXTtcbn1cblxuLypcbiAgICBBZGRzIGEgZ2l2ZW4gb2JqZWN0IHRvIHRoZSByZWNlaXZlci5cbiAgICBAcGFyYW0gYW5PYmplY3QgVGhlIG9iamVjdCB0byBhZGQgdG8gdGhlIHJlY2VpdmVyLlxuKi9cbi0gKHZvaWQpYWRkT2JqZWN0OihpZClhbk9iamVjdFxue1xuICAgIGlmIChhbk9iamVjdCA9PT0gbmlsIHx8IGFuT2JqZWN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIFtDUEV4Y2VwdGlvbiByYWlzZTpDUEludmFsaWRBcmd1bWVudEV4Y2VwdGlvbiByZWFzb246QFwiYXR0ZW1wdCB0byBpbnNlcnQgbmlsIG9yIHVuZGVmaW5lZFwiXTtcblxuICAgIGlmIChbc2VsZiBjb250YWluc09iamVjdDphbk9iamVjdF0pXG4gICAgICAgIHJldHVybjtcblxuICAgIF9jb250ZW50c1tbYW5PYmplY3QgVUlEXV0gPSBhbk9iamVjdDtcbiAgICBfY291bnQrKztcbn1cblxuLypcbiAgICBSZW1vdmVzIGEgZ2l2ZW4gb2JqZWN0IGZyb20gdGhlIHJlY2VpdmVyLlxuICAgIEBwYXJhbSBhbk9iamVjdCBUaGUgb2JqZWN0IHRvIHJlbW92ZSBmcm9tIHRoZSByZWNlaXZlci5cbiovXG4tICh2b2lkKXJlbW92ZU9iamVjdDooaWQpYW5PYmplY3RcbntcbiAgICAvLyBSZW1vdmluZyBuaWwgaXMgYW4gZXJyb3IuXG4gICAgaWYgKGFuT2JqZWN0ID09PSBuaWwgfHwgYW5PYmplY3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgW0NQRXhjZXB0aW9uIHJhaXNlOkNQSW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uIHJlYXNvbjpAXCJhdHRlbXB0IHRvIHJlbW92ZSBuaWwgb3IgdW5kZWZpbmVkXCJdO1xuXG4gICAgLy8gYW5PYmplY3QgbWlnaHQgYmUgaXNFcXVhbDogYW5vdGhlciBvYmplY3QgaW4gdGhlIHNldC4gV2UgbmVlZCB0aGUgZXhhY3QgaW5zdGFuY2Ugc28gd2UgY2FuIHJlbW92ZSBpdCBieSBVSUQuXG4gICAgdmFyIG9iamVjdCA9IFtzZWxmIG1lbWJlcjphbk9iamVjdF07XG5cbiAgICAvLyAuLi5idXQgcmVtb3ZpbmcgYW4gb2JqZWN0IG5vdCBwcmVzZW50IGluIHRoZSBzZXQgaXMgbm90IGFuIGVycm9yLlxuICAgIGlmIChvYmplY3QgIT09IG5pbClcbiAgICB7XG4gICAgICAgIGRlbGV0ZSBfY29udGVudHNbW29iamVjdCBVSURdXTtcbiAgICAgICAgX2NvdW50LS07XG4gICAgfVxufVxuXG4vKlxuICAgIFBlcmZvcm1hbmNlIGltcHJvdmVtZW50LlxuKi9cbi0gKHZvaWQpcmVtb3ZlQWxsT2JqZWN0c1xue1xuICAgIF9jb250ZW50cyA9IHt9O1xuICAgIF9jb3VudCA9IDA7XG59XG5cbi0gKENsYXNzKWNsYXNzRm9yQ29kZXJcbntcbiAgICByZXR1cm4gW0NQU2V0IGNsYXNzXTtcbn1cblxuQGVuZFxuIl19t;4957;

objj_executeFile("CPMutableSet.j", YES);var hasOwnProperty = Object.prototype.hasOwnProperty;

{var the_class = objj_allocateClassPair(CPMutableSet, "_CPConcreteMutableSet"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_contents", "Object"), new objj_ivar("_count", "unsigned")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithObjects:count:"), function $_CPConcreteMutableSet__initWithObjects_count_(self, _cmd, objects, aCount)
{
    self = (objj_getClass("_CPConcreteMutableSet").super_class.method_dtable["initWithObjects:count:"] || _objj_forward)(self, "initWithObjects:count:", objects, aCount);
    if (self)
    {
        self._count = 0;
        self._contents = {};
        var index = 0,
            count = MIN((objects == null ? null : (objects.isa.method_msgSend["count"] || _objj_forward)(objects, (objects.isa.method_dtable["count"], "count"))), aCount);
        for (; index < count; ++index)
            (self == null ? null : (self.isa.method_msgSend["addObject:"] || _objj_forward)(self, (self.isa.method_dtable["addObject:"], "addObject:"), objects[index]));
    }
    return self;
}

,["id","CPArray","CPUInteger"]), new objj_method(sel_getUid("count"), function $_CPConcreteMutableSet__count(self, _cmd)
{
    return self._count;
}

,["CPUInteger"]), new objj_method(sel_getUid("member:"), function $_CPConcreteMutableSet__member_(self, _cmd, anObject)
{
    var UID = (anObject == null ? null : (anObject.isa.method_msgSend["UID"] || _objj_forward)(anObject, (anObject.isa.method_dtable["UID"], "UID")));
    if (hasOwnProperty.call(self._contents, UID))
        return self._contents[UID];
    else
    {
        for (var objectUID in self._contents)
        {
            if (!hasOwnProperty.call(self._contents, objectUID))
                continue;
            var object = self._contents[objectUID];
            if (object === anObject || (object == null ? null : (object.isa.method_msgSend["isEqual:"] || _objj_forward)(object, (object.isa.method_dtable["isEqual:"], "isEqual:"), anObject)))
                return object;
        }
    }
    return nil;
}

,["id","id"]), new objj_method(sel_getUid("allObjects"), function $_CPConcreteMutableSet__allObjects(self, _cmd)
{
    var array = [],
        property;
    for (property in self._contents)
    {
        if (hasOwnProperty.call(self._contents, property))
            array.push(self._contents[property]);
    }
    return array;
}

,["CPArray"]), new objj_method(sel_getUid("objectEnumerator"), function $_CPConcreteMutableSet__objectEnumerator(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["allObjects"] || _objj_forward)(self, (self.isa.method_dtable["allObjects"], "allObjects"))), ___r1 == null ? null : (___r1.isa.method_msgSend["objectEnumerator"] || _objj_forward)(___r1, "objectEnumerator"));
    var ___r1;
}

,["CPEnumerator"]), new objj_method(sel_getUid("addObject:"), function $_CPConcreteMutableSet__addObject_(self, _cmd, anObject)
{
    if (anObject === nil || anObject === undefined)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "attempt to insert nil or undefined");
    if ((self.isa.method_msgSend["containsObject:"] || _objj_forward)(self, (self.isa.method_dtable["containsObject:"], "containsObject:"), anObject))
        return;
    self._contents[(anObject == null ? null : (anObject.isa.method_msgSend["UID"] || _objj_forward)(anObject, (anObject.isa.method_dtable["UID"], "UID")))] = anObject;
    self._count++;
}

,["void","id"]), new objj_method(sel_getUid("removeObject:"), function $_CPConcreteMutableSet__removeObject_(self, _cmd, anObject)
{
    if (anObject === nil || anObject === undefined)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "attempt to remove nil or undefined");
    var object = (self.isa.method_msgSend["member:"] || _objj_forward)(self, (self.isa.method_dtable["member:"], "member:"), anObject);
    if (object !== nil)
    {
        delete self._contents[(object == null ? null : (object.isa.method_msgSend["UID"] || _objj_forward)(object, (object.isa.method_dtable["UID"], "UID")))];
        self._count--;
    }
}

,["void","id"]), new objj_method(sel_getUid("removeAllObjects"), function $_CPConcreteMutableSet__removeAllObjects(self, _cmd)
{
    self._contents = {};
    self._count = 0;
}

,["void"]), new objj_method(sel_getUid("classForCoder"), function $_CPConcreteMutableSet__classForCoder(self, _cmd)
{
    return (CPSet.isa.method_msgSend["class"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["class"], "class"));
}

,["Class"])]);
}
p;8;_CPSet.jt;53291;@STATIC;1.0;i;9;CPArray.ji;14;CPEnumerator.ji;10;CPNumber.ji;10;CPObject.jS;30600;;22601;

objj_executeFile("CPArray.j", YES);objj_executeFile("CPEnumerator.j", YES);objj_executeFile("CPNumber.j", YES);objj_executeFile("CPObject.j", YES);
{var the_class = objj_allocateClassPair(CPObject, "CPSet"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("setByAddingObject:"), function $CPSet__setByAddingObject_(self, _cmd, anObject)
{
    return ((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["setWithArray:"] || _objj_forward)(___r1, "setWithArray:", ((___r2 = (self.isa.method_msgSend["allObjects"] || _objj_forward)(self, (self.isa.method_dtable["allObjects"], "allObjects"))), ___r2 == null ? null : (___r2.isa.method_msgSend["arrayByAddingObject:"] || _objj_forward)(___r2, "arrayByAddingObject:", anObject))));
    var ___r1, ___r2;
}

,["id","id"]), new objj_method(sel_getUid("setByAddingObjectsFromSet:"), function $CPSet__setByAddingObjectsFromSet_(self, _cmd, aSet)
{
    return (self.isa.method_msgSend["setByAddingObjectsFromArray:"] || _objj_forward)(self, (self.isa.method_dtable["setByAddingObjectsFromArray:"], "setByAddingObjectsFromArray:"), (aSet == null ? null : (aSet.isa.method_msgSend["allObjects"] || _objj_forward)(aSet, (aSet.isa.method_dtable["allObjects"], "allObjects"))));
}

,["id","CPSet"]), new objj_method(sel_getUid("setByAddingObjectsFromArray:"), function $CPSet__setByAddingObjectsFromArray_(self, _cmd, anArray)
{
    return ((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["setWithArray:"] || _objj_forward)(___r1, "setWithArray:", ((___r2 = (self.isa.method_msgSend["allObjects"] || _objj_forward)(self, (self.isa.method_dtable["allObjects"], "allObjects"))), ___r2 == null ? null : (___r2.isa.method_msgSend["arrayByAddingObjectsFromArray:"] || _objj_forward)(___r2, "arrayByAddingObjectsFromArray:", anArray))));
    var ___r1, ___r2;
}

,["id","CPArray"]), new objj_method(sel_getUid("init"), function $CPSet__init(self, _cmd)
{
    return (self.isa.method_msgSend["initWithObjects:count:"] || _objj_forward)(self, (self.isa.method_dtable["initWithObjects:count:"], self.isa.method_dtable["initWithObjects:count:"], "initWithObjects:count:"), nil, 0);
}

,["id"]), new objj_method(sel_getUid("initWithArray:"), function $CPSet__initWithArray_(self, _cmd, anArray)
{
    return (self.isa.method_msgSend["initWithObjects:count:"] || _objj_forward)(self, (self.isa.method_dtable["initWithObjects:count:"], self.isa.method_dtable["initWithObjects:count:"], "initWithObjects:count:"), anArray, (anArray == null ? null : (anArray.isa.method_msgSend["count"] || _objj_forward)(anArray, (anArray.isa.method_dtable["count"], "count"))));
}

,["id","CPArray"]), new objj_method(sel_getUid("initWithObjects:"), function $CPSet__initWithObjects_(self, _cmd, anObject)
{
    var index = 2,
        count = arguments.length;
    for (; index < count; ++index)
        if (arguments[index] === nil)
            break;
    return (self.isa.method_msgSend["initWithObjects:count:"] || _objj_forward)(self, (self.isa.method_dtable["initWithObjects:count:"], self.isa.method_dtable["initWithObjects:count:"], "initWithObjects:count:"), Array.prototype.slice.call(arguments, 2, index), index - 2);
}

,["id","id"]), new objj_method(sel_getUid("initWithObjects:count:"), function $CPSet__initWithObjects_count_(self, _cmd, objects, aCount)
{
    if (self === _CPSharedPlaceholderSet)
        return ((___r1 = (_CPConcreteMutableSet == null ? null : (_CPConcreteMutableSet.isa.method_msgSend["alloc"] || _objj_forward)(_CPConcreteMutableSet, (_CPConcreteMutableSet.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:count:"] || _objj_forward)(___r1, "initWithObjects:count:", objects, aCount));
    return (objj_getClass("CPSet").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    var ___r1;
}

,["id","CPArray","CPUInteger"]), new objj_method(sel_getUid("initWithSet:"), function $CPSet__initWithSet_(self, _cmd, aSet)
{
    return (self.isa.method_msgSend["initWithArray:"] || _objj_forward)(self, (self.isa.method_dtable["initWithArray:"], "initWithArray:"), (aSet == null ? null : (aSet.isa.method_msgSend["allObjects"] || _objj_forward)(aSet, (aSet.isa.method_dtable["allObjects"], "allObjects"))));
}

,["id","CPSet"]), new objj_method(sel_getUid("initWithSet:copyItems:"), function $CPSet__initWithSet_copyItems_(self, _cmd, aSet, shouldCopyItems)
{
    if (shouldCopyItems)
        return (aSet == null ? null : (aSet.isa.method_msgSend["valueForKey:"] || _objj_forward)(aSet, (aSet.isa.method_dtable["valueForKey:"], "valueForKey:"), "copy"));
    return (self.isa.method_msgSend["initWithSet:"] || _objj_forward)(self, (self.isa.method_dtable["initWithSet:"], "initWithSet:"), aSet);
}

,["id","CPSet","BOOL"]), new objj_method(sel_getUid("count"), function $CPSet__count(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
}

,["CPUInteger"]), new objj_method(sel_getUid("allObjects"), function $CPSet__allObjects(self, _cmd)
{
    var objects = [],
        object,
        objectEnumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator"));
    while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        objects.push(object);
    return objects;
}

,["CPArray"]), new objj_method(sel_getUid("anyObject"), function $CPSet__anyObject(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator"))), ___r1 == null ? null : (___r1.isa.method_msgSend["nextObject"] || _objj_forward)(___r1, "nextObject"));
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("containsObject:"), function $CPSet__containsObject_(self, _cmd, anObject)
{
    return (self.isa.method_msgSend["member:"] || _objj_forward)(self, (self.isa.method_dtable["member:"], "member:"), anObject) !== nil;
}

,["BOOL","id"]), new objj_method(sel_getUid("filteredSetUsingPredicate:"), function $CPSet__filteredSetUsingPredicate_(self, _cmd, aPredicate)
{
    var objects = [],
        object,
        objectEnumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator"));
    while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        if ((aPredicate == null ? null : (aPredicate.isa.method_msgSend["evaluateWithObject:"] || _objj_forward)(aPredicate, (aPredicate.isa.method_dtable["evaluateWithObject:"], "evaluateWithObject:"), object)))
            objects.push(object);
    return ((___r1 = ((___r2 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r2 == null ? null : (___r2.isa.method_msgSend["alloc"] || _objj_forward)(___r2, "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithArray:"] || _objj_forward)(___r1, "initWithArray:", objects));
    var ___r1, ___r2;
}

,["CPSet","CPPredicate"]), new objj_method(sel_getUid("makeObjectsPerformSelector:"), function $CPSet__makeObjectsPerformSelector_(self, _cmd, aSelector)
{
    (self.isa.method_msgSend["makeObjectsPerformSelector:withObjects:"] || _objj_forward)(self, (self.isa.method_dtable["makeObjectsPerformSelector:withObjects:"], self.isa.method_dtable["makeObjectsPerformSelector:withObjects:"], "makeObjectsPerformSelector:withObjects:"), aSelector, nil);
}

,["void","SEL"]), new objj_method(sel_getUid("makeObjectsPerformSelector:withObject:"), function $CPSet__makeObjectsPerformSelector_withObject_(self, _cmd, aSelector, anObject)
{
    (self.isa.method_msgSend["makeObjectsPerformSelector:withObjects:"] || _objj_forward)(self, (self.isa.method_dtable["makeObjectsPerformSelector:withObjects:"], self.isa.method_dtable["makeObjectsPerformSelector:withObjects:"], "makeObjectsPerformSelector:withObjects:"), aSelector, [anObject]);
}

,["void","SEL","id"]), new objj_method(sel_getUid("makeObjectsPerformSelector:withObjects:"), function $CPSet__makeObjectsPerformSelector_withObjects_(self, _cmd, aSelector, objects)
{
    var object,
        objectEnumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator")),
        argumentsArray = [nil, aSelector].concat(objects || []);
    while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
    {
        argumentsArray[0] = object;
        objj_msgSend.apply(this, argumentsArray);
    }
}

,["void","SEL","CPArray"]), new objj_method(sel_getUid("member:"), function $CPSet__member_(self, _cmd, anObject)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
}

,["id","id"]), new objj_method(sel_getUid("objectEnumerator"), function $CPSet__objectEnumerator(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
}

,["CPEnumerator"]), new objj_method(sel_getUid("enumerateObjectsUsingBlock:"), function $CPSet__enumerateObjectsUsingBlock_(self, _cmd, aFunction)
{
    var object,
        objectEnumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator"));
    while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        if (aFunction(object))
            break;
}

,["void","Function"]), new objj_method(sel_getUid("objectsPassingTest:"), function $CPSet__objectsPassingTest_(self, _cmd, aFunction)
{
    var objects = [],
        object = nil,
        objectEnumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator"));
    while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        if (aFunction(object))
            objects.push(object);
    return ((___r1 = ((___r2 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r2 == null ? null : (___r2.isa.method_msgSend["alloc"] || _objj_forward)(___r2, "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithArray:"] || _objj_forward)(___r1, "initWithArray:", objects));
    var ___r1, ___r2;
}

,["CPSet","Function"]), new objj_method(sel_getUid("isSubsetOfSet:"), function $CPSet__isSubsetOfSet_(self, _cmd, aSet)
{
    var object = nil,
        objectEnumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator"));
    while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        if (!(aSet == null ? null : (aSet.isa.method_msgSend["containsObject:"] || _objj_forward)(aSet, (aSet.isa.method_dtable["containsObject:"], "containsObject:"), object)))
            return NO;
    return YES;
}

,["BOOL","CPSet"]), new objj_method(sel_getUid("intersectsSet:"), function $CPSet__intersectsSet_(self, _cmd, aSet)
{
    if (self === aSet)
        return (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")) > 0;
    var object = nil,
        objectEnumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator"));
    while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        if ((aSet == null ? null : (aSet.isa.method_msgSend["containsObject:"] || _objj_forward)(aSet, (aSet.isa.method_dtable["containsObject:"], "containsObject:"), object)))
            return YES;
    return NO;
}

,["BOOL","CPSet"]), new objj_method(sel_getUid("sortedArrayUsingDescriptors:"), function $CPSet__sortedArrayUsingDescriptors_(self, _cmd, someSortDescriptors)
{
    return ((___r1 = (self.isa.method_msgSend["allObjects"] || _objj_forward)(self, (self.isa.method_dtable["allObjects"], "allObjects"))), ___r1 == null ? null : (___r1.isa.method_msgSend["sortedArrayUsingDescriptors:"] || _objj_forward)(___r1, "sortedArrayUsingDescriptors:", someSortDescriptors));
    var ___r1;
}

,["CPArray","CPArray"]), new objj_method(sel_getUid("isEqualToSet:"), function $CPSet__isEqualToSet_(self, _cmd, aSet)
{
    return (self.isa.method_msgSend["isEqual:"] || _objj_forward)(self, (self.isa.method_dtable["isEqual:"], "isEqual:"), aSet);
}

,["BOOL","CPSet"]), new objj_method(sel_getUid("isEqual:"), function $CPSet__isEqual_(self, _cmd, aSet)
{
    return self === aSet || (aSet == null ? null : (aSet.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(aSet, (aSet.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), (CPSet.isa.method_msgSend["class"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["class"], "class")))) && ((self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")) === (aSet == null ? null : (aSet.isa.method_msgSend["count"] || _objj_forward)(aSet, (aSet.isa.method_dtable["count"], "count"))) && (aSet == null ? null : (aSet.isa.method_msgSend["isSubsetOfSet:"] || _objj_forward)(aSet, (aSet.isa.method_dtable["isSubsetOfSet:"], "isSubsetOfSet:"), self)));
}

,["BOOL","CPSet"]), new objj_method(sel_getUid("description"), function $CPSet__description(self, _cmd)
{
    var string = "{(\n",
        objects = (self.isa.method_msgSend["allObjects"] || _objj_forward)(self, (self.isa.method_dtable["allObjects"], "allObjects")),
        index = 0,
        count = (objects == null ? null : (objects.isa.method_msgSend["count"] || _objj_forward)(objects, (objects.isa.method_dtable["count"], "count")));
    for (; index < count; ++index)
    {
        var object = objects[index];
        string += "\t" + ((String(object)).split('\n')).join("\n\t") + "\n";
    }
    return string + ")}";
}

,["CPString"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPSet__alloc(self, _cmd)
{
    if (self === (CPSet.isa.method_msgSend["class"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["class"], "class")) || self === (CPMutableSet == null ? null : (CPMutableSet.isa.method_msgSend["class"] || _objj_forward)(CPMutableSet, (CPMutableSet.isa.method_dtable["class"], "class"))))
        return (_CPPlaceholderSet == null ? null : (_CPPlaceholderSet.isa.method_msgSend["alloc"] || _objj_forward)(_CPPlaceholderSet, (_CPPlaceholderSet.isa.method_dtable["alloc"], "alloc")));
    return (objj_getMetaClass("CPSet").super_class.method_dtable["alloc"] || _objj_forward)(self, "alloc");
}

,["id"]), new objj_method(sel_getUid("set"), function $CPSet__set(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("setWithArray:"), function $CPSet__setWithArray_(self, _cmd, anArray)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithArray:"] || _objj_forward)(___r1, "initWithArray:", anArray));
    var ___r1;
}

,["id","CPArray"]), new objj_method(sel_getUid("setWithObject:"), function $CPSet__setWithObject_(self, _cmd, anObject)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:"] || _objj_forward)(___r1, "initWithObjects:", anObject));
    var ___r1;
}

,["id","id"]), new objj_method(sel_getUid("setWithObjects:count:"), function $CPSet__setWithObjects_count_(self, _cmd, objects, count)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:count:"] || _objj_forward)(___r1, "initWithObjects:count:", objects, count));
    var ___r1;
}

,["id","id","CPUInteger"]), new objj_method(sel_getUid("setWithObjects:"), function $CPSet__setWithObjects_(self, _cmd, anObject)
{
    var argumentsArray = Array.prototype.slice.apply(arguments);
    argumentsArray[0] = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"));
    argumentsArray[1] = sel_getUid("initWithObjects:");
    return objj_msgSend.apply(this, argumentsArray);
}

,["id","id"]), new objj_method(sel_getUid("setWithSet:"), function $CPSet__setWithSet_(self, _cmd, set)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithSet:"] || _objj_forward)(___r1, "initWithSet:", set));
    var ___r1;
}

,["id","CPSet"])]);
}
{
var the_class = objj_getClass("CPSet")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPSet\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("copy"), function $CPSet__copy(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["setWithSet:"] || _objj_forward)(___r1, "setWithSet:", self));
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("mutableCopy"), function $CPSet__mutableCopy(self, _cmd)
{
    return (self.isa.method_msgSend["copy"] || _objj_forward)(self, (self.isa.method_dtable["copy"], "copy"));
}

,["id"])]);
}
var CPSetObjectsKey = "CPSetObjectsKey";
{
var the_class = objj_getClass("CPSet")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPSet\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPSet__initWithCoder_(self, _cmd, aCoder)
{
    return (self.isa.method_msgSend["initWithArray:"] || _objj_forward)(self, (self.isa.method_dtable["initWithArray:"], "initWithArray:"), (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), CPSetObjectsKey)));
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPSet__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["encodeObject:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["encodeObject:forKey:"], aCoder.isa.method_dtable["encodeObject:forKey:"], "encodeObject:forKey:"), (self.isa.method_msgSend["allObjects"] || _objj_forward)(self, (self.isa.method_dtable["allObjects"], "allObjects")), CPSetObjectsKey));
}

,["void","CPCoder"])]);
}
{
var the_class = objj_getClass("CPSet")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPSet\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("valueForKey:"), function $CPSet__valueForKey_(self, _cmd, aKey)
{
    if (aKey === "@count")
        return (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"));
    var valueSet = (CPSet.isa.method_msgSend["set"] || _objj_forward)(CPSet, (CPSet.isa.method_dtable["set"], "set")),
        object,
        objectEnumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator"));
    while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
    {
        var value = (object == null ? null : (object.isa.method_msgSend["valueForKey:"] || _objj_forward)(object, (object.isa.method_dtable["valueForKey:"], "valueForKey:"), aKey));
        (valueSet == null ? null : (valueSet.isa.method_msgSend["addObject:"] || _objj_forward)(valueSet, (valueSet.isa.method_dtable["addObject:"], "addObject:"), value));
    }
    return valueSet;
}

,["id","CPString"]), new objj_method(sel_getUid("setValue:forKey:"), function $CPSet__setValue_forKey_(self, _cmd, aValue, aKey)
{
    var object,
        objectEnumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator"));
    while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        (object == null ? null : (object.isa.method_msgSend["setValue:forKey:"] || _objj_forward)(object, (object.isa.method_dtable["setValue:forKey:"], object.isa.method_dtable["setValue:forKey:"], "setValue:forKey:"), aValue, aKey));
}

,["void","id","CPString"])]);
}
var _CPSharedPlaceholderSet = nil;

{var the_class = objj_allocateClassPair(CPSet, "_CPPlaceholderSet"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $_CPPlaceholderSet__alloc(self, _cmd)
{
    if (!_CPSharedPlaceholderSet)
        _CPSharedPlaceholderSet = (objj_getMetaClass("_CPPlaceholderSet").super_class.method_dtable["alloc"] || _objj_forward)(self, "alloc");
    return _CPSharedPlaceholderSet;
}

,["id"])]);
}
p;7;CPSet.jt;1667;@STATIC;1.0;i;23;_CPConcreteMutableSet.jS;1564;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQU2V0LmoiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUEwQkMsa0IiLCJmaWxlIjoiQ1BTZXQuanMiLCJzb3VyY2VSb290IjoiZmlsZTovVXNlcnMvZGF2aWQvcHJvZ3JhbXMvY2FwcHVjY2luby9Gb3VuZGF0aW9uLyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDUFNldC5qXG4gKiBGb3VuZGF0aW9uXG4gKlxuICogQ3JlYXRlZCBieSBCYWlsZXkgQ2FybHNvblxuICogRXh0ZW5kZWQgYnkgUm9zcyBCb3VjaGVyXG4gKiBFeHRlbmRlZCBieSBOYWJpbCBFbGlzYVxuICogUmV3cml0dGVuIGJ5IEZyYW5jaXNjbyBUb2xtYXNreVxuICogQ29weXJpZ2h0IDIwMDgsIDI4MCBOb3J0aCwgSW5jLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlclxuICogdmVyc2lvbiAyLjEgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVVxuICogTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljXG4gKiBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBsaWJyYXJ5OyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlXG4gKiBGb3VuZGF0aW9uLCBJbmMuLCA1MSBGcmFua2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BIDAyMTEwLTEzMDEgVVNBXG4gKlxuICovXG5cbiBAaW1wb3J0IFwiX0NQQ29uY3JldGVNdXRhYmxlU2V0LmpcIlxuIl19t;51;

objj_executeFile("_CPConcreteMutableSet.j", YES);p;14;CPMutableSet.jt;15259;@STATIC;1.0;i;8;_CPSet.jS;8576;;6645;

objj_executeFile("_CPSet.j", YES);
{var the_class = objj_allocateClassPair(CPSet, "CPMutableSet"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithCapacity:"), function $CPMutableSet__initWithCapacity_(self, _cmd, aCapacity)
{
    return (self.isa.method_msgSend["init"] || _objj_forward)(self, (self.isa.method_dtable["init"], "init"));
}

,["id","unsigned"]), new objj_method(sel_getUid("filterUsingPredicate:"), function $CPMutableSet__filterUsingPredicate_(self, _cmd, aPredicate)
{
    var object,
        objectEnumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator"));
    while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        if (!(aPredicate == null ? null : (aPredicate.isa.method_msgSend["evaluateWithObject:"] || _objj_forward)(aPredicate, (aPredicate.isa.method_dtable["evaluateWithObject:"], "evaluateWithObject:"), object)))
            (self.isa.method_msgSend["removeObject:"] || _objj_forward)(self, (self.isa.method_dtable["removeObject:"], "removeObject:"), object);
}

,["void","CPPredicate"]), new objj_method(sel_getUid("removeObject:"), function $CPMutableSet__removeObject_(self, _cmd, anObject)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
}

,["void","id"]), new objj_method(sel_getUid("removeObjectsInArray:"), function $CPMutableSet__removeObjectsInArray_(self, _cmd, anArray)
{
    var index = 0,
        count = (anArray == null ? null : (anArray.isa.method_msgSend["count"] || _objj_forward)(anArray, (anArray.isa.method_dtable["count"], "count")));
    for (; index < count; ++index)
        (self.isa.method_msgSend["removeObject:"] || _objj_forward)(self, (self.isa.method_dtable["removeObject:"], "removeObject:"), (anArray == null ? null : (anArray.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(anArray, (anArray.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index)));
}

,["void","CPArray"]), new objj_method(sel_getUid("removeAllObjects"), function $CPMutableSet__removeAllObjects(self, _cmd)
{
    var object,
        objectEnumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator"));
    while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        (self.isa.method_msgSend["removeObject:"] || _objj_forward)(self, (self.isa.method_dtable["removeObject:"], "removeObject:"), object);
}

,["void"]), new objj_method(sel_getUid("addObjectsFromArray:"), function $CPMutableSet__addObjectsFromArray_(self, _cmd, objects)
{
    var count = (objects == null ? null : (objects.isa.method_msgSend["count"] || _objj_forward)(objects, (objects.isa.method_dtable["count"], "count")));
    while (count--)
        (self.isa.method_msgSend["addObject:"] || _objj_forward)(self, (self.isa.method_dtable["addObject:"], "addObject:"), objects[count]);
}

,["void","CPArray"]), new objj_method(sel_getUid("unionSet:"), function $CPMutableSet__unionSet_(self, _cmd, aSet)
{
    var object,
        objectEnumerator = (aSet == null ? null : (aSet.isa.method_msgSend["objectEnumerator"] || _objj_forward)(aSet, (aSet.isa.method_dtable["objectEnumerator"], "objectEnumerator")));
    while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        (self.isa.method_msgSend["addObject:"] || _objj_forward)(self, (self.isa.method_dtable["addObject:"], "addObject:"), object);
}

,["void","CPSet"]), new objj_method(sel_getUid("minusSet:"), function $CPMutableSet__minusSet_(self, _cmd, aSet)
{
    var object,
        objectEnumerator = (aSet == null ? null : (aSet.isa.method_msgSend["objectEnumerator"] || _objj_forward)(aSet, (aSet.isa.method_dtable["objectEnumerator"], "objectEnumerator")));
    while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        (self.isa.method_msgSend["removeObject:"] || _objj_forward)(self, (self.isa.method_dtable["removeObject:"], "removeObject:"), object);
}

,["void","CPSet"]), new objj_method(sel_getUid("intersectSet:"), function $CPMutableSet__intersectSet_(self, _cmd, aSet)
{
    var object,
        objectEnumerator = (self.isa.method_msgSend["objectEnumerator"] || _objj_forward)(self, (self.isa.method_dtable["objectEnumerator"], "objectEnumerator")),
        objectsToRemove = [];
    while ((object = (objectEnumerator == null ? null : (objectEnumerator.isa.method_msgSend["nextObject"] || _objj_forward)(objectEnumerator, (objectEnumerator.isa.method_dtable["nextObject"], "nextObject")))) !== nil)
        if (!(aSet == null ? null : (aSet.isa.method_msgSend["containsObject:"] || _objj_forward)(aSet, (aSet.isa.method_dtable["containsObject:"], "containsObject:"), object)))
            objectsToRemove.push(object);
    var count = (objectsToRemove == null ? null : (objectsToRemove.isa.method_msgSend["count"] || _objj_forward)(objectsToRemove, (objectsToRemove.isa.method_dtable["count"], "count")));
    while (count--)
        (self.isa.method_msgSend["removeObject:"] || _objj_forward)(self, (self.isa.method_dtable["removeObject:"], "removeObject:"), objectsToRemove[count]);
}

,["void","CPSet"]), new objj_method(sel_getUid("setSet:"), function $CPMutableSet__setSet_(self, _cmd, aSet)
{
    (self.isa.method_msgSend["removeAllObjects"] || _objj_forward)(self, (self.isa.method_dtable["removeAllObjects"], "removeAllObjects"));
    (self.isa.method_msgSend["unionSet:"] || _objj_forward)(self, (self.isa.method_dtable["unionSet:"], "unionSet:"), aSet);
}

,["void","CPSet"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("setWithCapacity:"), function $CPMutableSet__setWithCapacity_(self, _cmd, aCapacity)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithCapacity:"] || _objj_forward)(___r1, "initWithCapacity:", aCapacity));
    var ___r1;
}

,["id","CPUInteger"])]);
}
p;10;_CPArray.jt;105599;@STATIC;1.0;i;14;CPEnumerator.ji;13;CPException.ji;10;CPObject.ji;9;CPRange.ji;18;CPSortDescriptor.jS;65096;t;40387;

objj_executeFile("CPEnumerator.j", YES);objj_executeFile("CPException.j", YES);objj_executeFile("CPObject.j", YES);objj_executeFile("CPRange.j", YES);objj_executeFile("CPSortDescriptor.j", YES);CPEnumerationNormal = 0;
CPEnumerationConcurrent = 1 << 0;
CPEnumerationReverse = 1 << 1;
CPBinarySearchingFirstEqual = 1 << 8;
CPBinarySearchingLastEqual = 1 << 9;
CPBinarySearchingInsertionIndex = 1 << 10;
var CPArrayMaxDescriptionRecursion = 10;
var concat = Array.prototype.concat,
    join = Array.prototype.join,
    push = Array.prototype.push;

{var the_class = objj_allocateClassPair(CPObject, "CPArray"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("init"), function $CPArray__init(self, _cmd)
{
    if (self === _CPSharedPlaceholderArray)
    {
        arguments[0] = (_CPJavaScriptArray == null ? null : (_CPJavaScriptArray.isa.method_msgSend["alloc"] || _objj_forward)(_CPJavaScriptArray, (_CPJavaScriptArray.isa.method_dtable["alloc"], "alloc")));
        return objj_msgSend.apply(this, arguments);
    }
    return (objj_getClass("CPArray").super_class.method_dtable["init"] || _objj_forward)(self, "init");
}

,["id"]), new objj_method(sel_getUid("initWithArray:"), function $CPArray__initWithArray_(self, _cmd, anArray)
{
    if (self === _CPSharedPlaceholderArray)
    {
        arguments[0] = (_CPJavaScriptArray == null ? null : (_CPJavaScriptArray.isa.method_msgSend["alloc"] || _objj_forward)(_CPJavaScriptArray, (_CPJavaScriptArray.isa.method_dtable["alloc"], "alloc")));
        return objj_msgSend.apply(this, arguments);
    }
    return (objj_getClass("CPArray").super_class.method_dtable["init"] || _objj_forward)(self, "init");
}

,["id","CPArray"]), new objj_method(sel_getUid("initWithArray:copyItems:"), function $CPArray__initWithArray_copyItems_(self, _cmd, anArray, shouldCopyItems)
{
    if (self === _CPSharedPlaceholderArray)
    {
        arguments[0] = (_CPJavaScriptArray == null ? null : (_CPJavaScriptArray.isa.method_msgSend["alloc"] || _objj_forward)(_CPJavaScriptArray, (_CPJavaScriptArray.isa.method_dtable["alloc"], "alloc")));
        return objj_msgSend.apply(this, arguments);
    }
    return (objj_getClass("CPArray").super_class.method_dtable["init"] || _objj_forward)(self, "init");
}

,["id","CPArray","BOOL"]), new objj_method(sel_getUid("initWithObjects:"), function $CPArray__initWithObjects_(self, _cmd, anObject)
{
    if (self === _CPSharedPlaceholderArray)
    {
        arguments[0] = (_CPJavaScriptArray == null ? null : (_CPJavaScriptArray.isa.method_msgSend["alloc"] || _objj_forward)(_CPJavaScriptArray, (_CPJavaScriptArray.isa.method_dtable["alloc"], "alloc")));
        return objj_msgSend.apply(this, arguments);
    }
    return (objj_getClass("CPArray").super_class.method_dtable["init"] || _objj_forward)(self, "init");
}

,["id","id"]), new objj_method(sel_getUid("initWithObjects:count:"), function $CPArray__initWithObjects_count_(self, _cmd, objects, aCount)
{
    if (self === _CPSharedPlaceholderArray)
    {
        arguments[0] = (_CPJavaScriptArray == null ? null : (_CPJavaScriptArray.isa.method_msgSend["alloc"] || _objj_forward)(_CPJavaScriptArray, (_CPJavaScriptArray.isa.method_dtable["alloc"], "alloc")));
        return objj_msgSend.apply(this, arguments);
    }
    return (objj_getClass("CPArray").super_class.method_dtable["init"] || _objj_forward)(self, "init");
}

,["id","CPArray","CPUInteger"]), new objj_method(sel_getUid("initWithCapacity:"), function $CPArray__initWithCapacity_(self, _cmd, aCapacity)
{
    if (self === _CPSharedPlaceholderArray)
    {
        arguments[0] = (_CPJavaScriptArray == null ? null : (_CPJavaScriptArray.isa.method_msgSend["alloc"] || _objj_forward)(_CPJavaScriptArray, (_CPJavaScriptArray.isa.method_dtable["alloc"], "alloc")));
        return objj_msgSend.apply(this, arguments);
    }
    return (objj_getClass("CPArray").super_class.method_dtable["init"] || _objj_forward)(self, "init");
}

,["id","CPUInteger"]), new objj_method(sel_getUid("containsObject:"), function $CPArray__containsObject_(self, _cmd, anObject)
{
    return (self.isa.method_msgSend["indexOfObject:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObject:"], "indexOfObject:"), anObject) !== CPNotFound;
}

,["BOOL","id"]), new objj_method(sel_getUid("containsObjectIdenticalTo:"), function $CPArray__containsObjectIdenticalTo_(self, _cmd, anObject)
{
    return (self.isa.method_msgSend["indexOfObjectIdenticalTo:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObjectIdenticalTo:"], "indexOfObjectIdenticalTo:"), anObject) !== CPNotFound;
}

,["BOOL","id"]), new objj_method(sel_getUid("count"), function $CPArray__count(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
}

,["CPUInteger"]), new objj_method(sel_getUid("hash"), function $CPArray__hash(self, _cmd)
{
    return (self.isa.method_msgSend["UID"] || _objj_forward)(self, (self.isa.method_dtable["UID"], "UID"));
}

,["unsigned"]), new objj_method(sel_getUid("firstObject"), function $CPArray__firstObject(self, _cmd)
{
    var count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"));
    if (count > 0)
        return (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), 0);
    return nil;
}

,["id"]), new objj_method(sel_getUid("lastObject"), function $CPArray__lastObject(self, _cmd)
{
    var count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"));
    if (count <= 0)
        return nil;
    return (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), count - 1);
}

,["id"]), new objj_method(sel_getUid("objectAtIndex:"), function $CPArray__objectAtIndex_(self, _cmd, anIndex)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
}

,["id","CPUInteger"]), new objj_method(sel_getUid("objectsAtIndexes:"), function $CPArray__objectsAtIndexes_(self, _cmd, indexes)
{
    var index = CPNotFound,
        objects = [];
    while ((index = (indexes == null ? null : (indexes.isa.method_msgSend["indexGreaterThanIndex:"] || _objj_forward)(indexes, (indexes.isa.method_dtable["indexGreaterThanIndex:"], "indexGreaterThanIndex:"), index))) !== CPNotFound)
        objects.push((self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index));
    return objects;
}

,["CPArray","CPIndexSet"]), new objj_method(sel_getUid("objectEnumerator"), function $CPArray__objectEnumerator(self, _cmd)
{
    return ((___r1 = (_CPArrayEnumerator == null ? null : (_CPArrayEnumerator.isa.method_msgSend["alloc"] || _objj_forward)(_CPArrayEnumerator, (_CPArrayEnumerator.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithArray:"] || _objj_forward)(___r1, "initWithArray:", self));
    var ___r1;
}

,["CPEnumerator"]), new objj_method(sel_getUid("reverseObjectEnumerator"), function $CPArray__reverseObjectEnumerator(self, _cmd)
{
    return ((___r1 = (_CPReverseArrayEnumerator == null ? null : (_CPReverseArrayEnumerator.isa.method_msgSend["alloc"] || _objj_forward)(_CPReverseArrayEnumerator, (_CPReverseArrayEnumerator.isa.method_dtable["alloc"], "alloc")))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithArray:"] || _objj_forward)(___r1, "initWithArray:", self));
    var ___r1;
}

,["CPEnumerator"]), new objj_method(sel_getUid("indexOfObject:"), function $CPArray__indexOfObject_(self, _cmd, anObject)
{
    return (self.isa.method_msgSend["indexOfObject:inRange:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObject:inRange:"], self.isa.method_dtable["indexOfObject:inRange:"], "indexOfObject:inRange:"), anObject, nil);
}

,["CPUInteger","id"]), new objj_method(sel_getUid("indexOfObject:inRange:"), function $CPArray__indexOfObject_inRange_(self, _cmd, anObject, aRange)
{
    if (anObject && anObject.isa)
    {
        var index = aRange ? aRange.location : 0,
            count = aRange ? CPMaxRange(aRange) : (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"));
        for (; index < count; ++index)
            if (((___r1 = (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index)), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, "isEqual:", anObject)))
                return index;
        return CPNotFound;
    }
    return (self.isa.method_msgSend["indexOfObjectIdenticalTo:inRange:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObjectIdenticalTo:inRange:"], self.isa.method_dtable["indexOfObjectIdenticalTo:inRange:"], "indexOfObjectIdenticalTo:inRange:"), anObject, aRange);
    var ___r1;
}

,["CPUInteger","id","CPRange"]), new objj_method(sel_getUid("indexOfObjectIdenticalTo:"), function $CPArray__indexOfObjectIdenticalTo_(self, _cmd, anObject)
{
    return (self.isa.method_msgSend["indexOfObjectIdenticalTo:inRange:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObjectIdenticalTo:inRange:"], self.isa.method_dtable["indexOfObjectIdenticalTo:inRange:"], "indexOfObjectIdenticalTo:inRange:"), anObject, nil);
}

,["CPUInteger","id"]), new objj_method(sel_getUid("indexOfObjectIdenticalTo:inRange:"), function $CPArray__indexOfObjectIdenticalTo_inRange_(self, _cmd, anObject, aRange)
{
    var index = aRange ? aRange.location : 0,
        count = aRange ? CPMaxRange(aRange) : (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"));
    for (; index < count; ++index)
        if ((self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index) === anObject)
            return index;
    return CPNotFound;
}

,["CPUInteger","id","CPRange"]), new objj_method(sel_getUid("indexOfObjectPassingTest:"), function $CPArray__indexOfObjectPassingTest_(self, _cmd, aPredicate)
{
    return (self.isa.method_msgSend["indexOfObjectWithOptions:passingTest:context:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObjectWithOptions:passingTest:context:"], self.isa.method_dtable["indexOfObjectWithOptions:passingTest:context:"], self.isa.method_dtable["indexOfObjectWithOptions:passingTest:context:"], "indexOfObjectWithOptions:passingTest:context:"), CPEnumerationNormal, aPredicate, undefined);
}

,["unsigned","Function"]), new objj_method(sel_getUid("indexOfObjectPassingTest:context:"), function $CPArray__indexOfObjectPassingTest_context_(self, _cmd, aPredicate, aContext)
{
    return (self.isa.method_msgSend["indexOfObjectWithOptions:passingTest:context:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObjectWithOptions:passingTest:context:"], self.isa.method_dtable["indexOfObjectWithOptions:passingTest:context:"], self.isa.method_dtable["indexOfObjectWithOptions:passingTest:context:"], "indexOfObjectWithOptions:passingTest:context:"), CPEnumerationNormal, aPredicate, aContext);
}

,["unsigned","Function","id"]), new objj_method(sel_getUid("indexOfObjectWithOptions:passingTest:"), function $CPArray__indexOfObjectWithOptions_passingTest_(self, _cmd, options, aPredicate)
{
    return (self.isa.method_msgSend["indexOfObjectWithOptions:passingTest:context:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObjectWithOptions:passingTest:context:"], self.isa.method_dtable["indexOfObjectWithOptions:passingTest:context:"], self.isa.method_dtable["indexOfObjectWithOptions:passingTest:context:"], "indexOfObjectWithOptions:passingTest:context:"), options, aPredicate, undefined);
}

,["unsigned","CPEnumerationOptions","Function"]), new objj_method(sel_getUid("indexOfObjectWithOptions:passingTest:context:"), function $CPArray__indexOfObjectWithOptions_passingTest_context_(self, _cmd, options, aPredicate, aContext)
{
    if (options & CPEnumerationReverse)
    {
        var index = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")) - 1,
            stop = -1,
            increment = -1;
    }
    else
    {
        var index = 0,
            stop = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")),
            increment = 1;
    }
    for (; index !== stop; index += increment)
        if (aPredicate((self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index), index, aContext))
            return index;
    return CPNotFound;
}

,["unsigned","CPEnumerationOptions","Function","id"]), new objj_method(sel_getUid("indexOfObject:inSortedRange:options:usingComparator:"), function $CPArray__indexOfObject_inSortedRange_options_usingComparator_(self, _cmd, anObject, aRange, options, aComparator)
{
    if (!aComparator)
        _CPRaiseInvalidArgumentException(self, _cmd, "comparator is nil");
    if (options & CPBinarySearchingFirstEqual && options & CPBinarySearchingLastEqual)
        _CPRaiseInvalidArgumentException(self, _cmd, "both CPBinarySearchingFirstEqual and CPBinarySearchingLastEqual options cannot be specified");
    var count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"));
    if (count <= 0)
        return options & CPBinarySearchingInsertionIndex ? 0 : CPNotFound;
    var first = aRange ? aRange.location : 0,
        last = (aRange ? CPMaxRange(aRange) : (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"))) - 1;
    if (first < 0)
        _CPRaiseRangeException(self, _cmd, first, count);
    if (last >= count)
        _CPRaiseRangeException(self, _cmd, last, count);
    while (first <= last)
    {
        var middle = FLOOR((first + last) / 2),
            result = aComparator(anObject, (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), middle));
        if (result > 0)
            first = middle + 1;
        else if (result < 0)
            last = middle - 1;
        else
        {
            if (options & CPBinarySearchingFirstEqual)
                while (middle > first && aComparator(anObject, (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), middle - 1)) === CPOrderedSame)
                    --middle;
            else if (options & CPBinarySearchingLastEqual)
            {
                while (middle < last && aComparator(anObject, (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), middle + 1)) === CPOrderedSame)
                    ++middle;
                if (options & CPBinarySearchingInsertionIndex)
                    ++middle;
            }
            return middle;
        }
    }
    if (options & CPBinarySearchingInsertionIndex)
        return MAX(first, 0);
    return CPNotFound;
}

,["CPUInteger","id","CPRange","CPBinarySearchingOptions","Function"]), new objj_method(sel_getUid("indexesOfObjectsPassingTest:"), function $CPArray__indexesOfObjectsPassingTest_(self, _cmd, aPredicate)
{
    return (self.isa.method_msgSend["indexesOfObjectsWithOptions:passingTest:context:"] || _objj_forward)(self, (self.isa.method_dtable["indexesOfObjectsWithOptions:passingTest:context:"], self.isa.method_dtable["indexesOfObjectsWithOptions:passingTest:context:"], self.isa.method_dtable["indexesOfObjectsWithOptions:passingTest:context:"], "indexesOfObjectsWithOptions:passingTest:context:"), CPEnumerationNormal, aPredicate, undefined);
}

,["CPIndexSet","Function"]), new objj_method(sel_getUid("indexesOfObjectsPassingTest:context:"), function $CPArray__indexesOfObjectsPassingTest_context_(self, _cmd, aPredicate, aContext)
{
    return (self.isa.method_msgSend["indexesOfObjectsWithOptions:passingTest:context:"] || _objj_forward)(self, (self.isa.method_dtable["indexesOfObjectsWithOptions:passingTest:context:"], self.isa.method_dtable["indexesOfObjectsWithOptions:passingTest:context:"], self.isa.method_dtable["indexesOfObjectsWithOptions:passingTest:context:"], "indexesOfObjectsWithOptions:passingTest:context:"), CPEnumerationNormal, aPredicate, aContext);
}

,["CPIndexSet","Function","id"]), new objj_method(sel_getUid("indexesOfObjectsWithOptions:passingTest:"), function $CPArray__indexesOfObjectsWithOptions_passingTest_(self, _cmd, options, aPredicate)
{
    return (self.isa.method_msgSend["indexesOfObjectsWithOptions:passingTest:context:"] || _objj_forward)(self, (self.isa.method_dtable["indexesOfObjectsWithOptions:passingTest:context:"], self.isa.method_dtable["indexesOfObjectsWithOptions:passingTest:context:"], self.isa.method_dtable["indexesOfObjectsWithOptions:passingTest:context:"], "indexesOfObjectsWithOptions:passingTest:context:"), options, aPredicate, undefined);
}

,["CPIndexSet","CPEnumerationOptions","Function"]), new objj_method(sel_getUid("indexesOfObjectsWithOptions:passingTest:context:"), function $CPArray__indexesOfObjectsWithOptions_passingTest_context_(self, _cmd, options, aPredicate, aContext)
{
    if (options & CPEnumerationReverse)
    {
        var index = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")) - 1,
            stop = -1,
            increment = -1;
    }
    else
    {
        var index = 0,
            stop = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")),
            increment = 1;
    }
    var indexes = (CPIndexSet == null ? null : (CPIndexSet.isa.method_msgSend["indexSet"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSet"], "indexSet")));
    for (; index !== stop; index += increment)
        if (aPredicate((self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index), index, aContext))
            (indexes == null ? null : (indexes.isa.method_msgSend["addIndex:"] || _objj_forward)(indexes, (indexes.isa.method_dtable["addIndex:"], "addIndex:"), index));
    return indexes;
}

,["CPIndexSet","CPEnumerationOptions","Function","id"]), new objj_method(sel_getUid("makeObjectsPerformSelector:"), function $CPArray__makeObjectsPerformSelector_(self, _cmd, aSelector)
{
    (self.isa.method_msgSend["makeObjectsPerformSelector:withObjects:"] || _objj_forward)(self, (self.isa.method_dtable["makeObjectsPerformSelector:withObjects:"], self.isa.method_dtable["makeObjectsPerformSelector:withObjects:"], "makeObjectsPerformSelector:withObjects:"), aSelector, nil);
}

,["void","SEL"]), new objj_method(sel_getUid("makeObjectsPerformSelector:withObject:"), function $CPArray__makeObjectsPerformSelector_withObject_(self, _cmd, aSelector, anObject)
{
    return (self.isa.method_msgSend["makeObjectsPerformSelector:withObjects:"] || _objj_forward)(self, (self.isa.method_dtable["makeObjectsPerformSelector:withObjects:"], self.isa.method_dtable["makeObjectsPerformSelector:withObjects:"], "makeObjectsPerformSelector:withObjects:"), aSelector, [anObject]);
}

,["void","SEL","id"]), new objj_method(sel_getUid("makeObjectsPerformSelector:withObjects:"), function $CPArray__makeObjectsPerformSelector_withObjects_(self, _cmd, aSelector, objects)
{
    if (!aSelector)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPInvalidArgumentException, "makeObjectsPerformSelector:withObjects: 'aSelector' can't be nil");
    var index = 0,
        count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"));
    if ((objects == null ? null : (objects.isa.method_msgSend["count"] || _objj_forward)(objects, (objects.isa.method_dtable["count"], "count"))))
    {
        var argumentsArray = ((___r1 = [nil, aSelector]), ___r1 == null ? null : (___r1.isa.method_msgSend["arrayByAddingObjectsFromArray:"] || _objj_forward)(___r1, "arrayByAddingObjectsFromArray:", objects));
        for (; index < count; ++index)
        {
            argumentsArray[0] = (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index);
            objj_msgSend.apply(this, argumentsArray);
        }
    }
    else
    {
        var anIsa = self.isa;
        for (; index < count; ++index)
            anIsa.objj_msgSend0((self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index), aSelector);
    }
    var ___r1;
}

,["void","SEL","CPArray"]), new objj_method(sel_getUid("enumerateObjectsUsingBlock:"), function $CPArray__enumerateObjectsUsingBlock_(self, _cmd, aFunction)
{
    var index = 0,
        count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")),
        shouldStop = NO,
        shouldStopRef = function(__input) { if (arguments.length) return shouldStop = __input; return shouldStop; };
    for (; index < count; ++index)
    {
        aFunction((self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index), index, shouldStopRef);
        if (shouldStop)
            return;
    }
}

,["void","Function"]), new objj_method(sel_getUid("enumerateObjectsWithOptions:usingBlock:"), function $CPArray__enumerateObjectsWithOptions_usingBlock_(self, _cmd, options, aFunction)
{
    if (options & CPEnumerationReverse)
    {
        var index = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")) - 1,
            stop = -1,
            increment = -1;
    }
    else
    {
        var index = 0,
            stop = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")),
            increment = 1;
    }
    var shouldStop = NO,
        shouldStopRef = function(__input) { if (arguments.length) return shouldStop = __input; return shouldStop; };
    for (; index !== stop; index += increment)
    {
        aFunction((self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index), index, shouldStopRef);
        if (shouldStop)
            return;
    }
}

,["void","CPEnumerationOptions","Function"]), new objj_method(sel_getUid("firstObjectCommonWithArray:"), function $CPArray__firstObjectCommonWithArray_(self, _cmd, anArray)
{
    var count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"));
    if (!(anArray == null ? null : (anArray.isa.method_msgSend["count"] || _objj_forward)(anArray, (anArray.isa.method_dtable["count"], "count"))) || !count)
        return nil;
    var index = 0;
    for (; index < count; ++index)
    {
        var object = (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index);
        if ((anArray == null ? null : (anArray.isa.method_msgSend["containsObject:"] || _objj_forward)(anArray, (anArray.isa.method_dtable["containsObject:"], "containsObject:"), object)))
            return object;
    }
    return nil;
}

,["id","CPArray"]), new objj_method(sel_getUid("isEqualToArray:"), function $CPArray__isEqualToArray_(self, _cmd, anArray)
{
    if (self === anArray)
        return YES;
    if (!(anArray == null ? null : (anArray.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anArray, (anArray.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), CPArray)))
        return NO;
    var count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")),
        otherCount = (anArray == null ? null : (anArray.isa.method_msgSend["count"] || _objj_forward)(anArray, (anArray.isa.method_dtable["count"], "count")));
    if (anArray === nil || count !== otherCount)
        return NO;
    var index = 0;
    for (; index < count; ++index)
    {
        var lhs = (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index),
            rhs = (anArray == null ? null : (anArray.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(anArray, (anArray.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index));
        if (lhs !== rhs && (lhs && !lhs.isa || rhs && !rhs.isa || !(lhs == null ? null : (lhs.isa.method_msgSend["isEqual:"] || _objj_forward)(lhs, (lhs.isa.method_dtable["isEqual:"], "isEqual:"), rhs))))
            return NO;
    }
    return YES;
}

,["BOOL","id"]), new objj_method(sel_getUid("isEqual:"), function $CPArray__isEqual_(self, _cmd, anObject)
{
    return self === anObject || (self.isa.method_msgSend["isEqualToArray:"] || _objj_forward)(self, (self.isa.method_dtable["isEqualToArray:"], "isEqualToArray:"), anObject);
}

,["BOOL","id"]), new objj_method(sel_getUid("_javaScriptArrayCopy"), function $CPArray___javaScriptArrayCopy(self, _cmd)
{
    var index = 0,
        count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")),
        copy = [];
    for (; index < count; ++index)
        push.call(copy, (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index));
    return copy;
}

,["Array"]), new objj_method(sel_getUid("arrayByAddingObject:"), function $CPArray__arrayByAddingObject_(self, _cmd, anObject)
{
    var argumentArray = (self.isa.method_msgSend["_javaScriptArrayCopy"] || _objj_forward)(self, (self.isa.method_dtable["_javaScriptArrayCopy"], "_javaScriptArrayCopy"));
    push.call(argumentArray, anObject);
    return ((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["arrayWithArray:"] || _objj_forward)(___r1, "arrayWithArray:", argumentArray));
    var ___r1;
}

,["CPArray","id"]), new objj_method(sel_getUid("arrayByAddingObjectsFromArray:"), function $CPArray__arrayByAddingObjectsFromArray_(self, _cmd, anArray)
{
    if (!anArray)
        return (self.isa.method_msgSend["copy"] || _objj_forward)(self, (self.isa.method_dtable["copy"], "copy"));
    var anArray = anArray.isa === _CPJavaScriptArray ? anArray : (anArray == null ? null : (anArray.isa.method_msgSend["_javaScriptArrayCopy"] || _objj_forward)(anArray, (anArray.isa.method_dtable["_javaScriptArrayCopy"], "_javaScriptArrayCopy"))),
        argumentArray = concat.call((self.isa.method_msgSend["_javaScriptArrayCopy"] || _objj_forward)(self, (self.isa.method_dtable["_javaScriptArrayCopy"], "_javaScriptArrayCopy")), anArray);
    return ((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["arrayWithArray:"] || _objj_forward)(___r1, "arrayWithArray:", argumentArray));
    var ___r1;
}

,["CPArray","CPArray"]), new objj_method(sel_getUid("subarrayWithRange:"), function $CPArray__subarrayWithRange_(self, _cmd, aRange)
{
    if (!aRange)
        return (self.isa.method_msgSend["copy"] || _objj_forward)(self, (self.isa.method_dtable["copy"], "copy"));
    if (aRange.location < 0 || CPMaxRange(aRange) > self.length)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPRangeException, "subarrayWithRange: aRange out of bounds");
    var index = aRange.location,
        count = CPMaxRange(aRange),
        argumentArray = [];
    for (; index < count; ++index)
        push.call(argumentArray, (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index));
    return ((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["arrayWithArray:"] || _objj_forward)(___r1, "arrayWithArray:", argumentArray));
    var ___r1;
}

,["CPArray","CPRange"]), new objj_method(sel_getUid("sortedArrayUsingDescriptors:"), function $CPArray__sortedArrayUsingDescriptors_(self, _cmd, descriptors)
{
    var sorted = (self.isa.method_msgSend["copy"] || _objj_forward)(self, (self.isa.method_dtable["copy"], "copy"));
    (sorted == null ? null : (sorted.isa.method_msgSend["sortUsingDescriptors:"] || _objj_forward)(sorted, (sorted.isa.method_dtable["sortUsingDescriptors:"], "sortUsingDescriptors:"), descriptors));
    return sorted;
}

,["CPArray","CPArray"]), new objj_method(sel_getUid("sortedArrayUsingFunction:"), function $CPArray__sortedArrayUsingFunction_(self, _cmd, aFunction)
{
    return (self.isa.method_msgSend["sortedArrayUsingFunction:context:"] || _objj_forward)(self, (self.isa.method_dtable["sortedArrayUsingFunction:context:"], self.isa.method_dtable["sortedArrayUsingFunction:context:"], "sortedArrayUsingFunction:context:"), aFunction, nil);
}

,["CPArray","Function"]), new objj_method(sel_getUid("sortedArrayUsingFunction:context:"), function $CPArray__sortedArrayUsingFunction_context_(self, _cmd, aFunction, aContext)
{
    var sorted = (self.isa.method_msgSend["copy"] || _objj_forward)(self, (self.isa.method_dtable["copy"], "copy"));
    (sorted == null ? null : (sorted.isa.method_msgSend["sortUsingFunction:context:"] || _objj_forward)(sorted, (sorted.isa.method_dtable["sortUsingFunction:context:"], sorted.isa.method_dtable["sortUsingFunction:context:"], "sortUsingFunction:context:"), aFunction, aContext));
    return sorted;
}

,["CPArray","Function","id"]), new objj_method(sel_getUid("sortedArrayUsingSelector:"), function $CPArray__sortedArrayUsingSelector_(self, _cmd, aSelector)
{
    var sorted = (self.isa.method_msgSend["copy"] || _objj_forward)(self, (self.isa.method_dtable["copy"], "copy"));
    (sorted == null ? null : (sorted.isa.method_msgSend["sortUsingSelector:"] || _objj_forward)(sorted, (sorted.isa.method_dtable["sortUsingSelector:"], "sortUsingSelector:"), aSelector));
    return sorted;
}

,["CPArray","SEL"]), new objj_method(sel_getUid("componentsJoinedByString:"), function $CPArray__componentsJoinedByString_(self, _cmd, aString)
{
    return join.call((self.isa.method_msgSend["_javaScriptArrayCopy"] || _objj_forward)(self, (self.isa.method_dtable["_javaScriptArrayCopy"], "_javaScriptArrayCopy")), aString);
}

,["CPString","CPString"]), new objj_method(sel_getUid("arrayByApplyingBlock:"), function $CPArray__arrayByApplyingBlock_(self, _cmd, aFunction)
{
    var result = [],
        count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"));
    for (var idx = 0; idx < count; idx++)
    {
        var obj = aFunction((self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), idx), idx);
        (result == null ? null : (result.isa.method_msgSend["addObject:"] || _objj_forward)(result, (result.isa.method_dtable["addObject:"], "addObject:"), obj));
    }
    return result;
}

,["CPArray","Function"]), new objj_method(sel_getUid("description"), function $CPArray__description(self, _cmd)
{
    return (self.isa.method_msgSend["_descriptionWithMaximumDepth:"] || _objj_forward)(self, (self.isa.method_dtable["_descriptionWithMaximumDepth:"], "_descriptionWithMaximumDepth:"), CPArrayMaxDescriptionRecursion);
}

,["CPString"]), new objj_method(sel_getUid("_descriptionWithMaximumDepth:"), function $CPArray___descriptionWithMaximumDepth_(self, _cmd, maximumDepth)
{
    var index = 0,
        count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")),
        description = "@[";
    for (; index < count; ++index)
    {
        if (index === 0)
            description += "\n";
        var object = (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index);
        description += (CPDescriptionOfObject(object, maximumDepth)).replace(/^/mg, "    ");
        if (index < count - 1)
            description += ",\n";
        else
            description += "\n";
    }
    return description + "]";
}

,["CPString","int"]), new objj_method(sel_getUid("pathsMatchingExtensions:"), function $CPArray__pathsMatchingExtensions_(self, _cmd, filterTypes)
{
    var index = 0,
        count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")),
        array = [];
    for (; index < count; ++index)
        if (self[index].isa && ((___r1 = self[index]), ___r1 == null ? null : (___r1.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(___r1, "isKindOfClass:", (CPString.isa.method_msgSend["class"] || _objj_forward)(CPString, (CPString.isa.method_dtable["class"], "class")))) && (filterTypes == null ? null : (filterTypes.isa.method_msgSend["containsObject:"] || _objj_forward)(filterTypes, (filterTypes.isa.method_dtable["containsObject:"], "containsObject:"), ((___r1 = self[index]), ___r1 == null ? null : (___r1.isa.method_msgSend["pathExtension"] || _objj_forward)(___r1, "pathExtension")))))
            array.push(self[index]);
    return array;
    var ___r1;
}

,["CPArray","CPArray"]), new objj_method(sel_getUid("copy"), function $CPArray__copy(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["class"] || _objj_forward)(self, (self.isa.method_dtable["class"], "class"))), ___r1 == null ? null : (___r1.isa.method_msgSend["arrayWithArray:"] || _objj_forward)(___r1, "arrayWithArray:", self));
    var ___r1;
}

,["id"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $CPArray__alloc(self, _cmd)
{
    if (self === CPArray || self === CPMutableArray)
        return (_CPPlaceholderArray == null ? null : (_CPPlaceholderArray.isa.method_msgSend["alloc"] || _objj_forward)(_CPPlaceholderArray, (_CPPlaceholderArray.isa.method_dtable["alloc"], "alloc")));
    return (objj_getMetaClass("CPArray").super_class.method_dtable["alloc"] || _objj_forward)(self, "alloc");
}

,["id"]), new objj_method(sel_getUid("array"), function $CPArray__array(self, _cmd)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["init"] || _objj_forward)(___r1, "init"));
    var ___r1;
}

,["id"]), new objj_method(sel_getUid("arrayWithArray:"), function $CPArray__arrayWithArray_(self, _cmd, anArray)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithArray:"] || _objj_forward)(___r1, "initWithArray:", anArray));
    var ___r1;
}

,["id","CPArray"]), new objj_method(sel_getUid("arrayWithObject:"), function $CPArray__arrayWithObject_(self, _cmd, anObject)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:"] || _objj_forward)(___r1, "initWithObjects:", anObject));
    var ___r1;
}

,["id","id"]), new objj_method(sel_getUid("arrayWithObjects:"), function $CPArray__arrayWithObjects_(self, _cmd, anObject)
{
    arguments[0] = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"));
    arguments[1] = sel_getUid("initWithObjects:");
    return objj_msgSend.apply(this, arguments);
}

,["id","id"]), new objj_method(sel_getUid("arrayWithObjects:count:"), function $CPArray__arrayWithObjects_count_(self, _cmd, objects, aCount)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithObjects:count:"] || _objj_forward)(___r1, "initWithObjects:count:", objects, aCount));
    var ___r1;
}

,["id","id","CPUInteger"])]);
}
{
var the_class = objj_getClass("CPArray")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPArray\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("initWithCoder:"), function $CPArray__initWithCoder_(self, _cmd, aCoder)
{
    return (aCoder == null ? null : (aCoder.isa.method_msgSend["decodeObjectForKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["decodeObjectForKey:"], "decodeObjectForKey:"), "CP.objects"));
}

,["id","CPCoder"]), new objj_method(sel_getUid("encodeWithCoder:"), function $CPArray__encodeWithCoder_(self, _cmd, aCoder)
{
    (aCoder == null ? null : (aCoder.isa.method_msgSend["_encodeArrayOfObjects:forKey:"] || _objj_forward)(aCoder, (aCoder.isa.method_dtable["_encodeArrayOfObjects:forKey:"], aCoder.isa.method_dtable["_encodeArrayOfObjects:forKey:"], "_encodeArrayOfObjects:forKey:"), self, "CP.objects"));
}

,["void","CPCoder"])]);
}

{var the_class = objj_allocateClassPair(CPEnumerator, "_CPArrayEnumerator"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_array", "CPArray"), new objj_ivar("_index", "int")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithArray:"), function $_CPArrayEnumerator__initWithArray_(self, _cmd, anArray)
{
    self = (objj_getClass("_CPArrayEnumerator").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._array = anArray;
        self._index = -1;
    }
    return self;
}

,["id","CPArray"]), new objj_method(sel_getUid("nextObject"), function $_CPArrayEnumerator__nextObject(self, _cmd)
{
    if (++self._index >= ((___r1 = self._array), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._array.isa.method_dtable["count"], "count"))))
        return nil;
    return ((___r1 = self._array), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, (self._array.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), self._index));
    var ___r1;
}

,["id"])]);
}

{var the_class = objj_allocateClassPair(CPEnumerator, "_CPReverseArrayEnumerator"),
meta_class = the_class.isa;class_addIvars(the_class, [new objj_ivar("_array", "CPArray"), new objj_ivar("_index", "int")]);objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithArray:"), function $_CPReverseArrayEnumerator__initWithArray_(self, _cmd, anArray)
{
    self = (objj_getClass("_CPReverseArrayEnumerator").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    if (self)
    {
        self._array = anArray;
        self._index = ((___r1 = self._array), ___r1 == null ? null : (___r1.isa.method_msgSend["count"] || _objj_forward)(___r1, (self._array.isa.method_dtable["count"], "count")));
    }
    return self;
    var ___r1;
}

,["id","CPArray"]), new objj_method(sel_getUid("nextObject"), function $_CPReverseArrayEnumerator__nextObject(self, _cmd)
{
    if (--self._index < 0)
        return nil;
    return ((___r1 = self._array), ___r1 == null ? null : (___r1.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(___r1, (self._array.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), self._index));
    var ___r1;
}

,["id"])]);
}
var _CPSharedPlaceholderArray = nil;

{var the_class = objj_allocateClassPair(CPArray, "_CPPlaceholderArray"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $_CPPlaceholderArray__alloc(self, _cmd)
{
    if (!_CPSharedPlaceholderArray)
        _CPSharedPlaceholderArray = (objj_getMetaClass("_CPPlaceholderArray").super_class.method_dtable["alloc"] || _objj_forward)(self, "alloc");
    return _CPSharedPlaceholderArray;
}

,["id"])]);
}
p;9;CPArray.jt;1636;@STATIC;1.0;i;10;_CPArray.ji;20;_CPJavaScriptArray.jS;1488;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQQXJyYXkuaiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQXNCQSxrQixrQkFDQSxrQiIsImZpbGUiOiJDUEFycmF5LmpzIiwic291cmNlUm9vdCI6ImZpbGU6L1VzZXJzL2RhdmlkL3Byb2dyYW1zL2NhcHB1Y2Npbm8vRm91bmRhdGlvbi8iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ1BBcnJheS5qXG4gKiBGb3VuZGF0aW9uXG4gKlxuICogQ3JlYXRlZCBieSBGcmFuY2lzY28gVG9sbWFza3kuXG4gKiBDb3B5cmlnaHQgMjAwOCwgMjgwIE5vcnRoLCBJbmMuXG4gKlxuICogVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpY1xuICogTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyXG4gKiB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VXG4gKiBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWNcbiAqIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIGxpYnJhcnk7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmVcbiAqIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5rbGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgMDIxMTAtMTMwMSBVU0FcbiAqL1xuXG5AaW1wb3J0IFwiX0NQQXJyYXkualwiXG5AaW1wb3J0IFwiX0NQSmF2YVNjcmlwdEFycmF5LmpcIlxuIl19t;84;

objj_executeFile("_CPArray.j", YES);objj_executeFile("_CPJavaScriptArray.j", YES);p;16;CPMutableArray.jt;57178;@STATIC;1.0;i;10;_CPArray.jS;34020;eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNQTXV0YWJsZUFycmF5LmoiXSwibmFtZXMiOlsic2VsZiJdLCJtYXBwaW5ncyI6Ijs7QUFDQSxrQixrQkFZQTtBQUFBO0FBQUEsMkI7NkJBNkJBLDRCLCtEQUFzQixRO0FBQ3RCO0lBQ0ksaUMsQ0FBa0NBLEksRUFBTSxJLENBQXhDO0FBREosQzs7aUJBUUEsNEIsbUZBQXFDLE87QUFDckM7SUFDSSxJQUFJLEssR0FBUSxDO1FBQ1IsSyxHQUFRLENBQUMsT0FBRCxtQkFBQyxPQUFELCtDQUFDLE9BQUQsR0FBUyxrQ0FBVCxZQURaO0lBR0EsSyxFQUFPLEssQ0FBQSxDLENBQVEsSyxFQUFPLEVBQUUsSztRQUNwQixDQUFDQSxJQUFELG9EQUFDQSxJQUFELEdBQU0sb0NBQU4saUJBQWdCLENBQUMsT0FBRCxtQkFBQyxPQUFELHdEQUFDLE9BQUQsR0FBUywyQ0FBVCxxQkFBdUIsS0FBdkIsRUFBaEI7QUFMUixDOztzQkFhQSw0QixxRkFBeUIsUSxFQUE2QixPO0FBQ3REO0lBQ0ksaUMsQ0FBa0NBLEksRUFBTSxJLENBQXhDO0FBREosQzs7OEJBU0EsNEIsMkZBQStCLE8sRUFBOEIsTztBQUM3RDtJQUNJLElBQUksWSxHQUFlLENBQUMsT0FBRCxtQkFBQyxPQUFELCtDQUFDLE9BQUQsR0FBUyxrQ0FBVCxZO1FBQ2YsWSxHQUFlLENBQUMsT0FBRCxtQkFBQyxPQUFELCtDQUFDLE9BQUQsR0FBUyxrQ0FBVCxZQURuQjtJQUdBLElBQUksWSxDQUFBLEcsQ0FBaUIsWUFBckI7UUFDSSxDQUFDLFdBQUQsdURBQUMsV0FBRCxHQUFhLDhDQUFiLEVBQW9DLDhDQUFwQyxvQkFBbUIsZ0JBQW5CLEVBQTJDLHFDLENBQUEsQyxDQUF3QyxZLENBQXhDLEMsQ0FBdUQsbUIsQ0FBdkQsQyxDQUE2RSxZLENBQTdFLEMsQ0FBNEYsc0JBQXZJO0lBRUosSUFBSSxTLEdBQVksQ0FBQyxPQUFELG1CQUFDLE9BQUQsbURBQUMsT0FBRCxHQUFTLHNDQUFULGdCQUFoQjtJQUVBLElBQUksUyxDQUFBLEUsQ0FBYSxDQUFDQSxJQUFELCtDQUFDQSxJQUFELEdBQU0sK0JBQU4sVyxDQUFBLEMsQ0FBZSxZQUFoQztRQUNJLENBQUMsV0FBRCx1REFBQyxXQUFELEdBQWEsOENBQWIsRUFBb0MsOENBQXBDLG9CQUFtQixnQkFBbkIsRUFBMkMsa0IsQ0FBQSxDLENBQXFCLFMsQ0FBckIsQyxDQUFpQyxxRCxDQUFqQyxDLENBQXlGLENBQUNBLElBQUQsK0NBQUNBLElBQUQsR0FBTSwrQkFBTixXLENBQXpGLEMsQ0FBd0csNkIsQ0FBeEcsQyxDQUF3SSxZLENBQXhJLEMsQ0FBdUosSUFBbE07SUFFSixJQUFJLEssR0FBUSxDO1FBQ1IsWSxHQUFlLENBQUMsT0FBRCxtQkFBQyxPQUFELG9EQUFDLE9BQUQsR0FBUyx1Q0FBVCxpQkFEbkI7SUFHQSxLLEVBQU8sSyxDQUFBLEMsQ0FBUSxZLEVBQWMsR0FBRSxLLEVBQU8sWSxHQUFlLENBQUMsT0FBRCxtQkFBQyxPQUFELGdFQUFDLE9BQUQsR0FBUyxtREFBVCw2QkFBK0IsWUFBL0IsRTtRQUNqRCxDQUFDQSxJQUFELCtEQUFDQSxJQUFELEdBQU0sK0NBQU4sRUFBaUQsK0NBQWpELDRCQUFtQixDQUFDLE9BQUQsbUJBQUMsT0FBRCx3REFBQyxPQUFELEdBQVMsMkNBQVQscUJBQXVCLEtBQXZCLEVBQW5CLEVBQXlELFlBQXpEO0FBaEJSLEM7O21DQW1CQSw0QiwySEFBK0IsUSxFQUE2QyxXO0FBQzVFO0lBQ0ksSUFBSSxLO1FBQ0EsSyxHQUFRLENBQUMsV0FBRCxtQkFBQyxXQUFELCtDQUFDLFdBQUQsR0FBYSxzQ0FBYixZQURaO0lBR0EsSUFBSSxLQUFKO1FBQ0ksSyxHQUFRLENBQUNBLElBQUQsOEZBQUNBLElBQUQsR0FBTSw4RUFBTixFQUNNLDhFQUROLEVBRVksOEVBRlosRUFHSSw4RUFISiwyREFBb0IsUUFBcEIsRUFDb0IsR0FEcEIsRUFFb0IsK0JBRnBCLEUsUUFHb0IsUSxDQUFTLEcsRUFBSyxHO1FBQzFDO1lBQ0ksSUFBSSxLLEdBQVEsQztnQkFDUixNLEdBQVMsYUFEYjtZQUdBLE9BQU8sSyxDQUFBLEMsQ0FBUSxLLEtBQVcsTSxHQUFTLFVBQUMsQ0FBQyxXQUFELG1CQUFDLFdBQUQsd0RBQUMsV0FBRCxHQUFhLCtDQUFiLHFCQUEyQixLQUEzQixFQUFELHVJQUFpRCxHQUFqRCxFQUFnRSxHQUFoRSxFLEVBQVgsRyxDQUFxRixhO2dCQUN6RyxFQUFFLEtBQUY7WUFFSixNLENBQU8sTTs7UUFQWCxDQUpRLENBQVI7SUFESjtRQWdCSSxLLEdBQVEsQ0FBQ0EsSUFBRCwrQ0FBQ0EsSUFBRCxHQUFNLCtCQUFOLFdBQVI7SUFFSixDQUFDQSxJQUFELCtEQUFDQSxJQUFELEdBQU0sK0NBQU4sRUFBNEIsK0NBQTVCLDRCQUFtQixRQUFuQixFQUFvQyxLQUFwQztJQUVBLE0sQ0FBTyxLO0FBeEJYLEM7O2lDQWdDQSw0QiwyR0FBeUMsTyxFQUF1QixRO0FBQ2hFO0lBQ0ksaUMsQ0FBa0NBLEksRUFBTSxJLENBQXhDO0FBREosQzs7OEJBVUEsNEIsbUhBQTRDLE8sRUFBNkIsTztBQUN6RTtJQUNJLElBQUksQyxHQUFJLEM7UUFDSixLLEdBQVEsQ0FBQyxPQUFELG1CQUFDLE9BQUQsb0RBQUMsT0FBRCxHQUFTLHVDQUFULGlCQURaO0lBR0EsT0FBTyxLLENBQUEsRyxDQUFVLFU7SUFDakI7UUFDSSxDQUFDQSxJQUFELDBFQUFDQSxJQUFELEdBQU0sMERBQU4sRUFBaUMsMERBQWpDLHVDQUEyQixLQUEzQixFQUE0QyxDQUFDLE9BQUQsbUJBQUMsT0FBRCx3REFBQyxPQUFELEdBQVMsMkNBQVQscUJBQXVCLEMsRUFBdkIsRUFBNUM7UUFDQSxLLEdBQVEsQ0FBQyxPQUFELG1CQUFDLE9BQUQsZ0VBQUMsT0FBRCxHQUFTLG1EQUFULDZCQUErQixLQUEvQixFQUFSO0lBRkosQztBQUxKLEM7O21DQW1CQSw0Qiw2SUFBdUMsTSxFQUFxQyxPLEVBQXVCLFU7QUFDbkc7SUFDSSxDQUFDQSxJQUFELCtEQUFDQSxJQUFELEdBQU0sK0NBQU4sNEJBQTJCLE1BQTNCO0lBRUEsSUFBSSxVLEtBQWUsV0FBVyxRLENBQVgsRyxDQUF3QixDLElBQUssV0FBVyxNLENBQVgsRyxDQUFzQixDQUFDLE9BQUQsbUJBQUMsT0FBRCwrQ0FBQyxPQUFELEdBQVMsa0NBQVQsWSxDQUF0RTtRQUNJLE8sR0FBVSxDQUFDLE9BQUQsbUJBQUMsT0FBRCw0REFBQyxPQUFELEdBQVMsK0NBQVQseUJBQTJCLFVBQTNCLEVBQVY7SUFFSixJQUFJLE8sR0FBVSxDQUFDLFVBQUQsbUJBQUMsVUFBRCxxRUFBQyxVQUFELEdBQVksMkRBQVosa0NBQXVDLFcsQ0FBWSxPQUFPLFEsRUFBVSxDQUFDLE9BQUQsbUJBQUMsT0FBRCwrQ0FBQyxPQUFELEdBQVMsa0NBQVQsWSxDQUFwRSxFQUFkO0lBRUEsQ0FBQ0EsSUFBRCxrRUFBQ0EsSUFBRCxHQUFNLGtEQUFOLEVBQTRCLGtEQUE1QiwrQkFBb0IsT0FBcEIsRUFBc0MsT0FBdEM7QUFSSixDOzswQ0FrQkEsNEIsaUlBQXVDLE0sRUFBcUMsTztBQUM1RTtJQUNJLENBQUNBLElBQUQsMkZBQUNBLElBQUQsR0FBTSwyRUFBTixFQUFtQywyRUFBbkMsRUFBZ0UsMkVBQWhFLHdEQUE0QixNQUE1QixFQUF3RCxPQUF4RCxFQUFzRSxHQUF0RTtBQURKLEM7O2dDQVFBLDRCLDZEQUEwQixPO0FBQzFCO0lBQ0ksSUFBSUEsSSxDQUFBLEcsQ0FBUyxPQUFiO1FBQ0ksTTtJQUVKLENBQUNBLElBQUQsMERBQUNBLElBQUQsR0FBTSwwQ0FBTjtJQUNBLENBQUNBLElBQUQsOERBQUNBLElBQUQsR0FBTSw4Q0FBTiwyQkFBMEIsT0FBMUI7QUFMSixDOztzQkFZQSw0QjtBQUNBO0lBQ0ksT0FBTyxDQUFDQSxJQUFELCtDQUFDQSxJQUFELEdBQU0sK0JBQU4sVztRQUNILENBQUNBLElBQUQsMERBQUNBLElBQUQsR0FBTSwwQ0FBTjtBQUZSLEM7O1lBUUEsNEI7QUFDQTtJQUNJLGlDLENBQWtDQSxJLEVBQU0sSSxDQUF4QztBQURKLEM7O1lBUUEsNEIscUVBQXlCLFE7QUFDekI7SUFDSSxDQUFDQSxJQUFELCtEQUFDQSxJQUFELEdBQU0sK0NBQU4sRUFBNEIsK0NBQTVCLDRCQUFtQixRQUFuQixFQUFvQyxXLENBQVksQyxFQUFHLENBQUNBLElBQUQsK0NBQUNBLElBQUQsR0FBTSwrQkFBTixXLENBQW5EO0FBREosQzs7aUJBU0EsNEIscUZBQXlCLFEsRUFBMEIsTTtBQUNuRDtJQUNJLElBQUksS0FBSjtJQUVBLE8sQ0FBUSxLLEdBQVEsQ0FBQ0EsSUFBRCxnRUFBQ0EsSUFBRCxHQUFNLGdEQUFOLEVBQTZCLGdEQUE3Qiw2QkFBb0IsUUFBcEIsRUFBcUMsTUFBckMsQyxFQUFULEUsQ0FBMEQsVTtJQUNqRTtRQUNJLENBQUNBLElBQUQsOERBQUNBLElBQUQsR0FBTSw4Q0FBTiwyQkFBMEIsS0FBMUI7UUFDQSxNLEdBQVMsbUIsQ0FBb0IsVyxDQUFZLEssRUFBTyxDQUFDQSxJQUFELCtDQUFDQSxJQUFELEdBQU0sK0JBQU4sVyxDQUFBLEMsQ0FBZSxLLEdBQVEsTSxDQUF2RTtJQUZKLEM7QUFKSixDOzsyQkFjQSw0QixtRkFBd0MsTztBQUN4QztJQUNJLGlDLENBQWtDQSxJLEVBQU0sSSxDQUF4QztBQURKLEM7O3lCQVFBLDRCLHlGQUEyQyxVO0FBQzNDO0lBQ0ksSUFBSSxLLEdBQVEsQ0FBQyxVQUFELG1CQUFDLFVBQUQsbURBQUMsVUFBRCxHQUFZLHlDQUFaLGdCQUFaO0lBRUEsT0FBTyxLLENBQUEsRyxDQUFVLFU7SUFDakI7UUFDSSxDQUFDQSxJQUFELDhEQUFDQSxJQUFELEdBQU0sOENBQU4sMkJBQTBCLEtBQTFCO1FBQ0EsSyxHQUFRLENBQUMsVUFBRCxtQkFBQyxVQUFELDZEQUFDLFVBQUQsR0FBWSxtREFBWiwwQkFBK0IsS0FBL0IsRUFBUjtJQUZKLEM7QUFKSixDOzt5QkFlQSw0QiwyRkFBb0MsUTtBQUNwQztJQUNJLENBQUNBLElBQUQsMEVBQUNBLElBQUQsR0FBTSwwREFBTixFQUF1QywwREFBdkMsdUNBQThCLFFBQTlCLEVBQStDLFcsQ0FBWSxDLEVBQUcsQ0FBQ0EsSUFBRCwrQ0FBQ0EsSUFBRCxHQUFNLCtCQUFOLFcsQ0FBOUQ7QUFESixDOztpQkFXQSw0QiwyR0FBb0MsUSxFQUEwQixNO0FBQzlEO0lBQ0ksSUFBSSxLO1FBQ0EsSyxHQUFRLENBQUNBLElBQUQsK0NBQUNBLElBQUQsR0FBTSwrQkFBTixXQURaO0lBR0EsTyxDQUFRLEssR0FBUSxDQUFDQSxJQUFELDJFQUFDQSxJQUFELEdBQU0sMkRBQU4sRUFBd0MsMkRBQXhDLHdDQUErQixRQUEvQixFQUFnRCxNQUFoRCxDLEVBQVQsRyxDQUFzRSxVO0lBQzdFO1FBQ0ksQ0FBQ0EsSUFBRCw4REFBQ0EsSUFBRCxHQUFNLDhDQUFOLDJCQUEwQixLQUExQjtRQUNBLE0sR0FBUyxtQixDQUFvQixXLENBQVksSyxFQUFPLEVBQUcsSyxDQUFILEMsQ0FBWSxLLEdBQVEsTSxDQUFwRTtJQUZKLEM7QUFMSixDOzsyQkFlQSw0QixxRkFBc0MsTztBQUN0QztJQUNJLElBQUksSyxHQUFRLEM7UUFDUixLLEdBQVEsQ0FBQyxPQUFELG1CQUFDLE9BQUQsK0NBQUMsT0FBRCxHQUFTLGtDQUFULFlBRFo7SUFHQSxLLEVBQU8sSyxDQUFBLEMsQ0FBUSxLLEVBQU8sRUFBRSxLO1FBQ3BCLENBQUNBLElBQUQsdURBQUNBLElBQUQsR0FBTSx1Q0FBTixvQkFBbUIsQ0FBQyxPQUFELG1CQUFDLE9BQUQsd0RBQUMsT0FBRCxHQUFTLDJDQUFULHFCQUF1QixLQUF2QixFQUFuQjtBQUxSLEM7O3NCQVlBLDRCLHFGQUFzQyxNO0FBQ3RDO0lBQ0ksSUFBSSxLLEdBQVEsT0FBTyxRO1FBQ2YsSyxHQUFRLFUsQ0FBVyxNLENBRHZCO0lBR0EsT0FBTyxLLEdBQUEsQyxDQUFVLEs7UUFDYixDQUFDQSxJQUFELDhEQUFDQSxJQUFELEdBQU0sOENBQU4sMkJBQTBCLEtBQTFCO0FBTFIsQzs7c0JBY0EsNEIsMkhBQTBDLE8sRUFBc0MsVTtBQUNoRjtJQUNJLElBQUksTyxDQUFBLEcsQ0FBWSxVQUFoQjtRQUNJLE07SUFFSixJQUFJLFMsR0FBWSxDQUFDQSxJQUFELHdEQUFDQSxJQUFELEdBQU0sd0NBQU4scUJBQW9CLE9BQXBCLENBQWhCO0lBRUEsQ0FBQ0EsSUFBRCwwRUFBQ0EsSUFBRCxHQUFNLDBEQUFOLEVBQW1DLDBEQUFuQyx1Q0FBMkIsT0FBM0IsRUFBOEMsQ0FBQ0EsSUFBRCx3REFBQ0EsSUFBRCxHQUFNLHdDQUFOLHFCQUFvQixVQUFwQixDQUE5QztJQUNBLENBQUNBLElBQUQsMEVBQUNBLElBQUQsR0FBTSwwREFBTixFQUFzQywwREFBdEMsdUNBQTJCLFVBQTNCLEVBQWlELFNBQWpEO0FBUEosQzs7c0NBVUEsNEIscUZBQXNDLFc7QUFDdEM7SUFDSSxJQUFJLEMsR0FBSSxDQUFDLFdBQUQsbUJBQUMsV0FBRCwrQ0FBQyxXQUFELEdBQWEsc0NBQWIsWTtRQUNKLGEsR0FBZ0IsQyxDQURwQjtJQUlBLE9BQU8sQztJQUNQO1FBQ0ksSUFBSSxDLEdBQUksQ0FBQyxXQUFELG1CQUFDLFdBQUQsd0RBQUMsV0FBRCxHQUFhLCtDQUFiLHFCQUEyQixDQUEzQixFQUFSO1FBQ0EsQ0FBQyxhQUFELG1CQUFDLGFBQUQsb0RBQUMsYUFBRCxHQUFlLDZDQUFmLGlCQUF5QixDQUFFLEcsRUFBSyxDQUFDLENBQUQsbUJBQUMsQ0FBRCw2Q0FBQyxDQUFELEdBQUcsMEJBQUgsVSxFQUFTLEcsRUFBSyxDQUFDLENBQUQsbUJBQUMsQ0FBRCxtREFBQyxDQUFELEdBQUcsZ0NBQUgsZ0IsRUFBZSxHLEVBQUssQ0FBQyxDQUFELG1CQUFDLENBQUQsa0RBQUMsQ0FBRCxHQUFHLCtCQUFILGUsQ0FBbEU7SUFGSixDO0lBSUEsMkIsQ0FBNEJBLEksRUFBTSxhLENBQWxDO0FBVkosQzs7c0JBa0JBLDRCLCtGQUFvQyxTLEVBQXNCLFE7QUFDMUQ7SUFDSSxzQixDQUF1QkEsSSxFQUFNLFMsRUFBVyxRLENBQXhDO0FBREosQzs7NEJBUUEsNEIsK0VBQStCLFM7QUFDL0I7SUFDSSxzQixDQUF1QkEsSSxFQUFNLGUsRUFBaUIsUyxDQUE5QztBQURKLEM7Ozs4QkFyVkEsNEIsK0VBQXlDLFM7QUFDekM7SUFDSSxNLENBQU8sVUFBQyxDQUFDQSxJQUFELCtDQUFDQSxJQUFELEdBQU0sK0JBQU4sV0FBRCx1SEFBK0IsU0FBL0IsRTs7QUFEWCxDOzs7O0FBMFZBO0FBQUE7OzREQUVBLDRCO0FBQ0E7SUFDSSxJQUFJLEMsR0FBSSxDQUFDLGNBQUQsNkNBQUMsY0FBRCxHQUFnQix1Q0FBaEIsU0FBUjtJQUNBLENBQUMsQ0FBRCxtQkFBQyxDQUFELDhEQUFDLENBQUQsR0FBRywyQ0FBSCwyQkFBdUJBLElBQXZCO0lBQ0EsTSxDQUFPLEM7QUFIWCxDOzs7O0FBUUEsSUFBSSxlLEdBQWtCLFEsQ0FBUyxPLEVBQVMsTyxFQUFTLFE7QUFDakQ7SUFDSSxNLENBQU8sQ0FBQyxPQUFELG1CQUFDLE9BQUQscUVBQUMsT0FBRCxHQUFTLHdEQUFULEVBQWtDLHdEQUFsQyxrQ0FBeUIsUUFBekIsRUFBNkMsT0FBN0MsRTtBQURYLENBREE7QUFLQSxJQUFJLHNCLEdBQXlCLFEsQ0FBUyxLLEVBQU8sUyxFQUFXLFE7QUFDeEQ7SUFDSSxJQUFJLEM7UUFDQSxDO1FBQ0EsQztRQUNBLEM7UUFDQSxDO1FBQ0EsQztRQUNBLEMsR0FBSSxNQUFNLE07UUFDVixDQVBKO0lBU0EsSUFBSSxDO1FBQ0EsQyxHQUFJLEMsQ0FEUjtJQUdBLEtBQUssQyxHQUFJLEMsRUFBRyxDLENBQUEsQyxDQUFJLEMsRUFBRyxDLElBQUssQztJQUN4QjtRQUNJLEtBQUssQyxHQUFJLEMsQ0FBQSxDLENBQUksQyxDQUFKLEMsQ0FBUSxDLEVBQUcsQyxDQUFBLEUsQ0FBSyxDLEVBQUcsQyxJQUFLLEMsQ0FBQSxDLENBQUksQztRQUNyQztZQUNJLEMsR0FBSSxDLENBQUEsQyxDQUFJLEMsQ0FBSixDLENBQVEsQ0FBWjtZQUNBLElBQUksQyxDQUFBLEMsQ0FBSSxDQUFSO2dCQUNJLEMsR0FBSSxDQUFKO1lBRUosS0FBSyxFLEdBQUksQyxFQUFHLEMsR0FBSSxDLEdBQUcsQyxDQUFBLEUsQ0FBSyxDLEVBQUcsRSxJQUFLLEM7Z0JBQzVCLEVBQUUsQyxJQUFLLE1BQU0sQyxDQUFiO1lBRUosS0FBSyxFLEdBQUksQyxFQUFHLEMsR0FBSSxDLEdBQUcsQyxDQUFBLEMsQ0FBSSxDLElBQUssQyxDQUFBLEUsQ0FBSyxDLENBQUEsQyxDQUFJLEMsRUFBRyxDO1lBQ3hDO2dCQUNJLEMsR0FBSSxNQUFNLEMsQ0FBVjtnQkFDQSxDLEdBQUksUyxDQUFVLEMsRUFBRyxFQUFFLEMsR0FBSSxRLENBQXZCO2dCQUVBLElBQUksQyxDQUFBLEUsQ0FBSyxDQUFUO29CQUNJLE1BQU0sQyxJQUFLLEVBQUUsQyxHQUFiO2dCQURKO2dCQUdBO29CQUNJLE1BQU0sQyxJQUFLLENBQVg7b0JBQ0EsQyxFQUFBO2dCQUZKLEMsWUFQSixDLFlBYUEsT0FBTyxDLENBQUEsQyxDQUFJLEM7Z0JBQ1AsTUFBTSxDLE1BQU8sRUFBRSxDLEdBQWY7UUF2QlIsQyxJQUZKLENBZEosQ0FEQTtBQThDQSxJQUFJLGtCLEdBQXFCLENBQUMsTUFBRCw4Q0FBQyxNQUFELEdBQVEsZ0NBQVIsVUFBekI7QUFHQSxJQUFJLDJCLEdBQThCLFEsQ0FBUyxDLEVBQUcsQztBQUM5QztJQUNJLElBQUksQztRQUNBLEM7UUFDQSxDO1FBQ0EsQztRQUNBLEM7UUFDQSxDO1FBQ0EsQyxHQUFJLEVBQUUsTTtRQUNOLEUsR0FBSyxFQUFFLE0sQ0FBRixDLENBQVcsQztRQUNoQixDO1FBQ0EsQyxHQUFJLEMsQ0FUUjtJQVdBLElBQUksQztRQUNBLEMsR0FBSSxDO1FBQ0osRTtRQUNBLEU7UUFDQSxFO1FBQ0EsSTtRQUNBLEk7UUFDQSxHO1FBQ0EsRTtRQUNBLE07UUFDQSxNO1FBQ0EsTSxHQUFTLGtCQVhiO0lBYUEsSUFBSSxFLENBQUEsQyxDQUFLLENBQVQ7UUFDSSxNO0lBRUosS0FBSyxDLEdBQUksQyxFQUFHLEMsQ0FBQSxDLENBQUksQyxFQUFHLEMsSUFBSyxDO0lBQ3hCO1FBQ0ksS0FBSyxDLEdBQUksQyxDQUFBLEMsQ0FBSSxDLENBQUosQyxDQUFRLEMsRUFBRyxDLENBQUEsRSxDQUFLLEMsRUFBRyxDLElBQUssQyxDQUFBLEMsQ0FBSSxDO1FBQ3JDO1lBQ0ksQyxHQUFJLEMsQ0FBQSxDLENBQUksQyxDQUFKLEMsQ0FBUSxDQUFaO1lBRUEsSUFBSSxDLENBQUEsQyxDQUFJLENBQVI7Z0JBQ0ksQyxHQUFJLENBQUo7WUFFSixLQUFLLEUsR0FBSSxDLEVBQUcsQyxHQUFJLEMsR0FBRyxDLENBQUEsRSxDQUFLLEMsRUFBRyxFLElBQUssQztnQkFDNUIsRUFBRSxDLElBQUssRUFBRSxDLENBQVQ7WUFFSixLQUFLLEUsR0FBSSxDLEVBQUcsQyxHQUFJLEMsR0FBRyxDLENBQUEsQyxDQUFJLEMsSUFBSyxDLENBQUEsRSxDQUFLLEMsQ0FBQSxDLENBQUksQyxFQUFHLEM7WUFDeEM7Z0JBQ0ksQyxHQUFJLEVBQUUsQyxDQUFOO2dCQUNBLEksR0FBTyxFQUFFLElBQVQ7Z0JBRUEsSUFBSSxDQUFDLElBQUw7b0JBQ0ksSSxHQUFPLENBQUMsQ0FBRCxtQkFBQyxDQUFELDZDQUFDLENBQUQsR0FBRywwQkFBSCxVQUFQO2dCQUVKLEUsR0FBSyxFQUFFLEksQ0FBUDtnQkFFQSxJQUFJLENBQUMsRUFBTDtnQkFDQTtvQkFDSSxFLEdBQUssQyxDQUFMO29CQUNBLEUsR0FBSyxFQUFMO29CQUVBO29CQUNBO3dCQUNJLEcsR0FBTSxFQUFFLEUsQ0FBRixDQUFNLENBQVo7d0JBQ0EsR0FBRyxHLElBQU8sQ0FBQyxDQUFELG1CQUFDLENBQUQsMERBQUMsQ0FBRCxHQUFHLHVDQUFILHVCQUFtQixHQUFuQixFQUFWO29CQUZKLEMsMkJBR1MsRTt3Q0FFVCxFQUFFLEksSUFBUSxFQUFWO2dCQVZKLEMsZ0JBYUEsSSxHQUFPLEVBQUUsQyxDQUFGLENBQUssSUFBWjtnQkFFQSxJQUFJLENBQUMsSUFBTDtvQkFDSSxJLEdBQU8sVUFBQyxFQUFFLEMsQ0FBSCwyRkFBUDtnQkFFSixFLEdBQUssRUFBRSxJLENBQVA7Z0JBRUEsSUFBSSxDQUFDLEVBQUw7Z0JBQ0E7b0JBQ0ksRSxHQUFLLEMsQ0FBTDtvQkFDQSxFLEdBQUssRUFBTDtvQkFFQTtvQkFDQTt3QkFDSSxHLEdBQU0sRUFBRSxFLENBQUYsQ0FBTSxDQUFaO3dCQUNBLEdBQUcsRyxJQUFPLFVBQUMsRUFBRSxDLENBQUgscUhBQXNCLEdBQXRCLEVBQVY7b0JBRkosQywyQkFHUyxFO3dDQUVULEVBQUUsSSxJQUFRLEVBQVY7Z0JBVkosQyxnQkFhQSxFLEdBQUssRUFBTDtnQkFFQTtnQkFDQTtvQkFDSSxFLEdBQUssRUFBRSxFLENBQVA7b0JBQ0EsRyxHQUFNLEdBQUcsQ0FBVDtvQkFDQSxNLEdBQVMsR0FBRyxHLENBQVo7b0JBQ0EsTSxHQUFTLEdBQUcsRyxDQUFaO29CQUNBLElBQUksTSxDQUFBLEcsQ0FBVyxHLElBQU8sTSxDQUFBLEcsQ0FBVyxNQUFqQzt3QkFDSSxDLEdBQUksTSxDQUFBLEcsQ0FBVyxHLElBQU8sTSxDQUFBLEcsQ0FBVyxNLEdBQVMsYSxHQUFnQixrQkFBMUQ7b0JBREo7d0JBR0ksQyxHQUFJLE0sQ0FBQSxHLENBQVcsRyxJQUFPLE0sQ0FBQSxHLENBQVcsTSxHQUFTLG1CLEdBQXNCLE9BQU8sR0FBUCxDQUFXLGEsQ0FBYyxNLEVBQVEsR0FBRyxDLEVBQUcsTSxDQUF2RztvQkFFSixJQUFJLEMsSUFBSyxDQUFDLEdBQUcsQ0FBYjt3QkFDSSxDLEdBQUksQ0FBQyxDQUFMO2dCQVhSLEMsdUJBWVMsRSxNQUFRLEMsQ0FBQSxFLENBQUssYTtnQ0FFdEIsSUFBSSxDLENBQUEsRSxDQUFLLENBQVQ7b0JBQ0ksRUFBRSxDLElBQUssRUFBRSxDLEdBQVQ7Z0JBREo7Z0JBR0E7b0JBQ0ksRUFBRSxDLElBQUssQ0FBUDtvQkFDQSxDLEVBQUE7Z0JBRkosQyxZQWhFSixDLFlBc0VBLE9BQU8sQyxDQUFBLEMsQ0FBSSxDO2dCQUNQLEVBQUUsQyxNQUFPLEVBQUUsQyxHQUFYO1FBakZSLEMsSUFGSixDO0FBN0JKLENBREEiLCJmaWxlIjoiQ1BNdXRhYmxlQXJyYXkuanMiLCJzb3VyY2VSb290IjoiZmlsZTovVXNlcnMvZGF2aWQvcHJvZ3JhbXMvY2FwcHVjY2luby9Gb3VuZGF0aW9uLyIsInNvdXJjZXNDb250ZW50IjpbIlxuQGltcG9ydCBcIl9DUEFycmF5LmpcIlxuXG5AY2xhc3MgQ1BJbmRleFNldFxuXG4vKiFcbiAgICBAY2xhc3MgQ1BNdXRhYmxlQXJyYXlcbiAgICBAaW5ncm91cCBjb21wYXRhYmlsaXR5XG5cbiAgICBUaGlzIGNsYXNzIGlzIGp1c3QgYW4gZW1wdHkgc3ViY2xhc3Mgb2YgQ1BBcnJheS5cbiAgICBDUEFycmF5IGFscmVhZHkgaW1wbGVtZW50cyBtdXRhYmxlIG1ldGhvZHMgYW5kXG4gICAgdGhpcyBjbGFzcyBvbmx5IGV4aXN0cyBmb3Igc291cmNlIGNvbXBhdGFiaWxpdHkuXG4qL1xuQGltcGxlbWVudGF0aW9uIENQTXV0YWJsZUFycmF5IDogQ1BBcnJheVxue1xufVxuXG4vLyBDcmVhdGluZyBhcnJheXNcbi8qIVxuICAgIENyZWF0ZXMgYW4gYXJyYXkgYWJsZSB0byBzdG9yZSBhdCBsZWFzdCAgXFxjIGFDYXBhY2l0eVxuICAgIGl0ZW1zLiBCZWNhdXNlIENQQXJyYXkgaXMgYmFja2VkIGJ5IEphdmFTY3JpcHQgYXJyYXlzLFxuICAgIHRoaXMgbWV0aG9kIGVuZHMgdXAgc2ltcGx5IHJldHVybmluZyBhIHJlZ3VsYXIgYXJyYXkuXG4qL1xuKyAoQ1BBcnJheSlhcnJheVdpdGhDYXBhY2l0eTooQ1BVSW50ZWdlcilhQ2FwYWNpdHlcbntcbiAgICByZXR1cm4gW1tzZWxmIGFsbG9jXSBpbml0V2l0aENhcGFjaXR5OmFDYXBhY2l0eV07XG59XG5cbi8qIVxuICAgIEluaXRpYWxpemVzIGFuIGFycmF5IGFibGUgdG8gc3RvcmUgYXQgbGVhc3QgXFxjIGFDYXBhY2l0eSBpdGVtcy4gQmVjYXVzZSBDUEFycmF5XG4gICAgaXMgYmFja2VkIGJ5IEphdmFTY3JpcHQgYXJyYXlzLCB0aGlzIG1ldGhvZCBlbmRzIHVwIHNpbXBseSByZXR1cm5pbmcgYSByZWd1bGFyIGFycmF5LlxuKi9cbi8qLSAoaWQpaW5pdFdpdGhDYXBhY2l0eTooQ1BVSW50ZWdlcilhQ2FwYWNpdHlcbntcbiAgICByZXR1cm4gc2VsZjtcbn0qL1xuXG4vLyBBZGRpbmcgYW5kIHJlcGxhY2luZyBvYmplY3RzXG4vKiFcbiAgICBBZGRzIFxcYyBhbk9iamVjdCB0byB0aGUgZW5kIG9mIHRoZSBhcnJheS5cbiAgICBAcGFyYW0gYW5PYmplY3QgdGhlIG9iamVjdCB0byBhZGQgdG8gdGhlIGFycmF5XG4qL1xuLSAodm9pZClhZGRPYmplY3Q6KGlkKWFuT2JqZWN0XG57XG4gICAgX0NQUmFpc2VJbnZhbGlkQWJzdHJhY3RJbnZvY2F0aW9uKHNlbGYsIF9jbWQpO1xufVxuXG4vKiFcbiAgICBBZGRzIHRoZSBvYmplY3RzIGluIFxcYyBhbkFycmF5IHRvIHRoZSByZWNlaXZlciBhcnJheS5cbiAgICBAcGFyYW0gYW5BcnJheSB0aGUgYXJyYXkgb2Ygb2JqZWN0cyB0byBhZGQgdG8gdGhlIGVuZCBvZiB0aGUgcmVjZWl2ZXJcbiovXG4tICh2b2lkKWFkZE9iamVjdHNGcm9tQXJyYXk6KENQQXJyYXkpYW5BcnJheVxue1xuICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgIGNvdW50ID0gW2FuQXJyYXkgY291bnRdO1xuXG4gICAgZm9yICg7IGluZGV4IDwgY291bnQ7ICsraW5kZXgpXG4gICAgICAgIFtzZWxmIGFkZE9iamVjdDpbYW5BcnJheSBvYmplY3RBdEluZGV4OmluZGV4XV07XG59XG5cbi8qIVxuICAgIEluc2VydHMgYW4gb2JqZWN0IGludG8gdGhlIHJlY2VpdmVyIGF0IHRoZSBzcGVjaWZpZWQgbG9jYXRpb24uXG4gICAgQHBhcmFtIGFuT2JqZWN0IHRoZSBvYmplY3QgdG8gaW5zZXJ0IGludG8gdGhlIGFycmF5XG4gICAgQHBhcmFtIGFuSW5kZXggdGhlIGxvY2F0aW9uIHRvIGluc2VydCBcXGMgYW5PYmplY3QgYXRcbiovXG4tICh2b2lkKWluc2VydE9iamVjdDooaWQpYW5PYmplY3QgYXRJbmRleDooQ1BVSW50ZWdlcilhbkluZGV4XG57XG4gICAgX0NQUmFpc2VJbnZhbGlkQWJzdHJhY3RJbnZvY2F0aW9uKHNlbGYsIF9jbWQpO1xufVxuXG4vKiFcbiAgICBJbnNlcnRzIHRoZSBvYmplY3RzIGluIHRoZSBwcm92aWRlZCBhcnJheSBpbnRvIHRoZSByZWNlaXZlciBhdCB0aGUgaW5kZXhlcyBzcGVjaWZpZWQuXG4gICAgQHBhcmFtIG9iamVjdHMgdGhlIG9iamVjdHMgdG8gYWRkIHRvIHRoaXMgYXJyYXlcbiAgICBAcGFyYW0gYW5JbmRleFNldCB0aGUgaW5kaWNlcyBmb3IgdGhlIG9iamVjdHNcbiovXG4tICh2b2lkKWluc2VydE9iamVjdHM6KENQQXJyYXkpb2JqZWN0cyBhdEluZGV4ZXM6KENQSW5kZXhTZXQpaW5kZXhlc1xue1xuICAgIHZhciBpbmRleGVzQ291bnQgPSBbaW5kZXhlcyBjb3VudF0sXG4gICAgICAgIG9iamVjdHNDb3VudCA9IFtvYmplY3RzIGNvdW50XTtcblxuICAgIGlmIChpbmRleGVzQ291bnQgIT09IG9iamVjdHNDb3VudClcbiAgICAgICAgW0NQRXhjZXB0aW9uIHJhaXNlOkNQUmFuZ2VFeGNlcHRpb24gcmVhc29uOlwidGhlIGNvdW50cyBvZiB0aGUgcGFzc2VkLWluIGFycmF5IChcIiArIG9iamVjdHNDb3VudCArIFwiKSBhbmQgaW5kZXggc2V0IChcIiArIGluZGV4ZXNDb3VudCArIFwiKSBtdXN0IGJlIGlkZW50aWNhbC5cIl07XG5cbiAgICB2YXIgbGFzdEluZGV4ID0gW2luZGV4ZXMgbGFzdEluZGV4XTtcblxuICAgIGlmIChsYXN0SW5kZXggPj0gW3NlbGYgY291bnRdICsgaW5kZXhlc0NvdW50KVxuICAgICAgICBbQ1BFeGNlcHRpb24gcmFpc2U6Q1BSYW5nZUV4Y2VwdGlvbiByZWFzb246XCJ0aGUgbGFzdCBpbmRleCAoXCIgKyBsYXN0SW5kZXggKyBcIikgbXVzdCBiZSBsZXNzIHRoYW4gdGhlIHN1bSBvZiB0aGUgb3JpZ2luYWwgY291bnQgKFwiICsgW3NlbGYgY291bnRdICsgXCIpIGFuZCB0aGUgaW5zZXJ0aW9uIGNvdW50IChcIiArIGluZGV4ZXNDb3VudCArIFwiKS5cIl07XG5cbiAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICBjdXJyZW50SW5kZXggPSBbaW5kZXhlcyBmaXJzdEluZGV4XTtcblxuICAgIGZvciAoOyBpbmRleCA8IG9iamVjdHNDb3VudDsgKytpbmRleCwgY3VycmVudEluZGV4ID0gW2luZGV4ZXMgaW5kZXhHcmVhdGVyVGhhbkluZGV4OmN1cnJlbnRJbmRleF0pXG4gICAgICAgIFtzZWxmIGluc2VydE9iamVjdDpbb2JqZWN0cyBvYmplY3RBdEluZGV4OmluZGV4XSBhdEluZGV4OmN1cnJlbnRJbmRleF07XG59XG5cbi0gKENQVUludGVnZXIpaW5zZXJ0T2JqZWN0OihpZClhbk9iamVjdCBpbkFycmF5U29ydGVkQnlEZXNjcmlwdG9yczooQ1BBcnJheSlkZXNjcmlwdG9yc1xue1xuICAgIHZhciBpbmRleCxcbiAgICAgICAgY291bnQgPSBbZGVzY3JpcHRvcnMgY291bnRdO1xuXG4gICAgaWYgKGNvdW50KVxuICAgICAgICBpbmRleCA9IFtzZWxmIGluZGV4T2ZPYmplY3Q6YW5PYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICBpblNvcnRlZFJhbmdlOm5pbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6Q1BCaW5hcnlTZWFyY2hpbmdJbnNlcnRpb25JbmRleFxuICAgICAgICAgICAgICAgICAgICB1c2luZ0NvbXBhcmF0b3I6ZnVuY3Rpb24obGhzLCByaHMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gQ1BPcmRlcmVkU2FtZTtcblxuICAgICAgICAgICAgd2hpbGUgKGluZGV4IDwgY291bnQgJiYgKChyZXN1bHQgPSBbW2Rlc2NyaXB0b3JzIG9iamVjdEF0SW5kZXg6aW5kZXhdIGNvbXBhcmVPYmplY3Q6bGhzIHdpdGhPYmplY3Q6cmhzXSkgPT09IENQT3JkZXJlZFNhbWUpKVxuICAgICAgICAgICAgICAgICsraW5kZXg7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1dO1xuXG4gICAgZWxzZVxuICAgICAgICBpbmRleCA9IFtzZWxmIGNvdW50XTtcblxuICAgIFtzZWxmIGluc2VydE9iamVjdDphbk9iamVjdCBhdEluZGV4OmluZGV4XTtcblxuICAgIHJldHVybiBpbmRleDtcbn1cblxuLyohXG4gICAgUmVwbGFjZXMgdGhlIGVsZW1lbnQgYXQgXFxjIGFuSW5kZXggd2l0aCBcXGMgYW5PYmplY3QuXG4gICAgVGhlIGN1cnJlbnQgZWxlbWVudCBhdCBwb3NpdGlvbiBcXGMgYW5JbmRleCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgYXJyYXkuXG4gICAgQHBhcmFtIGFuSW5kZXggdGhlIHBvc2l0aW9uIGluIHRoZSBhcnJheSB0byBwbGFjZSBcXGMgYW5PYmplY3RcbiovXG4tICh2b2lkKXJlcGxhY2VPYmplY3RBdEluZGV4OihDUFVJbnRlZ2VyKWFuSW5kZXggd2l0aE9iamVjdDooaWQpYW5PYmplY3RcbntcbiAgICBfQ1BSYWlzZUludmFsaWRBYnN0cmFjdEludm9jYXRpb24oc2VsZiwgX2NtZCk7XG59XG5cbi8qIVxuICAgIFJlcGxhY2UgdGhlIGVsZW1lbnRzIGF0IHRoZSBpbmRpY2VzIHNwZWNpZmllZCBieSBcXGMgYW5JbmRleFNldCB3aXRoXG4gICAgdGhlIG9iamVjdHMgaW4gXFxjIG9iamVjdHMuXG4gICAgQHBhcmFtIGFuSW5kZXhTZXQgdGhlIHNldCBvZiBpbmRpY2VzIHRvIGFycmF5IHBvc2l0aW9ucyB0aGF0IHdpbGwgYmUgcmVwbGFjZWRcbiAgICBAcGFyYW0gb2JqZWN0cyB0aGUgYXJyYXkgb2Ygb2JqZWN0cyB0byBwbGFjZSBpbiB0aGUgc3BlY2lmaWVkIGluZGljZXNcbiovXG4tICh2b2lkKXJlcGxhY2VPYmplY3RzQXRJbmRleGVzOihDUEluZGV4U2V0KWluZGV4ZXMgd2l0aE9iamVjdHM6KENQQXJyYXkpb2JqZWN0c1xue1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgaW5kZXggPSBbaW5kZXhlcyBmaXJzdEluZGV4XTtcblxuICAgIHdoaWxlIChpbmRleCAhPT0gQ1BOb3RGb3VuZClcbiAgICB7XG4gICAgICAgIFtzZWxmIHJlcGxhY2VPYmplY3RBdEluZGV4OmluZGV4IHdpdGhPYmplY3Q6W29iamVjdHMgb2JqZWN0QXRJbmRleDppKytdXTtcbiAgICAgICAgaW5kZXggPSBbaW5kZXhlcyBpbmRleEdyZWF0ZXJUaGFuSW5kZXg6aW5kZXhdO1xuICAgIH1cbn1cblxuLyohXG4gICAgUmVwbGFjZXMgc29tZSBvZiB0aGUgcmVjZWl2ZXIncyBvYmplY3RzIHdpdGggb2JqZWN0cyBmcm9tIFxcYyBhbkFycmF5LiBTcGVjaWZpY2FsbHksIHRoZSBlbGVtZW50cyBvZiB0aGVcbiAgICByZWNlaXZlciBpbiB0aGUgcmFuZ2Ugc3BlY2lmaWVkIGJ5IFxcYyBhUmFuZ2UsXG4gICAgd2l0aCB0aGUgZWxlbWVudHMgb2YgXFxjIGFuQXJyYXkgaW4gdGhlIHJhbmdlIHNwZWNpZmllZCBieSBcXGMgb3RoZXJSYW5nZS5cbiAgICBAcGFyYW0gYVJhbmdlIHRoZSByYW5nZSBvZiBlbGVtZW50cyB0byBiZSByZXBsYWNlZCBpbiB0aGUgcmVjZWl2ZXJcbiAgICBAcGFyYW0gYW5BcnJheSB0aGUgYXJyYXkgdG8gcmV0cmlldmUgb2JqZWN0cyBmb3IgcGxhY2VtZW50IGludG8gdGhlIHJlY2VpdmVyXG4gICAgQHBhcmFtIG90aGVyUmFuZ2UgdGhlIHJhbmdlIG9mIG9iamVjdHMgaW4gXFxjIGFuQXJyYXkgdG8gcHVsbCBmcm9tIGZvciBwbGFjZW1lbnQgaW50byB0aGUgcmVjZWl2ZXJcbiovXG4tICh2b2lkKXJlcGxhY2VPYmplY3RzSW5SYW5nZTooQ1BSYW5nZSlhUmFuZ2Ugd2l0aE9iamVjdHNGcm9tQXJyYXk6KENQQXJyYXkpYW5BcnJheSByYW5nZTooQ1BSYW5nZSlvdGhlclJhbmdlXG57XG4gICAgW3NlbGYgcmVtb3ZlT2JqZWN0c0luUmFuZ2U6YVJhbmdlXTtcblxuICAgIGlmIChvdGhlclJhbmdlICYmIChvdGhlclJhbmdlLmxvY2F0aW9uICE9PSAwIHx8IG90aGVyUmFuZ2UubGVuZ3RoICE9PSBbYW5BcnJheSBjb3VudF0pKVxuICAgICAgICBhbkFycmF5ID0gW2FuQXJyYXkgc3ViYXJyYXlXaXRoUmFuZ2U6b3RoZXJSYW5nZV07XG5cbiAgICB2YXIgaW5kZXhlcyA9IFtDUEluZGV4U2V0IGluZGV4U2V0V2l0aEluZGV4ZXNJblJhbmdlOkNQTWFrZVJhbmdlKGFSYW5nZS5sb2NhdGlvbiwgW2FuQXJyYXkgY291bnRdKV07XG5cbiAgICBbc2VsZiBpbnNlcnRPYmplY3RzOmFuQXJyYXkgYXRJbmRleGVzOmluZGV4ZXNdO1xufVxuXG4vKiFcbiAgICBSZXBsYWNlcyBzb21lIG9mIHRoZSByZWNlaXZlcidzIG9iamVjdHMgd2l0aCB0aGUgb2JqZWN0cyBmcm9tXG4gICAgXFxjIGFuQXJyYXkuIFNwZWNpZmljYWxseSwgdGhlIGVsZW1lbnRzIG9mIHRoZVxuICAgIHJlY2VpdmVyIGluIHRoZSByYW5nZSBzcGVjaWZpZWQgYnkgXFxjIGFSYW5nZS5cbiAgICBAcGFyYW0gYVJhbmdlIHRoZSByYW5nZSBvZiBlbGVtZW50cyB0byBiZSByZXBsYWNlZCBpbiB0aGUgcmVjZWl2ZXJcbiAgICBAcGFyYW0gYW5BcnJheSB0aGUgYXJyYXkgdG8gcmV0cmlldmUgb2JqZWN0cyBmb3IgcGxhY2VtZW50IGludG8gdGhlIHJlY2VpdmVyXG4qL1xuLSAodm9pZClyZXBsYWNlT2JqZWN0c0luUmFuZ2U6KENQUmFuZ2UpYVJhbmdlIHdpdGhPYmplY3RzRnJvbUFycmF5OihDUEFycmF5KWFuQXJyYXlcbntcbiAgICBbc2VsZiByZXBsYWNlT2JqZWN0c0luUmFuZ2U6YVJhbmdlIHdpdGhPYmplY3RzRnJvbUFycmF5OmFuQXJyYXkgcmFuZ2U6bmlsXTtcbn1cblxuLyohXG4gICAgU2V0cyB0aGUgY29udGVudHMgb2YgdGhlIHJlY2VpdmVyIHRvIGJlIGlkZW50aWNhbCB0byB0aGUgY29udGVudHMgb2YgXFxjIGFuQXJyYXkuXG4gICAgQHBhcmFtIGFuQXJyYXkgdGhlIGFycmF5IG9mIG9iamVjdHMgdXNlZCB0byByZXBsYWNlIHRoZSByZWNlaXZlcidzIG9iamVjdHNcbiovXG4tICh2b2lkKXNldEFycmF5OihDUEFycmF5KWFuQXJyYXlcbntcbiAgICBpZiAoc2VsZiA9PT0gYW5BcnJheSlcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgW3NlbGYgcmVtb3ZlQWxsT2JqZWN0c107XG4gICAgW3NlbGYgYWRkT2JqZWN0c0Zyb21BcnJheTphbkFycmF5XTtcbn1cblxuLy8gUmVtb3ZpbmcgT2JqZWN0c1xuLyohXG4gICAgUmVtb3ZlcyBhbGwgb2JqZWN0cyBmcm9tIHRoaXMgYXJyYXkuXG4qL1xuLSAodm9pZClyZW1vdmVBbGxPYmplY3RzXG57XG4gICAgd2hpbGUgKFtzZWxmIGNvdW50XSlcbiAgICAgICAgW3NlbGYgcmVtb3ZlTGFzdE9iamVjdF07XG59XG5cbi8qIVxuICAgIFJlbW92ZXMgdGhlIGxhc3Qgb2JqZWN0IGZyb20gdGhlIGFycmF5LlxuKi9cbi0gKHZvaWQpcmVtb3ZlTGFzdE9iamVjdFxue1xuICAgIF9DUFJhaXNlSW52YWxpZEFic3RyYWN0SW52b2NhdGlvbihzZWxmLCBfY21kKTtcbn1cblxuLyohXG4gICAgUmVtb3ZlcyBhbGwgZW50cmllcyBvZiBcXGMgYW5PYmplY3QgZnJvbSB0aGUgYXJyYXkuXG4gICAgQHBhcmFtIGFuT2JqZWN0IHRoZSBvYmplY3Qgd2hvc2UgZW50cmllcyBhcmUgdG8gYmUgcmVtb3ZlZFxuKi9cbi0gKHZvaWQpcmVtb3ZlT2JqZWN0OihpZClhbk9iamVjdFxue1xuICAgIFtzZWxmIHJlbW92ZU9iamVjdDphbk9iamVjdCBpblJhbmdlOkNQTWFrZVJhbmdlKDAsIFtzZWxmIGNvdW50XSldO1xufVxuXG4vKiFcbiAgICBSZW1vdmVzIGFsbCBlbnRyaWVzIG9mIFxcYyBhbk9iamVjdCBmcm9tIHRoZSBhcnJheSwgaW4gdGhlIHJhbmdlIHNwZWNpZmllZCBieSBcXGMgYVJhbmdlLlxuICAgIEBwYXJhbSBhbk9iamVjdCB0aGUgb2JqZWN0IHRvIHJlbW92ZVxuICAgIEBwYXJhbSBhUmFuZ2UgdGhlIHJhbmdlIHRvIHNlYXJjaCBpbiB0aGUgcmVjZWl2ZXIgZm9yIHRoZSBvYmplY3RcbiovXG4tICh2b2lkKXJlbW92ZU9iamVjdDooaWQpYW5PYmplY3QgaW5SYW5nZTooQ1BSYW5nZSlhUmFuZ2VcbntcbiAgICB2YXIgaW5kZXg7XG5cbiAgICB3aGlsZSAoKGluZGV4ID0gW3NlbGYgaW5kZXhPZk9iamVjdDphbk9iamVjdCBpblJhbmdlOmFSYW5nZV0pICE9IENQTm90Rm91bmQpXG4gICAge1xuICAgICAgICBbc2VsZiByZW1vdmVPYmplY3RBdEluZGV4OmluZGV4XTtcbiAgICAgICAgYVJhbmdlID0gQ1BJbnRlcnNlY3Rpb25SYW5nZShDUE1ha2VSYW5nZShpbmRleCwgW3NlbGYgY291bnRdIC0gaW5kZXgpLCBhUmFuZ2UpO1xuICAgIH1cbn1cblxuLyohXG4gICAgUmVtb3ZlcyB0aGUgb2JqZWN0IGF0IFxcYyBhbkluZGV4LlxuICAgIEBwYXJhbSBhbkluZGV4IHRoZSBsb2NhdGlvbiBvZiB0aGUgZWxlbWVudCB0byBiZSByZW1vdmVkXG4qL1xuLSAodm9pZClyZW1vdmVPYmplY3RBdEluZGV4OihDUFVJbnRlZ2VyKWFuSW5kZXhcbntcbiAgICBfQ1BSYWlzZUludmFsaWRBYnN0cmFjdEludm9jYXRpb24oc2VsZiwgX2NtZCk7XG59XG5cbi8qIVxuICAgIFJlbW92ZXMgdGhlIG9iamVjdHMgYXQgdGhlIGluZGljZXMgc3BlY2lmaWVkIGJ5IFxcYyBDUEluZGV4U2V0LlxuICAgIEBwYXJhbSBhbkluZGV4U2V0IHRoZSBpbmRpY2VzIG9mIHRoZSBlbGVtZW50cyB0byBiZSByZW1vdmVkIGZyb20gdGhlIGFycmF5XG4qL1xuLSAodm9pZClyZW1vdmVPYmplY3RzQXRJbmRleGVzOihDUEluZGV4U2V0KWFuSW5kZXhTZXRcbntcbiAgICB2YXIgaW5kZXggPSBbYW5JbmRleFNldCBsYXN0SW5kZXhdO1xuXG4gICAgd2hpbGUgKGluZGV4ICE9PSBDUE5vdEZvdW5kKVxuICAgIHtcbiAgICAgICAgW3NlbGYgcmVtb3ZlT2JqZWN0QXRJbmRleDppbmRleF07XG4gICAgICAgIGluZGV4ID0gW2FuSW5kZXhTZXQgaW5kZXhMZXNzVGhhbkluZGV4OmluZGV4XTtcbiAgICB9XG59XG5cbi8qIVxuICAgIFJlbW92ZSBhbGwgaW5zdGFuY2VzIG9mIFxcYyBhbk9iamVjdCBmcm9tIHRoZSBhcnJheS5cbiAgICBUaGUgc2VhcmNoIGZvciB0aGUgb2JqZWN0IGlzIGRvbmUgdXNpbmcgXFxjID09LlxuICAgIEBwYXJhbSBhbk9iamVjdCB0aGUgb2JqZWN0IHRvIHJlbW92ZVxuKi9cbi0gKHZvaWQpcmVtb3ZlT2JqZWN0SWRlbnRpY2FsVG86KGlkKWFuT2JqZWN0XG57XG4gICAgW3NlbGYgcmVtb3ZlT2JqZWN0SWRlbnRpY2FsVG86YW5PYmplY3QgaW5SYW5nZTpDUE1ha2VSYW5nZSgwLCBbc2VsZiBjb3VudF0pXTtcbn1cblxuLyohXG4gICAgUmVtb3ZlIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiBcXGMgYW5PYmplY3QgZnJvbSB0aGUgYXJyYXksXG4gICAgd2l0aGluIHRoZSByYW5nZSBzcGVjaWZpZWQgYnkgXFxjIGFSYW5nZS5cbiAgICBUaGUgc2VhcmNoIGZvciB0aGUgb2JqZWN0IGlzIGRvbmUgdXNpbmcgXFxjID09LlxuICAgIEBwYXJhbSBhbk9iamVjdCB0aGUgb2JqZWN0IHRvIHJlbW92ZVxuICAgIEBwYXJhbSBhUmFuZ2UgdGhlIHJhbmdlIGluIHRoZSBhcnJheSB0byBzZWFyY2ggZm9yIHRoZSBvYmplY3RcbiovXG4tICh2b2lkKXJlbW92ZU9iamVjdElkZW50aWNhbFRvOihpZClhbk9iamVjdCBpblJhbmdlOihDUFJhbmdlKWFSYW5nZVxue1xuICAgIHZhciBpbmRleCxcbiAgICAgICAgY291bnQgPSBbc2VsZiBjb3VudF07XG5cbiAgICB3aGlsZSAoKGluZGV4ID0gW3NlbGYgaW5kZXhPZk9iamVjdElkZW50aWNhbFRvOmFuT2JqZWN0IGluUmFuZ2U6YVJhbmdlXSkgIT09IENQTm90Rm91bmQpXG4gICAge1xuICAgICAgICBbc2VsZiByZW1vdmVPYmplY3RBdEluZGV4OmluZGV4XTtcbiAgICAgICAgYVJhbmdlID0gQ1BJbnRlcnNlY3Rpb25SYW5nZShDUE1ha2VSYW5nZShpbmRleCwgKC0tY291bnQpIC0gaW5kZXgpLCBhUmFuZ2UpO1xuICAgIH1cbn1cblxuLyohXG4gICAgUmVtb3ZlIHRoZSBvYmplY3RzIGluIFxcYyBhbkFycmF5IGZyb20gdGhlIHJlY2VpdmVyIGFycmF5LlxuICAgIEBwYXJhbSBhbkFycmF5IHRoZSBhcnJheSBvZiBvYmplY3RzIHRvIHJlbW92ZSBmcm9tIHRoZSByZWNlaXZlclxuKi9cbi0gKHZvaWQpcmVtb3ZlT2JqZWN0c0luQXJyYXk6KENQQXJyYXkpYW5BcnJheVxue1xuICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgIGNvdW50ID0gW2FuQXJyYXkgY291bnRdO1xuXG4gICAgZm9yICg7IGluZGV4IDwgY291bnQ7ICsraW5kZXgpXG4gICAgICAgIFtzZWxmIHJlbW92ZU9iamVjdDpbYW5BcnJheSBvYmplY3RBdEluZGV4OmluZGV4XV07XG59XG5cbi8qIVxuICAgIFJlbW92ZXMgYWxsIHRoZSBvYmplY3RzIGluIHRoZSBzcGVjaWZpZWQgcmFuZ2UgZnJvbSB0aGUgcmVjZWl2ZXIuXG4gICAgQHBhcmFtIGFSYW5nZSB0aGUgcmFuZ2Ugb2Ygb2JqZWN0cyB0byByZW1vdmVcbiovXG4tICh2b2lkKXJlbW92ZU9iamVjdHNJblJhbmdlOihDUFJhbmdlKWFSYW5nZVxue1xuICAgIHZhciBpbmRleCA9IGFSYW5nZS5sb2NhdGlvbixcbiAgICAgICAgY291bnQgPSBDUE1heFJhbmdlKGFSYW5nZSk7XG5cbiAgICB3aGlsZSAoY291bnQtLSA+IGluZGV4KVxuICAgICAgICBbc2VsZiByZW1vdmVPYmplY3RBdEluZGV4OmluZGV4XTtcbn1cblxuLy8gUmVhcnJhbmdpbmcgb2JqZWN0c1xuLyohXG4gICAgU3dhcHMgdGhlIGVsZW1lbnRzIGF0IHRoZSB0d28gc3BlY2lmaWVkIGluZGljZXMuXG4gICAgQHBhcmFtIGFuSW5kZXggdGhlIGZpcnN0IGluZGV4IHRvIHN3YXAgZnJvbVxuICAgIEBwYXJhbSBvdGhlckluZGV4IHRoZSBzZWNvbmQgaW5kZXggdG8gc3dhcCBmcm9tXG4qL1xuLSAodm9pZClleGNoYW5nZU9iamVjdEF0SW5kZXg6KENQVUludGVnZXIpYW5JbmRleCB3aXRoT2JqZWN0QXRJbmRleDooQ1BVSW50ZWdlcilvdGhlckluZGV4XG57XG4gICAgaWYgKGFuSW5kZXggPT09IG90aGVySW5kZXgpXG4gICAgICAgIHJldHVybjtcblxuICAgIHZhciB0ZW1wb3JhcnkgPSBbc2VsZiBvYmplY3RBdEluZGV4OmFuSW5kZXhdO1xuXG4gICAgW3NlbGYgcmVwbGFjZU9iamVjdEF0SW5kZXg6YW5JbmRleCB3aXRoT2JqZWN0OltzZWxmIG9iamVjdEF0SW5kZXg6b3RoZXJJbmRleF1dO1xuICAgIFtzZWxmIHJlcGxhY2VPYmplY3RBdEluZGV4Om90aGVySW5kZXggd2l0aE9iamVjdDp0ZW1wb3JhcnldO1xufVxuXG4tICh2b2lkKXNvcnRVc2luZ0Rlc2NyaXB0b3JzOihDUEFycmF5KWRlc2NyaXB0b3JzXG57XG4gICAgdmFyIGkgPSBbZGVzY3JpcHRvcnMgY291bnRdLFxuICAgICAgICBqc0Rlc2NyaXB0b3JzID0gW107XG5cbiAgICAvLyBSZXZlcnQgdGhlIG9yZGVyIG9mIHRoZSBkZXNjcmlwdG9yc1xuICAgIHdoaWxlIChpLS0pXG4gICAge1xuICAgICAgICB2YXIgZCA9IFtkZXNjcmlwdG9ycyBvYmplY3RBdEluZGV4OmldO1xuICAgICAgICBbanNEZXNjcmlwdG9ycyBhZGRPYmplY3Q6eyBcImtcIjogW2Qga2V5XSwgXCJhXCI6IFtkIGFzY2VuZGluZ10sIFwic1wiOiBbZCBzZWxlY3Rvcl19XTtcbiAgICB9XG4gICAgc29ydEFycmF5VXNpbmdKU0Rlc2NyaXB0b3JzKHNlbGYsIGpzRGVzY3JpcHRvcnMpO1xufVxuXG4vKiFcbiAgICBTb3J0cyB0aGUgcmVjZWl2ZXIgYXJyYXkgdXNpbmcgYSBKYXZhU2NyaXB0IGZ1bmN0aW9uIGFzIGEgY29tcGFyYXRvciwgYW5kIGEgc3BlY2lmaWVkIGNvbnRleHQuXG4gICAgQHBhcmFtIGFGdW5jdGlvbiBhIEphdmFTY3JpcHQgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB0byBjb21wYXJlIG9iamVjdHNcbiAgICBAcGFyYW0gYUNvbnRleHQgYW4gb2JqZWN0IHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gXFxjIGFGdW5jdGlvbiB3aXRoIGNvbXBhcmlzb25cbiovXG4tICh2b2lkKXNvcnRVc2luZ0Z1bmN0aW9uOihGdW5jdGlvbilhRnVuY3Rpb24gY29udGV4dDooaWQpYUNvbnRleHRcbntcbiAgICBzb3J0QXJyYXlVc2luZ0Z1bmN0aW9uKHNlbGYsIGFGdW5jdGlvbiwgYUNvbnRleHQpO1xufVxuXG4vKiFcbiAgICBTb3J0cyB0aGUgcmVjZWl2ZXIgYXJyYXkgdXNpbmcgYW4gT2JqZWN0aXZlLUogbWV0aG9kIGFzIGEgY29tcGFyYXRvci5cbiAgICBAcGFyYW0gYVNlbGVjdG9yIHRoZSBzZWxlY3RvciBmb3IgdGhlIG1ldGhvZCB0byBjYWxsIGZvciBjb21wYXJpc29uXG4qL1xuLSAodm9pZClzb3J0VXNpbmdTZWxlY3RvcjooU0VMKWFTZWxlY3Rvclxue1xuICAgIHNvcnRBcnJheVVzaW5nRnVuY3Rpb24oc2VsZiwgc2VsZWN0b3JDb21wYXJlLCBhU2VsZWN0b3IpO1xufVxuXG5AZW5kXG5cbkBpbXBsZW1lbnRhdGlvbiBDUEFycmF5IChDUE11dGFibGVDb3B5aW5nKVxuXG4tIChpZCltdXRhYmxlQ29weVxue1xuICAgIHZhciByID0gW0NQTXV0YWJsZUFycmF5IG5ld107XG4gICAgW3IgYWRkT2JqZWN0c0Zyb21BcnJheTpzZWxmXTtcbiAgICByZXR1cm4gcjtcbn1cblxuQGVuZFxuXG52YXIgc2VsZWN0b3JDb21wYXJlID0gZnVuY3Rpb24ob2JqZWN0MSwgb2JqZWN0Miwgc2VsZWN0b3IpXG57XG4gICAgcmV0dXJuIFtvYmplY3QxIHBlcmZvcm1TZWxlY3RvcjpzZWxlY3RvciB3aXRoT2JqZWN0Om9iamVjdDJdO1xufTtcblxudmFyIHNvcnRBcnJheVVzaW5nRnVuY3Rpb24gPSBmdW5jdGlvbihhcnJheSwgYUZ1bmN0aW9uLCBhQ29udGV4dClcbntcbiAgICB2YXIgaCxcbiAgICAgICAgaSxcbiAgICAgICAgaixcbiAgICAgICAgayxcbiAgICAgICAgbCxcbiAgICAgICAgbSxcbiAgICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgbztcblxuICAgIHZhciBBLFxuICAgICAgICBCID0gW107XG5cbiAgICBmb3IgKGggPSAxOyBoIDwgbjsgaCArPSBoKVxuICAgIHtcbiAgICAgICAgZm9yIChtID0gbiAtIDEgLSBoOyBtID49IDA7IG0gLT0gaCArIGgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGwgPSBtIC0gaCArIDE7XG4gICAgICAgICAgICBpZiAobCA8IDApXG4gICAgICAgICAgICAgICAgbCA9IDA7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGogPSBsOyBqIDw9IG07IGkrKywgaisrKVxuICAgICAgICAgICAgICAgIEJbaV0gPSBhcnJheVtqXTtcblxuICAgICAgICAgICAgZm9yIChpID0gMCwgayA9IGw7IGsgPCBqICYmIGogPD0gbSArIGg7IGsrKylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBBID0gYXJyYXlbal07XG4gICAgICAgICAgICAgICAgbyA9IGFGdW5jdGlvbihBLCBCW2ldLCBhQ29udGV4dCk7XG5cbiAgICAgICAgICAgICAgICBpZiAobyA+PSAwKVxuICAgICAgICAgICAgICAgICAgICBhcnJheVtrXSA9IEJbaSsrXTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhcnJheVtrXSA9IEE7XG4gICAgICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdoaWxlIChrIDwgailcbiAgICAgICAgICAgICAgICBhcnJheVtrKytdID0gQltpKytdO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBUaGlzIGlzIGZvciBzcGVlZFxudmFyIENQTXV0YWJsZUFycmF5TnVsbCA9IFtDUE51bGwgbnVsbF07XG5cbi8vIE9ic2VydmUgdGhhdCB0aGUgc29ydCBkZXNjcmlwdG9ycyBoYXMgdGhlIHJldmVyc2VkIG9yZGVyIGJ5IHRoZSBjYWxsZXJcbnZhciBzb3J0QXJyYXlVc2luZ0pTRGVzY3JpcHRvcnMgPSBmdW5jdGlvbihhLCBkKVxue1xuICAgIHZhciBoLFxuICAgICAgICBpLFxuICAgICAgICBqLFxuICAgICAgICBrLFxuICAgICAgICBsLFxuICAgICAgICBtLFxuICAgICAgICBuID0gYS5sZW5ndGgsXG4gICAgICAgIGRsID0gZC5sZW5ndGggLSAxLFxuICAgICAgICBvLFxuICAgICAgICBjID0ge307XG5cbiAgICB2YXIgQSxcbiAgICAgICAgQiA9IFtdLFxuICAgICAgICBDMSxcbiAgICAgICAgQzIsXG4gICAgICAgIGNuLFxuICAgICAgICBhVUlELFxuICAgICAgICBiVUlELFxuICAgICAgICBrZXksXG4gICAgICAgIGRkLFxuICAgICAgICB2YWx1ZTEsXG4gICAgICAgIHZhbHVlMixcbiAgICAgICAgY3BOdWxsID0gQ1BNdXRhYmxlQXJyYXlOdWxsO1xuXG4gICAgaWYgKGRsIDwgMClcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgZm9yIChoID0gMTsgaCA8IG47IGggKz0gaClcbiAgICB7XG4gICAgICAgIGZvciAobSA9IG4gLSAxIC0gaDsgbSA+PSAwOyBtIC09IGggKyBoKVxuICAgICAgICB7XG4gICAgICAgICAgICBsID0gbSAtIGggKyAxO1xuXG4gICAgICAgICAgICBpZiAobCA8IDApXG4gICAgICAgICAgICAgICAgbCA9IDA7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGogPSBsOyBqIDw9IG07IGkrKywgaisrKVxuICAgICAgICAgICAgICAgIEJbaV0gPSBhW2pdO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBrID0gbDsgayA8IGogJiYgaiA8PSBtICsgaDsgaysrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIEEgPSBhW2pdO1xuICAgICAgICAgICAgICAgIGFVSUQgPSBBLl9VSUQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWFVSUQpXG4gICAgICAgICAgICAgICAgICAgIGFVSUQgPSBbQSBVSURdO1xuXG4gICAgICAgICAgICAgICAgQzEgPSBjW2FVSURdO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFDMSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIEMxID0ge307XG4gICAgICAgICAgICAgICAgICAgIGNuID0gZGw7XG5cbiAgICAgICAgICAgICAgICAgICAgZG9cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0gZFtjbl0uaztcbiAgICAgICAgICAgICAgICAgICAgICAgIEMxW2tleV0gPSBbQSB2YWx1ZUZvcktleVBhdGg6a2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoY24tLSlcblxuICAgICAgICAgICAgICAgICAgICBjW2FVSURdID0gQzE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYlVJRCA9IEJbaV0uX1VJRDtcblxuICAgICAgICAgICAgICAgIGlmICghYlVJRClcbiAgICAgICAgICAgICAgICAgICAgYlVJRCA9IFtCW2ldIFVJRF07XG5cbiAgICAgICAgICAgICAgICBDMiA9IGNbYlVJRF07XG5cbiAgICAgICAgICAgICAgICBpZiAoIUMyKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgQzIgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgY24gPSBkbDtcblxuICAgICAgICAgICAgICAgICAgICBkb1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSBkW2NuXS5rO1xuICAgICAgICAgICAgICAgICAgICAgICAgQzJba2V5XSA9IFtCW2ldIHZhbHVlRm9yS2V5UGF0aDprZXldO1xuICAgICAgICAgICAgICAgICAgICB9IHdoaWxlIChjbi0tKVxuXG4gICAgICAgICAgICAgICAgICAgIGNbYlVJRF0gPSBDMjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbiA9IGRsO1xuXG4gICAgICAgICAgICAgICAgZG9cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGRkID0gZFtjbl07XG4gICAgICAgICAgICAgICAgICAgIGtleSA9IGRkLms7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlMSA9IEMxW2tleV07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlMiA9IEMyW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZTEgPT09IG5pbCB8fCB2YWx1ZTEgPT09IGNwTnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB2YWx1ZTIgPT09IG5pbCB8fCB2YWx1ZTIgPT09IGNwTnVsbCA/IENQT3JkZXJlZFNhbWUgOiBDUE9yZGVyZWRBc2NlbmRpbmc7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB2YWx1ZTIgPT09IG5pbCB8fCB2YWx1ZTIgPT09IGNwTnVsbCA/IENQT3JkZXJlZERlc2NlbmRpbmcgOiB2YWx1ZTEuaXNhLm9iampfbXNnU2VuZDEodmFsdWUxLCBkZC5zLCB2YWx1ZTIpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvICYmICFkZC5hKVxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IC1vO1xuICAgICAgICAgICAgICAgIH0gd2hpbGUgKGNuLS0gJiYgbyA9PSBDUE9yZGVyZWRTYW1lKVxuXG4gICAgICAgICAgICAgICAgaWYgKG8gPj0gMClcbiAgICAgICAgICAgICAgICAgICAgYVtrXSA9IEJbaSsrXTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhW2tdID0gQTtcbiAgICAgICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2hpbGUgKGsgPCBqKVxuICAgICAgICAgICAgICAgIGFbaysrXSA9IEJbaSsrXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==t;23115;

objj_executeFile("_CPArray.j", YES);
{var the_class = objj_allocateClassPair(CPArray, "CPMutableArray"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("addObject:"), function $CPMutableArray__addObject_(self, _cmd, anObject)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
}

,["void","id"]), new objj_method(sel_getUid("addObjectsFromArray:"), function $CPMutableArray__addObjectsFromArray_(self, _cmd, anArray)
{
    var index = 0,
        count = (anArray == null ? null : (anArray.isa.method_msgSend["count"] || _objj_forward)(anArray, (anArray.isa.method_dtable["count"], "count")));
    for (; index < count; ++index)
        (self.isa.method_msgSend["addObject:"] || _objj_forward)(self, (self.isa.method_dtable["addObject:"], "addObject:"), (anArray == null ? null : (anArray.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(anArray, (anArray.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index)));
}

,["void","CPArray"]), new objj_method(sel_getUid("insertObject:atIndex:"), function $CPMutableArray__insertObject_atIndex_(self, _cmd, anObject, anIndex)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
}

,["void","id","CPUInteger"]), new objj_method(sel_getUid("insertObjects:atIndexes:"), function $CPMutableArray__insertObjects_atIndexes_(self, _cmd, objects, indexes)
{
    var indexesCount = (indexes == null ? null : (indexes.isa.method_msgSend["count"] || _objj_forward)(indexes, (indexes.isa.method_dtable["count"], "count"))),
        objectsCount = (objects == null ? null : (objects.isa.method_msgSend["count"] || _objj_forward)(objects, (objects.isa.method_dtable["count"], "count")));
    if (indexesCount !== objectsCount)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPRangeException, "the counts of the passed-in array (" + objectsCount + ") and index set (" + indexesCount + ") must be identical.");
    var lastIndex = (indexes == null ? null : (indexes.isa.method_msgSend["lastIndex"] || _objj_forward)(indexes, (indexes.isa.method_dtable["lastIndex"], "lastIndex")));
    if (lastIndex >= (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")) + indexesCount)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPRangeException, "the last index (" + lastIndex + ") must be less than the sum of the original count (" + (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")) + ") and the insertion count (" + indexesCount + ").");
    var index = 0,
        currentIndex = (indexes == null ? null : (indexes.isa.method_msgSend["firstIndex"] || _objj_forward)(indexes, (indexes.isa.method_dtable["firstIndex"], "firstIndex")));
    for (; index < objectsCount; (++index, currentIndex = (indexes == null ? null : (indexes.isa.method_msgSend["indexGreaterThanIndex:"] || _objj_forward)(indexes, (indexes.isa.method_dtable["indexGreaterThanIndex:"], "indexGreaterThanIndex:"), currentIndex))))
        (self.isa.method_msgSend["insertObject:atIndex:"] || _objj_forward)(self, (self.isa.method_dtable["insertObject:atIndex:"], self.isa.method_dtable["insertObject:atIndex:"], "insertObject:atIndex:"), (objects == null ? null : (objects.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(objects, (objects.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index)), currentIndex);
}

,["void","CPArray","CPIndexSet"]), new objj_method(sel_getUid("insertObject:inArraySortedByDescriptors:"), function $CPMutableArray__insertObject_inArraySortedByDescriptors_(self, _cmd, anObject, descriptors)
{
    var index,
        count = (descriptors == null ? null : (descriptors.isa.method_msgSend["count"] || _objj_forward)(descriptors, (descriptors.isa.method_dtable["count"], "count")));
    if (count)
        index = (self.isa.method_msgSend["indexOfObject:inSortedRange:options:usingComparator:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObject:inSortedRange:options:usingComparator:"], self.isa.method_dtable["indexOfObject:inSortedRange:options:usingComparator:"], self.isa.method_dtable["indexOfObject:inSortedRange:options:usingComparator:"], self.isa.method_dtable["indexOfObject:inSortedRange:options:usingComparator:"], "indexOfObject:inSortedRange:options:usingComparator:"), anObject, nil, CPBinarySearchingInsertionIndex,         function(lhs, rhs)
        {
            var index = 0,
                result = CPOrderedSame;
            while (index < count && (result = ((___r1 = (descriptors == null ? null : (descriptors.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(descriptors, (descriptors.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index))), ___r1 == null ? null : (___r1.isa.method_msgSend["compareObject:withObject:"] || _objj_forward)(___r1, "compareObject:withObject:", lhs, rhs))) === CPOrderedSame)
                ++index;
            return result;
            var ___r1;
        });
    else
        index = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"));
    (self.isa.method_msgSend["insertObject:atIndex:"] || _objj_forward)(self, (self.isa.method_dtable["insertObject:atIndex:"], self.isa.method_dtable["insertObject:atIndex:"], "insertObject:atIndex:"), anObject, index);
    return index;
}

,["CPUInteger","id","CPArray"]), new objj_method(sel_getUid("replaceObjectAtIndex:withObject:"), function $CPMutableArray__replaceObjectAtIndex_withObject_(self, _cmd, anIndex, anObject)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
}

,["void","CPUInteger","id"]), new objj_method(sel_getUid("replaceObjectsAtIndexes:withObjects:"), function $CPMutableArray__replaceObjectsAtIndexes_withObjects_(self, _cmd, indexes, objects)
{
    var i = 0,
        index = (indexes == null ? null : (indexes.isa.method_msgSend["firstIndex"] || _objj_forward)(indexes, (indexes.isa.method_dtable["firstIndex"], "firstIndex")));
    while (index !== CPNotFound)
    {
        (self.isa.method_msgSend["replaceObjectAtIndex:withObject:"] || _objj_forward)(self, (self.isa.method_dtable["replaceObjectAtIndex:withObject:"], self.isa.method_dtable["replaceObjectAtIndex:withObject:"], "replaceObjectAtIndex:withObject:"), index, (objects == null ? null : (objects.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(objects, (objects.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i++)));
        index = (indexes == null ? null : (indexes.isa.method_msgSend["indexGreaterThanIndex:"] || _objj_forward)(indexes, (indexes.isa.method_dtable["indexGreaterThanIndex:"], "indexGreaterThanIndex:"), index));
    }
}

,["void","CPIndexSet","CPArray"]), new objj_method(sel_getUid("replaceObjectsInRange:withObjectsFromArray:range:"), function $CPMutableArray__replaceObjectsInRange_withObjectsFromArray_range_(self, _cmd, aRange, anArray, otherRange)
{
    (self.isa.method_msgSend["removeObjectsInRange:"] || _objj_forward)(self, (self.isa.method_dtable["removeObjectsInRange:"], "removeObjectsInRange:"), aRange);
    if (otherRange && (otherRange.location !== 0 || otherRange.length !== (anArray == null ? null : (anArray.isa.method_msgSend["count"] || _objj_forward)(anArray, (anArray.isa.method_dtable["count"], "count")))))
        anArray = (anArray == null ? null : (anArray.isa.method_msgSend["subarrayWithRange:"] || _objj_forward)(anArray, (anArray.isa.method_dtable["subarrayWithRange:"], "subarrayWithRange:"), otherRange));
    var indexes = (CPIndexSet == null ? null : (CPIndexSet.isa.method_msgSend["indexSetWithIndexesInRange:"] || _objj_forward)(CPIndexSet, (CPIndexSet.isa.method_dtable["indexSetWithIndexesInRange:"], "indexSetWithIndexesInRange:"), CPMakeRange(aRange.location, (anArray == null ? null : (anArray.isa.method_msgSend["count"] || _objj_forward)(anArray, (anArray.isa.method_dtable["count"], "count"))))));
    (self.isa.method_msgSend["insertObjects:atIndexes:"] || _objj_forward)(self, (self.isa.method_dtable["insertObjects:atIndexes:"], self.isa.method_dtable["insertObjects:atIndexes:"], "insertObjects:atIndexes:"), anArray, indexes);
}

,["void","CPRange","CPArray","CPRange"]), new objj_method(sel_getUid("replaceObjectsInRange:withObjectsFromArray:"), function $CPMutableArray__replaceObjectsInRange_withObjectsFromArray_(self, _cmd, aRange, anArray)
{
    (self.isa.method_msgSend["replaceObjectsInRange:withObjectsFromArray:range:"] || _objj_forward)(self, (self.isa.method_dtable["replaceObjectsInRange:withObjectsFromArray:range:"], self.isa.method_dtable["replaceObjectsInRange:withObjectsFromArray:range:"], self.isa.method_dtable["replaceObjectsInRange:withObjectsFromArray:range:"], "replaceObjectsInRange:withObjectsFromArray:range:"), aRange, anArray, nil);
}

,["void","CPRange","CPArray"]), new objj_method(sel_getUid("setArray:"), function $CPMutableArray__setArray_(self, _cmd, anArray)
{
    if (self === anArray)
        return;
    (self.isa.method_msgSend["removeAllObjects"] || _objj_forward)(self, (self.isa.method_dtable["removeAllObjects"], "removeAllObjects"));
    (self.isa.method_msgSend["addObjectsFromArray:"] || _objj_forward)(self, (self.isa.method_dtable["addObjectsFromArray:"], "addObjectsFromArray:"), anArray);
}

,["void","CPArray"]), new objj_method(sel_getUid("removeAllObjects"), function $CPMutableArray__removeAllObjects(self, _cmd)
{
    while ((self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")))
        (self.isa.method_msgSend["removeLastObject"] || _objj_forward)(self, (self.isa.method_dtable["removeLastObject"], "removeLastObject"));
}

,["void"]), new objj_method(sel_getUid("removeLastObject"), function $CPMutableArray__removeLastObject(self, _cmd)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
}

,["void"]), new objj_method(sel_getUid("removeObject:"), function $CPMutableArray__removeObject_(self, _cmd, anObject)
{
    (self.isa.method_msgSend["removeObject:inRange:"] || _objj_forward)(self, (self.isa.method_dtable["removeObject:inRange:"], self.isa.method_dtable["removeObject:inRange:"], "removeObject:inRange:"), anObject, CPMakeRange(0, (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"))));
}

,["void","id"]), new objj_method(sel_getUid("removeObject:inRange:"), function $CPMutableArray__removeObject_inRange_(self, _cmd, anObject, aRange)
{
    var index;
    while ((index = (self.isa.method_msgSend["indexOfObject:inRange:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObject:inRange:"], self.isa.method_dtable["indexOfObject:inRange:"], "indexOfObject:inRange:"), anObject, aRange)) != CPNotFound)
    {
        (self.isa.method_msgSend["removeObjectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["removeObjectAtIndex:"], "removeObjectAtIndex:"), index);
        aRange = CPIntersectionRange(CPMakeRange(index, (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count")) - index), aRange);
    }
}

,["void","id","CPRange"]), new objj_method(sel_getUid("removeObjectAtIndex:"), function $CPMutableArray__removeObjectAtIndex_(self, _cmd, anIndex)
{
    _CPRaiseInvalidAbstractInvocation(self, _cmd);
}

,["void","CPUInteger"]), new objj_method(sel_getUid("removeObjectsAtIndexes:"), function $CPMutableArray__removeObjectsAtIndexes_(self, _cmd, anIndexSet)
{
    var index = (anIndexSet == null ? null : (anIndexSet.isa.method_msgSend["lastIndex"] || _objj_forward)(anIndexSet, (anIndexSet.isa.method_dtable["lastIndex"], "lastIndex")));
    while (index !== CPNotFound)
    {
        (self.isa.method_msgSend["removeObjectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["removeObjectAtIndex:"], "removeObjectAtIndex:"), index);
        index = (anIndexSet == null ? null : (anIndexSet.isa.method_msgSend["indexLessThanIndex:"] || _objj_forward)(anIndexSet, (anIndexSet.isa.method_dtable["indexLessThanIndex:"], "indexLessThanIndex:"), index));
    }
}

,["void","CPIndexSet"]), new objj_method(sel_getUid("removeObjectIdenticalTo:"), function $CPMutableArray__removeObjectIdenticalTo_(self, _cmd, anObject)
{
    (self.isa.method_msgSend["removeObjectIdenticalTo:inRange:"] || _objj_forward)(self, (self.isa.method_dtable["removeObjectIdenticalTo:inRange:"], self.isa.method_dtable["removeObjectIdenticalTo:inRange:"], "removeObjectIdenticalTo:inRange:"), anObject, CPMakeRange(0, (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"))));
}

,["void","id"]), new objj_method(sel_getUid("removeObjectIdenticalTo:inRange:"), function $CPMutableArray__removeObjectIdenticalTo_inRange_(self, _cmd, anObject, aRange)
{
    var index,
        count = (self.isa.method_msgSend["count"] || _objj_forward)(self, (self.isa.method_dtable["count"], "count"));
    while ((index = (self.isa.method_msgSend["indexOfObjectIdenticalTo:inRange:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObjectIdenticalTo:inRange:"], self.isa.method_dtable["indexOfObjectIdenticalTo:inRange:"], "indexOfObjectIdenticalTo:inRange:"), anObject, aRange)) !== CPNotFound)
    {
        (self.isa.method_msgSend["removeObjectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["removeObjectAtIndex:"], "removeObjectAtIndex:"), index);
        aRange = CPIntersectionRange(CPMakeRange(index, --count - index), aRange);
    }
}

,["void","id","CPRange"]), new objj_method(sel_getUid("removeObjectsInArray:"), function $CPMutableArray__removeObjectsInArray_(self, _cmd, anArray)
{
    var index = 0,
        count = (anArray == null ? null : (anArray.isa.method_msgSend["count"] || _objj_forward)(anArray, (anArray.isa.method_dtable["count"], "count")));
    for (; index < count; ++index)
        (self.isa.method_msgSend["removeObject:"] || _objj_forward)(self, (self.isa.method_dtable["removeObject:"], "removeObject:"), (anArray == null ? null : (anArray.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(anArray, (anArray.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index)));
}

,["void","CPArray"]), new objj_method(sel_getUid("removeObjectsInRange:"), function $CPMutableArray__removeObjectsInRange_(self, _cmd, aRange)
{
    var index = aRange.location,
        count = CPMaxRange(aRange);
    while (count-- > index)
        (self.isa.method_msgSend["removeObjectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["removeObjectAtIndex:"], "removeObjectAtIndex:"), index);
}

,["void","CPRange"]), new objj_method(sel_getUid("exchangeObjectAtIndex:withObjectAtIndex:"), function $CPMutableArray__exchangeObjectAtIndex_withObjectAtIndex_(self, _cmd, anIndex, otherIndex)
{
    if (anIndex === otherIndex)
        return;
    var temporary = (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), anIndex);
    (self.isa.method_msgSend["replaceObjectAtIndex:withObject:"] || _objj_forward)(self, (self.isa.method_dtable["replaceObjectAtIndex:withObject:"], self.isa.method_dtable["replaceObjectAtIndex:withObject:"], "replaceObjectAtIndex:withObject:"), anIndex, (self.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(self, (self.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), otherIndex));
    (self.isa.method_msgSend["replaceObjectAtIndex:withObject:"] || _objj_forward)(self, (self.isa.method_dtable["replaceObjectAtIndex:withObject:"], self.isa.method_dtable["replaceObjectAtIndex:withObject:"], "replaceObjectAtIndex:withObject:"), otherIndex, temporary);
}

,["void","CPUInteger","CPUInteger"]), new objj_method(sel_getUid("sortUsingDescriptors:"), function $CPMutableArray__sortUsingDescriptors_(self, _cmd, descriptors)
{
    var i = (descriptors == null ? null : (descriptors.isa.method_msgSend["count"] || _objj_forward)(descriptors, (descriptors.isa.method_dtable["count"], "count"))),
        jsDescriptors = [];
    while (i--)
    {
        var d = (descriptors == null ? null : (descriptors.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(descriptors, (descriptors.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), i));
        (jsDescriptors == null ? null : (jsDescriptors.isa.method_msgSend["addObject:"] || _objj_forward)(jsDescriptors, (jsDescriptors.isa.method_dtable["addObject:"], "addObject:"), {"k": (d == null ? null : (d.isa.method_msgSend["key"] || _objj_forward)(d, (d.isa.method_dtable["key"], "key"))), "a": (d == null ? null : (d.isa.method_msgSend["ascending"] || _objj_forward)(d, (d.isa.method_dtable["ascending"], "ascending"))), "s": (d == null ? null : (d.isa.method_msgSend["selector"] || _objj_forward)(d, (d.isa.method_dtable["selector"], "selector")))}));
    }
    sortArrayUsingJSDescriptors(self, jsDescriptors);
}

,["void","CPArray"]), new objj_method(sel_getUid("sortUsingFunction:context:"), function $CPMutableArray__sortUsingFunction_context_(self, _cmd, aFunction, aContext)
{
    sortArrayUsingFunction(self, aFunction, aContext);
}

,["void","Function","id"]), new objj_method(sel_getUid("sortUsingSelector:"), function $CPMutableArray__sortUsingSelector_(self, _cmd, aSelector)
{
    sortArrayUsingFunction(self, selectorCompare, aSelector);
}

,["void","SEL"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("arrayWithCapacity:"), function $CPMutableArray__arrayWithCapacity_(self, _cmd, aCapacity)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithCapacity:"] || _objj_forward)(___r1, "initWithCapacity:", aCapacity));
    var ___r1;
}

,["CPArray","CPUInteger"])]);
}
{
var the_class = objj_getClass("CPArray")
if(!the_class) throw new SyntaxError("*** Could not find definition for class \"CPArray\"");
var meta_class = the_class.isa;class_addMethods(the_class, [new objj_method(sel_getUid("mutableCopy"), function $CPArray__mutableCopy(self, _cmd)
{
    var r = (CPMutableArray.isa.method_msgSend["new"] || _objj_forward)(CPMutableArray, (CPMutableArray.isa.method_dtable["new"], "new"));
    (r == null ? null : (r.isa.method_msgSend["addObjectsFromArray:"] || _objj_forward)(r, (r.isa.method_dtable["addObjectsFromArray:"], "addObjectsFromArray:"), self));
    return r;
}

,["id"])]);
}
var selectorCompare = function(object1, object2, selector)
{
    return (object1 == null ? null : (object1.isa.method_msgSend["performSelector:withObject:"] || _objj_forward)(object1, (object1.isa.method_dtable["performSelector:withObject:"], object1.isa.method_dtable["performSelector:withObject:"], "performSelector:withObject:"), selector, object2));
};
var sortArrayUsingFunction = function(array, aFunction, aContext)
{
    var h,
        i,
        j,
        k,
        l,
        m,
        n = array.length,
        o;
    var A,
        B = [];
    for (h = 1; h < n; h += h)
    {
        for (m = n - 1 - h; m >= 0; m -= h + h)
        {
            l = m - h + 1;
            if (l < 0)
                l = 0;
            for ((i = 0, j = l); j <= m; (i++, j++))
                B[i] = array[j];
            for ((i = 0, k = l); k < j && j <= m + h; k++)
            {
                A = array[j];
                o = aFunction(A, B[i], aContext);
                if (o >= 0)
                    array[k] = B[i++];
                else
                {
                    array[k] = A;
                    j++;
                }            }            while (k < j)
                array[k++] = B[i++];
        }    }};
var CPMutableArrayNull = (CPNull.isa.method_msgSend["null"] || _objj_forward)(CPNull, (CPNull.isa.method_dtable["null"], "null"));
var sortArrayUsingJSDescriptors = function(a, d)
{
    var h,
        i,
        j,
        k,
        l,
        m,
        n = a.length,
        dl = d.length - 1,
        o,
        c = {};
    var A,
        B = [],
        C1,
        C2,
        cn,
        aUID,
        bUID,
        key,
        dd,
        value1,
        value2,
        cpNull = CPMutableArrayNull;
    if (dl < 0)
        return;
    for (h = 1; h < n; h += h)
    {
        for (m = n - 1 - h; m >= 0; m -= h + h)
        {
            l = m - h + 1;
            if (l < 0)
                l = 0;
            for ((i = 0, j = l); j <= m; (i++, j++))
                B[i] = a[j];
            for ((i = 0, k = l); k < j && j <= m + h; k++)
            {
                A = a[j];
                aUID = A._UID;
                if (!aUID)
                    aUID = (A == null ? null : (A.isa.method_msgSend["UID"] || _objj_forward)(A, (A.isa.method_dtable["UID"], "UID")));
                C1 = c[aUID];
                if (!C1)
                {
                    C1 = {};
                    cn = dl;
                    do
                    {
                        key = d[cn].k;
                        C1[key] = (A == null ? null : (A.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(A, (A.isa.method_dtable["valueForKeyPath:"], "valueForKeyPath:"), key));
                    }                    while (cn--);
                                        c[aUID] = C1;
                }                bUID = B[i]._UID;
                if (!bUID)
                    bUID = ((___r1 = B[i]), ___r1 == null ? null : (___r1.isa.method_msgSend["UID"] || _objj_forward)(___r1, "UID"));
                C2 = c[bUID];
                if (!C2)
                {
                    C2 = {};
                    cn = dl;
                    do
                    {
                        key = d[cn].k;
                        C2[key] = ((___r1 = B[i]), ___r1 == null ? null : (___r1.isa.method_msgSend["valueForKeyPath:"] || _objj_forward)(___r1, "valueForKeyPath:", key));
                    }                    while (cn--);
                                        c[bUID] = C2;
                }                cn = dl;
                do
                {
                    dd = d[cn];
                    key = dd.k;
                    value1 = C1[key];
                    value2 = C2[key];
                    if (value1 === nil || value1 === cpNull)
                        o = value2 === nil || value2 === cpNull ? CPOrderedSame : CPOrderedAscending;
                    else
                        o = value2 === nil || value2 === cpNull ? CPOrderedDescending : value1.isa.objj_msgSend1(value1, dd.s, value2);
                    if (o && !dd.a)
                        o = -o;
                }                while (cn-- && o == CPOrderedSame);
                                if (o >= 0)
                    a[k] = B[i++];
                else
                {
                    a[k] = A;
                    j++;
                }            }            while (k < j)
                a[k++] = B[i++];
        }    }    var ___r1;
};
p;20;_CPJavaScriptArray.jt;39570;@STATIC;1.0;i;16;CPMutableArray.jS;22712;;16809;

objj_executeFile("CPMutableArray.j", YES);var concat = Array.prototype.concat,
    indexOf = Array.prototype.indexOf,
    join = Array.prototype.join,
    pop = Array.prototype.pop,
    push = Array.prototype.push,
    slice = Array.prototype.slice,
    splice = Array.prototype.splice;

{var the_class = objj_allocateClassPair(CPMutableArray, "_CPJavaScriptArray"),
meta_class = the_class.isa;objj_registerClassPair(the_class);
class_addMethods(the_class, [new objj_method(sel_getUid("initWithArray:"), function $_CPJavaScriptArray__initWithArray_(self, _cmd, anArray)
{
    return (self.isa.method_msgSend["initWithArray:copyItems:"] || _objj_forward)(self, (self.isa.method_dtable["initWithArray:copyItems:"], self.isa.method_dtable["initWithArray:copyItems:"], "initWithArray:copyItems:"), anArray, NO);
}

,["id","CPArray"]), new objj_method(sel_getUid("initWithArray:copyItems:"), function $_CPJavaScriptArray__initWithArray_copyItems_(self, _cmd, anArray, shouldCopyItems)
{
    if (!shouldCopyItems && (anArray == null ? null : (anArray.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anArray, (anArray.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), _CPJavaScriptArray)))
        return slice.call(anArray, 0);
    self = (objj_getClass("_CPJavaScriptArray").super_class.method_dtable["init"] || _objj_forward)(self, "init");
    var index = 0;
    if ((anArray == null ? null : (anArray.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anArray, (anArray.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), _CPJavaScriptArray)))
    {
        var count = anArray.length;
        for (; index < count; ++index)
        {
            var object = anArray[index];
            self[index] = object && object.isa ? (object == null ? null : (object.isa.method_msgSend["copy"] || _objj_forward)(object, (object.isa.method_dtable["copy"], "copy"))) : object;
        }
        return self;
    }
    var count = (anArray == null ? null : (anArray.isa.method_msgSend["count"] || _objj_forward)(anArray, (anArray.isa.method_dtable["count"], "count")));
    for (; index < count; ++index)
    {
        var object = (anArray == null ? null : (anArray.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(anArray, (anArray.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index));
        self[index] = shouldCopyItems && object && object.isa ? (object == null ? null : (object.isa.method_msgSend["copy"] || _objj_forward)(object, (object.isa.method_dtable["copy"], "copy"))) : object;
    }
    return self;
}

,["id","CPArray","BOOL"]), new objj_method(sel_getUid("initWithObjects:"), function $_CPJavaScriptArray__initWithObjects_(self, _cmd, anObject)
{
    var index = 2,
        count = arguments.length;
    for (; index < count; ++index)
        if (arguments[index] === nil)
            break;
    return slice.call(arguments, 2, index);
}

,["id","id"]), new objj_method(sel_getUid("initWithObjects:count:"), function $_CPJavaScriptArray__initWithObjects_count_(self, _cmd, objects, aCount)
{
    if ((objects == null ? null : (objects.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(objects, (objects.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), _CPJavaScriptArray)))
        return slice.call(objects, 0, aCount);
    var array = [],
        index = 0;
    for (; index < aCount; ++index)
        push.call(array, (objects == null ? null : (objects.isa.method_msgSend["objectAtIndex:"] || _objj_forward)(objects, (objects.isa.method_dtable["objectAtIndex:"], "objectAtIndex:"), index)));
    return array;
}

,["id","CPArray","CPUInteger"]), new objj_method(sel_getUid("initWithCapacity:"), function $_CPJavaScriptArray__initWithCapacity_(self, _cmd, aCapacity)
{
    return self;
}

,["id","CPUInteger"]), new objj_method(sel_getUid("count"), function $_CPJavaScriptArray__count(self, _cmd)
{
    return self.length;
}

,["CPUInteger"]), new objj_method(sel_getUid("objectAtIndex:"), function $_CPJavaScriptArray__objectAtIndex_(self, _cmd, anIndex)
{
    if (anIndex >= self.length || anIndex < 0)
        _CPRaiseRangeException(self, _cmd, anIndex, self.length);
    return self[anIndex];
}

,["id","CPUInteger"]), new objj_method(sel_getUid("objectsAtIndexes:"), function $_CPJavaScriptArray__objectsAtIndexes_(self, _cmd, indexes)
{
    if ((indexes == null ? null : (indexes.isa.method_msgSend["lastIndex"] || _objj_forward)(indexes, (indexes.isa.method_dtable["lastIndex"], "lastIndex"))) >= self.length)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPRangeException, _cmd + " indexes out of bounds");
    var ranges = indexes._ranges,
        count = ranges.length,
        result = [],
        i = 0;
    for (; i < count; i++)
    {
        var range = ranges[i],
            loc = range.location,
            len = range.length,
            subArray = self.slice(loc, loc + len);
        result.splice.apply(result, [result.length, 0].concat(subArray));
    }
    return result;
}

,["CPArray","CPIndexSet"]), new objj_method(sel_getUid("indexOfObject:inRange:"), function $_CPJavaScriptArray__indexOfObject_inRange_(self, _cmd, anObject, aRange)
{
    if (anObject && anObject.isa)
    {
        var index = aRange ? aRange.location : 0,
            count = aRange ? CPMaxRange(aRange) : self.length;
        for (; index < count; ++index)
            if (((___r1 = self[index]), ___r1 == null ? null : (___r1.isa.method_msgSend["isEqual:"] || _objj_forward)(___r1, "isEqual:", anObject)))
                return index;
        return CPNotFound;
    }
    return (self.isa.method_msgSend["indexOfObjectIdenticalTo:inRange:"] || _objj_forward)(self, (self.isa.method_dtable["indexOfObjectIdenticalTo:inRange:"], self.isa.method_dtable["indexOfObjectIdenticalTo:inRange:"], "indexOfObjectIdenticalTo:inRange:"), anObject, aRange);
    var ___r1;
}

,["CPUInteger","id","CPRange"]), new objj_method(sel_getUid("indexOfObjectIdenticalTo:inRange:"), function $_CPJavaScriptArray__indexOfObjectIdenticalTo_inRange_(self, _cmd, anObject, aRange)
{
    if (indexOf && !aRange)
        return indexOf.call(self, anObject);
    var index = aRange ? aRange.location : 0,
        count = aRange ? CPMaxRange(aRange) : self.length;
    for (; index < count; ++index)
        if (self[index] === anObject)
            return index;
    return CPNotFound;
}

,["CPUInteger","id","CPRange"]), new objj_method(sel_getUid("makeObjectsPerformSelector:withObjects:"), function $_CPJavaScriptArray__makeObjectsPerformSelector_withObjects_(self, _cmd, aSelector, objects)
{
    if (!aSelector)
        _CPRaiseInvalidArgumentException(self, _cmd, 'attempt to pass a nil selector');
    var index = 0,
        count = self.length;
    if ((objects == null ? null : (objects.isa.method_msgSend["count"] || _objj_forward)(objects, (objects.isa.method_dtable["count"], "count"))))
    {
        var argumentsArray = ((___r1 = [nil, aSelector]), ___r1 == null ? null : (___r1.isa.method_msgSend["arrayByAddingObjectsFromArray:"] || _objj_forward)(___r1, "arrayByAddingObjectsFromArray:", objects));
        for (; index < count; ++index)
        {
            argumentsArray[0] = self[index];
            objj_msgSend.apply(this, argumentsArray);
        }
    }
    else
        for (; index < count; ++index)
        {
            var receiver = self[index];
            receiver == nil ? nil : receiver.isa.objj_msgSend0(receiver, aSelector);
        }
    var ___r1;
}

,["void","SEL","CPArray"]), new objj_method(sel_getUid("arrayByAddingObject:"), function $_CPJavaScriptArray__arrayByAddingObject_(self, _cmd, anObject)
{
    if (anObject && anObject.isa && (anObject == null ? null : (anObject.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anObject, (anObject.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), _CPJavaScriptArray)))
        return concat.call(self, [anObject]);
    return concat.call(self, anObject);
}

,["CPArray","id"]), new objj_method(sel_getUid("arrayByAddingObjectsFromArray:"), function $_CPJavaScriptArray__arrayByAddingObjectsFromArray_(self, _cmd, anArray)
{
    if (!anArray)
        return (self.isa.method_msgSend["copy"] || _objj_forward)(self, (self.isa.method_dtable["copy"], "copy"));
    return concat.call(self, (anArray == null ? null : (anArray.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anArray, (anArray.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), _CPJavaScriptArray)) ? anArray : (anArray == null ? null : (anArray.isa.method_msgSend["_javaScriptArrayCopy"] || _objj_forward)(anArray, (anArray.isa.method_dtable["_javaScriptArrayCopy"], "_javaScriptArrayCopy"))));
}

,["CPArray","CPArray"]), new objj_method(sel_getUid("subarrayWithRange:"), function $_CPJavaScriptArray__subarrayWithRange_(self, _cmd, aRange)
{
    if (aRange.location < 0 || CPMaxRange(aRange) > self.length)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPRangeException, _cmd + " aRange out of bounds");
    return slice.call(self, aRange.location, CPMaxRange(aRange));
}

,["CPArray","CPRange"]), new objj_method(sel_getUid("componentsJoinedByString:"), function $_CPJavaScriptArray__componentsJoinedByString_(self, _cmd, aString)
{
    return join.call(self, aString);
}

,["CPString","CPString"]), new objj_method(sel_getUid("arrayByApplyingBlock:"), function $_CPJavaScriptArray__arrayByApplyingBlock_(self, _cmd, aFunction)
{
    var result = [];
    for (var idx = 0; idx < self.length; idx++)
    {
        var obj = aFunction(self[idx], idx);
        result.push(obj);
    }
    return result;
}

,["CPArray","Function"]), new objj_method(sel_getUid("insertObject:atIndex:"), function $_CPJavaScriptArray__insertObject_atIndex_(self, _cmd, anObject, anIndex)
{
    if (anIndex > self.length || anIndex < 0)
        _CPRaiseRangeException(self, _cmd, anIndex, self.length);
    splice.call(self, anIndex, 0, anObject);
}

,["void","id","CPUInteger"]), new objj_method(sel_getUid("removeObjectAtIndex:"), function $_CPJavaScriptArray__removeObjectAtIndex_(self, _cmd, anIndex)
{
    if (anIndex >= self.length || anIndex < 0)
        _CPRaiseRangeException(self, _cmd, anIndex, self.length);
    splice.call(self, anIndex, 1);
}

,["void","CPUInteger"]), new objj_method(sel_getUid("removeObjectIdenticalTo:"), function $_CPJavaScriptArray__removeObjectIdenticalTo_(self, _cmd, anObject)
{
    if (indexOf)
    {
        var anIndex;
        while ((anIndex = indexOf.call(self, anObject)) !== -1)
            splice.call(self, anIndex, 1);
    }
    else
        (objj_getClass("_CPJavaScriptArray").super_class.method_dtable["removeObjectIdenticalTo:inRange:"] || _objj_forward)(self, "removeObjectIdenticalTo:inRange:", anObject, CPMakeRange(0, self.length));
}

,["void","id"]), new objj_method(sel_getUid("removeObjectIdenticalTo:inRange:"), function $_CPJavaScriptArray__removeObjectIdenticalTo_inRange_(self, _cmd, anObject, aRange)
{
    if (indexOf && !aRange)
        (self.isa.method_msgSend["removeObjectIdenticalTo:"] || _objj_forward)(self, (self.isa.method_dtable["removeObjectIdenticalTo:"], "removeObjectIdenticalTo:"), anObject);
    (objj_getClass("_CPJavaScriptArray").super_class.method_dtable["removeObjectIdenticalTo:inRange:"] || _objj_forward)(self, "removeObjectIdenticalTo:inRange:", anObject, aRange);
}

,["void","id","CPRange"]), new objj_method(sel_getUid("addObject:"), function $_CPJavaScriptArray__addObject_(self, _cmd, anObject)
{
    push.call(self, anObject);
}

,["void","id"]), new objj_method(sel_getUid("removeAllObjects"), function $_CPJavaScriptArray__removeAllObjects(self, _cmd)
{
    splice.call(self, 0, self.length);
}

,["void"]), new objj_method(sel_getUid("removeLastObject"), function $_CPJavaScriptArray__removeLastObject(self, _cmd)
{
    pop.call(self);
}

,["void"]), new objj_method(sel_getUid("removeObjectsInRange:"), function $_CPJavaScriptArray__removeObjectsInRange_(self, _cmd, aRange)
{
    if (aRange.location < 0 || CPMaxRange(aRange) > self.length)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPRangeException, _cmd + " aRange out of bounds");
    splice.call(self, aRange.location, aRange.length);
}

,["void","CPRange"]), new objj_method(sel_getUid("replaceObjectAtIndex:withObject:"), function $_CPJavaScriptArray__replaceObjectAtIndex_withObject_(self, _cmd, anIndex, anObject)
{
    if (anIndex >= self.length || anIndex < 0)
        _CPRaiseRangeException(self, _cmd, anIndex, self.length);
    self[anIndex] = anObject;
}

,["void","CPUInteger","id"]), new objj_method(sel_getUid("replaceObjectsInRange:withObjectsFromArray:range:"), function $_CPJavaScriptArray__replaceObjectsInRange_withObjectsFromArray_range_(self, _cmd, aRange, anArray, otherRange)
{
    if (aRange.location < 0 || CPMaxRange(aRange) > self.length)
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPRangeException, _cmd + " aRange out of bounds");
    if (otherRange && (otherRange.location < 0 || CPMaxRange(otherRange) > anArray.length))
        (CPException.isa.method_msgSend["raise:reason:"] || _objj_forward)(CPException, (CPException.isa.method_dtable["raise:reason:"], CPException.isa.method_dtable["raise:reason:"], "raise:reason:"), CPRangeException, _cmd + " otherRange out of bounds");
    if (otherRange && (otherRange.location !== 0 || otherRange.length !== (anArray == null ? null : (anArray.isa.method_msgSend["count"] || _objj_forward)(anArray, (anArray.isa.method_dtable["count"], "count")))))
        anArray = (anArray == null ? null : (anArray.isa.method_msgSend["subarrayWithRange:"] || _objj_forward)(anArray, (anArray.isa.method_dtable["subarrayWithRange:"], "subarrayWithRange:"), otherRange));
    if (anArray.isa !== _CPJavaScriptArray)
        anArray = (anArray == null ? null : (anArray.isa.method_msgSend["_javaScriptArrayCopy"] || _objj_forward)(anArray, (anArray.isa.method_dtable["_javaScriptArrayCopy"], "_javaScriptArrayCopy")));
    splice.apply(self, [aRange.location, aRange.length].concat(anArray));
}

,["void","CPRange","CPArray","CPRange"]), new objj_method(sel_getUid("setArray:"), function $_CPJavaScriptArray__setArray_(self, _cmd, anArray)
{
    if ((anArray == null ? null : (anArray.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anArray, (anArray.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), _CPJavaScriptArray)))
        splice.apply(self, [0, self.length].concat(anArray));
    else
        (objj_getClass("_CPJavaScriptArray").super_class.method_dtable["setArray:"] || _objj_forward)(self, "setArray:", anArray);
}

,["void","CPArray"]), new objj_method(sel_getUid("addObjectsFromArray:"), function $_CPJavaScriptArray__addObjectsFromArray_(self, _cmd, anArray)
{
    if ((anArray == null ? null : (anArray.isa.method_msgSend["isKindOfClass:"] || _objj_forward)(anArray, (anArray.isa.method_dtable["isKindOfClass:"], "isKindOfClass:"), _CPJavaScriptArray)))
        splice.apply(self, [self.length, 0].concat(anArray));
    else
        (objj_getClass("_CPJavaScriptArray").super_class.method_dtable["addObjectsFromArray:"] || _objj_forward)(self, "addObjectsFromArray:", anArray);
}

,["void","CPArray"]), new objj_method(sel_getUid("copy"), function $_CPJavaScriptArray__copy(self, _cmd)
{
    return slice.call(self, 0);
}

,["id"]), new objj_method(sel_getUid("classForCoder"), function $_CPJavaScriptArray__classForCoder(self, _cmd)
{
    return CPArray;
}

,["Class"])]);
class_addMethods(meta_class, [new objj_method(sel_getUid("alloc"), function $_CPJavaScriptArray__alloc(self, _cmd)
{
    return [];
}

,["id"]), new objj_method(sel_getUid("array"), function $_CPJavaScriptArray__array(self, _cmd)
{
    return [];
}

,["id"]), new objj_method(sel_getUid("arrayWithArray:"), function $_CPJavaScriptArray__arrayWithArray_(self, _cmd, anArray)
{
    return ((___r1 = (self.isa.method_msgSend["alloc"] || _objj_forward)(self, (self.isa.method_dtable["alloc"], "alloc"))), ___r1 == null ? null : (___r1.isa.method_msgSend["initWithArray:"] || _objj_forward)(___r1, "initWithArray:", anArray));
    var ___r1;
}

,["id","CPArray"]), new objj_method(sel_getUid("arrayWithObject:"), function $_CPJavaScriptArray__arrayWithObject_(self, _cmd, anObject)
{
    return [anObject];
}

,["id","id"])]);
}
Array.prototype.isa = _CPJavaScriptArray;
e;